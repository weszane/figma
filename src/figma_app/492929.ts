let $$n1 = "chit--chitThumbnail--KxCGp";
let $$i2 = "chit--chitAlpha--Mn-aK";
let $$a4 = "chit--chit--WdWdx";
let $$s3 = "chit--chitBorder--ydYLm";
let $$o0 = "/** @postcss-export-raw */\n\n.chit--chitThumbnail--KxCGp {\n  width: 16px;\n  height: 16px;\n  object-fit: contain;\n}\n\n.chit--chitThumbnail--KxCGp svg {\n    width: 16px;\n    height: 16px;\n  }\n\n.chit--chitAlpha--Mn-aK {\n  position: absolute;\n  right: 0;\n  top: 0;\n  width: 50%;\n  height: 100%;\n  border-top-right-radius: 1px;\n  border-bottom-right-radius: 1px;\n  background: url('data:image/svg+xml;utf8,%3Csvg%20width%3D%226%22%20height%3D%226%22%20viewBox%3D%220%200%206%206%22%20fill%3D%22none%22%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%3E%3Cpath%20d%3D%22M0%200H3V3H0V0Z%22%20fill%3D%22%23E1E1E1%22/%3E%3Cpath%20d%3D%22M3%200H6V3H3V0Z%22%20fill%3D%22white%22/%3E%3Cpath%20d%3D%22M3%203H6V6H3V3Z%22%20fill%3D%22%23E1E1E1%22/%3E%3Cpath%20d%3D%22M0%203H3V6H0V3Z%22%20fill%3D%22white%22/%3E%3C/svg%3E%0A');\n}\n\n.chit--chit--WdWdx {\n  border-radius: 1px;\n\n  overflow: hidden;\n  position: relative;\n  flex-shrink: 0;\n  height: 16px;\n  width: 16px;\n\n  /* The where clause allows us to make changes without changing specificity */\n}\n\n[data-fpl-version='ui3'] .chit--chit--WdWdx,\n  \n  :where([data-fpl-ui3-override]) .chit--chit--WdWdx {\n    /* Set similarly to the chit border defined below */\n    border-radius: 20%;\n  }\n\n.chit--chit--WdWdx:focus-visible::after {\n    content: '';\n\n    /* Render a border using a shadow on top of the content in .chit */\n    position: absolute;\n    inset: 0;\n    box-shadow: inset 0 0 0 1px var(--color-border-selected);\n    transform: scale(1);\n  }\n\n.chit--chitBorder--ydYLm {\n  position: absolute;\n\n  /* Our goal is to draw a 0.5px \"hairline\" border around these chits. However, Chrome\n      doesn't support sub-pixel borders and Safari doesn't support sub-pixel box-shadows,\n      so we use this hack where we draw a 1px box at twice the size and then scale it down. */\n  top: -50%;\n  left: -50%;\n  right: -50%;\n  bottom: -50%;\n  box-shadow: inset 0 0 0 1px var(--color-border);\n  transform-origin: center center;\n  transform: scale(0.5);\n\n  /* The where clause allows us to make changes without changing specificity */\n}\n\n[data-fpl-version='ui3'] .chit--chitBorder--ydYLm,\n  \n  :where([data-fpl-ui3-override]) .chit--chitBorder--ydYLm {\n    /* Border radius is a percentage instead of an actual value since we render chits\n    at various sizes (see: gridVariableChit), this ensures its always the right radius no matter the size */\n    border-radius: 20%;\n  }\n\n/* The above fix looks good everywhere except in FireFox on low-density displays. In that\n   case, we just throw our hands in the air and render a 1px border around the chit. */\n\n@media screen and (max-resolution: 1.5dppx) {\n  @supports (-moz-appearance: none) {\n    .chit--chitBorder--ydYLm {\n      position: absolute;\n      top: 0;\n      left: 0;\n      right: 0;\n      bottom: 0;\n      box-shadow: inset 0 0 0 1px var(--color-border);\n      transform: none;\n    }\n  }\n}\n";
export const Nz = $$o0;
export const X3 = $$n1;
export const f$ = $$i2;
export const lo = $$s3;
export const x7 = $$a4;
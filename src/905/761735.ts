import { NU } from '../905/11';
import { ServiceCategories as _$$e } from '../905/165054';
import { z as _$$z } from '../905/239603';
import { datadogRum } from '../905/270963';
import { oJ as _$$oJ } from '../905/312028';
import { g as _$$g2 } from '../905/346780';
import { D as _$$D } from '../905/412108';
import { observableState } from '../905/441145';
import { analyticsEventManager, trackEventAnalytics } from '../905/449184';
import { Rh as _$$Rh, rI as _$$rI, S3 as _$$S2, BO } from '../905/485103';
import { createFieldRef } from '../905/552287';
import { getFeatureFlags } from '../905/601108';
import { M as _$$M } from '../905/609813';
import { dZ as _$$dZ2, iO as _$$iO, Sj as _$$Sj, Oh } from '../905/663269';
import { measureAsyncDuration } from '../905/670985';
import { J as _$$J } from '../905/679168';
import { logError } from '../905/714362';
import { $W, cy as _$$cy, H as _$$H, h5 as _$$h2, mJ as _$$mJ, mv as _$$mv, pJ as _$$pJ, sG as _$$sG, tt as _$$tt, Mx, zD } from '../905/787926';
import { Y as _$$Y } from '../905/806400';
import { C as _$$C } from '../905/807275';
import { PriorityLevels as _$$aG, createAliasedFieldRef, createParentRef, createSessionRef, createViewRef, makeFieldRefOptional, mergeFieldRefs, NULL_FIELD_REF } from '../905/871467';
import { g as _$$g } from '../905/880308';
import { getEnvironmentInfo } from '../905/883621';
import { XHR } from '../905/910117';
import { ConnectionAttemptTypes, FileOperationTypes, PriorityLevels } from '../905/957591';
import { $kt, apG, DSh, ehp, ib2, w2r, wZi, XRH } from '../figma_app/43951';
import { getLaunchDarklyFlagsExport } from '../figma_app/169182';
import { td as _$$td, YV } from '../figma_app/181241';
import { isInteractionPathCheck, getFalseValue, isInteractionOrEvalMode } from '../figma_app/897289';
import { gP as _$$gP } from '../figma_app/594947';
import { Go1, QKp, TOI } from '../figma_app/822011';
import { desktopAPIInstance, bellFeedAPIInstance, getBellFeedAPI } from '../figma_app/876459';
let n = {};
require.d(n, {
  AccountTypeRequestStatusFragment: () => Ax,
  AddWorkspacePinFileFragment: () => AR,
  AdminIdpUserScimFragment: () => AN,
  AdminOrgUserFragment: () => AO,
  BaseLibraryAssetFragment: () => AZ,
  ChooseFileModalFileFragment: () => AT,
  CodePresetMetadataFragment: () => AX,
  CommentFragment: () => yi,
  CommentMessageMetaFragment: () => yt,
  CommentMessageMetaStylizedFragment: () => ye,
  CommentWithAttachmentsAndReactionsFragment: () => yn,
  CommunityLibraryInfoFragment: () => A1,
  ComponentFragment: () => AL,
  ContainingFrameFragment: () => AD,
  DeveloperRelatedLinkFragment: () => AF,
  FavoritedFileFragment: () => AM,
  FavoritedProjectFragment: () => Aj,
  FavoritedPrototypeFragment: () => AU,
  FavoritedTeamFragment: () => AB,
  FavoritedWorkspaceFragment: () => AV,
  FileFragment: () => yr,
  FileIconFragment: () => AC,
  FileIsPasswordProtectedFragment: () => AS,
  FileLibraryInfoFragment: () => A0,
  FileLibraryInfoWithoutKey: () => AJ,
  FilePermissionsCurrentUserFragment: () => AG,
  FileRealtimeShimFragment: () => Az,
  FileRoleRequestsFragment: () => AH,
  FileSeenStateFragment: () => AW,
  FileThumbnailFragment: () => Aw,
  LegacyReduxFileFragment: () => AK,
  LegacyReduxRecentFileFragment: () => AY,
  LegacyReduxRepoFragment: () => Aq,
  LegacyReduxTeamFragment: () => A$,
  MessageMetaFragment: () => A9,
  ModuleFragment: () => ys,
  OrgHasWorkspacesFragment: () => yo,
  PinnableWorkspaceFileFragment: () => Ak,
  PlanFragment: () => yl,
  PlanUserFragment: () => yp,
  PlanUserFromOrgUserFragment: () => yu,
  PlanUserLicenseGroupMemberFragment: () => yd,
  PlanUserWithUpgradesDataFragment: () => ym,
  PlanUserWorkspaceUserFragment: () => yc,
  PlanWithUpgradesDataFragment: () => yh,
  PluginFragment: () => yg,
  ProTeamCheckFragment: () => yf,
  ProjectFileCreationPermissionsFragment: () => yA,
  ProjectFragment: () => ya,
  ProjectRealtimeShimFragment: () => yy,
  ProjectTilePermissionsFragment: () => yb,
  PrototypeTilePermissionsFragment: () => yv,
  RepoRealtimeShimFragment: () => yI,
  RepoTilePermissionsBranchFragment: () => yE,
  RepoTilePermissionsFragment: () => yx,
  SharedWithYouFileFragment: () => yS,
  SharedWithYouFolderFragment: () => yw,
  SharedWithYouPrototypeFragment: () => yT,
  SharedWithYouRepoFragment: () => yC,
  SidebarProjectFragment: () => yk,
  StateGroupFragment: () => yR,
  StyleFragment: () => yO,
  StyleLogFragment: () => yP,
  StyleWithoutHubFileFragment: () => yD,
  TeamRealtimeShimFragment: () => yL,
  TeamTilePermissionsFragment: () => yF,
  UpdateWorkspaceDescriptionModalFragment: () => yM,
  UserAssignedWorkspaceIdFragment: () => yj,
  UserPublicAvatarFragment: () => yU,
  VariableCollectionFragment: () => A6,
  VariableCollectionModeFragment: () => A3,
  VariableCollectionWithAllVariablesFragment: () => A7,
  VariableCollectionWithCountFragment: () => A8,
  VariableFragment: () => A4,
  VariableLogFragment: () => A5,
  WorkspaceBackgroundColorFragment: () => yB,
  WorkspaceBreadcrumbFragment: () => yV,
  WorkspaceContextMenuFragment: () => yG,
  WorkspaceMembersModalFragment: () => yH,
  WorkspaceMembersModalWorkspaceUserFragment: () => yz,
  WorkspacePageHeaderFragment: () => yW,
  WorkspacePagePinnedFilesFragment: () => yY,
  WorkspacePinnedFileCommentMessageMetaFragment: () => yK,
  WorkspaceUserFragment: () => yq
});
let r = {};
require.d(r, {
  AccessibleFoldersV2: () => yZ,
  AccountTypeRequestByIdView: () => yX,
  AccountTypeRequestsInPlan: () => yJ,
  ActiveFileUsersForFileView: () => y0,
  AddUnassignedTeamsModalView: () => y1,
  AddWorkspacePinSearchFilesView: () => y2,
  AddWorkspacePinSuggestedFilesView: () => y5,
  AddWorkspacePinnedFileView: () => y4,
  AdminNotificationsCountView: () => y3,
  AdminRequestDashOrgInfo: () => y6,
  AdminRequestDashboardRowIds: () => y7,
  AdminRequestDashboardView: () => y8,
  AdminSettingsSelectorView: () => y9,
  AiMeterUsageView: () => be,
  AllPlanNotificationBellStateData: () => Tc,
  AllowlistPluginsSectionView: () => bt,
  AllowlistSettingsModalView: () => bi,
  AllowlistedPlugin: () => bn,
  AppliedColorPaletteForFile: () => br,
  ApprovedLibrariesForOrgViewV2: () => ba,
  ApprovedLibrariesForWorkspaceView: () => bs,
  AssetTransferReloadView: () => bo,
  AutoRunPluginsView: () => bl,
  BillingRemodelExperimentTestView: () => bd,
  BillingTrialForResource: () => bc,
  BillingTrialForResourceAndPlanType: () => bu,
  BlockConnectedFileMove: () => bp,
  BlockingPrototypeData: () => bm,
  BlockingUserState: () => bh,
  BranchOpenMergeRequest: () => bf,
  BranchingPermissionsView: () => b_,
  BranchingSourceViewSidebarView: () => bA,
  BrowseTemplatesView: () => by,
  CalendarFileByKey: () => v0,
  CanCreateTeamView: () => bb,
  ChurnFrictionPersonalizedModalView: () => bv,
  ClientReloadView: () => bI,
  CodeComponentByKey: () => bT,
  CodeComponentsInLibrary: () => bk,
  CodeConnectForNodeLk: () => bR,
  ColorPaletteForUuid: () => bN,
  ColorPalettesForTeam: () => bP,
  CommunityHubLikeForProfile: () => bO,
  CommunityHubLikeForProfileFromResourceId: () => bD,
  CommunityLibraryComponentsAndStateGroups: () => bL,
  CommunityLibraryData: () => bF,
  CommunityLibraryModalAssetsData: () => bM,
  CommunityLibraryModalVariablesData: () => bj,
  CommunityLibraryModules: () => bU,
  CommunityLibraryStyleData: () => EW,
  CommunityLibraryVariableCollectionDataWithVariables: () => bB,
  CommunityNotificationBellView: () => bV,
  CommunityPayment: () => bG,
  CommunityPaymentPlugin: () => bH,
  CommunityPaymentsForRealtimeShim: () => bz,
  CommunityPlaygroundFileSelectorRecentFilesView: () => bW,
  CommunityProfileView: () => bK,
  CommunityRatingStats: () => bq,
  CommunityResourceStat: () => b$,
  CommunityUniversalPostingModalRecentFileKeysView: () => bZ,
  ComponentAttribution: () => bQ,
  ComponentByKey: () => bJ,
  ComponentUpdatesForFile: () => b5,
  ComponentUpdatesForProject: () => b2,
  ComponentUpdatesForTeam: () => b1,
  ConfiguredUpgradeRequestModalView: () => b4,
  CurrentOrgBillingPeriodView: () => b3,
  CurrentTeamUserDesignSeat: () => b6,
  CurrentUserAssignedWorkspaceView: () => b7,
  CurrentUserFileRecentsView: () => b8,
  CurrentUserInStudentPlanView: () => b9,
  CurrentUserInStudentPlusPlanView: () => ve,
  CurrentUserIsMfaRequiredByMembershipOrgView: () => vt,
  CurrentWorkspaceView: () => vi,
  DeleteWorkspacePinnedFileView: () => vn,
  DesktopLiveTabBarView: () => vl,
  DesktopNewTabData: () => vr,
  DesktopNewTabRecentFilesView: () => va,
  DesktopPersistentUserNotificationBellView: () => vu,
  DesktopPushNotificationView: () => vd,
  DesktopTabPreviewView: () => vc,
  DestinationProjectsForTeam: () => vp,
  DevModeActivity: () => vm,
  DevModeOptIn: () => vh,
  DevModeOptInInfo: () => vg,
  DevModeOrgSuggestedUpgrades: () => vf,
  DevModeOrgSuggestedUpgradesDismissalFlag: () => v_,
  DevModeSuggestedUpgradesFlag: () => vA,
  DevModeTeamSuggestedUpgrades: () => vy,
  DevModeTeamSuggestedUpgradesDismissalFlag: () => vb,
  DeveloperLinks: () => vv,
  DeveloperRelatedLinks: () => vI,
  DeveloperRelatedLinksForNode: () => vE,
  DeviceTryFileView: () => vx,
  DomainOrgAdminsToRemove: () => vS,
  DraftsToMoveFoldersByUserId: () => vw,
  DtmMigrationInfo: () => vC,
  EditAccessModalView: () => vk,
  EditButtonView: () => vR,
  EditWorkspacePinnedFileView: () => vN,
  EditorFilePickerRecentFilesByEditorTypeView: () => vP,
  EduGracePeriodsForUser: () => vO,
  EduOffboardingData: () => vD,
  EduOffboardingTeam: () => vL,
  EnterpriseOrgAdminOnboardingSequenceView: () => vF,
  EnterpriseOrgMetaContentView: () => x0,
  EsOrgUsersView: () => vM,
  ExpOneClickAskToEditOrgView: () => vj,
  ExpOneClickAskToEditTeamView: () => vU,
  ExpSocialProofExpansionOrgView: () => vB,
  ExpSocialProofExpansionTeamView: () => vV,
  ExtensionActivityLogHistoryView: () => vG,
  ExtensionRequestTableView: () => vz,
  FacetedSearchPreviewRecentFilesView: () => vH,
  FavoritesByResourceId: () => vW,
  FeedPostSummary: () => vq,
  FeedPostSummaryForTest: () => v$,
  FeedPostWithDetails: () => vZ,
  FeedPostsByFileKey: () => vX,
  FileAccountTypeRequest: () => vQ,
  FileBroadcasts: () => vJ,
  FileBrowserDraftsViewBarView: () => v1,
  FileBrowserMigratedToSections: () => v2,
  FileBrowserProjectPageTitleView: () => v5,
  FileBrowserRecentFilesByEditorTypeView: () => v4,
  FileBrowserRecentFilesView: () => v3,
  FileBrowserSearchBarData: () => v6,
  FileBrowserSidebarData: () => v7,
  FileBrowserWorkspacePageTeamsView: () => v8,
  FileByKey: () => v9,
  FileByKeyForRealtimeShim: () => Ie,
  FileByKeyThumbnailUrl: () => It,
  FileCanvasMentionsByFileKey: () => In,
  FileCreationDropdownView: () => Ir,
  FileCreationPermissionsView: () => Ia,
  FileEditRequestExistence: () => Is,
  FileExpirationView: () => Io,
  FileFeaturesEnabled: () => Il,
  FileImport: () => Id,
  FileKeysInProject: () => Ic,
  FileLastPublishedAt: () => Iu,
  FileManagePermission: () => Ip,
  FileNameViewDropdown: () => Ih,
  FileNameViewRepoFiles: () => IQ,
  FileOperationsView: () => Ig,
  FileOrgExtensionSettingsView: () => If,
  FilePermissions: () => Iy,
  FilePermissionsLgShadowView: () => Ib,
  FilePermissionsV2: () => IS,
  FilePresenterData: () => IT,
  FilePublishSitePermissions: () => Ik,
  FileRecentViewers: () => IR,
  FileRequestPermissions: () => IP,
  FileSearchResult: () => IO,
  FileShareModalCurrentUserPermissions: () => IC,
  FileShareModalPermissionsV3: () => Iw,
  FileTemplateView: () => ID,
  FileThumbnail: () => IL,
  FileTilePermissions: () => IF,
  FileVersions: () => IM,
  FileViewHistoryExp: () => Ij,
  FileWithCommentsAndReactions: () => IH,
  FileWithPrototypeLibCppConfig: () => IK,
  FileWithRoleRequest: () => IY,
  FileWithRoleRequests: () => Iq,
  FileWorkshopMode: () => I$,
  FileWorkspacePinActionsView: () => IZ,
  FilesForProject: () => IJ,
  FilesForRepo: () => I0,
  FilesForTeam: () => I1,
  FilesInProjectHighLimit: () => I2,
  FolderBannerView: () => I5,
  FolderCreation: () => I4,
  FolderMoveModalView: () => I3,
  FolderPageView: () => I7,
  FolderPermissions: () => Ee,
  FolderSearchResult: () => Et,
  FolderUntrashedFilesAndSitesView: () => Ei,
  FontFileForOrgView: () => Er,
  FontFileForTeamView: () => En,
  FrecencyHistoryView: () => Ea,
  GoogleClassroomIntegrationView: () => Es,
  GraftingUpdateSloData: () => Eo,
  HasCollectionsView: () => bE,
  HasConnectedPlanUserInOrg: () => El,
  HubFile: () => Ed,
  HubFileForEulaCheck: () => Eu,
  IdpUserView: () => Ep,
  InstalledPlugins: () => Eh,
  IpAllowlistRangesView: () => Eg,
  JamboardOfferRedeemedAt: () => Ef,
  LatestClipboardData: () => E_,
  LegacySourceStyleData: () => EA,
  LibrariesViewFilterStatesView: () => Ey,
  LibraryAssetByKey: () => Eb,
  LibraryAssetData: () => Ev,
  LibraryAssetDataOfType: () => EI,
  LibraryComponentDataByLibraryKey: () => EE,
  LibraryData: () => Ex,
  LibraryDataByLibraryKey: () => ES,
  LibraryFileContext: () => Ew,
  LibraryFileSelect: () => EC,
  LibraryFileSubscriptions: () => ET,
  LibraryInfo: () => Ek,
  LibraryIsBranch: () => ER,
  LibraryKeyToFileLink: () => EN,
  LibraryManagementCommunityData: () => EP,
  LibraryManagementData: () => EO,
  LibraryMetadataByLibraryKey: () => ED,
  LibraryModalAssetsData: () => EL,
  LibraryModalAssetsDataByLibraryKey: () => EF,
  LibraryModalVariablesData: () => EM,
  LibraryModalVariablesDataByLibraryKey: () => Ej,
  LibraryModuleData: () => EU,
  LibraryModuleDataByLibraryKey: () => EB,
  LibraryOrgSubscriptions: () => EV,
  LibraryPresetSubscriptionsV2: () => EG,
  LibraryPublish: () => Ez,
  LibraryStyleData: () => EH,
  LibrarySubscriptionView: () => EK,
  LibrarySubscriptionsForTeam: () => EY,
  LibraryTeamSubscriptions: () => Eq,
  LibraryUserSubscriptions: () => E$,
  LibraryVariableCollectionData: () => EZ,
  LibraryVariableCollectionDataByLibraryKey: () => EX,
  LibraryVariableCollectionDataByLibraryKeyWithVariables: () => EQ,
  LibraryVariableCollectionDataWithVariables: () => EJ,
  LicenseGroupCountView: () => E0,
  LicenseGroupSeatCountsView: () => E1,
  LimitedSpaceSharedProjectsView: () => E2,
  ListCollectionsView: () => bx,
  ListItemsView: () => bS,
  LitmusArtifactNavigation: () => E5,
  LitmusChanges: () => E4,
  LitmusChangesDetail: () => E3,
  LitmusComments: () => E6,
  LitmusComparisonArtifact: () => E7,
  LitmusComparisonResultDetails: () => E8,
  LitmusComparisonView: () => E9,
  LitmusLinkDesign: () => xe,
  LitmusProjectFeedView: () => xt,
  LitmusProjectsView: () => xi,
  LitmusSummaryView: () => xn,
  LockClientView: () => xr,
  MemberFlyoutInfoView: () => xa,
  MergeStatusRepoFiles: () => xo,
  Mobile_CommentThreadByRootComment: () => xl,
  Mobile_FavoritedFigJamBoards: () => xu,
  Mobile_FavoritedResources: () => xp,
  Mobile_FeedPostSummary: () => xS,
  Mobile_FileByKey: () => xm,
  Mobile_FileCommentThreadsByFile: () => xd,
  Mobile_FilePermissions: () => xT,
  Mobile_LastFrameSelection: () => xh,
  Mobile_LimitedTeamProjectsWithFilesPreview: () => xy,
  Mobile_OrgSummary: () => xg,
  Mobile_ProjectFigJamBoards: () => xf,
  Mobile_ProjectFiles: () => x_,
  Mobile_RecentFilesView: () => xk,
  Mobile_SpacesByUserV2: () => xA,
  Mobile_TeamFavoritedFigJamBoards: () => xb,
  Mobile_TeamFavoritedResources: () => xI,
  Mobile_TeamProjectsWithFilesPreview: () => xE,
  Mobile_TeamSummary: () => xx,
  ModifyPlanUserSeatModalView: () => xR,
  MoveDraftsNudgeV2OverlayRecentFilesLegacyView: () => xP,
  MoveDraftsNudgeV2OverlayRecentFilesView: () => xN,
  MoveDraftsTeamData: () => xO,
  MoveFileCurrentProject: () => xD,
  MoveFileDestination: () => xL,
  NonEnterpriseOrgMetaContentView: () => xJ,
  NotificationExperimentInfoView: () => xF,
  OneCollectionView: () => bw,
  OneItemView: () => bC,
  OpenEditorFileData: () => xM,
  OptionalFileBrowserSearchBarData: () => xj,
  OrgAdminSettingsPage: () => xU,
  OrgAdminUserMinimalFieldsView: () => xB,
  OrgAdminUserView: () => xV,
  OrgByIdForPlanUserView: () => xz,
  OrgByIdForPlanView: () => xG,
  OrgByIdForRealtimeShim: () => xH,
  OrgDomainManagementPage: () => xW,
  OrgHasMfaRequiredView: () => xK,
  OrgHasSeatsManagedViaScimView: () => xY,
  OrgHasWorkspacesView: () => xq,
  OrgIdpGroupsView: () => x$,
  OrgIdpManagementPageView: () => xZ,
  OrgInviteModalView: () => xX,
  OrgJoinRequestExistence: () => xQ,
  OrgMfaGuestInfoView: () => x1,
  OrgMfaMemberInfoView: () => x2,
  OrgProductTermsEligibleInfo: () => x5,
  OrgSharedSettingView: () => x4,
  OrgTaxIdView: () => x3,
  OrgTeamSummariesView: () => x6,
  OrgTeamView: () => Se,
  OrgTeamsIdAndName: () => St,
  OrgTeamsInAdminView: () => Si,
  OrgTeamsWithSummary: () => Sn,
  OrgUserDraftFolder: () => Sr,
  OrgUserFlag: () => Sa,
  OrgUserIsMfaRestrictedView: () => Ss,
  OrgUsersByIdView: () => So,
  OrgUsersForRealtimeShim: () => Sl,
  OrgWithWorkspacesFileExportControlsSettingView: () => Sd,
  OrgWithWorkspacesPublicLinkControlsSettingView: () => Sc,
  OrgWorkspaceCount: () => Su,
  OrgWorkspacesWithControlSettingsView: () => Sp,
  OrgsByUser: () => Sm,
  PageThumbnailsByFileKeyView: () => Sh,
  PaginatedAbandonedDraftFilesView: () => Sg,
  PaginatedAbandonedDraftsView: () => Sf,
  PaginatedFigFeed: () => S_,
  PaginatedFileRecentViewers: () => IN,
  PaginatedFilesByProjectAndEditorTypeView: () => Sy,
  PaginatedFilesByProjectView: () => SA,
  PaginatedTemplatesByOrg: () => SI,
  PaginatedTemplatesByOrgWorkspace: () => SE,
  PaginatedTemplatesByTeam: () => Sx,
  PaginatedTemplatesSearch: () => SS,
  PendingAssetTransferRequestByTeam: () => Sw,
  PendingConfirmedRenewalSeatCountsView: () => SC,
  PendingTeamRoleRequestsByTeamId: () => ST,
  PendingUserMentionByCommentView: () => Sk,
  PeriodicUpdateView: () => SR,
  PersistentLastFrameSelectionView: () => SN,
  PersistentUserNotificationBellData: () => Td,
  PinnedFiles: () => SP,
  PlanByFileKey: () => SO,
  PlanByOrgId: () => SD,
  PlanByProjectId: () => SL,
  PlanByTeamId: () => SF,
  PlanCanConnectView: () => SM,
  PlanConnectedProjectsForPlanUser: () => SU,
  PlanIsConnectEnabled: () => Sj,
  PlanUserByFileKey: () => SB,
  PlanUserByOrgId: () => SV,
  PlanUserByProjectId: () => SG,
  PlanUserByTeamId: () => Sz,
  Plugin: () => SH,
  PluginAllowlistManagementModalView: () => SW,
  PluginInstall: () => SK,
  PluginPreferencesView: () => SY,
  PluginRequests: () => Sq,
  PluginSecurityFormResponse: () => S$,
  PluginUpdatesForOrg: () => SZ,
  PreloadCodeConnectLk: () => SJ,
  ProRequestUpgradeModalData: () => S0,
  ProTeamPaidStatusUserData: () => S1,
  ProductTrialsView: () => S2,
  ProjectActiveResourceConnections: () => S5,
  ProjectById: () => S4,
  ProjectByIdForConnectedProjectStatus: () => S8,
  ProjectByIdForFolderSettings: () => S7,
  ProjectByIdForRealtimeShim: () => $$S6,
  ProjectCanView: () => S9,
  ProjectFileCount: () => we,
  ProjectFileNames: () => wt,
  ProjectNameById: () => S3,
  ProjectNameForFile: () => wi,
  ProjectOwnerRole: () => wn,
  ProjectTilePermissions: () => wr,
  ProjectsForTeam: () => wa,
  PrototypeCanView: () => ws,
  PrototypeTilePermissions: () => wo,
  PublishUpsellTeamPlan: () => wl,
  PublishUpsellTeamRoles: () => wd,
  PublishedHubFileForFile: () => Ec,
  PublishingModalView: () => wc,
  QuickReply_CommentThreadByRootComment: () => IW,
  RecentIdleTimeoutSettingChangeView: () => wu,
  RecentNetworkControlRejectionView: () => wp,
  RecentlyUsedActionsView: () => wm,
  RepoById: () => wh,
  RepoByIdForRealtimeShim: () => wg,
  RepoCanView: () => wf,
  RepoFiles: () => wA,
  RepoReviewerSuggestions: () => wb,
  RepoTilePermissions: () => wv,
  ReposForFile: () => wI,
  ReposForProject: () => wE,
  ReposForTeam: () => wx,
  ResolvedComments: () => wS,
  ResourceConnectedUsers: () => ww,
  ResourceConnectionByPlan: () => wk,
  ResourceConnectionInviteByIdView: () => wR,
  ResourceConnectionSharingGroupUsersByFile: () => wN,
  ResourceSave: () => wP,
  ResourceSaveFromResourceId: () => wO,
  ResourceSaves: () => wD,
  RoleUpdatesForTeam: () => wF,
  RoleUpdatesForUser: () => wM,
  SearchFilterWorkspaceView: () => wj,
  SeatCountDataForPlan: () => wU,
  SeatCountDataForPlanByBillingInterval: () => wB,
  SharedFontsModalOrgPermissions: () => wG,
  SharedFontsModalTeamPermissions: () => wV,
  SharedWithYouResources: () => wz,
  SharingGroupsByLibraryKey: () => wH,
  SharingGroupsByResourceConnection: () => wW,
  SiteBundles: () => wK,
  SiteMount: () => wY,
  SiteMountWithPublishEvents: () => wq,
  SlidesAiFileDisabledForFilePickerView: () => w$,
  SlidesTheme: () => wZ,
  SlotsFileEnablement: () => wX,
  StarterFileEditConfirmation: () => wQ,
  StateGroupAttribution: () => wJ,
  StateGroupByKey: () => w0,
  StateGroupUpdatesForFile: () => w4,
  StateGroupUpdatesForProject: () => w5,
  StateGroupUpdatesForTeam: () => w2,
  StatsigTeamsOrderView: () => w3,
  StyleAttribution: () => w6,
  StyleByKey: () => w7,
  SubscribedLibrariesForBuzzFile: () => Cs,
  SubscribedLibrariesForFigJamFile: () => Co,
  SubscribedLibrariesForFile: () => Cr,
  SubscribedLibrariesForSlidesFile: () => Ca,
  SubscriptionUpdateSloData: () => Cl,
  SupabaseAuthView: () => Cd,
  TeamAdminSettingsPage: () => Cc,
  TeamById: () => Cu,
  TeamByIdForPlanUserView: () => Cg,
  TeamByIdForPlanView: () => Ch,
  TeamByIdForRealtimeShim: () => Cp,
  TeamCreationWorkspaceView: () => Cf,
  TeamDiscoverableLibraries: () => C_,
  TeamFileCountsByTeamId: () => CA,
  TeamFileLimitsInfo: () => Cw,
  TeamFileLimitsInfoByProject: () => CS,
  TeamFoldersQuerySyncView: () => Cy,
  TeamHasPublishedSite: () => Cb,
  TeamInAdminById: () => Cm,
  TeamMembersModalView: () => Cv,
  TeamOrphanedStatus: () => CI,
  TeamPeopleTableView: () => CE,
  TeamPermissions: () => Cx,
  TeamRoleRequestView: () => CC,
  TeamRoles: () => CT,
  TeamSettings: () => Ck,
  TeamTaxIdView: () => CR,
  TeamTilePermissions: () => CN,
  TeamUpgradeBannerView: () => CP,
  TeamUpgradePermissions: () => CO,
  TeamUserStatusAndRequests: () => CD,
  TestBillableProductView: () => CL,
  TestComputedObjectView: () => CF,
  TestComputedObjectViewNullable: () => CU,
  TestComputedObjectViewToProjectFilteredFields: () => CG,
  TestComputedObjectViewToProjectFilteredFields2: () => Cz,
  TestComputedObjectViewWithAlias: () => CV,
  TestComputedObjectViewWithPartialFields: () => CB,
  TestComputedObjectViewWithSessionArgs: () => Cj,
  TestComputedObjectViewWithViewArgs: () => CM,
  TestCurrentUserView: () => CH,
  TestCurrentUserWithAliasView: () => CW,
  TestFileCmsCollectionsOrderView: () => CX,
  TestOrgComputedFieldsView: () => Cq,
  TestOrgOptionalFieldsView: () => C$,
  TestOrgView: () => CY,
  TestP0View: () => CQ,
  TestP1View: () => CJ,
  TestP2View: () => C0,
  TestRecentPrototypesView: () => CZ,
  TestWorkspaceApprovedLibrariesView: () => CK,
  ToggledDevModeSettingsView: () => C1,
  TrashedFilesPageView: () => C2,
  UnclaimedDomainUserView: () => C5,
  UpgradeEligibilityFolderView: () => C4,
  UpgradeEligibilityView: () => C3,
  UpgradeRequestModalOnPageLoad: () => C6,
  UserAvatarView: () => C7,
  UserColorProfilePreferenceView: () => C8,
  UserFlagByName: () => C9,
  UserForRcs: () => Tt,
  UserForRealtimeShim: () => Ti,
  UserGlobalFavoritedFiles: () => Tn,
  UserJamboardOfferEligibility: () => Tr,
  UserLicensesForFile: () => Ts,
  UserMonetizationMetadata: () => To,
  UserNotificationBellData: () => Tl,
  UserPreferences: () => Tu,
  UserProfilePageView: () => Tp,
  UserRecentSharedWithYouFiles: () => Tm,
  UserSettingsPlanRow: () => Th,
  UserTeamFlagsForRealtimeShim: () => Tg,
  UserTeamRoleRequestView: () => Tf,
  UserWithTeams: () => T_,
  UserWithTeamsForTest: () => TA,
  VariableByKey: () => Ty,
  VariableCollectionAttribution: () => Tb,
  VariableCollectionByKey: () => Tv,
  VariablesByVariableCollectionKey: () => TI,
  ViewerRestrictedDraftAccessLog: () => TE,
  WebFontsForFile: () => Tx,
  WhitelistedPluginsForOrg: () => SX,
  WidgetUpdatesForOrg: () => SQ,
  WorkspaceAdminLibrariesSectionView: () => TS,
  WorkspaceAdminOnboardingOverlayView: () => Tw,
  WorkspaceAdminSettingsView: () => TC,
  WorkspaceDefaultTeamsView: () => TT,
  WorkspaceInfoView: () => Tk,
  WorkspaceModalPluginRequests: () => TR,
  WorkspaceOrgAccessView: () => TN,
  WorkspacePageMembersView: () => TP,
  WorkspacePageView: () => TO,
  WorkspacePinnedFileKeysView: () => TD,
  WorkspaceSelectorView: () => TL,
  WorkspaceSubscribedLibrariesForFile: () => TF,
  WorkspaceSubscribedLibrariesForTeam: () => TM,
  WorkspaceSuggestedPinsView: () => Tj,
  WorkspacesCanAdminView: () => TU,
  WorkspacesDirectoryView: () => TB,
  WorkspacesTableView: () => TV
});
let o = new class {
  enums = [];
  addEnum(e) {
    this.enums.push(e);
  }
}();
Object.entries({
  LitmusArtifactStatus: ['incomplete', 'complete'],
  LitmusBuildStatus: ['incomplete', 'bundle_uploaded', 'ready_for_ingestion', 'complete', 'failed'],
  LitmusComparisonAggregatedResult: ['pending', 'needs_review', 'review_rejected', 'review_accepted', 'auto_accepted'],
  LitmusComparisonResultStatus: ['not_started', 'match', 'mismatch'],
  LitmusComparisonReviewConclusion: ['approved', 'rejected', 'unreviewed'],
  LitmusComparisonStatus: ['not_started', 'awaiting_builds', 'in_progress', 'completed', 'closed', 'failed'],
  LitmusComparisonStatusReason: ['build_failed', 'diff_image_failed', 'jndiff_not_found', 'missing_variants', 's3_access_error', 'timed_out', 'timed_out_waiting_for_builds', 'unknown'],
  PlanUserRecordPlanCreditsUsagePolicy: ['inherit', 'allowed', 'not_allowed']
}).forEach(([e, t]) => {
  o.addEnum({
    name: e,
    values: t
  });
});
o.addEnum({
  name: 'LinkAccess',
  values: ['org_view', 'org_edit', 'workspace_edit', 'workspace_view', 'view', 'edit', 'inherit', 'invite_only']
});
o.addEnum({
  name: 'AssetType',
  values: ['responsive_set', 'constrained_template', 'code_component']
});
o.addEnum({
  name: 'CodePresetIcon',
  values: ['lightbox', 'spin', 'typewriter', 'scramble', 'drag', 'mouseParallax']
});
o.addEnum({
  name: 'CodePresetCategory',
  values: ['motion', 'mouse', 'scrolling']
});
o.addEnum({
  name: 'CodePresetNodeType',
  values: ['FRAME', 'IMAGE', 'TEXT', 'GROUP', 'ROUNDED_RECTANGLE', 'INSTANCE', 'SYMBOL', 'VECTOR', 'STAR', 'LINE', 'ELLIPSE', 'REGULAR_POLYGON']
});
o.addEnum({
  name: 'BillableProductKey',
  values: ['design', 'whiteboard', 'dev_mode', 'slides', 'collaborator', 'developer', 'expert', 'content', 'ai_credits']
});
o.addEnum({
  name: 'BillableProductKind',
  values: ['standalone', 'bundle', 'add_on']
});
o.addEnum({
  name: 'SeatTypeKey',
  values: ['design', 'whiteboard', 'dev_mode', 'slides', 'collaborator', 'developer', 'expert', 'view', 'content']
});
o.addEnum({
  name: 'TeamAccess',
  values: [['TEAM_ACCESS_VIEW', 'team_view'], ['TEAM_ACCESS_EDIT', 'team_edit'], ['TEAM_ACCESS_DISABLED', 'team_access_disabled']]
});
o.addEnum({
  name: 'TeamDefaultPermission',
  values: [['VIEW', 'view'], ['EDIT', 'edit']]
});
o.addEnum({
  name: 'StudentTeamState',
  values: [['STUDENT_TEAM_NULL', 'not_student_team'], ['STUDENT_TEAM_CURRENT', 'current_student_team'], ['STUDENT_TEAM_EXPIRED', 'expired_student_team']]
});
o.addEnum({
  name: 'TaxIdVerificationStatus',
  values: ['unverified', 'verified', 'pending', 'unavailable']
});
o.addEnum({
  name: 'ProtoLinkAccess',
  values: ['org_view', 'view', 'inherit']
});
o.addEnum({
  name: 'ConfiguredUpgradeRequestSetting',
  values: ['members', 'all_users']
});
o.addEnum({
  name: 'OrgAccess',
  values: ['public', 'private', 'secret']
});
o.addEnum({
  name: 'OrgPermission',
  values: ['admin', 'member', 'guest']
});
o.addEnum({
  name: 'OrgStanding',
  values: ['AUTO', 'GOOD', 'DELINQUENT', 'SUSPENDED', 'DEACTIVATED', 'INCOMPLETE']
});
o.addEnum({
  name: 'WorkspacePermission',
  values: ['admin', 'member']
});
o.addEnum({
  name: 'WorkspaceUpdateReason',
  values: [['SELF_SELECTED', 'self'], ['MOVED_BY_ADMIN', 'moved'], ['AUTO_ASSIGNED', 'auto'], ['SCIM_GROUP', 'scim_group']]
});
o.addEnum({
  name: 'OrgAccountType',
  values: ['starter', 'full', 'restricted']
});
o.addEnum({
  name: 'TeamUserPaidStatus',
  values: ['starter', 'full', 'restricted']
});
o.addEnum({
  name: 'ResourceType',
  values: ['file', 'file_repo', 'folder', 'team']
});
o.addEnum({
  name: 'OrgUserUpgradeResourceType',
  values: ['file', 'file_repo', 'folder', 'team', 'org']
});
o.addEnum({
  name: 'SharedWithYouResourceType',
  values: ['file', 'file_repo', 'folder', 'team', 'prototype']
});
o.addEnum({
  name: 'SubscriptionType',
  values: ['ok', 'grace_period', 'past_due', 'no_monthly_sub_editor_count_exceeded', 'incomplete']
});
o.addEnum({
  name: 'BillingInterval',
  values: ['month', 'year']
});
o.addEnum({
  name: 'TeamRestrictionsType',
  values: ['locked', 'editors_limited', 'projects_limited', 'files_limited', 'projects_limited_legacy', 'files_limited_legacy', 'whiteboard_files_limited', 'whiteboard_files_limited_beta', 'slide_files_limited', 'slide_files_limited_beta', 'global_files_limited', 'global_files_limited_legacy', 'global_files_must_check']
});
o.addEnum({
  name: 'EditorType',
  values: ['design', 'whiteboard', 'slides', 'sites', 'cooper', 'figmake']
});
o.addEnum({
  name: 'LicenseType',
  values: ['design', 'whiteboard', 'dev_mode', 'slides', 'sites', 'figmake', 'cooper']
});
o.addEnum({
  name: 'FigFileLinkType',
  values: ['design', 'whiteboard', 'external']
});
o.addEnum({
  name: 'FavoritedResourceType',
  values: ['file', 'prototype', 'folder', 'team', 'workspace']
});
o.addEnum({
  name: 'FileExportSetting',
  values: ['allowed', 'members_only', 'banned']
});
o.addEnum({
  name: 'PinnedFileV2ResourceType',
  values: ['Folder', 'Workspace']
});
o.addEnum({
  name: 'ViewerMode',
  values: ['canvas', 'prototype', 'whiteboard', 'library', 'slide_template', 'site_template', 'cooper_template_file', 'figmake_template']
});
o.addEnum({
  name: 'VerificationStatus',
  values: ['verified', 'unverified', 'blocked']
});
o.addEnum({
  name: 'PublishingStatus',
  values: ['blocked', 'org_private', 'pending_user_visual_compliance', 'pending_3p_m10n_check', 'pending_public', 'org_private_pending_public', 'delisted', 'delisted_creator_stripe_disabled', 'approved_public']
});
o.addEnum({
  name: 'ThirdPartyM10nStatus',
  values: ['flagged', 'migrating', 'pending_auto_validation']
});
o.addEnum({
  name: 'CommunityResourcePaymentStatus',
  values: ['pending', 'succeeded', 'canceled', 'refunded', 'trialing', 'subscription_payment_failed', 'invoice_finalization_failed', 'disputed']
});
o.addEnum({
  name: 'SidebarMigrationStatus',
  values: ['migration_not_needed', 'migration_needed', 'migrated']
});
o.addEnum({
  name: 'DeviceType',
  values: ['desktop', 'ipad']
});
o.addEnum({
  name: 'CustomTemplatesPermissions',
  values: ['ALLOW', 'DISABLE']
});
o.addEnum({
  name: 'GracePeriodType',
  values: ['pro_trial', 'downgraded_org_team', 'promo_code', 'admin_override']
});
o.addEnum({
  name: 'PinnedStatus',
  values: ['unpinned', 'pinned']
});
o.addEnum({
  name: 'ActivityType',
  values: ['file_seen', 'design_file_seen', 'whiteboard_file_seen', 'file_edit', 'design_file_edit', 'whiteboard_file_edit', 'dev_mode_file_seen']
});
o.addEnum({
  name: 'CommunityPublisherRole',
  values: ['creator', 'publisher']
});
o.addEnum({
  name: 'PluginSecurityFormResponseStatus',
  values: ['pending', 'approved', 'rejected']
});
o.addEnum({
  name: 'ColorProfilePreference',
  values: ['default', 'srgb', 'display_p3']
});
o.addEnum({
  name: 'FeaturedScimMetadata',
  values: [['COST_CENTER', 'costCenter'], ['ORGANIZATION', 'organization'], ['DIVISION', 'division'], ['DEPARTMENT', 'department']]
});
o.addEnum({
  name: 'UpgradeMethod',
  values: ['auto_approved', 'auto_approved_available_seat', 'auto_approved_edu', 'admin_initiated', 'admin_self_upgrade', 'figma_admin', 'manual_approved', 'manual_approved_no_available_seat', 'scim']
});
o.addEnum({
  name: 'OrgUserUpgradeReason',
  values: ['role_upgrade', 'invite_redeem', 'org_invite_redeem', 'invite_autoupgrade', 'resource_moved_to_org', 'drafts_share', 'access_edit_link', 'create_team', 'join_team', 'join_team_request', 'admin_upgrade', 'scim', 'figma_admin', 'depart_team', 'create_file', 'edit_request_approval', 'edit_request_auto_approval', 'run_plugin', 'resource_moved_from_org_drafts', 'default_paid_status', 'fj_ga_reupgrade', 'edit_button', 'edit_action', 'active_edit_action', 'org_merge', 'dev_mode_pre_commit_beta_use', 'unknown', 'unknown_populated_through_backfill', 'scim_recovery', 'role_fallback', 'paid_status_on_org_creation', 'team_added_to_org_through_figma_admin', 'seat_management_at_self_serve_checkout', 'dev_mode', 'support_driven_org_migration', 'support_driven_org_merge', 'support_driven_team_addition', 'publish_sites', 'code_chat_limit', 'restricted_draft_shared_email', 'in_editor_restricted_draft', 'downgrade_email', 'lifecycle_reupgrade_email']
});
o.addEnum({
  name: 'PlanUserMembershipRecordSource',
  values: ['asset_transfer', 'auto_upgrade', 'backfill', 'comment_mention', 'connected_project_invite', 'create_team', 'domain_capture', 'domain_insights', 'edit_request_approval', 'figma_admin', 'file_move', 'file_restore', 'file_view', 'folder_move', 'invite_redeem', 'join_link_redeem', 'org_downgrade', 'org_merge', 'org_migration', 'personal_drafts_migration', 'plan_invite', 'plan_join_request_approval', 'project_extraction', 'request_upgrade', 'resource_move', 'role_create', 'saml_sso', 'team_addition', 'team_extraction', 'team_transfer', 'test', 'test_materials', 'users_org_move', 'voice_call']
});
o.addEnum({
  name: 'TeamUserUpgradeReason',
  values: ['resource_moved_to_team', 'resource_restored_from_trash', 'join_link_redeem', 'self_upgrade', 'checkout', 'dev_mode', 'team_downgraded_to_starter', 'developer_bundle_opt_in', 'admin_upgrade', 'role_upgrade', 'invite_redeem', 'invite_autoupgrade', 'create_file', 'edit_request_auto_approval', 'edit_request_approval', 'edit_button', 'active_edit_action', 'default_paid_status', 'drafts_share', 'resource_moved_from_plan_drafts', 'converted_from_license_type', 'resource_move', 'unknown', 'unknown_populated_through_backfill', 'figma_admin', 'nux_seat_choice', 'publish_sites', 'code_chat_limit', 'restricted_draft_shared_email', 'in_editor_restricted_draft', 'downgrade_email', 'lifecycle_reupgrade_email', 'edit_link_edit_action', 'depart_team', 'create_team', 'run_plugin', 'team_admin_upgrade', 'fj_ga_upgrade', 'edit_action']
});
o.addEnum({
  name: 'LicenseGroupUpdateReason',
  values: [['SELF_SELECTED', 'self'], ['SELF_SELECTED_NOT_LISTED', 'not listed'], ['SELF_SELECTED_DONT_KNOW', 'don\'t know'], ['MOVED_BY_ADMIN', 'moved'], ['AUTO_ASSIGNED', 'auto']]
});
o.addEnum({
  name: 'BillingTrialResourceType',
  values: ['Org']
});
o.addEnum({
  name: 'BillingTrialPlanType',
  values: ['Organization', 'Enterprise']
});
o.addEnum({
  name: 'BillingTrialType',
  values: ['plan', 'product']
});
o.addEnum({
  name: 'BillingTrialStatus',
  values: ['Pending', 'Active', 'Expired', 'Deactivated']
});
o.addEnum({
  name: 'AutoRunBehavior',
  values: ['INHERIT', 'NONE', 'OVERRIDE']
});
o.addEnum({
  name: 'CodegenSettingsBehavior',
  values: ['INHERIT', 'OVERRIDE']
});
o.addEnum({
  name: 'CodeExtensionLanguageType',
  values: [['PUBLISHED_PLUGIN', 'published-plugin'], ['FIRST_PARTY', 'first-party']]
});
o.addEnum({
  name: 'DimensionUnit',
  values: ['PIXEL', 'SCALED']
});
o.addEnum({
  name: 'CommunityShelfContentType',
  values: ['hub_file', 'plugin', 'profile', 'widget']
});
o.addEnum({
  name: 'StripeAccountStatus',
  values: ['NONE', 'ACCEPTED', 'STARTED_ONBOARDING', 'ENABLED', 'DISABLED']
});
o.addEnum({
  name: 'DevModeActivityType',
  values: ['status_change']
});
o.addEnum({
  name: 'NodeStatus',
  values: ['build', 'completed', 'none']
});
o.addEnum({
  name: 'PresetLibraryPartnerType',
  values: ['figma', 'apple', 'google']
});
o.addEnum({
  name: 'PresetLibraryGroup',
  values: ['default', 'internal', 'config24', 'apple_alpha', 'google_alpha']
});
o.addEnum({
  name: 'LibraryPublishScopeType',
  values: ['Org', 'Workspace', 'Team']
});
o.addEnum({
  name: 'OrgIpRangeProductType',
  values: ['ip_allowlist', 'network_access_restriction']
});
o.addEnum({
  name: 'PlanPaidUserStatus',
  values: ['starter', 'full', 'restricted']
});
o.addEnum({
  name: 'PlanTier',
  values: ['starter', 'student', 'pro', 'org', 'enterprise']
});
o.addEnum({
  name: 'PlanStatus',
  values: ['incomplete', 'active', 'unpaid', 'suspended', 'suspended_monthly_sub_editor_count_exceeded', 'deactivated']
});
o.addEnum({
  name: 'PlanType',
  values: [['ORG', 'organization'], ['TEAM', 'team']]
});
o.addEnum({
  name: 'PlanParentClass',
  values: [['ORG', 'Org'], ['TEAM', 'Team']]
});
o.addEnum({
  name: 'PlanUserType',
  values: ['org_user', 'team_user']
});
o.addEnum({
  name: 'PlanPermission',
  values: ['admin', 'member', 'guest']
});
o.addEnum({
  name: 'TermsOfServiceAcceptanceTermsKey',
  values: ['seats_model_billing_2025']
});
o.addEnum({
  name: 'ProvisionalAccessStatus',
  values: ['active', 'deactivated', 'expired']
});
o.addEnum({
  name: 'MonetizationStatus',
  values: ['figma_first_party', 'figma_partner', 'off_platform', 'has_freemium_code']
});
o.addEnum({
  name: 'TrashedWithParent',
  values: ['folder']
});
o.addEnum({
  name: 'ResourceConnectionInviteStatus',
  values: ['pending', 'approved', 'denied', 'revoked']
});
o.addEnum({
  name: 'LitmusCommentClientMetaPageType',
  values: ['design', 'screenshot']
});
o.addEnum({
  name: 'PublicDenyReason',
  values: Object.values(QKp)
});
o.addEnum({
  name: 'AssetAttributionType',
  values: ['team', 'community']
});
let l = [...o.enums];
let c = {
  name: _$$Y.AccountManagerMessage,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'amUserId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'targetUserId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'amName',
    type: {
      kind: 'string'
    }
  }, {
    name: 'amEmail',
    type: {
      kind: 'string'
    }
  }, {
    name: 'amAvatarUrl',
    type: {
      kind: 'string'
    }
  }, {
    name: 'ctaUrl',
    type: {
      kind: 'string'
    }
  }, {
    name: 'sentAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'reminderSentAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }]
};
let u = {
  name: _$$Y.AccountTypeRequest,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'requestableUserId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'requestableUserType',
    type: {
      kind: 'string'
    }
  }, {
    name: 'requestableOrgUser',
    type: {
      kind: 'object',
      name: _$$Y.OrgUser
    },
    filter: {
      and: [['id', '=', createParentRef('requestableUserId')], ['orgId', '=', createParentRef('planId')]]
    },
    nullable: !0
  }, {
    name: 'requestableTeamUser',
    type: {
      kind: 'object',
      name: _$$Y.TeamUser
    },
    filter: {
      and: [['id', '=', createParentRef('requestableUserId')], ['teamId', '=', createParentRef('planId')]]
    },
    nullable: !0
  }, {
    name: 'status',
    type: {
      kind: 'string'
    }
  }, {
    name: '_editorTypeRaw',
    type: {
      kind: 'int'
    }
  }, {
    name: 'editorType',
    type: {
      kind: 'enum',
      name: 'EditorType'
    },
    computed: !0,
    nullable: !0,
    dependencies: {
      _editorTypeRaw: NULL_FIELD_REF
    },
    deprecated: {
      reason: 'Use `licenseType` instead',
      date: '2023-10-24'
    }
  }, {
    name: 'licenseType',
    type: {
      kind: 'enum',
      name: 'LicenseType'
    },
    computed: !0,
    nullable: !0,
    dependencies: {
      _editorTypeRaw: NULL_FIELD_REF
    }
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    },
    nullable: !0,
    bannedFromViews: !0
  }, {
    name: 'message',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'planType',
    type: {
      kind: 'string'
    }
  }, {
    name: 'planId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'gracePeriodExpireAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'lastNudgedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'requesterDismissedNudgeBadgeAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'entryPoint',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'billableProductKey',
    type: {
      kind: 'enum',
      name: 'BillableProductKey'
    },
    nullable: !0
  }, {
    name: 'billableProduct',
    type: {
      kind: 'object',
      name: _$$Y.BillableProduct
    },
    filter: ['key', '=', createParentRef('billableProductKey')],
    nullable: !0
  }]
};
let p = {
  name: _$$Y.ActiveFileUser,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'string'
    }
  }, {
    name: 'handle',
    type: {
      kind: 'string'
    }
  }, {
    name: 'imageUrl',
    type: {
      kind: 'string'
    },
    typechecked: !1
  }]
};
let m = {
  name: _$$Y.ActivityLog,
  permissionRequired: !0,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'actorId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'actor',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    nullable: !0,
    filter: ['id', '=', createParentRef('actorId')]
  }, {
    name: 'teamId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'eventName',
    type: {
      kind: 'string'
    }
  }, {
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'ipAddress',
    type: {
      kind: 'string'
    }
  }, {
    name: 'isFigmaAdminAction',
    type: {
      kind: 'bool'
    }
  }, {
    name: 'metadata',
    type: {
      kind: 'string'
    }
  }, {
    name: 'actedOnType',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'actedOnIdOrKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'isIdpAction',
    type: {
      kind: 'bool'
    }
  }, {
    name: 'org',
    type: {
      kind: 'object',
      name: _$$Y.Org
    },
    filter: ['id', '=', createParentRef('orgId')],
    bannedFromViews: !0
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      id: NULL_FIELD_REF,
      org: {
        currentPrivilegedOrgUser: [{
          userId: createFieldRef('userId')
        }, {
          id: NULL_FIELD_REF,
          permission: NULL_FIELD_REF,
          licenseGroupAdmins: {
            id: NULL_FIELD_REF
          }
        }]
      }
    }
  }]
};
let h = {
  name: _$$Y.AdminRequestDashboardRow,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'request',
    type: {
      kind: 'object',
      name: _$$Y.AccountTypeRequest
    },
    filter: ['id', '=', createParentRef('id')],
    nullable: !1,
    deprecated: {
      reason: 'Use requestNullable instead',
      date: '2024-01-26'
    }
  }, {
    name: 'user',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    filter: ['id', '=', createParentRef('userId')],
    nullable: !1,
    deprecated: {
      reason: 'Use userNullable instead',
      date: '2024-01-26'
    }
  }, {
    name: 'requestNullable',
    type: {
      kind: 'object',
      name: _$$Y.AccountTypeRequest
    },
    filter: ['id', '=', createParentRef('id')],
    nullable: !0
  }, {
    name: 'userNullable',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    filter: ['id', '=', createParentRef('userId')],
    nullable: !0
  }]
};
let g = {
  name: _$$Y.AdminRequestDashboardRowCount,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    },
    typechecked: !1
  }, {
    name: 'rowCount',
    type: {
      kind: 'int'
    }
  }]
};
let f = {
  name: _$$Y.AdminRequestDashboardRowId,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }]
};
let _ = {
  name: _$$Y.AiMeterUsage,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'string'
    }
  }, {
    name: 'name',
    type: {
      kind: 'string'
    }
  }, {
    name: 'remaining',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'total',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'resetsAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'userActions',
    type: {
      kind: 'list',
      ofType: {
        kind: 'string'
      }
    }
  }, {
    name: 'meteringWindow',
    type: {
      kind: 'string'
    }
  }]
};
let A = {
  name: _$$Y.AllowlistedPlugin,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'pluginId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'plugin',
    type: {
      kind: 'object',
      name: _$$Y.Plugin
    },
    filter: ['id', '=', createParentRef('pluginId')],
    nullable: !0
  }, {
    name: 'pluginV2',
    type: {
      kind: 'object',
      name: _$$Y.Plugin
    },
    args: [{
      name: 'orgId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    checkCanRead: {
      userId: createSessionRef('userId'),
      orgId: createFieldRef('orgId')
    },
    filter: ['id', '=', createParentRef('pluginId')],
    nullable: !0
  }, {
    name: 'isWidget',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      plugin: {
        isWidget: NULL_FIELD_REF
      }
    }
  }, {
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'allowlistGroupType',
    type: {
      kind: 'string'
    }
  }, {
    name: 'allowlistGroupId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'allowlistedLicenseGroup',
    type: {
      kind: 'object',
      name: _$$Y.LicenseGroup
    },
    filter: ['id', '=', createParentRef('allowlistGroupId')],
    nullable: !0
  }, {
    name: 'allowlistedWorkspace',
    type: {
      kind: 'object',
      name: _$$Y.Workspace
    },
    filter: ['id', '=', createParentRef('allowlistGroupId')],
    nullable: !0,
    shadowCheckCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'allowlistedWorkspacePublicInfo',
    type: {
      kind: 'object',
      name: _$$Y.WorkspacePublicInfo
    },
    filter: ['id', '=', createParentRef('allowlistGroupId')],
    nullable: !0
  }, {
    name: 'allowlistedOrgV2',
    type: {
      kind: 'object',
      name: _$$Y.OrgInfo
    },
    filter: ['id', '=', createParentRef('allowlistGroupId')],
    nullable: !0,
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }]
};
let y = {
  name: _$$Y.ApprovedLibrary,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'resourceType',
    type: {
      kind: 'string'
    }
  }, {
    name: 'resourceId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'libraryKeyToFile',
    type: {
      kind: 'object',
      name: _$$Y.LibraryKeyToFile
    },
    filter: ['fileKey', '=', createParentRef('fileKey')],
    nullable: !0
  }, {
    name: 'libraryKey',
    type: {
      kind: 'string'
    },
    nullable: !0,
    computed: !0,
    dependencies: {
      libraryKeyToFile: {
        libraryKey: NULL_FIELD_REF
      }
    }
  }]
};
let b = {
  name: _$$Y.AssetPublishStatus,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'libraryPublishId',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    },
    bannedFromViews: !0
  }, {
    name: 'nodeId',
    type: {
      kind: 'string'
    }
  }, {
    name: 'assetKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'status',
    type: {
      kind: 'string'
    }
  }, {
    name: 'assetType',
    type: {
      kind: 'string'
    }
  }, {
    name: 'error',
    type: {
      kind: 'string'
    },
    nullable: !0
  }]
};
let v = {
  name: _$$Y.AssetTransferRequest,
  permissionRequired: !0,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'sourceFolderId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sourceFolder',
    type: {
      kind: 'object',
      name: _$$Y.Project
    },
    nullable: !0,
    filter: ['id', '=', createParentRef('sourceFolderId')],
    checkCanRead: {
      userId: createViewRef('userId')
    }
  }, {
    name: 'sourceTeamId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sourceTeam',
    type: {
      kind: 'object',
      name: _$$Y.Team
    },
    nullable: !0,
    filter: ['id', '=', createParentRef('sourceTeamId')],
    checkCanRead: {
      userId: createViewRef('userId')
    }
  }, {
    name: 'transferType',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'status',
    type: {
      kind: 'string'
    }
  }, {
    name: 'sourceUserId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'destinationUserId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'isTransferCopy',
    type: {
      kind: 'bool'
    },
    nullable: !0
  }, {
    name: 'sourceUser',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    nullable: !0,
    filter: ['id', '=', createParentRef('sourceUserId')]
  }, {
    name: 'destinationUser',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    nullable: !0,
    filter: ['id', '=', createParentRef('destinationUserId')]
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      sourceFolder: {
        canTransferExternally: [{
          userId: createViewRef('userId')
        }, NULL_FIELD_REF],
        canTransferCopy: [{
          userId: createViewRef('userId')
        }, NULL_FIELD_REF]
      },
      sourceTeam: {
        canAdmin: [{
          userId: createViewRef('userId')
        }, NULL_FIELD_REF]
      },
      transferType: NULL_FIELD_REF
    }
  }]
};
let I = {
  name: _$$Y.AtMention,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    },
    bannedFromViews: !0
  }, {
    name: 'mentionedUserId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'mentionedByUserId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'fileCommentId',
    type: {
      kind: 'bigint'
    }
  }]
};
let E = {
  id: NULL_FIELD_REF,
  canViewV3: [{
    userId: createViewRef('userId'),
    sessionId: createViewRef('sessionId'),
    anonymousUserId: createViewRef('anonymousUserId')
  }, NULL_FIELD_REF],
  trashedAt: NULL_FIELD_REF
};
let x = [{
  name: 'id',
  type: {
    kind: 'uuid'
  },
  bannedFromViews: !0
}, {
  name: 'fileKey',
  type: {
    kind: 'string'
  },
  bannedFromViews: !0
}, {
  name: 'libraryKey',
  type: {
    kind: 'string'
  }
}, {
  name: 'key',
  type: {
    kind: 'string'
  }
}, {
  name: 'assetType',
  type: {
    kind: 'enum',
    name: 'AssetType'
  }
}, {
  name: 'version',
  type: {
    kind: 'string'
  }
}, {
  name: 'userFacingVersion',
  type: {
    kind: 'string'
  }
}, {
  name: 'sortPosition',
  type: {
    kind: 'string'
  },
  nullable: !0
}, {
  name: 'name',
  type: {
    kind: 'string'
  }
}, {
  name: 'description',
  type: {
    kind: 'string'
  },
  nullable: !0
}, {
  name: 'mainNodeHeight',
  type: {
    kind: 'bigint'
  }
}, {
  name: 'mainNodeWidth',
  type: {
    kind: 'bigint'
  }
}, {
  name: 'nodeId',
  type: {
    kind: 'string'
  }
}, {
  name: 'userId',
  type: {
    kind: 'string'
  }
}, {
  name: 'unpublishedAt',
  type: {
    kind: 'datetime'
  },
  nullable: !0
}, {
  name: 'updatedAt',
  type: {
    kind: 'datetime'
  }
}, {
  name: 'containingFrame',
  type: {
    kind: 'object',
    name: _$$Y.LibraryItemContainingFrame
  },
  embedded: !0,
  nullable: !0
}, {
  name: 'file',
  type: {
    kind: 'object',
    name: _$$Y.File
  },
  bannedFromViews: !0,
  filter: ['key', '=', createParentRef('fileKey')],
  nullable: !0,
  checkCanRead: {
    fieldName: 'canReadV3',
    userId: createViewRef('userId'),
    sessionId: createSessionRef('sessionId'),
    anonymousUserId: createSessionRef('anonymousUserId')
  },
  expectedMaxCount: 1e3
}, {
  name: 'libraryKeyToFile',
  type: {
    kind: 'object',
    name: _$$Y.LibraryKeyToFile
  },
  bannedFromViews: !0,
  filter: ['libraryKey', '=', createParentRef('libraryKey')],
  nullable: !0
}, {
  name: 'canRead',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  dependencies: {
    unpublishedAt: NULL_FIELD_REF,
    file: {
      ...E
    },
    libraryKeyToFile: {
      hubFile: {
        id: NULL_FIELD_REF,
        unpublishedAt: NULL_FIELD_REF,
        canRead: [{
          userId: createViewRef('userId')
        }, NULL_FIELD_REF]
      }
    }
  }
}];
let S = {
  name: _$$Y.LibraryAsset,
  permissionRequired: !1,
  fields: [...x, {
    name: 'codePresetMetadata',
    type: {
      kind: 'object',
      name: _$$Y.CodePresetMetadata
    },
    filter: {
      and: [['libraryKey', '=', createParentRef('libraryKey')], ['assetId', '=', createParentRef('id')]]
    },
    nullable: !0
  }]
};
let w = [{
  name: '_teamPlanUserRecord',
  type: {
    kind: 'object',
    name: _$$Y.PlanUserRecord
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  filter: {
    and: [['planParentType', '=', 'Team'], ['planParentId', '=', createParentRef('teamId')], ['userId', '=', createFieldRef('userId')]]
  },
  nullable: !0,
  bannedFromViews: !0
}, {
  name: '_orgPlanUserRecord',
  type: {
    kind: 'object',
    name: _$$Y.PlanUserRecord
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  filter: {
    and: [['planParentType', '=', 'Org'], ['planParentId', '=', createParentRef('parentOrgId')], ['userId', '=', createFieldRef('userId')]]
  },
  nullable: !0,
  bannedFromViews: !0
}];
let C = {
  name: '_planUserRecord',
  type: {
    kind: 'object',
    name: _$$Y.PlanUserRecord
  },
  filter: {
    and: [['planParentType', '=', 'Org'], ['planParentId', '=', createParentRef('orgId')], ['userId', '=', createParentRef('userId')]]
  },
  nullable: !0,
  bannedFromViews: !0
};
let T = {
  name: '_planUserRecord',
  type: {
    kind: 'object',
    name: _$$Y.PlanUserRecord
  },
  filter: {
    and: [['planParentType', '=', 'Team'], ['planParentId', '=', createParentRef('teamId')], ['userId', '=', createParentRef('userId')]]
  },
  nullable: !0,
  bannedFromViews: !0
};
let k = {
  name: '_currentPlanUserRecord',
  type: {
    kind: 'object',
    name: _$$Y.PlanUserRecord
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  filter: {
    and: [['planParentId', '=', createParentRef('planParentId')], ['planParentType', '=', createParentRef('planParentType')], ['userId', '=', createFieldRef('userId')]]
  },
  nullable: !0,
  bannedFromViews: !0
};
let R = {
  name: '_planUserRecord',
  type: {
    kind: 'object',
    name: _$$Y.PlanUserRecord
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  filter: {
    and: [['planParentId', '=', createParentRef('id')], ['planParentType', '=', 'Org'], ['userId', '=', createFieldRef('userId')]]
  },
  nullable: !0,
  bannedFromViews: !0
};
let N = [{
  name: '_teamPlanUserRecord',
  type: {
    kind: 'object',
    name: _$$Y.PlanUserRecord
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  filter: {
    and: [['planParentId', '=', createParentRef('id')], ['planParentType', '=', 'Team'], ['userId', '=', createFieldRef('userId')]]
  },
  nullable: !0,
  bannedFromViews: !0
}, {
  name: '_orgPlanUserRecord',
  type: {
    kind: 'object',
    name: _$$Y.PlanUserRecord
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  filter: {
    and: [['planParentId', '=', createParentRef('orgId')], ['planParentType', '=', 'Org'], ['userId', '=', createFieldRef('userId')]]
  },
  nullable: !0,
  bannedFromViews: !0
}];
let P = [{
  name: '_currentPlanUserRecord',
  type: {
    kind: 'object',
    name: _$$Y.PlanUserRecord
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  filter: {
    and: [['planId', '=', createParentRef('planId')], ['userId', '=', createFieldRef('userId')]]
  },
  nullable: !0,
  bannedFromViews: !0
}];
let O = [{
  name: 'id',
  type: {
    kind: 'bigint'
  }
}, {
  name: 'orgId',
  type: {
    kind: 'bigint'
  }
}, {
  name: 'userId',
  type: {
    kind: 'bigint'
  }
}, {
  name: 'draftsFolderId',
  type: {
    kind: 'bigint'
  },
  nullable: !0
}, {
  name: 'permission',
  type: {
    kind: 'enum',
    name: 'OrgPermission'
  }
}, {
  name: 'accountType',
  type: {
    kind: 'enum',
    name: 'OrgAccountType'
  }
}, {
  name: 'whiteboardPaidStatus',
  type: {
    kind: 'enum',
    name: 'OrgAccountType'
  }
}, {
  name: 'devModePaidStatus',
  type: {
    kind: 'enum',
    name: 'OrgAccountType'
  }
}, {
  name: 'designPaidStatus',
  type: {
    kind: 'enum',
    name: 'OrgAccountType'
  },
  computed: !0,
  dependencies: {
    accountType: NULL_FIELD_REF
  }
}, {
  name: 'accountTypeChangedAt',
  type: {
    kind: 'datetime'
  },
  nullable: !0
}, {
  name: 'createdAt',
  type: {
    kind: 'datetime'
  }
}, {
  name: 'updatedAt',
  type: {
    kind: 'datetime'
  }
}, {
  name: 'disabledAt',
  type: {
    kind: 'datetime'
  },
  nullable: !0
}, {
  name: 'agreedToCommunityTosAt',
  type: {
    kind: 'datetime'
  },
  nullable: !0
}, {
  name: 'description',
  type: {
    kind: 'string'
  },
  nullable: !0
}, {
  name: 'showFigjamUserOnboarding',
  type: {
    kind: 'bool'
  },
  nullable: !0
}, {
  name: 'hasShownFigjamAdminOnboarding',
  type: {
    kind: 'bool'
  },
  nullable: !0
}, {
  name: 'hasShownFigjamAdminLaunchOnboarding',
  type: {
    kind: 'bool'
  },
  nullable: !0
}, {
  name: 'userStateChangedAt',
  type: {
    kind: 'datetime'
  },
  nullable: !0
}, {
  name: 'draftsProject',
  type: {
    kind: 'object',
    name: _$$Y.Project
  },
  filter: ['id', '=', createParentRef('draftsFolderId')],
  checkCanRead: {
    userId: createSessionRef('userId')
  },
  nullable: !0
}, {
  name: 'licenseGroupMember',
  type: {
    kind: 'object',
    name: _$$Y.LicenseGroupMember
  },
  filter: ['orgUserId', '=', createParentRef('id')],
  nullable: !0
}, {
  name: 'licenseGroupAdmins',
  type: {
    kind: 'objects',
    name: _$$Y.LicenseGroupAdmin
  },
  filter: ['orgUserId', '=', createParentRef('id')],
  nullable: !0,
  expectedMaxCount: 1e3
}, {
  name: 'workspaceUsers',
  type: {
    kind: 'objects',
    name: _$$Y.WorkspaceUser
  },
  filter: ['orgUserId', '=', createParentRef('id')],
  expectedMaxCount: 1e3
}, {
  name: 'designOrgAccountTypeRequest',
  type: {
    kind: 'object',
    name: _$$Y.OrgAccountTypeRequest
  },
  filter: {
    and: [['orgUserId', '=', createParentRef('id')], ['_editorTypeRaw', '=', 0]]
  },
  nullable: !0,
  deprecated: {
    reason: 'Use `designAccountTypeRequest` instead',
    date: '2023-08-22'
  }
}, {
  name: 'whiteboardOrgAccountTypeRequest',
  type: {
    kind: 'object',
    name: _$$Y.OrgAccountTypeRequest
  },
  filter: {
    and: [['orgUserId', '=', createParentRef('id')], ['_editorTypeRaw', '=', 1]]
  },
  nullable: !0,
  deprecated: {
    reason: 'Use `designAccountTypeRequest` instead',
    date: '2023-08-22'
  }
}, {
  name: 'designAccountTypeRequest',
  type: {
    kind: 'object',
    name: _$$Y.AccountTypeRequest
  },
  filter: {
    and: [['requestableUserId', '=', createParentRef('id')], ['requestableUserType', '=', 'OrgUser'], ['_editorTypeRaw', '=', 0]]
  },
  nullable: !0
}, {
  name: 'whiteboardAccountTypeRequest',
  type: {
    kind: 'object',
    name: _$$Y.AccountTypeRequest
  },
  filter: {
    and: [['requestableUserId', '=', createParentRef('id')], ['requestableUserType', '=', 'OrgUser'], ['_editorTypeRaw', '=', 1]]
  },
  nullable: !0
}, {
  name: 'devModeAccountTypeRequest',
  type: {
    kind: 'object',
    name: _$$Y.AccountTypeRequest
  },
  filter: {
    and: [['requestableUserId', '=', createParentRef('id')], ['requestableUserType', '=', 'OrgUser'], ['_editorTypeRaw', '=', 2]]
  },
  nullable: !0
}, {
  name: 'fileBrowserPreferences',
  type: {
    kind: 'object',
    name: _$$Y.FileBrowserPreferences
  },
  nullable: !0,
  filter: {
    and: [['userId', '=', createParentRef('userId')], ['orgId', '=', createParentRef('orgId')]]
  }
}, {
  name: 'fileBrowserSectionPreferences',
  type: {
    kind: 'objects',
    name: _$$Y.FileBrowserSectionPreferences
  },
  nullable: !0,
  filter: {
    and: [['userId', '=', createParentRef('userId')], ['orgId', '=', createParentRef('orgId')]]
  },
  expectedMaxCount: 1e3
}, {
  name: 'favoritedResources',
  type: {
    kind: 'objects',
    name: _$$Y.FavoritedResource
  },
  filter: {
    and: [['userId', '=', createParentRef('userId')], ['orgId', '=', createParentRef('orgId')]]
  },
  expectedMaxCount: 100,
  deprecated: {
    reason: 'Use favoritedFile, favoritedPrototype, etc',
    date: '2022-03-18'
  }
}, {
  name: 'favoritedFiles',
  type: {
    kind: 'objects',
    name: _$$Y.FavoritedFile
  },
  nullable: !0,
  filter: {
    and: [['resourceType', '=', 'file'], ['userId', '=', createParentRef('userId')], ['orgId', '=', createParentRef('orgId')]]
  },
  expectedMaxCount: 1e3
}, {
  name: 'favoritedPrototypes',
  type: {
    kind: 'objects',
    name: _$$Y.FavoritedPrototype
  },
  nullable: !0,
  filter: {
    and: [['resourceType', '=', 'prototype'], ['userId', '=', createParentRef('userId')], ['orgId', '=', createParentRef('orgId')]]
  },
  expectedMaxCount: 100
}, {
  name: 'favoritedProjects',
  type: {
    kind: 'objects',
    name: _$$Y.FavoritedProject
  },
  nullable: !0,
  filter: {
    and: [['resourceType', '=', 'folder'], ['userId', '=', createParentRef('userId')], ['orgId', '=', createParentRef('orgId')]]
  },
  expectedMaxCount: 2e3
}, {
  name: 'favoritedTeams',
  type: {
    kind: 'objects',
    name: _$$Y.FavoritedTeam
  },
  nullable: !0,
  filter: {
    and: [['resourceType', '=', 'team'], ['userId', '=', createParentRef('userId')], ['orgId', '=', createParentRef('orgId')]]
  },
  expectedMaxCount: 2e3
}, {
  name: 'favoritedWorkspaces',
  type: {
    kind: 'objects',
    name: _$$Y.FavoritedWorkspace
  },
  nullable: !0,
  filter: {
    and: [['resourceType', '=', 'workspace'], ['userId', '=', createParentRef('userId')], ['orgId', '=', createParentRef('orgId')]]
  },
  expectedMaxCount: 1e3
}, {
  name: 'userSidebarSections',
  type: {
    kind: 'objects',
    name: _$$Y.UserSidebarSection
  },
  nullable: !0,
  filter: {
    and: [['userId', '=', createParentRef('userId')], ['orgId', '=', createParentRef('orgId')], ['teamId', '=', null]]
  },
  expectedMaxCount: 1e3
}, {
  name: 'recentSearches',
  type: {
    kind: 'objects',
    name: _$$Y.RecentSearch
  },
  nullable: !0,
  filter: {
    and: [['userId', '=', createParentRef('userId')], ['orgId', '=', createParentRef('orgId')]]
  },
  expectedMaxCount: 100
}, {
  name: 'pluginRequests',
  type: {
    kind: 'objects',
    name: _$$Y.PluginRequest
  },
  nullable: !0,
  filter: ['orgUserId', '=', createParentRef('id')],
  expectedMaxCount: 200
}, {
  name: 'orgUserFlag',
  type: {
    kind: 'object',
    name: _$$Y.OrgUserEvent
  },
  args: [{
    name: 'eventType',
    type: {
      kind: 'string'
    }
  }],
  filter: {
    and: [['orgUserId', '=', createParentRef('id')], ['eventType', '=', createFieldRef('eventType')]]
  },
  nullable: !0,
  expectedMaxCount: 1
}, {
  name: 'firstDevModeAccountTypeRequestCreatedAt',
  type: {
    kind: 'datetime'
  },
  computed: !0,
  nullable: !0,
  dependencies: {
    orgUserFlag: [{
      eventType: 'first_dev_mode_account_type_request_created'
    }, {
      createdAt: NULL_FIELD_REF
    }]
  }
}, {
  name: 'activeSeatTypeUpgrade',
  type: {
    kind: 'object',
    name: _$$Y.OrgUserUpgrade
  },
  orderBy: [['createdAt', 'DESC']],
  filter: {
    and: [['orgUserId', '=', createParentRef('id')], ['downgradedAt', '=', null], {
      or: [['billableProductKey', '=', 'collaborator'], ['billableProductKey', '=', 'developer'], ['billableProductKey', '=', 'expert'], ['billableProductKey', '=', 'content']]
    }]
  },
  nullable: !0,
  expectedMaxCount: 1,
  shadowCheckCanRead: {
    userId: createSessionRef('userId')
  }
}, {
  name: 'licenseTypes',
  type: {
    kind: 'list',
    ofType: {
      kind: 'enum',
      name: 'LicenseType'
    }
  },
  computed: !0,
  dependencies: {
    activeSeatTypeUpgrade: {
      billableProduct: {
        licenseTypes: NULL_FIELD_REF
      }
    }
  },
  nullable: !0
}, {
  name: 'latestProvisionalAccess',
  type: {
    kind: 'object',
    name: _$$Y.ProvisionalAccess
  },
  orderBy: [['endsAt', 'DESC']],
  filter: {
    and: [['planUserId', '=', createParentRef('id')], ['deactivatedAt', '=', null]]
  },
  nullable: !0,
  expectedMaxCount: 1
}, {
  name: 'isLicenseGroupAdmin',
  type: {
    kind: 'bool'
  },
  computed: !0,
  dependencies: {
    licenseGroupAdmins: {
      id: NULL_FIELD_REF
    },
    licenseGroupAdminExists: NULL_FIELD_REF
  }
}, {
  name: 'licenseGroupAdminExists',
  type: {
    kind: 'bool'
  },
  computed: !0,
  dependencies: {
    licenseGroupAdmins: {
      id: NULL_FIELD_REF
    }
  },
  bannedFromViews: !0
}, {
  name: 'pendingAccountTypeRequests',
  type: {
    kind: 'objects',
    name: _$$Y.AccountTypeRequest
  },
  filter: {
    and: [['requestableUserId', '=', createParentRef('id')], ['requestableUserType', '=', 'OrgUser'], ['status', '=', 'pending']]
  },
  nullable: !0,
  expectedMaxCount: 100
}, {
  name: 'currentSeat',
  type: {
    kind: 'object',
    name: _$$Y.Seat
  },
  filter: {
    and: [['currentPlanUserId', '=', createParentRef('id')], ['currentPlanUserType', '=', 'OrgUser'], ['deprovisionedAt', '=', null]]
  },
  nullable: !0
}, {
  name: 'provisionalAccesses',
  type: {
    kind: 'objects',
    name: _$$Y.ProvisionalAccess
  },
  filter: {
    and: [['planUserId', '=', createParentRef('id')], ['planUserType', '=', 'OrgUser']]
  },
  nullable: !0,
  expectedMaxCount: 10
}, {
  name: 'orgUserDowngrades',
  type: {
    kind: 'objects',
    name: _$$Y.OrgUserUpgrade
  },
  nullable: !0,
  filter: {
    and: [['orgUserId', '=', createParentRef('id')], ['downgradedAt', '<>', null]]
  },
  expectedMaxCount: 1e3,
  shadowCheckCanRead: {
    userId: createSessionRef('userId')
  }
}, {
  name: 'planUserMembershipRecord',
  type: {
    kind: 'object',
    name: _$$Y.PlanUserMembershipRecord
  },
  nullable: !0,
  filter: {
    and: [['planParentType', '=', 'Org'], ['planUserId', '=', createParentRef('id')]]
  }
}, C];
let D = {
  name: _$$Y.BaseOrgUser,
  permissionRequired: !1,
  fields: [...O, {
    name: 'user',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    filter: ['id', '=', createParentRef('userId')]
  }, {
    name: 'org',
    type: {
      kind: 'object',
      name: _$$Y.OrgInfo
    },
    filter: ['id', '=', createParentRef('orgId')],
    nullable: !0
  }, {
    name: 'designUserUpgrades',
    type: {
      kind: 'objects',
      name: _$$Y.OrgUserUpgrade
    },
    nullable: !0,
    checkCanRead: {
      userId: createFieldRef('userId')
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    filter: {
      and: [['_editorTypeRaw', '=', 0], ['orgUserId', '=', createParentRef('id')]]
    },
    orderBy: [['createdAt', 'DESC']],
    expectedMaxCount: 1e3
  }, {
    name: 'whiteboardUserUpgrades',
    type: {
      kind: 'objects',
      name: _$$Y.OrgUserUpgrade
    },
    nullable: !0,
    checkCanRead: {
      userId: createFieldRef('userId')
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    filter: {
      and: [['_editorTypeRaw', '=', 1], ['orgUserId', '=', createParentRef('id')]]
    },
    orderBy: [['createdAt', 'DESC']],
    expectedMaxCount: 1e3
  }, {
    name: 'mostRecentDesignUserUpgrade',
    type: {
      kind: 'object',
      name: _$$Y.OrgUserUpgrade
    },
    nullable: !0,
    checkCanRead: {
      userId: createFieldRef('userId')
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    filter: {
      and: [['_editorTypeRaw', '=', 0], ['orgUserId', '=', createParentRef('id')]]
    },
    orderBy: [['createdAt', 'DESC']],
    expectedMaxCount: 1
  }, {
    name: 'mostRecentWhiteboardUserUpgrade',
    type: {
      kind: 'object',
      name: _$$Y.OrgUserUpgrade
    },
    nullable: !0,
    checkCanRead: {
      userId: createFieldRef('userId')
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    filter: {
      and: [['_editorTypeRaw', '=', 1], ['orgUserId', '=', createParentRef('id')]]
    },
    orderBy: [['createdAt', 'DESC']],
    expectedMaxCount: 1
  }, {
    name: 'mostRecentDevModeUserUpgrade',
    type: {
      kind: 'object',
      name: _$$Y.OrgUserUpgrade
    },
    nullable: !0,
    checkCanRead: {
      userId: createFieldRef('userId')
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    filter: {
      and: [['_editorTypeRaw', '=', 2], ['orgUserId', '=', createParentRef('id')]]
    },
    orderBy: [['createdAt', 'DESC']],
    expectedMaxCount: 1
  }, {
    name: 'devModeBetaUsedEvent',
    type: {
      kind: 'object',
      name: _$$Y.OrgUserEvent
    },
    filter: {
      and: [['orgUserId', '=', createParentRef('id')], ['eventType', '=', 'dev_mode_beta_used']]
    },
    expectedMaxCount: 1,
    nullable: !0
  }, {
    name: 'isMfaRestricted',
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      org: {
        mfaRequired: NULL_FIELD_REF,
        isOrgGuestMfaForGoogleSsoEnabled: NULL_FIELD_REF,
        isOrgGuestMfaForSamlSsoEnabled: NULL_FIELD_REF
      },
      permission: NULL_FIELD_REF,
      user: {
        twoFactorEnabled: NULL_FIELD_REF,
        ssoOnly: [{
          userId: createViewRef('userId')
        }, NULL_FIELD_REF],
        googleSsoOnly: [{
          userId: createViewRef('userId')
        }, NULL_FIELD_REF],
        samlSsoOnly: [{
          userId: createViewRef('userId')
        }, NULL_FIELD_REF]
      }
    }
  }]
};
let L = {
  name: _$$Y.BillingTrial,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'deactivatedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'trialPeriodStart',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'trialPeriodEnd',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'resourceType',
    type: {
      kind: 'enum',
      name: 'BillingTrialResourceType'
    }
  }, {
    name: 'resourceId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'trialType',
    type: {
      kind: 'enum',
      name: 'BillingTrialType'
    }
  }, {
    name: 'status',
    type: {
      kind: 'enum',
      name: 'BillingTrialStatus'
    },
    computed: !0,
    dependencies: {
      deactivatedAt: NULL_FIELD_REF,
      trialPeriodEnd: NULL_FIELD_REF,
      metadata: NULL_FIELD_REF,
      periodicUpdateField: {
        refreshValue: NULL_FIELD_REF
      }
    }
  }, {
    name: 'planType',
    type: {
      kind: 'enum',
      name: 'BillingTrialPlanType'
    },
    nullable: !0
  }, {
    name: 'productLicenseTypes',
    type: {
      kind: 'list',
      ofType: {
        kind: 'enum',
        name: 'LicenseType'
      }
    },
    nullable: !0
  }, {
    name: 'metadata',
    type: {
      kind: 'map',
      valueType: {
        kind: 'string'
      }
    },
    nullable: !0,
    typechecked: !1
  }, {
    name: 'periodicUpdateField',
    type: {
      kind: 'object',
      name: _$$Y.PeriodicUpdate
    },
    nullable: !0,
    resolver: {
      type: 'PeriodicUpdate'
    }
  }]
};
let F = {
  name: _$$Y.Checkpoint,
  embedded: !0,
  permissionRequired: !1,
  fields: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }]
};
let M = {
  name: _$$Y.CodeConnect,
  naturalKey: new Set(['fileKey', 'id']),
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    },
    typechecked: !1
  }, {
    name: 'nodeId',
    type: {
      kind: 'string'
    }
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    },
    bannedFromViews: !0
  }, {
    name: 'figmadoc',
    type: {
      kind: 'string'
    }
  }, {
    name: 'instanceFigmadocs',
    type: {
      kind: 'map',
      valueType: {
        kind: 'string'
      }
    },
    nullable: !0
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'label',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'type',
    type: {
      kind: 'string'
    },
    nullable: !0
  }]
};
let j = {
  name: _$$Y.CodeExtensionLanguage,
  embedded: !0,
  permissionRequired: !1,
  fields: [{
    name: 'type',
    type: {
      kind: 'enum',
      name: 'CodeExtensionLanguageType'
    }
  }, {
    name: 'id',
    type: {
      kind: 'string'
    }
  }, {
    name: 'pluginLanguage',
    type: {
      kind: 'string'
    },
    nullable: !0
  }]
};
let U = {
  name: _$$Y.CodeExtensionPreferences,
  embedded: !0,
  permissionRequired: !1,
  fields: [{
    name: 'scaleFactor',
    type: {
      kind: 'float'
    },
    nullable: !0
  }, {
    name: 'unit',
    type: {
      kind: 'enum',
      name: 'DimensionUnit'
    },
    nullable: !0
  }, {
    name: 'customSettings',
    type: {
      kind: 'map',
      valueType: {
        kind: 'string'
      }
    },
    nullable: !0
  }]
};
let B = {
  name: _$$Y.ColorPalette,
  permissionRequired: !0,
  naturalKey: new Set(['uuid']),
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'name',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'creatorId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'baseColors',
    type: {
      kind: 'list',
      ofType: {
        kind: 'string'
      }
    }
  }, {
    name: 'uuid',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'team',
    type: {
      kind: 'object',
      name: _$$Y.Team
    },
    nullable: !0,
    filter: ['id', '=', createParentRef('teamId')],
    bannedFromViews: !0
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      team: {
        orgId: NULL_FIELD_REF
      }
    }
  }, {
    name: 'isTeamDefault',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      uuid: NULL_FIELD_REF,
      team: {
        defaultColorPaletteUuid: NULL_FIELD_REF
      }
    }
  }]
};
let V = {
  name: _$$Y.Comment,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'uuid',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'key',
    type: {
      kind: 'string'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'parentId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'orderId',
    type: {
      kind: 'int'
    },
    nullable: !0
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'resolvedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'deletedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'clientMeta',
    type: {
      kind: 'object',
      name: _$$Y.CommentClientMeta
    },
    embedded: !0,
    nullable: !0
  }, {
    name: 'messageMeta',
    type: {
      kind: 'objects',
      name: _$$Y.CommentMessageMeta
    },
    embedded: !0
  }, {
    name: 'messageMetaStylized',
    type: {
      kind: 'objects',
      name: _$$Y.CommentMessageMeta
    },
    embedded: !0,
    nullable: !0
  }, {
    name: 'thumbnailUrl',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'user',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    filter: ['id', '=', createParentRef('userId')]
  }, {
    name: 'attachments',
    type: {
      kind: 'objects',
      name: _$$Y.CommentAttachment
    },
    filter: ['fileCommentId', '=', createParentRef('id')],
    expectedMaxCount: 5
  }, {
    name: 'reactions',
    type: {
      kind: 'objects',
      name: _$$Y.CommentReaction
    },
    filter: ['fileCommentId', '=', createParentRef('id')],
    expectedMaxCount: 200
  }, {
    name: 'isCanvasMention',
    type: {
      kind: 'bool'
    },
    nullable: !0
  }, {
    name: 'commentPin',
    type: {
      kind: 'object',
      name: _$$Y.CommentPin
    },
    filter: {
      and: [['fileKey', '=', createParentRef('key')], ['fileCommentId', '=', createParentRef('id')]]
    },
    nullable: !0
  }, {
    name: 'filePrototypeInfo',
    type: {
      kind: 'object',
      name: _$$Y.FilePrototypeInfo
    },
    filter: ['key', '=', createParentRef('key')],
    bannedFromViews: !0
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'sessionId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }, {
      name: 'anonymousUserId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      filePrototypeInfo: {
        canViewPrototypeV3: [{
          userId: createViewRef('userId'),
          sessionId: createViewRef('sessionId'),
          anonymousUserId: createViewRef('anonymousUserId')
        }, NULL_FIELD_REF]
      }
    }
  }]
};
let G = {
  name: _$$Y.CommentAttachment,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'fileCommentId',
    type: {
      kind: 'bigint'
    },
    nullable: !0,
    typechecked: !1
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'type',
    type: {
      kind: 'string'
    },
    computed: !0,
    dependencies: {
      mediaType: NULL_FIELD_REF
    }
  }, {
    name: 'mediaType',
    type: {
      kind: 'string'
    }
  }, {
    name: 'altText',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'thumbnailSha1',
    type: {
      kind: 'string'
    }
  }, {
    name: 'thumbnailUrl',
    type: {
      kind: 'string'
    },
    computed: !0,
    dependencies: {
      id: NULL_FIELD_REF,
      fileCommentId: NULL_FIELD_REF,
      locality: NULL_FIELD_REF
    }
  }, {
    name: 'imageSha1',
    type: {
      kind: 'string'
    }
  }, {
    name: 'imageUrl',
    type: {
      kind: 'string'
    },
    computed: !0,
    dependencies: {
      id: NULL_FIELD_REF,
      fileCommentId: NULL_FIELD_REF,
      locality: NULL_FIELD_REF
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'uploadedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'deletedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'metadata',
    type: {
      kind: 'object',
      name: _$$Y.CommentAttachmentMetadata
    },
    embedded: !0
  }, {
    name: 'locality',
    type: {
      kind: 'string'
    }
  }]
};
let z = {
  name: _$$Y.CommentAttachmentMetadata,
  embedded: !0,
  permissionRequired: !1,
  fields: [{
    name: 'file_name',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'dimensions',
    type: {
      kind: 'object',
      name: _$$Y.Dimensions
    },
    nullable: !0,
    embedded: !0
  }, {
    name: 'thumbnail_dimensions',
    type: {
      kind: 'object',
      name: _$$Y.Dimensions
    },
    nullable: !0,
    embedded: !0
  }]
};
let H = {
  name: _$$Y.CommentClientMeta,
  embedded: !0,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    },
    typechecked: !1
  }, {
    name: 'x',
    type: {
      kind: 'int'
    },
    typechecked: !1
  }, {
    name: 'y',
    type: {
      kind: 'int'
    },
    typechecked: !1
  }, {
    name: 'nodeId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'pageId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'nodeOffset',
    type: {
      kind: 'object',
      name: _$$Y.Vector
    },
    nullable: !0,
    embedded: !0
  }, {
    name: 'inFrame',
    type: {
      kind: 'bool'
    },
    nullable: !0
  }, {
    name: 'selectionBoxAnchor',
    type: {
      kind: 'object',
      name: _$$Y.Vector
    },
    nullable: !0,
    embedded: !0
  }, {
    name: 'stablePath',
    type: {
      kind: 'list',
      ofType: {
        kind: 'string'
      }
    },
    nullable: !0
  }]
};
let W = {
  name: _$$Y.CommentMessageMeta,
  embedded: !0,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    },
    typechecked: !1
  }, {
    name: 't',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'user',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    filter: ['id', '=', createParentRef('userId')],
    nullable: !0,
    typechecked: !1
  }, {
    name: 'link',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'isHashtag',
    type: {
      kind: 'bool'
    },
    nullable: !0
  }, {
    name: 'styles',
    type: {
      kind: 'list',
      ofType: {
        kind: 'string'
      }
    },
    nullable: !0
  }, {
    name: 'children',
    type: {
      kind: 'objects',
      name: _$$Y.CommentMessageMeta
    },
    embedded: !0,
    nullable: !0
  }]
};
let K = {
  name: _$$Y.CommentPin,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    },
    bannedFromViews: !0
  }, {
    name: 'fileCommentId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }]
};
let Y = {
  name: _$$Y.CommentReaction,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'fileCommentId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'emoji',
    type: {
      kind: 'string'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'user',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    filter: ['id', '=', createParentRef('userId')]
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'sortTimestamp',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }]
};
let q = {
  name: _$$Y.CommentReadStatus,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'allReadAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'readComments',
    type: {
      kind: 'map',
      valueType: {
        kind: 'string'
      }
    }
  }, {
    name: 'unreadComments',
    type: {
      kind: 'map',
      valueType: {
        kind: 'string'
      }
    },
    typechecked: !1
  }]
};
let $ = {
  name: _$$Y.CommunityBadge,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'pluginId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'hubFileId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'widgetId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'profileId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'badgeType',
    type: {
      kind: 'string'
    }
  }, {
    name: 'profile',
    nullable: !0,
    type: {
      kind: 'objects',
      name: _$$Y.Profile
    },
    filter: ['id', '=', createParentRef('profileId')],
    expectedMaxCount: 200
  }]
};
let Z = {
  name: _$$Y.CommunityComment,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'profileId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'resourceVersionId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'pluginId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'hubFileId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'editedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'ratingValue',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'message',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'messageMeta',
    type: {
      kind: 'objects',
      name: _$$Y.CommentMessageMeta
    },
    embedded: !0,
    deprecated: {
      reason: 'Use communityMessageMeta instead',
      date: '2023-05-17'
    }
  }, {
    name: 'communityMessageMeta',
    type: {
      kind: 'objects',
      name: _$$Y.CommunityCommentMessageMeta
    },
    embedded: !0,
    nullable: !0
  }, {
    name: 'profile',
    type: {
      kind: 'object',
      name: _$$Y.Profile
    },
    filter: ['id', '=', createParentRef('profileId')]
  }, {
    name: 'plugin',
    type: {
      kind: 'object',
      name: _$$Y.Plugin
    },
    filter: ['id', '=', createParentRef('pluginId')],
    nullable: !0
  }, {
    name: 'hubFile',
    type: {
      kind: 'object',
      name: _$$Y.HubFile
    },
    filter: ['id', '=', createParentRef('hubFileId')],
    nullable: !0
  }]
};
let X = {
  name: _$$Y.CommunityCommentMessageMeta,
  embedded: !0,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 't',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'link',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'styles',
    type: {
      kind: 'list',
      ofType: {
        kind: 'string'
      }
    },
    nullable: !0
  }, {
    name: 'profileId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'children',
    type: {
      kind: 'objects',
      name: _$$Y.CommunityCommentMessageMeta
    },
    embedded: !0,
    nullable: !0
  }]
};
let Q = {
  name: _$$Y.CommunityHubFollow,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'followerProfileId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'followedProfileId',
    type: {
      kind: 'bigint'
    }
  }]
};
let J = {
  name: _$$Y.CommunityHubLike,
  permissionRequired: !0,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'pluginId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'hubFileId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'resourceId',
    type: {
      kind: 'uuid'
    },
    nullable: !0
  }, {
    name: 'profileId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'hiddenAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'currentUser',
    nullable: !0,
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    filter: ['id', '=', createFieldRef('userId')]
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'profileId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      currentUser: [{
        userId: createFieldRef('userId')
      }, {
        id: NULL_FIELD_REF,
        profileId: NULL_FIELD_REF
      }]
    }
  }]
};
let ee = [{
  name: 'id',
  type: {
    kind: 'bigint'
  }
}, {
  name: 'fileKey',
  type: {
    kind: 'string'
  }
}, {
  name: 'updatedAt',
  type: {
    kind: 'datetime'
  }
}, {
  name: 'createdAt',
  type: {
    kind: 'datetime'
  }
}, {
  name: 'numComponents',
  type: {
    kind: 'int'
  },
  nullable: !0
}, {
  name: 'numStateGroups',
  type: {
    kind: 'int'
  },
  nullable: !0
}, {
  name: 'numStyles',
  type: {
    kind: 'int'
  },
  nullable: !0
}, {
  name: 'numStylesFill',
  type: {
    kind: 'int'
  },
  nullable: !0
}, {
  name: 'numStylesText',
  type: {
    kind: 'int'
  },
  nullable: !0
}, {
  name: 'numStylesEffect',
  type: {
    kind: 'int'
  },
  nullable: !0
}, {
  name: 'numStylesGrid',
  type: {
    kind: 'int'
  },
  nullable: !0
}, {
  name: 'numVariables',
  type: {
    kind: 'int'
  },
  nullable: !0
}, {
  name: 'numVariablesBoolean',
  type: {
    kind: 'int'
  },
  nullable: !0
}, {
  name: 'numVariablesColor',
  type: {
    kind: 'int'
  },
  nullable: !0
}, {
  name: 'numVariablesFloat',
  type: {
    kind: 'int'
  },
  nullable: !0
}, {
  name: 'numVariablesString',
  type: {
    kind: 'int'
  },
  nullable: !0
}, {
  name: 'numVariableSets',
  type: {
    kind: 'int'
  },
  nullable: !0
}, {
  name: 'numModuleAssets',
  type: {
    kind: 'int'
  },
  nullable: !0
}, {
  name: 'numLibraryAssets',
  type: {
    kind: 'int'
  },
  nullable: !0
}];
let et = {
  name: _$$Y.CommunityLibrary,
  naturalKey: new Set(['fileKey', 'id']),
  permissionRequired: !1,
  fields: [...ee, {
    name: 'hubFileId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'hubFile',
    type: {
      kind: 'object',
      name: _$$Y.HubFile
    },
    filter: ['id', '=', createParentRef('hubFileId')]
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      hubFile: {
        canRead: [{
          userId: createViewRef('userId')
        }, NULL_FIELD_REF]
      }
    }
  }, {
    name: 'name',
    type: {
      kind: 'string'
    },
    computed: !0,
    dependencies: {
      hubFile: {
        currentHubFileVersion: {
          name: NULL_FIELD_REF
        }
      }
    }
  }, {
    name: 'libraryHierarchyPaths',
    type: {
      kind: 'objects',
      name: _$$Y.LibraryHierarchyPath
    },
    args: [{
      name: 'initialPageSize',
      type: {
        kind: 'int'
      }
    }],
    filter: ['hubFileId', '=', createParentRef('hubFileId')],
    expectedMaxCount: 1e4
  }, {
    name: 'variableCollections',
    type: {
      kind: 'objects',
      name: _$$Y.VariableSet
    },
    filter: {
      and: [['unpublishedAt', '=', null], ['hubFileId', '=', createParentRef('hubFileId')]]
    },
    args: [{
      name: 'initialPageSize',
      type: {
        kind: 'int'
      }
    }],
    expectedMaxCount: 1e4
  }, {
    name: 'components',
    type: {
      kind: 'objects',
      name: _$$Y.Component
    },
    filter: {
      and: [['unpublishedAt', '=', null], ['hubFileId', '=', createParentRef('hubFileId')]]
    },
    args: [{
      name: 'initialPageSize',
      type: {
        kind: 'int'
      }
    }],
    expectedMaxCount: 1e4
  }, {
    name: 'stateGroups',
    type: {
      kind: 'objects',
      name: _$$Y.StateGroup
    },
    filter: {
      and: [['unpublishedAt', '=', null], ['hubFileId', '=', createParentRef('hubFileId')]]
    },
    args: [{
      name: 'initialPageSize',
      type: {
        kind: 'int'
      }
    }],
    expectedMaxCount: 1e4
  }, {
    name: 'modules',
    type: {
      kind: 'objects',
      name: _$$Y.Module
    },
    filter: {
      and: [['unpublishedAt', '=', null], ['hubFileId', '=', createParentRef('hubFileId')]]
    },
    args: [{
      name: 'initialPageSize',
      type: {
        kind: 'int'
      }
    }],
    expectedMaxCount: 1e4
  }, {
    name: 'libraryKeyToFile',
    type: {
      kind: 'object',
      name: _$$Y.LibraryKeyToFile
    },
    filter: ['hubFileId', '=', createParentRef('hubFileId')],
    nullable: !0
  }, {
    name: 'libraryKey',
    type: {
      kind: 'string'
    },
    computed: !0,
    dependencies: {
      libraryKeyToFile: {
        libraryKey: NULL_FIELD_REF
      }
    }
  }]
};
let ei = [{
  name: 'hubFileId',
  type: {
    kind: 'bigint'
  }
}, {
  name: 'communityLibrary',
  type: {
    kind: 'object',
    name: _$$Y.CommunityLibrary
  },
  filter: ['hubFileId', '=', createParentRef('hubFileId')],
  nullable: !0,
  shadowCheckCanRead: {
    userId: createSessionRef('userId')
  }
}];
let en = [{
  name: 'id',
  type: {
    kind: 'bigint'
  }
}, {
  name: 'fileKey',
  type: {
    kind: 'string'
  },
  bannedFromViews: !0
}, {
  name: 'isSubscribed',
  type: {
    kind: 'bool'
  }
}];
let er = {
  name: _$$Y.CommunityLibraryFileSubscription,
  permissionRequired: !0,
  fields: [...en, ...ei, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      communityLibrary: {
        canRead: [{
          userId: createViewRef('userId')
        }, NULL_FIELD_REF]
      }
    }
  }]
};
let ea = {
  name: _$$Y.CommunityM10nResourceStat,
  permissionRequired: !0,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'monetizedResourceMetadataId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'allTimeTotalEarned',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'monthlyTotalEarned',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'numPurchases',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'monetizedResourceMetadata',
    type: {
      kind: 'object',
      name: _$$Y.MonetizedResourceMetadata
    },
    filter: ['id', '=', createParentRef('monetizedResourceMetadataId')]
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'sessionUserId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }, {
      name: 'monetizedResourceMetadataId',
      type: {
        kind: 'bigint'
      }
    }],
    computed: !0,
    dependencies: {
      monetizedResourceMetadata: {
        id: NULL_FIELD_REF,
        hubFileId: NULL_FIELD_REF,
        pluginId: NULL_FIELD_REF,
        widgetId: NULL_FIELD_REF,
        hubFile: {
          profile: {
            associatedUsers: {
              id: NULL_FIELD_REF
            }
          }
        },
        plugin: {
          profile: {
            associatedUsers: {
              id: NULL_FIELD_REF
            }
          }
        },
        widget: {
          profile: {
            associatedUsers: {
              id: NULL_FIELD_REF
            }
          }
        }
      }
    }
  }]
};
let es = {
  name: _$$Y.CommunityPublisher,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'isPending',
    type: {
      kind: 'bool'
    }
  }, {
    name: 'profileId',
    type: {
      kind: 'bigint'
    },
    typechecked: !1
  }, {
    name: 'pluginId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'hubFileId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'role',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'profile',
    type: {
      kind: 'object',
      name: _$$Y.Profile
    },
    filter: ['id', '=', createParentRef('profileId')],
    nullable: !0
  }, {
    name: 'role',
    type: {
      kind: 'enum',
      name: 'CommunityPublisherRole'
    },
    nullable: !0
  }]
};
let eo = {
  name: _$$Y.CommunityQuickstartLibrary,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, ...ei]
};
let el = {
  name: _$$Y.CommunityRatingStats,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'hubFileId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'pluginId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'widgetId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'oneStars',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'twoStars',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'threeStars',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'fourStars',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'fiveStars',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'totalRatings',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'avgRating',
    type: {
      kind: 'float'
    },
    nullable: !0
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }]
};
let ed = {
  name: _$$Y.CommunityResourcePayment,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'monetizedResourceMetadataId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'status',
    type: {
      kind: 'int'
    }
  }, {
    name: 'statusEnum',
    type: {
      kind: 'enum',
      name: 'CommunityResourcePaymentStatus'
    },
    computed: !0,
    dependencies: {
      status: NULL_FIELD_REF
    }
  }, {
    name: 'subscriptionExpiresAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'subscriptionCanceledAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'purchasedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'refundReason',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'subscriptionInterval',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      userId: NULL_FIELD_REF
    }
  }]
};
let ec = {
  id: NULL_FIELD_REF,
  canView: [{
    userId: createViewRef('userId')
  }, NULL_FIELD_REF],
  trashedAt: NULL_FIELD_REF
};
let eu = [{
  name: 'fileKey',
  type: {
    kind: 'string'
  },
  bannedFromViews: !0
}, {
  name: 'hubFileId',
  type: {
    kind: 'bigint'
  },
  nullable: !0
}, {
  name: 'libraryKeyToFile',
  type: {
    kind: 'object',
    name: _$$Y.LibraryKeyToFile
  },
  filter: ['fileKey', '=', createParentRef('fileKey')],
  nullable: !0
}, {
  name: 'libraryKey',
  type: {
    kind: 'string'
  },
  computed: !0,
  nullable: !0,
  dependencies: {
    libraryKeyToFile: {
      libraryKey: NULL_FIELD_REF
    }
  }
}, {
  name: 'userFacingVersion',
  type: {
    kind: 'string'
  }
}, {
  name: 'id',
  type: {
    kind: 'bigint'
  }
}, {
  name: 'name',
  type: {
    kind: 'string'
  }
}, {
  name: 'description',
  type: {
    kind: 'string'
  },
  nullable: !0
}, {
  name: 'nodeId',
  type: {
    kind: 'string'
  }
}, {
  name: 'userId',
  type: {
    kind: 'string'
  }
}, {
  name: 'createdAt',
  type: {
    kind: 'datetime'
  }
}, {
  name: 'updatedAt',
  type: {
    kind: 'datetime'
  }
}, {
  name: 'unpublishedAt',
  type: {
    kind: 'datetime'
  },
  nullable: !0
}, {
  name: 'checkpoint',
  type: {
    kind: 'object',
    name: _$$Y.Checkpoint
  },
  embedded: !0,
  typechecked: !1
}, {
  name: 'file',
  type: {
    kind: 'object',
    name: _$$Y.File
  },
  filter: ['key', '=', createParentRef('fileKey')],
  nullable: !0,
  checkCanRead: {
    userId: createSessionRef('userId')
  }
}, {
  name: 'hubFile',
  type: {
    kind: 'object',
    name: _$$Y.HubFile
  },
  filter: ['id', '=', createParentRef('hubFileId')],
  nullable: !0,
  checkCanRead: {
    userId: createSessionRef('userId')
  }
}, {
  name: 'user',
  type: {
    kind: 'object',
    name: _$$Y.User
  },
  filter: ['id', '=', createParentRef('userId')],
  nullable: !0
}, {
  name: 'canRead',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  dependencies: {
    unpublishedAt: NULL_FIELD_REF,
    hubFile: {
      id: NULL_FIELD_REF,
      unpublishedAt: NULL_FIELD_REF,
      canRead: [{
        userId: createViewRef('userId')
      }, NULL_FIELD_REF]
    },
    file: {
      ...ec
    }
  }
}];
let ep = [...eu, {
  name: 'description_rt',
  type: {
    kind: 'string'
  },
  nullable: !0
}, {
  name: 'libraryHierarchyPathId',
  type: {
    kind: 'bigint'
  },
  nullable: !0
}, {
  name: 'thumbnailUrl',
  type: {
    kind: 'string'
  },
  nullable: !0
}];
let em = {
  name: 'assetAttribution',
  type: {
    kind: 'object',
    name: _$$Y.AssetAttribution
  },
  computed: !0,
  nullable: !0,
  dependencies: {
    hubFile: {
      profile: {
        id: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        profileHandle: NULL_FIELD_REF,
        imgUrl: NULL_FIELD_REF
      }
    },
    user: {
      id: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      handle: NULL_FIELD_REF,
      imgUrl: NULL_FIELD_REF
    }
  }
};
let eh = {
  name: _$$Y.Component,
  naturalKey: new Set(['componentKey']),
  permissionRequired: !1,
  fields: [...ep, {
    name: 'checkpointId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'componentKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'destinationKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    },
    bannedFromViews: !0
  }, {
    name: 'contentHash',
    type: {
      kind: 'string'
    }
  }, {
    name: 'minNodeWidth',
    type: {
      kind: 'int'
    },
    nullable: !0
  }, {
    name: 'minNodeHeight',
    type: {
      kind: 'int'
    },
    nullable: !0
  }, {
    name: 'containingFrame',
    type: {
      kind: 'object',
      name: _$$Y.LibraryItemContainingFrame
    },
    embedded: !0,
    nullable: !0
  }, {
    name: 'sortPosition',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'hasVideo',
    type: {
      kind: 'bool'
    },
    nullable: !0
  }, {
    name: 'libraryResourceId',
    type: {
      kind: 'string'
    },
    computed: !0,
    dependencies: {
      fileKey: NULL_FIELD_REF,
      hubFileId: NULL_FIELD_REF
    }
  }, em]
};
let eg = {
  name: _$$Y.ConfirmedRenewalSeatCount,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'planParentId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'planParentType',
    type: {
      kind: 'string'
    }
  }, {
    name: 'billingInterval',
    type: {
      kind: 'enum',
      name: 'BillingInterval'
    }
  }, {
    name: 'billableProductKey',
    type: {
      kind: 'enum',
      name: 'BillableProductKey'
    }
  }, {
    name: 'billingPeriodStart',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'processedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'surplusSeatCount',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'totalSeatCount',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'confirmedById',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }]
};
let ef = {
  name: _$$Y.TeamComponentUpdate,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'componentKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'updateType',
    type: {
      kind: 'string'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'component',
    type: {
      kind: 'object',
      name: _$$Y.Component
    },
    filter: ['componentKey', '=', createParentRef('componentKey')],
    nullable: !0,
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'destinationKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'libraryKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'nodeId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }]
};
let e_ = {
  name: _$$Y.ProjectComponentUpdate,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'componentKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'updateType',
    type: {
      kind: 'string'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'component',
    type: {
      kind: 'object',
      name: _$$Y.Component
    },
    filter: ['componentKey', '=', createParentRef('componentKey')],
    nullable: !0,
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'destinationKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'libraryKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'nodeId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }]
};
let eA = {
  name: _$$Y.FileComponentUpdate,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'componentKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'updateType',
    type: {
      kind: 'string'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'component',
    type: {
      kind: 'object',
      name: _$$Y.Component
    },
    filter: ['componentKey', '=', createParentRef('componentKey')],
    nullable: !0,
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'destinationKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'libraryKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'nodeId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }]
};
let ey = {
  name: _$$Y.TeamStateGroupUpdate,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'updateType',
    type: {
      kind: 'string'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'stateGroup',
    type: {
      kind: 'object',
      name: _$$Y.StateGroup
    },
    filter: ['id', '=', createParentRef('id')],
    nullable: !0,
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'destinationKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'libraryKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'nodeId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'key',
    type: {
      kind: 'string'
    },
    nullable: !0
  }]
};
let eb = {
  name: _$$Y.ProjectStateGroupUpdate,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'updateType',
    type: {
      kind: 'string'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'stateGroup',
    type: {
      kind: 'object',
      name: _$$Y.StateGroup
    },
    filter: ['id', '=', createParentRef('id')],
    nullable: !0,
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'destinationKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'libraryKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'nodeId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'key',
    type: {
      kind: 'string'
    },
    nullable: !0
  }]
};
let ev = {
  name: _$$Y.FileStateGroupUpdate,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'updateType',
    type: {
      kind: 'string'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'stateGroup',
    type: {
      kind: 'object',
      name: _$$Y.StateGroup
    },
    filter: ['id', '=', createParentRef('id')],
    nullable: !0,
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'destinationKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'libraryKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'nodeId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'key',
    type: {
      kind: 'string'
    },
    nullable: !0
  }]
};
let eI = {
  name: _$$Y.DescendedRolesOnTeam,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'projectEditRoleIds',
    type: {
      kind: 'list',
      ofType: {
        kind: 'bigint'
      }
    }
  }, {
    name: 'fileEditRolesCount',
    type: {
      kind: 'int'
    }
  }, {
    name: 'teamUser',
    type: {
      kind: 'object',
      name: _$$Y.TeamUser
    },
    filter: ['id', '=', createParentRef('id')],
    nullable: !0
  }, {
    name: 'projectEditRoles',
    type: {
      kind: 'objects',
      name: _$$Y.ProjectRole
    },
    filter: {
      and: [['teamId', '=', createParentRef('teamId')], ['id', 'in', createParentRef('projectEditRoleIds')]]
    },
    expectedMaxCount: 250,
    nullable: !0
  }]
};
let eE = {
  name: _$$Y.DefaultTeam,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'resourceId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'resourceType',
    type: {
      kind: 'string'
    }
  }, {
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'team',
    type: {
      kind: 'object',
      name: _$$Y.Team
    },
    nullable: !0,
    filter: ['id', '=', createParentRef('teamId')],
    checkCanRead: {
      fieldName: 'canDiscover',
      userId: createSessionRef('userId')
    }
  }]
};
let ex = {
  name: _$$Y.DeveloperLink,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'key',
    type: {
      kind: 'string'
    }
  }, {
    name: 'linkName',
    type: {
      kind: 'string'
    }
  }, {
    name: 'linkUrl',
    type: {
      kind: 'string'
    }
  }]
};
let eS = {
  name: _$$Y.DeveloperToken,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'description',
    type: {
      kind: 'string'
    }
  }, {
    name: 'lastUsed',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'scope',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'expiresAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }]
};
let ew = {
  name: _$$Y.DeveloperRelatedLink,
  naturalKey: new Set(['fileKey', 'id']),
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'nodeId',
    type: {
      kind: 'string'
    }
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'linkName',
    type: {
      kind: 'string'
    }
  }, {
    name: 'linkUrl',
    type: {
      kind: 'string'
    }
  }, {
    name: 'linkPreviewJson',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'isUserOverride',
    type: {
      kind: 'bool'
    }
  }]
};
let eC = {
  name: _$$Y.DeviceTryFile,
  naturalKey: new Set(['fileKey']),
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'emailAddress',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'claimedByUserId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'claimedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }]
};
let eT = {
  name: _$$Y.Dimensions,
  embedded: !0,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    },
    typechecked: !1
  }, {
    name: 'width',
    type: {
      kind: 'int'
    }
  }, {
    name: 'height',
    type: {
      kind: 'int'
    }
  }]
};
let ek = {
  name: _$$Y.DiscoverableLibrary,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    },
    bannedFromViews: !0
  }, {
    name: 'library',
    type: {
      kind: 'object',
      name: _$$Y.Library
    },
    filter: {
      and: [['fileKey', '=', createParentRef('fileKey')], ['hubFileId', '=', null]]
    },
    nullable: !0,
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }]
};
let eR = {
  name: _$$Y.EduGracePeriod,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'isValid',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      createdAt: NULL_FIELD_REF
    }
  }]
};
let eN = {
  name: _$$Y.EmbeddedSCIMInfo,
  embedded: !0,
  permissionRequired: !1,
  fields: [{
    name: 'enterpriseFields',
    type: {
      kind: 'object',
      name: _$$Y.SCIMEnterpriseFields
    },
    embedded: !0,
    nullable: !0
  }, {
    name: 'figmaEnterpriseFields',
    type: {
      kind: 'object',
      name: _$$Y.SCIMFigmaEnterpriseFields
    },
    embedded: !0,
    nullable: !0
  }, {
    name: 'figmaPermission',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'figjamPermission',
    type: {
      kind: 'string'
    },
    nullable: !0,
    typechecked: !1
  }, {
    name: 'devModePermission',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'displayName',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'userName',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'name',
    type: {
      kind: 'object',
      name: _$$Y.SCIMName
    },
    nullable: !0,
    embedded: !0
  }, {
    name: 'active',
    type: {
      kind: 'bool'
    },
    nullable: !0
  }]
};
let eP = {
  name: _$$Y.EsOrgUsersInfo,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }]
};
let eO = {
  name: _$$Y.ExperimentAssignment,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'resourceId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'resourceType',
    type: {
      kind: 'string'
    }
  }, {
    name: 'experimentId',
    type: {
      kind: 'string'
    }
  }, {
    name: 'treatmentId',
    type: {
      kind: 'string'
    }
  }]
};
let eD = [{
  name: 'id',
  type: {
    kind: 'bigint'
  }
}, {
  name: 'userId',
  type: {
    kind: 'string'
  }
}, {
  name: 'orgId',
  type: {
    kind: 'string'
  },
  nullable: !0
}, {
  name: 'createdAt',
  type: {
    kind: 'datetime'
  }
}, {
  name: 'updatedAt',
  type: {
    kind: 'datetime'
  }
}, {
  name: 'resourceId',
  type: {
    kind: 'string'
  }
}, {
  name: 'resourceType',
  type: {
    kind: 'enum',
    name: 'FavoritedResourceType'
  }
}, {
  name: 'sidebarSectionId',
  type: {
    kind: 'string'
  },
  nullable: !0
}, {
  name: 'teamId',
  type: {
    kind: 'string'
  },
  nullable: !0
}];
let eL = {
  name: _$$Y.FavoritedFile,
  permissionRequired: !1,
  fields: [...eD, {
    name: 'readableFile',
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    type: {
      kind: 'object',
      name: _$$Y.File
    },
    filter: ['key', '=', createParentRef('resourceId')],
    checkCanRead: {
      fieldName: 'canAccess',
      userId: createFieldRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId'),
      linkAccessOverrideKey: null
    },
    nullable: !0
  }, {
    name: 'readableWhiteboardFile',
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    type: {
      kind: 'object',
      name: _$$Y.File
    },
    filter: {
      and: [['key', '=', createParentRef('resourceId')], ['_editorTypeRaw', '=', 1]]
    },
    checkCanRead: {
      fieldName: 'canAccess',
      userId: createFieldRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId'),
      linkAccessOverrideKey: null
    },
    nullable: !0
  }]
};
let eF = {
  name: _$$Y.FavoritedProject,
  permissionRequired: !1,
  fields: [...eD, {
    name: 'readableProject',
    type: {
      kind: 'object',
      name: _$$Y.Project
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    filter: ['id', '=', createParentRef('resourceId')],
    checkCanRead: {
      userId: createFieldRef('userId')
    },
    nullable: !0
  }]
};
let eM = {
  name: _$$Y.FavoritedPrototype,
  permissionRequired: !1,
  fields: [...eD, {
    name: 'readablePrototype',
    type: {
      kind: 'object',
      name: _$$Y.Prototype
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    filter: ['id', '=', createParentRef('resourceId')],
    checkCanRead: {
      userId: createFieldRef('userId')
    },
    nullable: !0
  }]
};
let ej = {
  name: _$$Y.FavoritedResource,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'string'
    }
  }, {
    name: 'orgId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'resourceId',
    type: {
      kind: 'string'
    }
  }, {
    name: 'resourceType',
    type: {
      kind: 'string'
    }
  }],
  deprecated: {
    reason: 'Use FavoritedFile, FavoritedPrototype, etc',
    date: '2022-03-18'
  }
};
let eU = {
  name: _$$Y.FavoritedResourceV2,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'teamId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'resourceId',
    type: {
      kind: 'string'
    }
  }, {
    name: 'resourceType',
    type: {
      kind: 'enum',
      name: 'FavoritedResourceType'
    }
  }, {
    name: 'favoritedFile',
    type: {
      kind: 'object',
      name: _$$Y.FavoritedFile
    },
    nullable: !0,
    filter: {
      and: [['resourceType', '=', 'file'], ['userId', '=', createParentRef('userId')], ['resourceId', '=', createParentRef('resourceId')]]
    }
  }, {
    name: 'favoritedPrototype',
    type: {
      kind: 'object',
      name: _$$Y.FavoritedPrototype
    },
    nullable: !0,
    filter: {
      and: [['resourceType', '=', 'prototype'], ['userId', '=', createParentRef('userId')], ['resourceId', '=', createParentRef('resourceId')]]
    }
  }, {
    name: 'favoritedProject',
    type: {
      kind: 'object',
      name: _$$Y.FavoritedProject
    },
    nullable: !0,
    filter: {
      and: [['resourceType', '=', 'folder'], ['userId', '=', createParentRef('userId')], ['resourceId', '=', createParentRef('resourceId')]]
    }
  }, {
    name: 'favoritedTeam',
    type: {
      kind: 'object',
      name: _$$Y.FavoritedTeam
    },
    nullable: !0,
    filter: {
      and: [['resourceType', '=', 'team'], ['userId', '=', createParentRef('userId')], ['resourceId', '=', createParentRef('resourceId')]]
    }
  }, {
    name: 'favoritedWorkspace',
    type: {
      kind: 'object',
      name: _$$Y.FavoritedWorkspace
    },
    nullable: !0,
    filter: {
      and: [['resourceType', '=', 'workspace'], ['userId', '=', createParentRef('userId')], ['resourceId', '=', createParentRef('resourceId')]]
    }
  }, {
    name: 'favoritedFiles',
    type: {
      kind: 'objects',
      name: _$$Y.FavoritedFile
    },
    nullable: !0,
    filter: {
      and: [['resourceType', '=', 'file'], ['userId', '=', createParentRef('id')], ['orgId', '=', createParentRef('orgId')], ['teamId', '=', createParentRef('teamId')]]
    },
    expectedMaxCount: 1e3
  }, {
    name: 'favoritedPrototypes',
    type: {
      kind: 'objects',
      name: _$$Y.FavoritedPrototype
    },
    nullable: !0,
    filter: {
      and: [['resourceType', '=', 'prototype'], ['userId', '=', createParentRef('userId')], ['orgId', '=', createParentRef('orgId')], ['teamId', '=', createParentRef('teamId')]]
    },
    expectedMaxCount: 100
  }, {
    name: 'favoritedProjects',
    type: {
      kind: 'objects',
      name: _$$Y.FavoritedProject
    },
    nullable: !0,
    filter: {
      and: [['resourceType', '=', 'folder'], ['userId', '=', createParentRef('userId')], ['orgId', '=', createParentRef('orgId')], ['teamId', '=', createParentRef('teamId')]]
    },
    expectedMaxCount: 2e3
  }, {
    name: 'favoritedTeams',
    type: {
      kind: 'objects',
      name: _$$Y.FavoritedTeam
    },
    nullable: !0,
    filter: {
      and: [['resourceType', '=', 'team'], ['userId', '=', createParentRef('userId')], ['orgId', '=', createParentRef('orgId')]]
    },
    expectedMaxCount: 2e3
  }, {
    name: 'favoritedWorkspaces',
    type: {
      kind: 'objects',
      name: _$$Y.FavoritedWorkspace
    },
    nullable: !0,
    filter: {
      and: [['resourceType', '=', 'workspace'], ['userId', '=', createParentRef('userId')], ['orgId', '=', createParentRef('orgId')]]
    },
    expectedMaxCount: 1e3
  }, {
    name: 'userSidebarSections',
    type: {
      kind: 'objects',
      name: _$$Y.UserSidebarSection
    },
    nullable: !0,
    filter: {
      and: [['userId', '=', createParentRef('userId')], ['orgId', '=', createParentRef('orgId')]]
    },
    expectedMaxCount: 1e3
  }, {
    name: 'userSidebarSectionsV2',
    type: {
      kind: 'objects',
      name: _$$Y.UserSidebarSection
    },
    nullable: !0,
    filter: {
      and: [['userId', '=', createParentRef('userId')], ['orgId', '=', createParentRef('orgId')], ['teamId', '=', createParentRef('teamId')]]
    },
    expectedMaxCount: 1e3
  }]
};
let eB = {
  name: _$$Y.FavoritedResources,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'teamId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'favoritedFiles',
    type: {
      kind: 'objects',
      name: _$$Y.FavoritedFile
    },
    nullable: !0,
    filter: {
      and: [['resourceType', '=', 'file'], ['userId', '=', createParentRef('userId')], ['orgId', '=', createParentRef('orgId')], ['teamId', '=', createParentRef('teamId')]]
    },
    expectedMaxCount: 1e3
  }, {
    name: 'favoritedPrototypes',
    type: {
      kind: 'objects',
      name: _$$Y.FavoritedPrototype
    },
    nullable: !0,
    filter: {
      and: [['resourceType', '=', 'prototype'], ['userId', '=', createParentRef('userId')], ['orgId', '=', createParentRef('orgId')], ['teamId', '=', createParentRef('teamId')]]
    },
    expectedMaxCount: 100
  }, {
    name: 'favoritedProjects',
    type: {
      kind: 'objects',
      name: _$$Y.FavoritedProject
    },
    nullable: !0,
    filter: {
      and: [['resourceType', '=', 'folder'], ['userId', '=', createParentRef('userId')], ['orgId', '=', createParentRef('orgId')], ['teamId', '=', createParentRef('teamId')]]
    },
    expectedMaxCount: 2e3
  }, {
    name: 'favoritedTeams',
    type: {
      kind: 'objects',
      name: _$$Y.FavoritedTeam
    },
    nullable: !0,
    filter: {
      and: [['resourceType', '=', 'team'], ['userId', '=', createParentRef('userId')], ['orgId', '=', createParentRef('orgId')]]
    },
    expectedMaxCount: 2e3
  }, {
    name: 'favoritedWorkspaces',
    type: {
      kind: 'objects',
      name: _$$Y.FavoritedWorkspace
    },
    nullable: !0,
    filter: {
      and: [['resourceType', '=', 'workspace'], ['userId', '=', createParentRef('userId')], ['orgId', '=', createParentRef('orgId')]]
    },
    expectedMaxCount: 1e3
  }, {
    name: 'numFavorites',
    type: {
      kind: 'int'
    },
    computed: !0,
    dependencies: {
      favoritedFiles: {
        id: NULL_FIELD_REF
      },
      favoritedPrototypes: {
        id: NULL_FIELD_REF
      },
      favoritedProjects: {
        id: NULL_FIELD_REF
      },
      favoritedTeams: {
        id: NULL_FIELD_REF
      },
      favoritedWorkspaces: {
        id: NULL_FIELD_REF
      }
    }
  }]
};
let eV = {
  name: _$$Y.FavoritedTeam,
  permissionRequired: !1,
  fields: [...eD, {
    name: 'team',
    type: {
      kind: 'object',
      name: _$$Y.Team
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    filter: ['id', '=', createParentRef('resourceId')],
    checkCanRead: {
      userId: createFieldRef('userId')
    },
    nullable: !0
  }]
};
let eG = {
  name: _$$Y.FavoritedWorkspace,
  permissionRequired: !1,
  fields: [...eD, {
    name: 'licenseGroup',
    type: {
      kind: 'object',
      name: _$$Y.LicenseGroup
    },
    filter: ['id', '=', createParentRef('resourceId')],
    nullable: !0,
    deprecated: {
      reason: 'Use workspace instead',
      date: '2024-03-19'
    }
  }, {
    name: 'workspace',
    type: {
      kind: 'object',
      name: _$$Y.Workspace
    },
    filter: ['id', '=', createParentRef('resourceId')],
    nullable: !0,
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }]
};
let ez = {
  name: _$$Y.FeedComment,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'uuid',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'feedPostPublicUuid',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'user',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    filter: ['id', '=', createParentRef('userId')]
  }, {
    name: 'messageMeta',
    type: {
      kind: 'objects',
      name: _$$Y.CommentMessageMeta
    },
    embedded: !0
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'reactions',
    type: {
      kind: 'objects',
      name: _$$Y.FeedReaction
    },
    expectedMaxCount: 1e3,
    orderBy: [['createdAt', 'ASC']],
    filter: {
      and: [['feedResourceId', '=', createParentRef('id')], ['feedResourceType', '=', 'FeedComment']]
    }
  }, {
    name: 'attachments',
    type: {
      kind: 'objects',
      name: _$$Y.FeedCommentAttachment
    },
    expectedMaxCount: 10,
    orderBy: [['uploadedAt', 'ASC']],
    filter: ['feedCommentId', '=', createParentRef('id')]
  }]
};
let eH = {
  name: _$$Y.FeedCommentAttachment,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'feedCommentId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'type',
    type: {
      kind: 'string'
    },
    computed: !0,
    dependencies: {
      mediaType: NULL_FIELD_REF
    }
  }, {
    name: 'mediaType',
    type: {
      kind: 'string'
    }
  }, {
    name: 'altText',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'thumbnailSha1',
    type: {
      kind: 'string'
    }
  }, {
    name: 'thumbnailUrl',
    type: {
      kind: 'string'
    },
    computed: !0,
    dependencies: {
      id: NULL_FIELD_REF,
      feedCommentId: NULL_FIELD_REF,
      locality: NULL_FIELD_REF
    }
  }, {
    name: 'imageSha1',
    type: {
      kind: 'string'
    }
  }, {
    name: 'imageUrl',
    type: {
      kind: 'string'
    },
    computed: !0,
    dependencies: {
      id: NULL_FIELD_REF,
      feedCommentId: NULL_FIELD_REF,
      locality: NULL_FIELD_REF
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'uploadedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'deletedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'metadata',
    type: {
      kind: 'object',
      name: _$$Y.CommentAttachmentMetadata
    },
    embedded: !0
  }, {
    name: 'locality',
    type: {
      kind: 'string'
    }
  }]
};
let eW = {
  name: _$$Y.FeedPost,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'publicUuid',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'title',
    type: {
      kind: 'string'
    },
    typechecked: !1
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'creatorId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'creator',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    filter: ['id', '=', createParentRef('creatorId')]
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'reactions',
    type: {
      kind: 'objects',
      name: _$$Y.FeedReaction
    },
    expectedMaxCount: 1e3,
    orderBy: [['createdAt', 'ASC']],
    filter: {
      and: [['feedResourceId', '=', createParentRef('id')], ['feedResourceType', '=', 'FeedPost']]
    }
  }, {
    name: 'comments',
    type: {
      kind: 'objects',
      name: _$$Y.FeedComment
    },
    expectedMaxCount: 1e3,
    filter: ['feedPostPublicUuid', '=', createParentRef('publicUuid')]
  }, {
    name: 'numComments',
    type: {
      kind: 'string'
    }
  }, {
    name: 'viewerIds',
    type: {
      kind: 'objects',
      name: _$$Y.FeedViewer
    },
    embedded: !0
  }, {
    name: 'views',
    type: {
      kind: 'objects',
      name: _$$Y.FeedSeenState
    },
    expectedMaxCount: 1e4,
    filter: ['feedPostPublicUuid', '=', createParentRef('publicUuid')],
    orderBy: [['createdAt', 'ASC']]
  }, {
    name: 'reactionSummary',
    type: {
      kind: 'map',
      valueType: {
        kind: 'string'
      }
    },
    typechecked: !1
  }, {
    name: 'reactionsForUser',
    type: {
      kind: 'objects',
      name: _$$Y.FeedReaction
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    expectedMaxCount: 10,
    filter: {
      and: [['feedResourceId', '=', createParentRef('id')], ['feedResourceType', '=', 'FeedPost'], ['userId', '=', createFieldRef('userId')]]
    }
  }, {
    name: 'viewCount',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'backgroundColor',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'isFollower',
    type: {
      kind: 'object',
      name: _$$Y.FeedPostFollower
    },
    nullable: !0,
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    filter: {
      and: [['userId', '=', createFieldRef('userId')], ['feedPostId', '=', createParentRef('id')]]
    }
  }, {
    name: 'currentUserIsFollowingV2',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !1,
    computed: !0,
    dependencies: {
      isFollower: [{
        userId: createFieldRef('userId')
      }, {
        id: NULL_FIELD_REF
      }]
    }
  }, {
    name: 'content',
    type: {
      kind: 'list',
      ofType: {
        kind: 'string'
      }
    }
  }, {
    name: 'processedContentV2',
    type: {
      kind: 'list',
      ofType: {
        kind: 'string'
      }
    },
    computed: !0,
    dependencies: {
      content: NULL_FIELD_REF,
      publicUuid: NULL_FIELD_REF
    }
  }, {
    name: 'descriptionMeta',
    type: {
      kind: 'objects',
      name: _$$Y.CommentMessageMeta
    },
    embedded: !0,
    nullable: !1
  }, {
    name: 'pending',
    type: {
      kind: 'bool'
    },
    nullable: !1
  }, {
    name: 'org',
    type: {
      kind: 'object',
      name: _$$Y.Org
    },
    filter: ['id', '=', createParentRef('orgId')],
    nullable: !0,
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }]
};
let eK = {
  name: _$$Y.FeedPostFollower,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'feedPostId',
    type: {
      kind: 'bigint'
    }
  }]
};
let eY = {
  name: _$$Y.FeedPostResult,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    },
    typechecked: !1
  }, {
    name: 'publicUuid',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'type',
    type: {
      kind: 'string'
    }
  }, {
    name: 'forYou',
    type: {
      kind: 'bool'
    },
    nullable: !0
  }, {
    name: 'currentTagFilterId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'feedPost',
    type: {
      kind: 'object',
      name: _$$Y.FeedPost
    },
    filter: ['publicUuid', '=', createParentRef('publicUuid')],
    orderBy: [['createdAt', 'DESC']],
    expectedMaxCount: 1e4,
    nullable: !0
  }]
};
let eq = {
  name: _$$Y.FeedReaction,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'feedResourceId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'feedResourceType',
    type: {
      kind: 'string'
    }
  }, {
    name: 'emoji',
    type: {
      kind: 'string'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'user',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    filter: ['id', '=', createParentRef('userId')]
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }]
};
let e$ = {
  name: _$$Y.FeedSeenState,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'feedPostPublicUuid',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'user',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    filter: ['id', '=', createParentRef('userId')]
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }]
};
let eZ = {
  name: _$$Y.FeedTag,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'text',
    type: {
      kind: 'string'
    }
  }, {
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'numUsages',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'lastUsedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }]
};
let eX = {
  name: _$$Y.FeedTagFollower,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'feedTagId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'feedTag',
    type: {
      kind: 'object',
      name: _$$Y.FeedTag
    },
    filter: ['id', '=', createParentRef('feedTagId')]
  }]
};
let eQ = {
  name: _$$Y.FeedViewer,
  permissionRequired: !1,
  embedded: !0,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'user',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    filter: ['id', '=', createParentRef('id')]
  }]
};
let eJ = {
  name: _$$Y.FigFileCheckpoint,
  permissionRequired: !1,
  naturalKey: new Set(['id', 'fileKey']),
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'checkpointId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'string'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'string'
    }
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    },
    bannedFromViews: !0
  }, {
    name: 'checkpoint',
    type: {
      kind: 'object',
      name: _$$Y.FileCheckpoint
    },
    nullable: !0,
    filter: ['id', '=', createParentRef('checkpointId')]
  }]
};
let e0 = {
  name: _$$Y.FigFileLink,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'sourceFileKey',
    type: {
      kind: 'string'
    },
    bannedFromViews: !0
  }, {
    name: 'destinationFileKey',
    type: {
      kind: 'string'
    },
    bannedFromViews: !0
  }, {
    name: 'name',
    type: {
      kind: 'string'
    }
  }, {
    name: 'sortPosition',
    type: {
      kind: 'float'
    }
  }, {
    name: '_linkTypeRaw',
    type: {
      kind: 'int'
    }
  }, {
    name: 'linkType',
    type: {
      kind: 'enum',
      name: 'FigFileLinkType'
    },
    computed: !0,
    nullable: !0,
    dependencies: {
      _linkTypeRaw: NULL_FIELD_REF
    }
  }]
};
let e1 = {
  name: _$$Y.FigFileLinkExpirationConfig,
  permissionRequired: !1,
  naturalKey: new Set(['figFileKey']),
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'figFileKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'setByUserId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'expiresAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'prevPrivateLinkAccess',
    type: {
      kind: 'string'
    }
  }, {
    name: 'prevPrivateProtoLinkAccess',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'prevOrgBrowsable',
    type: {
      kind: 'bool'
    },
    nullable: !0
  }, {
    name: 'accessReverted',
    type: {
      kind: 'bool'
    }
  }, {
    name: 'setByUser',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    filter: ['id', '=', createParentRef('setByUserId')],
    nullable: !0
  }]
};
let e2 = {
  naturalKey: new Set(['fileKey', 'anonymousUserId']),
  name: _$$Y.FigFilePasswordAuthentication,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'string'
    }
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    }
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    },
    bannedFromViews: !0
  }, {
    name: 'passwordVersion',
    type: {
      kind: 'bigint'
    },
    bannedFromViews: !0
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }]
};
let e5 = {
  name: _$$Y.FigFilePwdConfig,
  permissionRequired: !1,
  naturalKey: new Set(['fileKey']),
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'figFileId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    },
    bannedFromViews: !0
  }, {
    name: 'setByUserId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'setByUser',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    filter: ['id', '=', createParentRef('setByUserId')],
    nullable: !0
  }, {
    name: 'version',
    type: {
      kind: 'int'
    }
  }]
};
let e4 = {
  name: _$$Y.FigFileWorkshopMode,
  permissionRequired: !1,
  naturalKey: new Set(['fileKey']),
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'expiresAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    },
    bannedFromViews: !0
  }]
};
var e6 = (e => (e[e.NONE = -1] = 'NONE', e[e.VIEW_PROTOTYPES = 30] = 'VIEW_PROTOTYPES', e[e.VIEW_METADATA = 50] = 'VIEW_METADATA', e[e.VIEWER = 100] = 'VIEWER', e[e.EDIT_FILE_METADATA = 300] = 'EDIT_FILE_METADATA', e[e.ADMIN = 900] = 'ADMIN', e[e.OWNER = 999] = 'OWNER', e))(e6 || {});
var e7 = (e => (e.CodeComponent = 'code_component', e.ResponsiveSet = 'responsive_set', e))(e7 || {});
let e8 = {
  name: 'canViewPrototypeV3',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_VIEW_PROTOTYPE',
  dependencies: Mx['FILE::CAN_VIEW_PROTOTYPE']
};
let e9 = {
  name: 'canViewPrototypeV3WithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_VIEW_PROTOTYPE',
  dependencies: Mx['FILE::CAN_VIEW_PROTOTYPE']
};
let te = {
  name: 'canViewV3',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_VIEW',
  dependencies: Mx['FILE::CAN_VIEW']
};
let tt = {
  name: 'canViewV3WithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_VIEW',
  dependencies: Mx['FILE::CAN_VIEW']
};
let ti = {
  name: 'canEditV3',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_EDIT',
  dependencies: Mx['FILE::CAN_EDIT']
};
let tn = {
  name: 'canEditV3WithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_EDIT',
  dependencies: Mx['FILE::CAN_EDIT']
};
let tr = {
  name: 'canEditCanvasV2',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_EDIT_CANVAS',
  dependencies: Mx['FILE::CAN_EDIT_CANVAS']
};
let ta = {
  name: 'canEditCanvasV2WithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_EDIT_CANVAS',
  dependencies: Mx['FILE::CAN_EDIT_CANVAS']
};
let ts = {
  name: 'canPublishTemplateV2',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_PUBLISH_TEMPLATE',
  dependencies: Mx['FILE::CAN_PUBLISH_TEMPLATE']
};
let to = {
  name: 'canPublishTemplateV2WithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_PUBLISH_TEMPLATE',
  dependencies: Mx['FILE::CAN_PUBLISH_TEMPLATE']
};
let tl = {
  name: 'canInsertTemplateV3',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_INSERT_TEMPLATE',
  dependencies: Mx['FILE::CAN_INSERT_TEMPLATE']
};
let td = {
  name: 'canInsertTemplateV3WithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_INSERT_TEMPLATE',
  dependencies: Mx['FILE::CAN_INSERT_TEMPLATE']
};
let tc = {
  name: 'canAdmin',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_ADMIN',
  dependencies: Mx['FILE::CAN_ADMIN']
};
let tu = {
  name: 'canAdminWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_ADMIN',
  dependencies: Mx['FILE::CAN_ADMIN']
};
let tp = {
  name: 'isOwner',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::IS_OWNER',
  dependencies: Mx['FILE::IS_OWNER']
};
let tm = {
  name: 'isOwnerWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::IS_OWNER',
  dependencies: Mx['FILE::IS_OWNER']
};
let th = {
  name: 'canBecomeEditorV2',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_BECOME_EDITOR',
  dependencies: Mx['FILE::CAN_BECOME_EDITOR']
};
let tg = {
  name: 'canBecomeEditorV2WithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_BECOME_EDITOR',
  dependencies: Mx['FILE::CAN_BECOME_EDITOR']
};
let tf = {
  name: 'canClickButtonToUpgradeAndEdit',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_CLICK_BUTTON_TO_UPGRADE_AND_EDIT',
  dependencies: Mx['FILE::CAN_CLICK_BUTTON_TO_UPGRADE_AND_EDIT']
};
let t_ = {
  name: 'canClickButtonToUpgradeAndEditWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_CLICK_BUTTON_TO_UPGRADE_AND_EDIT',
  dependencies: Mx['FILE::CAN_CLICK_BUTTON_TO_UPGRADE_AND_EDIT']
};
let tA = {
  name: 'canManageV2',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_MANAGE',
  dependencies: Mx['FILE::CAN_MANAGE']
};
let ty = {
  name: 'canManageV2WithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_MANAGE',
  dependencies: Mx['FILE::CAN_MANAGE']
};
let tb = {
  name: 'hasRoleAccess',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::HAS_ROLE_ACCESS',
  dependencies: Mx['FILE::HAS_ROLE_ACCESS']
};
let tv = {
  name: 'hasRoleAccessWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::HAS_ROLE_ACCESS',
  dependencies: Mx['FILE::HAS_ROLE_ACCESS']
};
let tI = {
  name: 'canBeMentionedInComment',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_BE_MENTIONED_IN_COMMENT',
  dependencies: Mx['FILE::CAN_BE_MENTIONED_IN_COMMENT']
};
let tE = {
  name: 'canBeMentionedInCommentWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_BE_MENTIONED_IN_COMMENT',
  dependencies: Mx['FILE::CAN_BE_MENTIONED_IN_COMMENT']
};
let tx = {
  name: 'canDownloadFile',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_DOWNLOAD_FILE',
  dependencies: Mx['FILE::CAN_DOWNLOAD_FILE']
};
let tS = {
  name: 'canDownloadFileWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_DOWNLOAD_FILE',
  dependencies: Mx['FILE::CAN_DOWNLOAD_FILE']
};
let tw = {
  name: 'canExport',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_EXPORT',
  dependencies: Mx['FILE::CAN_EXPORT']
};
let tC = {
  name: 'canExportWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_EXPORT',
  dependencies: Mx['FILE::CAN_EXPORT']
};
let tT = {
  name: 'canAccessFileThroughApi',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_ACCESS_FILE_THROUGH_API',
  dependencies: Mx['FILE::CAN_ACCESS_FILE_THROUGH_API']
};
let tk = {
  name: 'canAccessFileThroughApiWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_ACCESS_FILE_THROUGH_API',
  dependencies: Mx['FILE::CAN_ACCESS_FILE_THROUGH_API']
};
let tR = {
  name: 'canModifyRoles',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_MODIFY_ROLES',
  dependencies: Mx['FILE::CAN_MODIFY_ROLES']
};
let tN = {
  name: 'canModifyRolesWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_MODIFY_ROLES',
  dependencies: Mx['FILE::CAN_MODIFY_ROLES']
};
let tP = {
  name: 'canViewMetadata',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_VIEW_METADATA',
  dependencies: Mx['FILE::CAN_VIEW_METADATA']
};
let tO = {
  name: 'canViewMetadataWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_VIEW_METADATA',
  dependencies: Mx['FILE::CAN_VIEW_METADATA']
};
let tD = {
  name: 'canGainView',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_GAIN_VIEW',
  dependencies: Mx['FILE::CAN_GAIN_VIEW']
};
let tL = {
  name: 'canGainViewWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_GAIN_VIEW',
  dependencies: Mx['FILE::CAN_GAIN_VIEW']
};
let tF = {
  name: 'canGainViewPrototype',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_GAIN_VIEW_PROTOTYPE',
  dependencies: Mx['FILE::CAN_GAIN_VIEW_PROTOTYPE']
};
let tM = {
  name: 'canGainViewPrototypeWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_GAIN_VIEW_PROTOTYPE',
  dependencies: Mx['FILE::CAN_GAIN_VIEW_PROTOTYPE']
};
let tj = {
  name: 'canAccessFragments',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_ACCESS_FRAGMENTS',
  dependencies: Mx['FILE::CAN_ACCESS_FRAGMENTS']
};
let tU = {
  name: 'canAccessFragmentsWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_ACCESS_FRAGMENTS',
  dependencies: Mx['FILE::CAN_ACCESS_FRAGMENTS']
};
let tB = {
  name: 'canAccessLibrary',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_ACCESS_LIBRARY',
  dependencies: Mx['FILE::CAN_ACCESS_LIBRARY']
};
let tV = {
  name: 'canAccessLibraryWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_ACCESS_LIBRARY',
  dependencies: Mx['FILE::CAN_ACCESS_LIBRARY']
};
let tG = {
  name: 'canRenameV2',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_RENAME',
  dependencies: Mx['FILE::CAN_RENAME']
};
let tz = {
  name: 'canRenameV2WithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_RENAME',
  dependencies: Mx['FILE::CAN_RENAME']
};
let tH = {
  name: 'canDeleteV2',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_DELETE',
  dependencies: Mx['FILE::CAN_DELETE']
};
let tW = {
  name: 'canDeleteV2WithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_DELETE',
  dependencies: Mx['FILE::CAN_DELETE']
};
let tK = {
  name: 'canTrashV3',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_TRASH',
  dependencies: Mx['FILE::CAN_TRASH']
};
let tY = {
  name: 'canTrashV3WithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_TRASH',
  dependencies: Mx['FILE::CAN_TRASH']
};
let tq = {
  name: 'canRestoreV3',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_RESTORE',
  dependencies: Mx['FILE::CAN_RESTORE']
};
let t$ = {
  name: 'canRestoreV3WithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_RESTORE',
  dependencies: Mx['FILE::CAN_RESTORE']
};
let tZ = {
  name: 'canRestoreToOtherFolders',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_RESTORE_TO_OTHER_FOLDERS',
  dependencies: Mx['FILE::CAN_RESTORE_TO_OTHER_FOLDERS']
};
let tX = {
  name: 'canRestoreToOtherFoldersWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_RESTORE_TO_OTHER_FOLDERS',
  dependencies: Mx['FILE::CAN_RESTORE_TO_OTHER_FOLDERS']
};
let tQ = {
  name: 'canPermanentlyDeleteV3',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_PERMANENTLY_DELETE',
  dependencies: Mx['FILE::CAN_PERMANENTLY_DELETE']
};
let tJ = {
  name: 'canPermanentlyDeleteV3WithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_PERMANENTLY_DELETE',
  dependencies: Mx['FILE::CAN_PERMANENTLY_DELETE']
};
let t0 = {
  name: 'canMove',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_MOVE',
  dependencies: Mx['FILE::CAN_MOVE']
};
let t1 = {
  name: 'canMoveWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_MOVE',
  dependencies: Mx['FILE::CAN_MOVE']
};
let t2 = {
  name: 'canFavoriteV2',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_FAVORITE',
  dependencies: Mx['FILE::CAN_FAVORITE']
};
let t5 = {
  name: 'canFavoriteV2WithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_FAVORITE',
  dependencies: Mx['FILE::CAN_FAVORITE']
};
let t4 = {
  name: 'canViewAndCreateCommentsV2',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_VIEW_AND_CREATE_COMMENTS',
  dependencies: Mx['FILE::CAN_VIEW_AND_CREATE_COMMENTS']
};
let t3 = {
  name: 'canViewAndCreateCommentsV2WithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_VIEW_AND_CREATE_COMMENTS',
  dependencies: Mx['FILE::CAN_VIEW_AND_CREATE_COMMENTS']
};
let t6 = {
  name: 'canMoveCommentsV2',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_MOVE_COMMENTS',
  dependencies: Mx['FILE::CAN_MOVE_COMMENTS']
};
let t7 = {
  name: 'canMoveCommentsV2WithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_MOVE_COMMENTS',
  dependencies: Mx['FILE::CAN_MOVE_COMMENTS']
};
let t8 = {
  name: 'canEditIgnorePaidStatusV2',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_EDIT_IGNORE_PAID_STATUS',
  dependencies: Mx['FILE::CAN_EDIT_IGNORE_PAID_STATUS']
};
let t9 = {
  name: 'canEditIgnorePaidStatusV2WithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_EDIT_IGNORE_PAID_STATUS',
  dependencies: Mx['FILE::CAN_EDIT_IGNORE_PAID_STATUS']
};
let ie = {
  name: 'canEditIgnoreEduGracePeriodV2',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_EDIT_IGNORE_EDU_GRACE_PERIOD',
  dependencies: Mx['FILE::CAN_EDIT_IGNORE_EDU_GRACE_PERIOD']
};
let it = {
  name: 'canEditIgnoreEduGracePeriodV2WithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_EDIT_IGNORE_EDU_GRACE_PERIOD',
  dependencies: Mx['FILE::CAN_EDIT_IGNORE_EDU_GRACE_PERIOD']
};
let ii = {
  name: 'canViewLinkAccess',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_VIEW_LINK_ACCESS',
  dependencies: Mx['FILE::CAN_VIEW_LINK_ACCESS']
};
let ir = {
  name: 'canViewLinkAccessWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_VIEW_LINK_ACCESS',
  dependencies: Mx['FILE::CAN_VIEW_LINK_ACCESS']
};
let ia = {
  name: 'canOrgViewLinkAccess',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_ORG_VIEW_LINK_ACCESS',
  dependencies: Mx['FILE::CAN_ORG_VIEW_LINK_ACCESS']
};
let is = {
  name: 'canOrgViewLinkAccessWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_ORG_VIEW_LINK_ACCESS',
  dependencies: Mx['FILE::CAN_ORG_VIEW_LINK_ACCESS']
};
let io = {
  name: 'canEditLinkAccess',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_EDIT_LINK_ACCESS',
  dependencies: Mx['FILE::CAN_EDIT_LINK_ACCESS']
};
let il = {
  name: 'canEditLinkAccessWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_EDIT_LINK_ACCESS',
  dependencies: Mx['FILE::CAN_EDIT_LINK_ACCESS']
};
let id = {
  name: 'canEditLinkAccessIgnorePasswords',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_EDIT_LINK_ACCESS_IGNORE_PASSWORDS',
  dependencies: Mx['FILE::CAN_EDIT_LINK_ACCESS_IGNORE_PASSWORDS']
};
let ic = {
  name: 'canEditLinkAccessIgnorePasswordsWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_EDIT_LINK_ACCESS_IGNORE_PASSWORDS',
  dependencies: Mx['FILE::CAN_EDIT_LINK_ACCESS_IGNORE_PASSWORDS']
};
let iu = {
  name: 'canOrgEditLinkAccess',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_ORG_EDIT_LINK_ACCESS',
  dependencies: Mx['FILE::CAN_ORG_EDIT_LINK_ACCESS']
};
let ip = {
  name: 'canOrgEditLinkAccessWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_ORG_EDIT_LINK_ACCESS',
  dependencies: Mx['FILE::CAN_ORG_EDIT_LINK_ACCESS']
};
let im = {
  name: 'canViewMetadataLinkAccess',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_VIEW_METADATA_LINK_ACCESS',
  dependencies: Mx['FILE::CAN_VIEW_METADATA_LINK_ACCESS']
};
let ih = {
  name: 'canViewMetadataLinkAccessWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_VIEW_METADATA_LINK_ACCESS',
  dependencies: Mx['FILE::CAN_VIEW_METADATA_LINK_ACCESS']
};
let ig = {
  name: 'canViewPrototypeLinkAccess',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_VIEW_PROTOTYPE_LINK_ACCESS',
  dependencies: Mx['FILE::CAN_VIEW_PROTOTYPE_LINK_ACCESS']
};
let i_ = {
  name: 'canViewPrototypeLinkAccessWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_VIEW_PROTOTYPE_LINK_ACCESS',
  dependencies: Mx['FILE::CAN_VIEW_PROTOTYPE_LINK_ACCESS']
};
let iA = {
  name: 'canOrgViewPrototypeLinkAccess',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_ORG_VIEW_PROTOTYPE_LINK_ACCESS',
  dependencies: Mx['FILE::CAN_ORG_VIEW_PROTOTYPE_LINK_ACCESS']
};
let iy = {
  name: 'canOrgViewPrototypeLinkAccessWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_ORG_VIEW_PROTOTYPE_LINK_ACCESS',
  dependencies: Mx['FILE::CAN_ORG_VIEW_PROTOTYPE_LINK_ACCESS']
};
let ib = {
  name: 'canAccessFullDevModeV2',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_ACCESS_FULL_DEV_MODE',
  dependencies: Mx['FILE::CAN_ACCESS_FULL_DEV_MODE']
};
let iv = {
  name: 'canAccessFullDevModeV2WithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_ACCESS_FULL_DEV_MODE',
  dependencies: Mx['FILE::CAN_ACCESS_FULL_DEV_MODE']
};
let iI = {
  name: 'isEligibleForDevModeTrialV2',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::IS_ELIGIBLE_FOR_DEV_MODE_TRIAL',
  dependencies: Mx['FILE::IS_ELIGIBLE_FOR_DEV_MODE_TRIAL']
};
let iE = {
  name: 'isEligibleForDevModeTrialV2WithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::IS_ELIGIBLE_FOR_DEV_MODE_TRIAL',
  dependencies: Mx['FILE::IS_ELIGIBLE_FOR_DEV_MODE_TRIAL']
};
let ix = {
  name: 'isInDevModeTrialV2',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::IS_IN_DEV_MODE_TRIAL',
  dependencies: Mx['FILE::IS_IN_DEV_MODE_TRIAL']
};
let iS = {
  name: 'isInDevModeTrialV2WithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::IS_IN_DEV_MODE_TRIAL',
  dependencies: Mx['FILE::IS_IN_DEV_MODE_TRIAL']
};
let iw = {
  name: 'devModeTrialRequestPending',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::DEV_MODE_TRIAL_REQUEST_PENDING',
  dependencies: Mx['FILE::DEV_MODE_TRIAL_REQUEST_PENDING']
};
let iC = {
  name: 'devModeTrialRequestPendingWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::DEV_MODE_TRIAL_REQUEST_PENDING',
  dependencies: Mx['FILE::DEV_MODE_TRIAL_REQUEST_PENDING']
};
let iT = {
  name: 'devModeRequestPending',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::DEV_MODE_REQUEST_PENDING',
  dependencies: Mx['FILE::DEV_MODE_REQUEST_PENDING']
};
let ik = {
  name: 'devModeRequestPendingWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::DEV_MODE_REQUEST_PENDING',
  dependencies: Mx['FILE::DEV_MODE_REQUEST_PENDING']
};
let iR = {
  name: 'devModeRequestDenied',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::DEV_MODE_REQUEST_DENIED',
  dependencies: Mx['FILE::DEV_MODE_REQUEST_DENIED']
};
let iN = {
  name: 'devModeRequestDeniedWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::DEV_MODE_REQUEST_DENIED',
  dependencies: Mx['FILE::DEV_MODE_REQUEST_DENIED']
};
let iP = {
  name: 'canAccessDevModeEntryPointV2',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_ACCESS_DEV_MODE_ENTRY_POINT',
  dependencies: Mx['FILE::CAN_ACCESS_DEV_MODE_ENTRY_POINT']
};
let iO = {
  name: 'canAccessDevModeEntryPointV2WithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_ACCESS_DEV_MODE_ENTRY_POINT',
  dependencies: Mx['FILE::CAN_ACCESS_DEV_MODE_ENTRY_POINT']
};
let iD = {
  name: 'canAccessFullDevModeOrgPlusV2',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_ACCESS_FULL_DEV_MODE_ORG_PLUS',
  dependencies: Mx['FILE::CAN_ACCESS_FULL_DEV_MODE_ORG_PLUS']
};
let iL = {
  name: 'canAccessFullDevModeOrgPlusV2WithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_ACCESS_FULL_DEV_MODE_ORG_PLUS',
  dependencies: Mx['FILE::CAN_ACCESS_FULL_DEV_MODE_ORG_PLUS']
};
let iF = {
  name: 'canAccessFullCodeConnect',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_ACCESS_FULL_CODE_CONNECT',
  dependencies: Mx['FILE::CAN_ACCESS_FULL_CODE_CONNECT']
};
let iM = {
  name: 'canAccessFullCodeConnectWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_ACCESS_FULL_CODE_CONNECT',
  dependencies: Mx['FILE::CAN_ACCESS_FULL_CODE_CONNECT']
};
let ij = {
  name: 'canUseDevModeDemoFile',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_USE_DEV_MODE_DEMO_FILE',
  dependencies: Mx['FILE::CAN_USE_DEV_MODE_DEMO_FILE']
};
let iU = {
  name: 'canUseDevModeDemoFileWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_USE_DEV_MODE_DEMO_FILE',
  dependencies: Mx['FILE::CAN_USE_DEV_MODE_DEMO_FILE']
};
let iB = {
  name: 'canViewComponentBrowser',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_VIEW_COMPONENT_BROWSER',
  dependencies: Mx['FILE::CAN_VIEW_COMPONENT_BROWSER']
};
let iV = {
  name: 'canViewComponentBrowserWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_VIEW_COMPONENT_BROWSER',
  dependencies: Mx['FILE::CAN_VIEW_COMPONENT_BROWSER']
};
let iG = {
  name: 'canCreateCodeConnect',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_CREATE_CODE_CONNECT',
  dependencies: Mx['FILE::CAN_CREATE_CODE_CONNECT']
};
let iz = {
  name: 'canCreateCodeConnectWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_CREATE_CODE_CONNECT',
  dependencies: Mx['FILE::CAN_CREATE_CODE_CONNECT']
};
let iH = {
  name: 'canConsumeCodeConnect',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_CONSUME_CODE_CONNECT',
  dependencies: Mx['FILE::CAN_CONSUME_CODE_CONNECT']
};
let iW = {
  name: 'canConsumeCodeConnectWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_CONSUME_CODE_CONNECT',
  dependencies: Mx['FILE::CAN_CONSUME_CODE_CONNECT']
};
let iK = {
  name: 'canViewAnnotations',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_VIEW_ANNOTATIONS',
  dependencies: Mx['FILE::CAN_VIEW_ANNOTATIONS']
};
let iY = {
  name: 'canViewAnnotationsWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_VIEW_ANNOTATIONS',
  dependencies: Mx['FILE::CAN_VIEW_ANNOTATIONS']
};
let iq = {
  name: 'canViewAnnotationsMegadot',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_VIEW_ANNOTATIONS_MEGADOT',
  dependencies: Mx['FILE::CAN_VIEW_ANNOTATIONS_MEGADOT']
};
let i$ = {
  name: 'canViewAnnotationsMegadotWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_VIEW_ANNOTATIONS_MEGADOT',
  dependencies: Mx['FILE::CAN_VIEW_ANNOTATIONS_MEGADOT']
};
let iZ = {
  name: 'canEditAnnotations',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_EDIT_ANNOTATIONS',
  dependencies: Mx['FILE::CAN_EDIT_ANNOTATIONS']
};
let iX = {
  name: 'canEditAnnotationsWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_EDIT_ANNOTATIONS',
  dependencies: Mx['FILE::CAN_EDIT_ANNOTATIONS']
};
let iQ = {
  name: 'canAccessTextureMode',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_ACCESS_TEXTURE_MODE',
  dependencies: Mx['FILE::CAN_ACCESS_TEXTURE_MODE']
};
let iJ = {
  name: 'canAccessTextureModeWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_ACCESS_TEXTURE_MODE',
  dependencies: Mx['FILE::CAN_ACCESS_TEXTURE_MODE']
};
let i0 = {
  name: 'canUseFigmaAi',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_USE_FIGMA_AI',
  dependencies: Mx['FILE::CAN_USE_FIGMA_AI']
};
let i1 = {
  name: 'canUseFigmaAiWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_USE_FIGMA_AI',
  dependencies: Mx['FILE::CAN_USE_FIGMA_AI']
};
let i2 = {
  name: 'canUseFigmaAiBase',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_USE_FIGMA_AI_BASE',
  dependencies: Mx['FILE::CAN_USE_FIGMA_AI_BASE']
};
let i5 = {
  name: 'canUseFigmaAiBaseWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_USE_FIGMA_AI_BASE',
  dependencies: Mx['FILE::CAN_USE_FIGMA_AI_BASE']
};
let i4 = {
  name: 'canUseFigmaAiIgnoreAiToggle',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_USE_FIGMA_AI_IGNORE_AI_TOGGLE',
  dependencies: Mx['FILE::CAN_USE_FIGMA_AI_IGNORE_AI_TOGGLE']
};
let i3 = {
  name: 'canUseFigmaAiIgnoreAiToggleWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_USE_FIGMA_AI_IGNORE_AI_TOGGLE',
  dependencies: Mx['FILE::CAN_USE_FIGMA_AI_IGNORE_AI_TOGGLE']
};
let i6 = {
  name: 'canUseFigjamAi',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_USE_FIGJAM_AI',
  dependencies: Mx['FILE::CAN_USE_FIGJAM_AI']
};
let i7 = {
  name: 'canUseFigjamAiWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_USE_FIGJAM_AI',
  dependencies: Mx['FILE::CAN_USE_FIGJAM_AI']
};
let i8 = {
  name: 'canUseSlidesAi',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_USE_SLIDES_AI',
  dependencies: Mx['FILE::CAN_USE_SLIDES_AI']
};
let i9 = {
  name: 'canUseSlidesAiWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_USE_SLIDES_AI',
  dependencies: Mx['FILE::CAN_USE_SLIDES_AI']
};
let ne = {
  name: 'canUseFigmakeAi',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_USE_FIGMAKE_AI',
  dependencies: Mx['FILE::CAN_USE_FIGMAKE_AI']
};
let nt = {
  name: 'canUseFigmakeAiWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_USE_FIGMAKE_AI',
  dependencies: Mx['FILE::CAN_USE_FIGMAKE_AI']
};
let ni = {
  name: 'canUseFigmakeAiBase',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_USE_FIGMAKE_AI_BASE',
  dependencies: Mx['FILE::CAN_USE_FIGMAKE_AI_BASE']
};
let nn = {
  name: 'canUseFigmakeAiBaseWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_USE_FIGMAKE_AI_BASE',
  dependencies: Mx['FILE::CAN_USE_FIGMAKE_AI_BASE']
};
let nr = {
  name: 'canUseFragmentSearchAi',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_USE_FRAGMENT_SEARCH_AI',
  dependencies: Mx['FILE::CAN_USE_FRAGMENT_SEARCH_AI']
};
let na = {
  name: 'canUseFragmentSearchAiWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_USE_FRAGMENT_SEARCH_AI',
  dependencies: Mx['FILE::CAN_USE_FRAGMENT_SEARCH_AI']
};
let ns = {
  name: 'canUseSlidesDesignToggle',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_USE_SLIDES_DESIGN_TOGGLE',
  dependencies: Mx['FILE::CAN_USE_SLIDES_DESIGN_TOGGLE']
};
let no = {
  name: 'canUseSlidesDesignToggleWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_USE_SLIDES_DESIGN_TOGGLE',
  dependencies: Mx['FILE::CAN_USE_SLIDES_DESIGN_TOGGLE']
};
let nl = {
  name: 'cannotPublishToCommunity',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CANNOT_PUBLISH_TO_COMMUNITY',
  dependencies: Mx['FILE::CANNOT_PUBLISH_TO_COMMUNITY']
};
let nd = {
  name: 'cannotPublishToCommunityWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CANNOT_PUBLISH_TO_COMMUNITY',
  dependencies: Mx['FILE::CANNOT_PUBLISH_TO_COMMUNITY']
};
let nc = {
  name: 'canSendWebhook',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_SEND_WEBHOOK',
  dependencies: Mx['FILE::CAN_SEND_WEBHOOK']
};
let nu = {
  name: 'canSendWebhookWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_SEND_WEBHOOK',
  dependencies: Mx['FILE::CAN_SEND_WEBHOOK']
};
let np = {
  name: 'isWorkspaceVisible',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::IS_WORKSPACE_VISIBLE',
  dependencies: Mx['FILE::IS_WORKSPACE_VISIBLE']
};
let nm = {
  name: 'isWorkspaceVisibleWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::IS_WORKSPACE_VISIBLE',
  dependencies: Mx['FILE::IS_WORKSPACE_VISIBLE']
};
let nh = {
  name: 'canPinToWorkspace',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_PIN_TO_WORKSPACE',
  dependencies: Mx['FILE::CAN_PIN_TO_WORKSPACE']
};
let ng = {
  name: 'canPinToWorkspaceWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_PIN_TO_WORKSPACE',
  dependencies: Mx['FILE::CAN_PIN_TO_WORKSPACE']
};
let nf = {
  name: 'canViewWorkspacePin',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_VIEW_WORKSPACE_PIN',
  dependencies: Mx['FILE::CAN_VIEW_WORKSPACE_PIN']
};
let n_ = {
  name: 'canViewWorkspacePinWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_VIEW_WORKSPACE_PIN',
  dependencies: Mx['FILE::CAN_VIEW_WORKSPACE_PIN']
};
let nA = {
  name: 'seatTypePaidStatusTestPermission',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::SEAT_TYPE_PAID_STATUS_TEST_PERMISSION',
  dependencies: Mx['FILE::SEAT_TYPE_PAID_STATUS_TEST_PERMISSION']
};
let ny = {
  name: 'seatTypePaidStatusTestPermissionWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::SEAT_TYPE_PAID_STATUS_TEST_PERMISSION',
  dependencies: Mx['FILE::SEAT_TYPE_PAID_STATUS_TEST_PERMISSION']
};
let nb = {
  name: 'mustUpgradeToShareDraft',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::MUST_UPGRADE_TO_SHARE_DRAFT',
  dependencies: Mx['FILE::MUST_UPGRADE_TO_SHARE_DRAFT']
};
let nv = {
  name: 'mustUpgradeToShareDraftWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::MUST_UPGRADE_TO_SHARE_DRAFT',
  dependencies: Mx['FILE::MUST_UPGRADE_TO_SHARE_DRAFT']
};
let nI = {
  name: 'mustRequestAccountUpgradeToEdit',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::MUST_REQUEST_ACCOUNT_UPGRADE_TO_EDIT',
  dependencies: Mx['FILE::MUST_REQUEST_ACCOUNT_UPGRADE_TO_EDIT']
};
let nE = {
  name: 'mustRequestAccountUpgradeToEditWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::MUST_REQUEST_ACCOUNT_UPGRADE_TO_EDIT',
  dependencies: Mx['FILE::MUST_REQUEST_ACCOUNT_UPGRADE_TO_EDIT']
};
let nx = {
  name: 'mustRequestEditorRoleToEdit',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::MUST_REQUEST_EDITOR_ROLE_TO_EDIT',
  dependencies: Mx['FILE::MUST_REQUEST_EDITOR_ROLE_TO_EDIT']
};
let nS = {
  name: 'mustRequestEditorRoleToEditWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::MUST_REQUEST_EDITOR_ROLE_TO_EDIT',
  dependencies: Mx['FILE::MUST_REQUEST_EDITOR_ROLE_TO_EDIT']
};
let nw = {
  name: 'canAccess',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'linkAccessOverrideKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_ACCESS',
  dependencies: Mx['FILE::CAN_ACCESS']
};
let nC = {
  name: 'canAccessWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'linkAccessOverrideKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_ACCESS',
  dependencies: Mx['FILE::CAN_ACCESS']
};
let nT = {
  name: 'canCreateBranch',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_CREATE_BRANCH',
  dependencies: Mx['FILE::CAN_CREATE_BRANCH']
};
let nk = {
  name: 'canCreateBranchWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_CREATE_BRANCH',
  dependencies: Mx['FILE::CAN_CREATE_BRANCH']
};
let nR = {
  name: 'canEditOrAccessFullDevMode',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_EDIT_OR_ACCESS_FULL_DEV_MODE',
  dependencies: Mx['FILE::CAN_EDIT_OR_ACCESS_FULL_DEV_MODE']
};
let nN = {
  name: 'canEditOrAccessFullDevModeWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_EDIT_OR_ACCESS_FULL_DEV_MODE',
  dependencies: Mx['FILE::CAN_EDIT_OR_ACCESS_FULL_DEV_MODE']
};
let nP = {
  name: 'shouldUseConnectedPlanUser',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::SHOULD_USE_CONNECTED_PLAN_USER',
  dependencies: Mx['FILE::SHOULD_USE_CONNECTED_PLAN_USER']
};
let nO = {
  name: 'shouldUseConnectedPlanUserWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::SHOULD_USE_CONNECTED_PLAN_USER',
  dependencies: Mx['FILE::SHOULD_USE_CONNECTED_PLAN_USER']
};
let nD = {
  name: 'shouldUseConnectedPlanUserDevMode',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::SHOULD_USE_CONNECTED_PLAN_USER_DEV_MODE',
  dependencies: Mx['FILE::SHOULD_USE_CONNECTED_PLAN_USER_DEV_MODE']
};
let nL = {
  name: 'shouldUseConnectedPlanUserDevModeWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::SHOULD_USE_CONNECTED_PLAN_USER_DEV_MODE',
  dependencies: Mx['FILE::SHOULD_USE_CONNECTED_PLAN_USER_DEV_MODE']
};
let nF = {
  name: 'mustRequestUpgradeToEditDeveloperLinks',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::MUST_REQUEST_UPGRADE_TO_EDIT_DEVELOPER_LINKS',
  dependencies: Mx['FILE::MUST_REQUEST_UPGRADE_TO_EDIT_DEVELOPER_LINKS']
};
let nM = {
  name: 'mustRequestUpgradeToEditDeveloperLinksWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::MUST_REQUEST_UPGRADE_TO_EDIT_DEVELOPER_LINKS',
  dependencies: Mx['FILE::MUST_REQUEST_UPGRADE_TO_EDIT_DEVELOPER_LINKS']
};
let nj = {
  name: 'canRunExtensions',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_RUN_EXTENSIONS',
  dependencies: Mx['FILE::CAN_RUN_EXTENSIONS']
};
let nU = {
  name: 'canRunExtensionsWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_RUN_EXTENSIONS',
  dependencies: Mx['FILE::CAN_RUN_EXTENSIONS']
};
let nB = {
  name: 'canEditCmsStructure',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_EDIT_CMS_STRUCTURE',
  dependencies: Mx['FILE::CAN_EDIT_CMS_STRUCTURE']
};
let nV = {
  name: 'canEditCmsStructureWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_EDIT_CMS_STRUCTURE',
  dependencies: Mx['FILE::CAN_EDIT_CMS_STRUCTURE']
};
let nG = {
  name: 'canPublishSite',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_PUBLISH_SITE',
  dependencies: Mx['FILE::CAN_PUBLISH_SITE']
};
let nz = [iP, iO, nw, tT, tk, tj, tU, iF, iM, iD, iL, ib, iv, tB, tV, iQ, iJ, nC, tc, tu, tI, tE, th, tg, tf, t_, iH, iW, nT, nk, iG, iz, tH, tW, tx, tS, iZ, iX, tr, ta, nB, nV, ie, it, t8, t9, io, id, ic, il, nR, nN, ti, tn, tw, tC, t2, t5, tD, tF, tM, tL, tl, td, tA, ty, tR, tN, t6, t7, t0, t1, iu, ip, ia, is, iA, iy, tQ, tJ, nh, ng, nG, {
  name: 'canPublishSiteWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_PUBLISH_SITE',
  dependencies: Mx['FILE::CAN_PUBLISH_SITE']
}, ts, to, tG, tz, tZ, tX, tq, t$, nj, nU, nc, nu, {
  name: 'canTestPlanRecordPermission',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_TEST_PLAN_RECORD_PERMISSION',
  dependencies: Mx['FILE::CAN_TEST_PLAN_RECORD_PERMISSION']
}, {
  name: 'canTestPlanRecordPermissionWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::CAN_TEST_PLAN_RECORD_PERMISSION',
  dependencies: Mx['FILE::CAN_TEST_PLAN_RECORD_PERMISSION']
}, tK, tY, ij, iU, i6, i7, i2, i5, i0, i4, i3, i1, ni, nn, ne, nt, nr, na, i8, i9, ns, no, t4, t3, iK, iq, i$, iY, iB, iV, ii, ir, tP, im, ih, tO, ig, i_, e8, e9, te, tt, nf, n_, nl, nd, iR, iN, iT, ik, iw, iC, tb, tv, iI, iE, ix, iS, tp, tm, np, nm, nI, nE, nx, nS, nF, nM, nb, nv, nA, ny, nD, nL, nP, nO];
let nH = {
  name: 'canViewPrototype',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'REPO::CAN_VIEW_PROTOTYPE',
  dependencies: _$$sG['REPO::CAN_VIEW_PROTOTYPE']
};
let nW = {
  name: 'canViewPrototypeWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'REPO::CAN_VIEW_PROTOTYPE',
  dependencies: _$$sG['REPO::CAN_VIEW_PROTOTYPE']
};
let nK = {
  name: 'canViewV3',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'REPO::CAN_VIEW',
  dependencies: _$$sG['REPO::CAN_VIEW']
};
let nY = {
  name: 'canViewV3WithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'REPO::CAN_VIEW',
  dependencies: _$$sG['REPO::CAN_VIEW']
};
let nq = {
  name: 'canEditV3',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'REPO::CAN_EDIT',
  dependencies: _$$sG['REPO::CAN_EDIT']
};
let n$ = {
  name: 'canEditV3WithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'REPO::CAN_EDIT',
  dependencies: _$$sG['REPO::CAN_EDIT']
};
let nZ = {
  name: 'canAdmin',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'REPO::CAN_ADMIN',
  dependencies: _$$sG['REPO::CAN_ADMIN']
};
let nX = {
  name: 'canAdminWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'REPO::CAN_ADMIN',
  dependencies: _$$sG['REPO::CAN_ADMIN']
};
let nQ = {
  name: 'isOwner',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'REPO::IS_OWNER',
  dependencies: _$$sG['REPO::IS_OWNER']
};
let nJ = {
  name: 'isOwnerWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'REPO::IS_OWNER',
  dependencies: _$$sG['REPO::IS_OWNER']
};
let n0 = {
  name: 'canManage',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'REPO::CAN_MANAGE',
  dependencies: _$$sG['REPO::CAN_MANAGE']
};
let n1 = {
  name: 'canManageWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'REPO::CAN_MANAGE',
  dependencies: _$$sG['REPO::CAN_MANAGE']
};
let n2 = {
  name: 'canMove',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'REPO::CAN_MOVE',
  dependencies: _$$sG['REPO::CAN_MOVE']
};
let n5 = {
  name: 'canMoveWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'REPO::CAN_MOVE',
  dependencies: _$$sG['REPO::CAN_MOVE']
};
let n4 = {
  name: 'canViewLinkAccess',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'REPO::CAN_VIEW_LINK_ACCESS',
  dependencies: _$$sG['REPO::CAN_VIEW_LINK_ACCESS']
};
let n3 = {
  name: 'canViewLinkAccessWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'REPO::CAN_VIEW_LINK_ACCESS',
  dependencies: _$$sG['REPO::CAN_VIEW_LINK_ACCESS']
};
let n6 = {
  name: 'canEditLinkAccess',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'REPO::CAN_EDIT_LINK_ACCESS',
  dependencies: _$$sG['REPO::CAN_EDIT_LINK_ACCESS']
};
let n7 = {
  name: 'canEditLinkAccessWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'REPO::CAN_EDIT_LINK_ACCESS',
  dependencies: _$$sG['REPO::CAN_EDIT_LINK_ACCESS']
};
let n8 = {
  name: 'canViewPrototypeLinkAccess',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'REPO::CAN_VIEW_PROTOTYPE_LINK_ACCESS',
  dependencies: _$$sG['REPO::CAN_VIEW_PROTOTYPE_LINK_ACCESS']
};
let n9 = {
  name: 'canViewPrototypeLinkAccessWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'REPO::CAN_VIEW_PROTOTYPE_LINK_ACCESS',
  dependencies: _$$sG['REPO::CAN_VIEW_PROTOTYPE_LINK_ACCESS']
};
let re = {
  name: 'canOrgViewLinkAccess',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'REPO::CAN_ORG_VIEW_LINK_ACCESS',
  dependencies: _$$sG['REPO::CAN_ORG_VIEW_LINK_ACCESS']
};
let rt = {
  name: 'canOrgViewLinkAccessWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'REPO::CAN_ORG_VIEW_LINK_ACCESS',
  dependencies: _$$sG['REPO::CAN_ORG_VIEW_LINK_ACCESS']
};
let ri = {
  name: 'canOrgEditLinkAccess',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'REPO::CAN_ORG_EDIT_LINK_ACCESS',
  dependencies: _$$sG['REPO::CAN_ORG_EDIT_LINK_ACCESS']
};
let rn = {
  name: 'canOrgEditLinkAccessWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'REPO::CAN_ORG_EDIT_LINK_ACCESS',
  dependencies: _$$sG['REPO::CAN_ORG_EDIT_LINK_ACCESS']
};
let rr = {
  name: 'canOrgViewPrototypeLinkAccess',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'REPO::CAN_ORG_VIEW_PROTOTYPE_LINK_ACCESS',
  dependencies: _$$sG['REPO::CAN_ORG_VIEW_PROTOTYPE_LINK_ACCESS']
};
let ra = {
  name: 'canOrgViewPrototypeLinkAccessWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'REPO::CAN_ORG_VIEW_PROTOTYPE_LINK_ACCESS',
  dependencies: _$$sG['REPO::CAN_ORG_VIEW_PROTOTYPE_LINK_ACCESS']
};
let rs = {
  name: 'canDiscover',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'REPO::CAN_DISCOVER',
  dependencies: _$$sG['REPO::CAN_DISCOVER']
};
let ro = {
  name: 'canDiscoverWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'REPO::CAN_DISCOVER',
  dependencies: _$$sG['REPO::CAN_DISCOVER']
};
let rl = {
  name: 'shouldUseConnectedPlanUser',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'REPO::SHOULD_USE_CONNECTED_PLAN_USER',
  dependencies: _$$sG['REPO::SHOULD_USE_CONNECTED_PLAN_USER']
};
let rd = {
  name: 'shouldUseConnectedPlanUserWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'REPO::SHOULD_USE_CONNECTED_PLAN_USER',
  dependencies: _$$sG['REPO::SHOULD_USE_CONNECTED_PLAN_USER']
};
let rc = {
  name: 'canView',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FOLDER::CAN_VIEW',
  dependencies: _$$cy['FOLDER::CAN_VIEW']
};
let ru = {
  name: 'canViewWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FOLDER::CAN_VIEW',
  dependencies: _$$cy['FOLDER::CAN_VIEW']
};
let rp = {
  name: 'canEdit',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FOLDER::CAN_EDIT',
  dependencies: _$$cy['FOLDER::CAN_EDIT']
};
let rm = {
  name: 'canEditWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FOLDER::CAN_EDIT',
  dependencies: _$$cy['FOLDER::CAN_EDIT']
};
let rh = {
  name: 'isOwner',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FOLDER::IS_OWNER',
  dependencies: _$$cy['FOLDER::IS_OWNER']
};
let rg = {
  name: 'isOwnerWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FOLDER::IS_OWNER',
  dependencies: _$$cy['FOLDER::IS_OWNER']
};
let rf = {
  name: 'canDiscover',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FOLDER::CAN_DISCOVER',
  dependencies: _$$cy['FOLDER::CAN_DISCOVER']
};
let r_ = {
  name: 'canDiscoverWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FOLDER::CAN_DISCOVER',
  dependencies: _$$cy['FOLDER::CAN_DISCOVER']
};
let rA = {
  name: 'canCreateCooperFile',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FOLDER::CAN_CREATE_COOPER_FILE',
  dependencies: _$$cy['FOLDER::CAN_CREATE_COOPER_FILE']
};
let ry = {
  name: 'canCreateCooperFileWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FOLDER::CAN_CREATE_COOPER_FILE',
  dependencies: _$$cy['FOLDER::CAN_CREATE_COOPER_FILE']
};
let rb = {
  name: 'canCreateFigjamFile',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FOLDER::CAN_CREATE_FIGJAM_FILE',
  dependencies: _$$cy['FOLDER::CAN_CREATE_FIGJAM_FILE']
};
let rv = {
  name: 'canCreateFigjamFileWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FOLDER::CAN_CREATE_FIGJAM_FILE',
  dependencies: _$$cy['FOLDER::CAN_CREATE_FIGJAM_FILE']
};
let rI = {
  name: 'canCreateDesignFile',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FOLDER::CAN_CREATE_DESIGN_FILE',
  dependencies: _$$cy['FOLDER::CAN_CREATE_DESIGN_FILE']
};
let rE = {
  name: 'canCreateDesignFileWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FOLDER::CAN_CREATE_DESIGN_FILE',
  dependencies: _$$cy['FOLDER::CAN_CREATE_DESIGN_FILE']
};
let rx = {
  name: 'canCreateSitesFile',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FOLDER::CAN_CREATE_SITES_FILE',
  dependencies: _$$cy['FOLDER::CAN_CREATE_SITES_FILE']
};
let rS = {
  name: 'canCreateSitesFileWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FOLDER::CAN_CREATE_SITES_FILE',
  dependencies: _$$cy['FOLDER::CAN_CREATE_SITES_FILE']
};
let rw = {
  name: 'canCreateSlidesFile',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FOLDER::CAN_CREATE_SLIDES_FILE',
  dependencies: _$$cy['FOLDER::CAN_CREATE_SLIDES_FILE']
};
let rC = {
  name: 'canCreateSlidesFileWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FOLDER::CAN_CREATE_SLIDES_FILE',
  dependencies: _$$cy['FOLDER::CAN_CREATE_SLIDES_FILE']
};
let rT = {
  name: 'canCreateFigmakeFile',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FOLDER::CAN_CREATE_FIGMAKE_FILE',
  dependencies: _$$cy['FOLDER::CAN_CREATE_FIGMAKE_FILE']
};
let rk = {
  name: 'canCreateFigmakeFileWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FOLDER::CAN_CREATE_FIGMAKE_FILE',
  dependencies: _$$cy['FOLDER::CAN_CREATE_FIGMAKE_FILE']
};
let rR = {
  name: 'canModifyRoles',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FOLDER::CAN_MODIFY_ROLES',
  dependencies: _$$cy['FOLDER::CAN_MODIFY_ROLES']
};
let rN = {
  name: 'canModifyRolesWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FOLDER::CAN_MODIFY_ROLES',
  dependencies: _$$cy['FOLDER::CAN_MODIFY_ROLES']
};
let rP = {
  name: 'canMove',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FOLDER::CAN_MOVE',
  dependencies: _$$cy['FOLDER::CAN_MOVE']
};
let rO = {
  name: 'canMoveWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FOLDER::CAN_MOVE',
  dependencies: _$$cy['FOLDER::CAN_MOVE']
};
let rD = {
  name: 'canTransferExternally',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FOLDER::CAN_TRANSFER_EXTERNALLY',
  dependencies: _$$cy['FOLDER::CAN_TRANSFER_EXTERNALLY']
};
let rL = {
  name: 'canTransferExternallyWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FOLDER::CAN_TRANSFER_EXTERNALLY',
  dependencies: _$$cy['FOLDER::CAN_TRANSFER_EXTERNALLY']
};
let rF = {
  name: 'canTransferCopy',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FOLDER::CAN_TRANSFER_COPY',
  dependencies: _$$cy['FOLDER::CAN_TRANSFER_COPY']
};
let rM = {
  name: 'canTransferCopyWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FOLDER::CAN_TRANSFER_COPY',
  dependencies: _$$cy['FOLDER::CAN_TRANSFER_COPY']
};
let rj = {
  name: 'canTrash',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FOLDER::CAN_TRASH',
  dependencies: _$$cy['FOLDER::CAN_TRASH']
};
let rU = {
  name: 'canTrashWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FOLDER::CAN_TRASH',
  dependencies: _$$cy['FOLDER::CAN_TRASH']
};
let rB = {
  name: 'canRestore',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FOLDER::CAN_RESTORE',
  dependencies: _$$cy['FOLDER::CAN_RESTORE']
};
let rV = {
  name: 'canRestoreWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FOLDER::CAN_RESTORE',
  dependencies: _$$cy['FOLDER::CAN_RESTORE']
};
let rG = {
  name: 'canPermanentlyDelete',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FOLDER::CAN_PERMANENTLY_DELETE',
  dependencies: _$$cy['FOLDER::CAN_PERMANENTLY_DELETE']
};
let rz = {
  name: 'canPermanentlyDeleteWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FOLDER::CAN_PERMANENTLY_DELETE',
  dependencies: _$$cy['FOLDER::CAN_PERMANENTLY_DELETE']
};
let rH = {
  name: 'shouldUseConnectedPlanUserDesign',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FOLDER::SHOULD_USE_CONNECTED_PLAN_USER_DESIGN',
  dependencies: _$$cy['FOLDER::SHOULD_USE_CONNECTED_PLAN_USER_DESIGN']
};
let rW = {
  name: 'shouldUseConnectedPlanUserDesignWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FOLDER::SHOULD_USE_CONNECTED_PLAN_USER_DESIGN',
  dependencies: _$$cy['FOLDER::SHOULD_USE_CONNECTED_PLAN_USER_DESIGN']
};
let rK = {
  name: 'shouldUseConnectedPlanUserFigjam',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FOLDER::SHOULD_USE_CONNECTED_PLAN_USER_FIGJAM',
  dependencies: _$$cy['FOLDER::SHOULD_USE_CONNECTED_PLAN_USER_FIGJAM']
};
let rY = {
  name: 'shouldUseConnectedPlanUserFigjamWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FOLDER::SHOULD_USE_CONNECTED_PLAN_USER_FIGJAM',
  dependencies: _$$cy['FOLDER::SHOULD_USE_CONNECTED_PLAN_USER_FIGJAM']
};
let rq = {
  name: 'shouldUseConnectedPlanUserSlides',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FOLDER::SHOULD_USE_CONNECTED_PLAN_USER_SLIDES',
  dependencies: _$$cy['FOLDER::SHOULD_USE_CONNECTED_PLAN_USER_SLIDES']
};
let r$ = {
  name: 'shouldUseConnectedPlanUserSlidesWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FOLDER::SHOULD_USE_CONNECTED_PLAN_USER_SLIDES',
  dependencies: _$$cy['FOLDER::SHOULD_USE_CONNECTED_PLAN_USER_SLIDES']
};
let rZ = {
  name: 'shouldUseConnectedPlanUserDevMode',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FOLDER::SHOULD_USE_CONNECTED_PLAN_USER_DEV_MODE',
  dependencies: _$$cy['FOLDER::SHOULD_USE_CONNECTED_PLAN_USER_DEV_MODE']
};
let rX = {
  name: 'shouldUseConnectedPlanUserDevModeWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FOLDER::SHOULD_USE_CONNECTED_PLAN_USER_DEV_MODE',
  dependencies: _$$cy['FOLDER::SHOULD_USE_CONNECTED_PLAN_USER_DEV_MODE']
};
let rQ = {
  name: 'shouldUseConnectedPlanUserSites',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FOLDER::SHOULD_USE_CONNECTED_PLAN_USER_SITES',
  dependencies: _$$cy['FOLDER::SHOULD_USE_CONNECTED_PLAN_USER_SITES']
};
let rJ = {
  name: 'shouldUseConnectedPlanUserSitesWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FOLDER::SHOULD_USE_CONNECTED_PLAN_USER_SITES',
  dependencies: _$$cy['FOLDER::SHOULD_USE_CONNECTED_PLAN_USER_SITES']
};
let r0 = {
  name: 'shouldUseConnectedPlanUserFigmake',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FOLDER::SHOULD_USE_CONNECTED_PLAN_USER_FIGMAKE',
  dependencies: _$$cy['FOLDER::SHOULD_USE_CONNECTED_PLAN_USER_FIGMAKE']
};
let r1 = {
  name: 'shouldUseConnectedPlanUserFigmakeWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FOLDER::SHOULD_USE_CONNECTED_PLAN_USER_FIGMAKE',
  dependencies: _$$cy['FOLDER::SHOULD_USE_CONNECTED_PLAN_USER_FIGMAKE']
};
let r2 = {
  name: 'shouldUseConnectedPlanUser',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'permissionArguments',
    type: {
      kind: 'map',
      valueType: {
        kind: 'string'
      }
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FOLDER::SHOULD_USE_CONNECTED_PLAN_USER',
  dependencies: _$$cy['FOLDER::SHOULD_USE_CONNECTED_PLAN_USER']
};
let r5 = {
  name: 'shouldUseConnectedPlanUserWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'permissionArguments',
    type: {
      kind: 'map',
      valueType: {
        kind: 'string'
      }
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FOLDER::SHOULD_USE_CONNECTED_PLAN_USER',
  dependencies: _$$cy['FOLDER::SHOULD_USE_CONNECTED_PLAN_USER']
};
let r4 = {
  name: 'canConnect',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FOLDER::CAN_CONNECT',
  dependencies: _$$cy['FOLDER::CAN_CONNECT']
};
let r3 = {
  name: 'canConnectWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FOLDER::CAN_CONNECT',
  dependencies: _$$cy['FOLDER::CAN_CONNECT']
};
let r6 = {
  name: 'canViewLimitedInfo',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FOLDER::CAN_VIEW_LIMITED_INFO',
  dependencies: _$$cy['FOLDER::CAN_VIEW_LIMITED_INFO']
};
let r7 = {
  name: 'canViewLimitedInfoWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FOLDER::CAN_VIEW_LIMITED_INFO',
  dependencies: _$$cy['FOLDER::CAN_VIEW_LIMITED_INFO']
};
let r8 = {
  name: 'canView',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'HUB_FILE::CAN_VIEW',
  dependencies: $W['HUB_FILE::CAN_VIEW']
};
let r9 = {
  name: 'canViewWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'HUB_FILE::CAN_VIEW',
  dependencies: $W['HUB_FILE::CAN_VIEW']
};
let ae = {
  name: 'canView',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'LITMUS_PROJECT::CAN_VIEW',
  dependencies: _$$H['LITMUS_PROJECT::CAN_VIEW']
};
let at = {
  name: 'canViewWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'LITMUS_PROJECT::CAN_VIEW',
  dependencies: _$$H['LITMUS_PROJECT::CAN_VIEW']
};
let ai = {
  name: 'isGuest',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'ORG::IS_GUEST',
  dependencies: _$$mJ['ORG::IS_GUEST']
};
let an = {
  name: 'isGuestWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'ORG::IS_GUEST',
  dependencies: _$$mJ['ORG::IS_GUEST']
};
let ar = {
  name: 'isMember',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'ORG::IS_MEMBER',
  dependencies: _$$mJ['ORG::IS_MEMBER']
};
let aa = {
  name: 'isMemberWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'ORG::IS_MEMBER',
  dependencies: _$$mJ['ORG::IS_MEMBER']
};
let as = {
  name: 'isAdmin',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'ORG::IS_ADMIN',
  dependencies: _$$mJ['ORG::IS_ADMIN']
};
let ao = {
  name: 'isAdminWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'ORG::IS_ADMIN',
  dependencies: _$$mJ['ORG::IS_ADMIN']
};
let al = {
  name: 'cannotJoinOrgUserExternalContentRestricted',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'ORG::CANNOT_JOIN_ORG_USER_EXTERNAL_CONTENT_RESTRICTED',
  dependencies: _$$mJ['ORG::CANNOT_JOIN_ORG_USER_EXTERNAL_CONTENT_RESTRICTED']
};
let ad = {
  name: 'cannotJoinOrgUserExternalContentRestrictedWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'ORG::CANNOT_JOIN_ORG_USER_EXTERNAL_CONTENT_RESTRICTED',
  dependencies: _$$mJ['ORG::CANNOT_JOIN_ORG_USER_EXTERNAL_CONTENT_RESTRICTED']
};
let ac = {
  name: 'cannotJoinOrgGuestsBanned',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'ORG::CANNOT_JOIN_ORG_GUESTS_BANNED',
  dependencies: _$$mJ['ORG::CANNOT_JOIN_ORG_GUESTS_BANNED']
};
let au = {
  name: 'cannotJoinOrgGuestsBannedWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'ORG::CANNOT_JOIN_ORG_GUESTS_BANNED',
  dependencies: _$$mJ['ORG::CANNOT_JOIN_ORG_GUESTS_BANNED']
};
let ap = {
  name: 'canUseFigmaAi',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'ORG::CAN_USE_FIGMA_AI',
  dependencies: _$$mJ['ORG::CAN_USE_FIGMA_AI']
};
let am = {
  name: 'canUseFigmaAiWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'ORG::CAN_USE_FIGMA_AI',
  dependencies: _$$mJ['ORG::CAN_USE_FIGMA_AI']
};
let ah = {
  name: 'canUseFigmaAiIgnoreAiToggle',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'ORG::CAN_USE_FIGMA_AI_IGNORE_AI_TOGGLE',
  dependencies: _$$mJ['ORG::CAN_USE_FIGMA_AI_IGNORE_AI_TOGGLE']
};
let ag = {
  name: 'canUseFigmaAiIgnoreAiToggleWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'ORG::CAN_USE_FIGMA_AI_IGNORE_AI_TOGGLE',
  dependencies: _$$mJ['ORG::CAN_USE_FIGMA_AI_IGNORE_AI_TOGGLE']
};
let af = {
  name: 'canUseFigmaCollabAi',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'ORG::CAN_USE_FIGMA_COLLAB_AI',
  dependencies: _$$mJ['ORG::CAN_USE_FIGMA_COLLAB_AI']
};
let a_ = {
  name: 'canUseFigmaCollabAiWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'ORG::CAN_USE_FIGMA_COLLAB_AI',
  dependencies: _$$mJ['ORG::CAN_USE_FIGMA_COLLAB_AI']
};
let aA = {
  name: 'canUseFigmaCollabAiIgnoreAiToggle',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'ORG::CAN_USE_FIGMA_COLLAB_AI_IGNORE_AI_TOGGLE',
  dependencies: _$$mJ['ORG::CAN_USE_FIGMA_COLLAB_AI_IGNORE_AI_TOGGLE']
};
let ay = {
  name: 'canUseFigmaCollabAiIgnoreAiToggleWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'ORG::CAN_USE_FIGMA_COLLAB_AI_IGNORE_AI_TOGGLE',
  dependencies: _$$mJ['ORG::CAN_USE_FIGMA_COLLAB_AI_IGNORE_AI_TOGGLE']
};
let ab = {
  name: 'hostPlanHasFigmaAiEnabled',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'ORG::HOST_PLAN_HAS_FIGMA_AI_ENABLED',
  dependencies: _$$mJ['ORG::HOST_PLAN_HAS_FIGMA_AI_ENABLED']
};
let av = {
  name: 'hostPlanHasFigmaAiEnabledWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'ORG::HOST_PLAN_HAS_FIGMA_AI_ENABLED',
  dependencies: _$$mJ['ORG::HOST_PLAN_HAS_FIGMA_AI_ENABLED']
};
let aI = {
  name: 'isGuest',
  permissionName: 'PLAN::IS_GUEST',
  type: {
    kind: 'bool'
  }
};
let aE = {
  name: 'isGuestWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  permissionName: 'PLAN::IS_GUEST',
  embedded: !0
};
let ax = {
  name: 'isMember',
  permissionName: 'PLAN::IS_MEMBER',
  type: {
    kind: 'bool'
  }
};
let aS = {
  name: 'isMemberWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  permissionName: 'PLAN::IS_MEMBER',
  embedded: !0
};
let aw = {
  name: 'isAdmin',
  permissionName: 'PLAN::IS_ADMIN',
  type: {
    kind: 'bool'
  }
};
let aC = {
  name: 'isAdminWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  permissionName: 'PLAN::IS_ADMIN',
  embedded: !0
};
let aT = {
  name: 'canUpgradeAutoPathwayDeveloperWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  permissionName: 'PLAN::CAN_UPGRADE_AUTO_PATHWAY_DEVELOPER',
  embedded: !0
};
let ak = {
  name: 'canUpgradeAutoPathwayCollaboratorWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  permissionName: 'PLAN::CAN_UPGRADE_AUTO_PATHWAY_COLLABORATOR',
  embedded: !0
};
let aR = {
  name: 'canUpgradeAutoPathwayExpertWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  permissionName: 'PLAN::CAN_UPGRADE_AUTO_PATHWAY_EXPERT',
  embedded: !0
};
let aN = {
  name: 'canUpgradeAutoPathwayContentWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  permissionName: 'PLAN::CAN_UPGRADE_AUTO_PATHWAY_CONTENT',
  embedded: !0
};
let aP = {
  name: 'canUpgradeCollaboratorWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  permissionName: 'PLAN::CAN_UPGRADE_COLLABORATOR',
  embedded: !0
};
let aO = {
  name: 'canUpgradeDeveloperWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  permissionName: 'PLAN::CAN_UPGRADE_DEVELOPER',
  embedded: !0
};
let aD = {
  name: 'canUpgradeExpertWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  permissionName: 'PLAN::CAN_UPGRADE_EXPERT',
  embedded: !0
};
let aL = {
  name: 'canUpgradeContentWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  permissionName: 'PLAN::CAN_UPGRADE_CONTENT',
  embedded: !0
};
let aF = {
  name: 'canUseFileViewHistoryWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  permissionName: 'PLAN::CAN_USE_FILE_VIEW_HISTORY',
  embedded: !0
};
let aM = {
  name: 'needUpgradeCollaboratorWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  permissionName: 'PLAN::NEED_UPGRADE_COLLABORATOR',
  embedded: !0
};
let aj = {
  name: 'needUpgradeDeveloperWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  permissionName: 'PLAN::NEED_UPGRADE_DEVELOPER',
  embedded: !0
};
let aU = {
  name: 'needUpgradeExpertWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  permissionName: 'PLAN::NEED_UPGRADE_EXPERT',
  embedded: !0
};
let aB = {
  name: 'needUpgradeContentWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  permissionName: 'PLAN::NEED_UPGRADE_CONTENT',
  embedded: !0
};
let aV = {
  name: 'canConnectWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  permissionName: 'PLAN::CAN_CONNECT',
  embedded: !0
};
let aG = {
  name: 'canViewInvoicesWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  permissionName: 'PLAN::CAN_VIEW_INVOICES',
  embedded: !0
};
let az = {
  name: 'isEligibleProvisionalAccessCollaboratorWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  permissionName: 'PLAN::IS_ELIGIBLE_PROVISIONAL_ACCESS_COLLABORATOR',
  embedded: !0
};
let aH = {
  name: 'isEligibleProvisionalAccessDeveloperWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  permissionName: 'PLAN::IS_ELIGIBLE_PROVISIONAL_ACCESS_DEVELOPER',
  embedded: !0
};
let aW = {
  name: 'isEligibleProvisionalAccessExpertWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  permissionName: 'PLAN::IS_ELIGIBLE_PROVISIONAL_ACCESS_EXPERT',
  embedded: !0
};
let aK = {
  name: 'isEligibleProvisionalAccessContentWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  permissionName: 'PLAN::IS_ELIGIBLE_PROVISIONAL_ACCESS_CONTENT',
  embedded: !0
};
let aY = {
  name: 'canSetupGithubAppWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  permissionName: 'PLAN::CAN_SETUP_GITHUB_APP',
  embedded: !0
};
let aq = [{
  name: 'canConnect',
  permissionName: 'PLAN::CAN_CONNECT',
  type: {
    kind: 'bool'
  }
}, aV, {
  name: 'canConsumeGithubApp',
  permissionName: 'PLAN::CAN_CONSUME_GITHUB_APP',
  type: {
    kind: 'bool'
  }
}, {
  name: 'canConsumeGithubAppWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  permissionName: 'PLAN::CAN_CONSUME_GITHUB_APP',
  embedded: !0
}, {
  name: 'canSetupGithubApp',
  permissionName: 'PLAN::CAN_SETUP_GITHUB_APP',
  type: {
    kind: 'bool'
  }
}, aY, {
  name: 'canUpgradeAutoPathwayCollaborator',
  permissionName: 'PLAN::CAN_UPGRADE_AUTO_PATHWAY_COLLABORATOR',
  type: {
    kind: 'bool'
  }
}, ak, {
  name: 'canUpgradeAutoPathwayContent',
  permissionName: 'PLAN::CAN_UPGRADE_AUTO_PATHWAY_CONTENT',
  type: {
    kind: 'bool'
  }
}, aN, {
  name: 'canUpgradeAutoPathwayDeveloper',
  permissionName: 'PLAN::CAN_UPGRADE_AUTO_PATHWAY_DEVELOPER',
  type: {
    kind: 'bool'
  }
}, aT, {
  name: 'canUpgradeAutoPathwayExpert',
  permissionName: 'PLAN::CAN_UPGRADE_AUTO_PATHWAY_EXPERT',
  type: {
    kind: 'bool'
  }
}, aR, {
  name: 'canUpgradeCollaborator',
  permissionName: 'PLAN::CAN_UPGRADE_COLLABORATOR',
  type: {
    kind: 'bool'
  }
}, aP, {
  name: 'canUpgradeContent',
  permissionName: 'PLAN::CAN_UPGRADE_CONTENT',
  type: {
    kind: 'bool'
  }
}, aL, {
  name: 'canUpgradeDeveloper',
  permissionName: 'PLAN::CAN_UPGRADE_DEVELOPER',
  type: {
    kind: 'bool'
  }
}, aO, {
  name: 'canUpgradeExpert',
  permissionName: 'PLAN::CAN_UPGRADE_EXPERT',
  type: {
    kind: 'bool'
  }
}, aD, {
  name: 'canUseFileViewHistory',
  permissionName: 'PLAN::CAN_USE_FILE_VIEW_HISTORY',
  type: {
    kind: 'bool'
  }
}, aF, {
  name: 'canViewInvoices',
  permissionName: 'PLAN::CAN_VIEW_INVOICES',
  type: {
    kind: 'bool'
  }
}, aG, aw, aC, {
  name: 'isEligibleProvisionalAccessCollaborator',
  permissionName: 'PLAN::IS_ELIGIBLE_PROVISIONAL_ACCESS_COLLABORATOR',
  type: {
    kind: 'bool'
  }
}, az, {
  name: 'isEligibleProvisionalAccessContent',
  permissionName: 'PLAN::IS_ELIGIBLE_PROVISIONAL_ACCESS_CONTENT',
  type: {
    kind: 'bool'
  }
}, aK, {
  name: 'isEligibleProvisionalAccessDeveloper',
  permissionName: 'PLAN::IS_ELIGIBLE_PROVISIONAL_ACCESS_DEVELOPER',
  type: {
    kind: 'bool'
  }
}, aH, {
  name: 'isEligibleProvisionalAccessExpert',
  permissionName: 'PLAN::IS_ELIGIBLE_PROVISIONAL_ACCESS_EXPERT',
  type: {
    kind: 'bool'
  }
}, aW, aI, aE, ax, aS, {
  name: 'needUpgradeCollaborator',
  permissionName: 'PLAN::NEED_UPGRADE_COLLABORATOR',
  type: {
    kind: 'bool'
  }
}, aM, {
  name: 'needUpgradeContent',
  permissionName: 'PLAN::NEED_UPGRADE_CONTENT',
  type: {
    kind: 'bool'
  }
}, aB, {
  name: 'needUpgradeDeveloper',
  permissionName: 'PLAN::NEED_UPGRADE_DEVELOPER',
  type: {
    kind: 'bool'
  }
}, aj, {
  name: 'needUpgradeExpert',
  permissionName: 'PLAN::NEED_UPGRADE_EXPERT',
  type: {
    kind: 'bool'
  }
}, aU];
let a$ = {
  name: 'canView',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'TEAM::CAN_VIEW',
  dependencies: zD['TEAM::CAN_VIEW']
};
let aZ = {
  name: 'canViewWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'TEAM::CAN_VIEW',
  dependencies: zD['TEAM::CAN_VIEW']
};
let aX = {
  name: 'canEdit',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'TEAM::CAN_EDIT',
  dependencies: zD['TEAM::CAN_EDIT']
};
let aQ = {
  name: 'canEditWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'TEAM::CAN_EDIT',
  dependencies: zD['TEAM::CAN_EDIT']
};
let aJ = {
  name: 'canAdmin',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'TEAM::CAN_ADMIN',
  dependencies: zD['TEAM::CAN_ADMIN']
};
let a0 = {
  name: 'canAdminWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'TEAM::CAN_ADMIN',
  dependencies: zD['TEAM::CAN_ADMIN']
};
let a1 = {
  name: 'isOwner',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'TEAM::IS_OWNER',
  dependencies: zD['TEAM::IS_OWNER']
};
let a2 = {
  name: 'isOwnerWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'TEAM::IS_OWNER',
  dependencies: zD['TEAM::IS_OWNER']
};
let a5 = {
  name: 'editRoleAccess',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'TEAM::EDIT_ROLE_ACCESS',
  dependencies: zD['TEAM::EDIT_ROLE_ACCESS']
};
let a4 = {
  name: 'editRoleAccessWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'TEAM::EDIT_ROLE_ACCESS',
  dependencies: zD['TEAM::EDIT_ROLE_ACCESS']
};
let a3 = {
  name: 'adminRoleAccess',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'TEAM::ADMIN_ROLE_ACCESS',
  dependencies: zD['TEAM::ADMIN_ROLE_ACCESS']
};
let a6 = {
  name: 'adminRoleAccessWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'TEAM::ADMIN_ROLE_ACCESS',
  dependencies: zD['TEAM::ADMIN_ROLE_ACCESS']
};
let a7 = {
  name: 'canDiscover',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'TEAM::CAN_DISCOVER',
  dependencies: zD['TEAM::CAN_DISCOVER']
};
let a8 = {
  name: 'canDiscoverWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'TEAM::CAN_DISCOVER',
  dependencies: zD['TEAM::CAN_DISCOVER']
};
let a9 = {
  name: 'canDelete',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'TEAM::CAN_DELETE',
  dependencies: zD['TEAM::CAN_DELETE']
};
let se = {
  name: 'canDeleteWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'TEAM::CAN_DELETE',
  dependencies: zD['TEAM::CAN_DELETE']
};
let st = {
  name: 'canViewInAdmin',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'TEAM::CAN_VIEW_IN_ADMIN',
  dependencies: zD['TEAM::CAN_VIEW_IN_ADMIN']
};
let si = {
  name: 'canViewInAdminWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'TEAM::CAN_VIEW_IN_ADMIN',
  dependencies: zD['TEAM::CAN_VIEW_IN_ADMIN']
};
let sn = {
  name: 'canViewLimitedInfo',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'TEAM::CAN_VIEW_LIMITED_INFO',
  dependencies: zD['TEAM::CAN_VIEW_LIMITED_INFO']
};
let sr = {
  name: 'canViewLimitedInfoWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'TEAM::CAN_VIEW_LIMITED_INFO',
  dependencies: zD['TEAM::CAN_VIEW_LIMITED_INFO']
};
let sa = {
  name: 'canUseFigmaAi',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'TEAM::CAN_USE_FIGMA_AI',
  dependencies: zD['TEAM::CAN_USE_FIGMA_AI']
};
let ss = {
  name: 'canUseFigmaAiWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'TEAM::CAN_USE_FIGMA_AI',
  dependencies: zD['TEAM::CAN_USE_FIGMA_AI']
};
let so = {
  name: 'canUseFigmaAiIgnoreAiToggle',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'TEAM::CAN_USE_FIGMA_AI_IGNORE_AI_TOGGLE',
  dependencies: zD['TEAM::CAN_USE_FIGMA_AI_IGNORE_AI_TOGGLE']
};
let sl = {
  name: 'canUseFigmaAiIgnoreAiToggleWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'TEAM::CAN_USE_FIGMA_AI_IGNORE_AI_TOGGLE',
  dependencies: zD['TEAM::CAN_USE_FIGMA_AI_IGNORE_AI_TOGGLE']
};
let sd = {
  name: 'canUseFigmaCollabAi',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'TEAM::CAN_USE_FIGMA_COLLAB_AI',
  dependencies: zD['TEAM::CAN_USE_FIGMA_COLLAB_AI']
};
let sc = {
  name: 'canUseFigmaCollabAiWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'TEAM::CAN_USE_FIGMA_COLLAB_AI',
  dependencies: zD['TEAM::CAN_USE_FIGMA_COLLAB_AI']
};
let su = {
  name: 'canUseFigmaCollabAiIgnoreAiToggle',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'TEAM::CAN_USE_FIGMA_COLLAB_AI_IGNORE_AI_TOGGLE',
  dependencies: zD['TEAM::CAN_USE_FIGMA_COLLAB_AI_IGNORE_AI_TOGGLE']
};
let sp = {
  name: 'canUseFigmaCollabAiIgnoreAiToggleWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'TEAM::CAN_USE_FIGMA_COLLAB_AI_IGNORE_AI_TOGGLE',
  dependencies: zD['TEAM::CAN_USE_FIGMA_COLLAB_AI_IGNORE_AI_TOGGLE']
};
let sm = {
  name: 'hostPlanHasFigmaAiEnabled',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'TEAM::HOST_PLAN_HAS_FIGMA_AI_ENABLED',
  dependencies: zD['TEAM::HOST_PLAN_HAS_FIGMA_AI_ENABLED']
};
let sh = {
  name: 'hostPlanHasFigmaAiEnabledWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'TEAM::HOST_PLAN_HAS_FIGMA_AI_ENABLED',
  dependencies: zD['TEAM::HOST_PLAN_HAS_FIGMA_AI_ENABLED']
};
let sg = {
  name: 'canView',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'USER_GROUP::CAN_VIEW',
  dependencies: _$$mv['USER_GROUP::CAN_VIEW']
};
let sf = {
  name: 'canViewWithReasons',
  type: {
    kind: 'object',
    name: _$$Y.PermissionEvaluationResult
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'USER_GROUP::CAN_VIEW',
  dependencies: _$$mv['USER_GROUP::CAN_VIEW']
};
let sA = {
  name: 'permissionFlagTestFlag',
  type: {
    kind: 'object',
    name: _$$Y.StatsigFeatureGate
  },
  nullable: !0,
  bannedFromViews: !0,
  resolver: {
    type: 'Statsig',
    statsigUser: {
      customIDs: {
        userFigmateEmail: createParentRef('email') ?? ''
      },
      custom: {
        user_created_at: createParentRef('createdAt') ?? ''
      }
    },
    statsigResource: {
      type: 'flag',
      flagName: 'test_flag'
    }
  }
};
let sy = {
  name: 'permissionFlagCampfire',
  type: {
    kind: 'object',
    name: _$$Y.StatsigFeatureGate
  },
  nullable: !0,
  bannedFromViews: !0,
  resolver: {
    type: 'Statsig',
    statsigUser: {
      customIDs: {
        userFigmateEmail: createParentRef('email') ?? ''
      },
      custom: {
        user_created_at: createParentRef('createdAt') ?? ''
      }
    },
    statsigResource: {
      type: 'flag',
      flagName: 'campfire'
    }
  }
};
let sb = {
  name: 'permissionFlagCanDiscoverPendingInvite',
  type: {
    kind: 'object',
    name: _$$Y.StatsigFeatureGate
  },
  nullable: !0,
  bannedFromViews: !0,
  resolver: {
    type: 'Statsig',
    statsigUser: {
      customIDs: {
        userFigmateEmail: createParentRef('email') ?? ''
      },
      custom: {
        user_created_at: createParentRef('createdAt') ?? ''
      }
    },
    statsigResource: {
      type: 'flag',
      flagName: 'can_discover_pending_invite'
    }
  }
};
let sv = {
  name: 'permissionFlagCommunityHubAdmin',
  type: {
    kind: 'object',
    name: _$$Y.StatsigFeatureGate
  },
  nullable: !0,
  bannedFromViews: !0,
  resolver: {
    type: 'Statsig',
    statsigUser: {
      customIDs: {
        userFigmateEmail: createParentRef('email') ?? ''
      },
      custom: {
        user_created_at: createParentRef('createdAt') ?? ''
      }
    },
    statsigResource: {
      type: 'flag',
      flagName: 'community_hub_admin'
    }
  }
};
let sI = {
  name: 'permissionFlagCommunityHubAdminReviewer',
  type: {
    kind: 'object',
    name: _$$Y.StatsigFeatureGate
  },
  nullable: !0,
  bannedFromViews: !0,
  resolver: {
    type: 'Statsig',
    statsigUser: {
      customIDs: {
        userFigmateEmail: createParentRef('email') ?? ''
      },
      custom: {
        user_created_at: createParentRef('createdAt') ?? ''
      }
    },
    statsigResource: {
      type: 'flag',
      flagName: 'community_hub_admin_reviewer'
    }
  }
};
let sE = {
  name: 'permissionFlagCommunityHubImageInspection',
  type: {
    kind: 'object',
    name: _$$Y.StatsigFeatureGate
  },
  nullable: !0,
  bannedFromViews: !0,
  resolver: {
    type: 'Statsig',
    statsigUser: {
      customIDs: {
        userFigmateEmail: createParentRef('email') ?? ''
      },
      custom: {
        user_created_at: createParentRef('createdAt') ?? ''
      }
    },
    statsigResource: {
      type: 'flag',
      flagName: 'community_hub_image_inspection'
    }
  }
};
let sx = {
  name: 'permissionFlagExemptGuestsFromMfaRequirement',
  type: {
    kind: 'object',
    name: _$$Y.StatsigFeatureGate
  },
  nullable: !0,
  bannedFromViews: !0,
  resolver: {
    type: 'Statsig',
    statsigUser: {
      customIDs: {
        userFigmateEmail: createParentRef('email') ?? ''
      },
      custom: {
        user_created_at: createParentRef('createdAt') ?? ''
      }
    },
    statsigResource: {
      type: 'flag',
      flagName: 'exempt_guests_from_mfa_requirement'
    }
  }
};
let sS = {
  name: 'permissionFlagFcGeneral',
  type: {
    kind: 'object',
    name: _$$Y.StatsigFeatureGate
  },
  nullable: !0,
  bannedFromViews: !0,
  resolver: {
    type: 'Statsig',
    statsigUser: {
      customIDs: {
        userFigmateEmail: createParentRef('email') ?? ''
      },
      custom: {
        user_created_at: createParentRef('createdAt') ?? ''
      }
    },
    statsigResource: {
      type: 'flag',
      flagName: 'fc_general'
    }
  }
};
let sw = {
  name: 'permissionFlagPv2LoadableEditorLicenseTypeMapping',
  type: {
    kind: 'object',
    name: _$$Y.StatsigFeatureGate
  },
  nullable: !0,
  bannedFromViews: !0,
  resolver: {
    type: 'Statsig',
    statsigUser: {
      customIDs: {
        userFigmateEmail: createParentRef('email') ?? ''
      },
      custom: {
        user_created_at: createParentRef('createdAt') ?? ''
      }
    },
    statsigResource: {
      type: 'flag',
      flagName: 'pv2_loadable_editor_license_type_mapping'
    }
  }
};
let sC = {
  name: 'permissionFlagPv2PlanRecordPerms',
  type: {
    kind: 'object',
    name: _$$Y.StatsigFeatureGate
  },
  nullable: !0,
  bannedFromViews: !0,
  resolver: {
    type: 'Statsig',
    statsigUser: {
      customIDs: {
        userFigmateEmail: createParentRef('email') ?? ''
      },
      custom: {
        user_created_at: createParentRef('createdAt') ?? ''
      }
    },
    statsigResource: {
      type: 'flag',
      flagName: 'pv2_plan_record_perms'
    }
  }
};
let sT = {
  name: 'permissionFlagPv2PlanRecordDummyPolicy',
  type: {
    kind: 'object',
    name: _$$Y.StatsigFeatureGate
  },
  nullable: !0,
  bannedFromViews: !0,
  resolver: {
    type: 'Statsig',
    statsigUser: {
      customIDs: {
        userFigmateEmail: createParentRef('email') ?? ''
      },
      custom: {
        user_created_at: createParentRef('createdAt') ?? ''
      }
    },
    statsigResource: {
      type: 'flag',
      flagName: 'pv2_plan_record_dummy_policy'
    }
  }
};
let sk = {
  name: 'permissionFlagSites',
  type: {
    kind: 'object',
    name: _$$Y.StatsigFeatureGate
  },
  nullable: !0,
  bannedFromViews: !0,
  resolver: {
    type: 'Statsig',
    statsigUser: {
      customIDs: {
        userFigmateEmail: createParentRef('email') ?? ''
      },
      custom: {
        user_created_at: createParentRef('createdAt') ?? ''
      }
    },
    statsigResource: {
      type: 'flag',
      flagName: 'sites'
    }
  }
};
let sR = {
  name: 'permissionFlagStsK12GoogleOrgEnabled',
  type: {
    kind: 'object',
    name: _$$Y.StatsigFeatureGate
  },
  nullable: !0,
  bannedFromViews: !0,
  resolver: {
    type: 'Statsig',
    statsigUser: {
      customIDs: {
        userFigmateEmail: createParentRef('email') ?? ''
      },
      custom: {
        user_created_at: createParentRef('createdAt') ?? ''
      }
    },
    statsigResource: {
      type: 'flag',
      flagName: 'sts_k12_google_org_enabled'
    }
  }
};
let sN = {
  name: 'permissionFlagPermEnableDebuggerLogForUser',
  type: {
    kind: 'object',
    name: _$$Y.StatsigFeatureGate
  },
  nullable: !0,
  bannedFromViews: !0,
  resolver: {
    type: 'Statsig',
    statsigUser: {
      customIDs: {
        userFigmateEmail: createParentRef('email') ?? ''
      },
      custom: {
        user_created_at: createParentRef('createdAt') ?? ''
      }
    },
    statsigResource: {
      type: 'flag',
      flagName: 'perm_enable_debugger_log_for_user'
    }
  }
};
let sP = {
  name: 'permissionFlagProTemplatesFigjam',
  type: {
    kind: 'object',
    name: _$$Y.StatsigFeatureGate
  },
  nullable: !0,
  bannedFromViews: !0,
  resolver: {
    type: 'Statsig',
    statsigUser: {
      customIDs: {
        userFigmateEmail: createParentRef('email') ?? ''
      },
      custom: {
        user_created_at: createParentRef('createdAt') ?? ''
      }
    },
    statsigResource: {
      type: 'flag',
      flagName: 'pro_templates_figjam'
    }
  }
};
let sO = {
  name: 'permissionFlagOrgFileExportSetting',
  type: {
    kind: 'object',
    name: _$$Y.StatsigFeatureGate
  },
  nullable: !0,
  bannedFromViews: !0,
  resolver: {
    type: 'Statsig',
    statsigUser: {
      customIDs: {
        userFigmateEmail: createParentRef('email') ?? ''
      },
      custom: {
        user_created_at: createParentRef('createdAt') ?? ''
      }
    },
    statsigResource: {
      type: 'flag',
      flagName: 'org_file_export_setting'
    }
  }
};
let sD = {
  name: 'permissionFlagFcPlanEnabled',
  type: {
    kind: 'object',
    name: _$$Y.StatsigFeatureGate
  },
  nullable: !0,
  bannedFromViews: !0,
  resolver: {
    type: 'Statsig',
    statsigUser: {
      customIDs: {
        userFigmateEmail: createParentRef('email') ?? ''
      },
      custom: {
        user_created_at: createParentRef('createdAt') ?? ''
      }
    },
    statsigResource: {
      type: 'flag',
      flagName: 'fc_plan_enabled'
    }
  }
};
let sL = {
  name: 'permissionFlagCooper',
  type: {
    kind: 'object',
    name: _$$Y.StatsigFeatureGate
  },
  nullable: !0,
  bannedFromViews: !0,
  resolver: {
    type: 'Statsig',
    statsigUser: {
      customIDs: {
        userFigmateEmail: createParentRef('email') ?? ''
      },
      custom: {
        user_created_at: createParentRef('createdAt') ?? ''
      }
    },
    statsigResource: {
      type: 'flag',
      flagName: 'cooper'
    }
  }
};
let sF = {
  name: 'permissionFlagDtLitmus',
  type: {
    kind: 'object',
    name: _$$Y.StatsigFeatureGate
  },
  nullable: !0,
  bannedFromViews: !0,
  resolver: {
    type: 'Statsig',
    statsigUser: {
      customIDs: {
        userFigmateEmail: createParentRef('email') ?? ''
      },
      custom: {
        user_created_at: createParentRef('createdAt') ?? ''
      }
    },
    statsigResource: {
      type: 'flag',
      flagName: 'dt_litmus'
    }
  }
};
let sM = {
  name: 'permissionFlagMakeAiAllowlistForAtlassian',
  type: {
    kind: 'object',
    name: _$$Y.StatsigFeatureGate
  },
  nullable: !0,
  bannedFromViews: !0,
  resolver: {
    type: 'Statsig',
    statsigUser: {
      customIDs: {
        userFigmateEmail: createParentRef('email') ?? ''
      },
      custom: {
        user_created_at: createParentRef('createdAt') ?? ''
      }
    },
    statsigResource: {
      type: 'flag',
      flagName: 'make_ai_allowlist_for_atlassian'
    }
  }
};
let sj = {
  name: 'permissionFlagDevModeDemoFile',
  type: {
    kind: 'object',
    name: _$$Y.StatsigFeatureGate
  },
  nullable: !0,
  bannedFromViews: !0,
  resolver: {
    type: 'Statsig',
    statsigUser: {
      customIDs: {
        userFigmateEmail: createParentRef('email') ?? ''
      },
      custom: {
        user_created_at: createParentRef('createdAt') ?? ''
      }
    },
    statsigResource: {
      type: 'flag',
      flagName: 'dev_mode_demo_file'
    }
  }
};
let sU = {
  name: 'permissionFlagProductTrialsLg',
  type: {
    kind: 'object',
    name: _$$Y.StatsigFeatureGate
  },
  nullable: !0,
  bannedFromViews: !0,
  resolver: {
    type: 'Statsig',
    statsigUser: {
      customIDs: {
        userFigmateEmail: createParentRef('email') ?? ''
      },
      custom: {
        user_created_at: createParentRef('createdAt') ?? ''
      }
    },
    statsigResource: {
      type: 'flag',
      flagName: 'product_trials_lg'
    }
  }
};
let sB = {
  name: 'permissionFlagProductTrialsFigmake',
  type: {
    kind: 'object',
    name: _$$Y.StatsigFeatureGate
  },
  nullable: !0,
  bannedFromViews: !0,
  resolver: {
    type: 'Statsig',
    statsigUser: {
      customIDs: {
        userFigmateEmail: createParentRef('email') ?? ''
      },
      custom: {
        user_created_at: createParentRef('createdAt') ?? ''
      }
    },
    statsigResource: {
      type: 'flag',
      flagName: 'product_trials_figmake'
    }
  }
};
let sV = {
  name: 'permissionFlagSlidesStarterTeamDesignToggle',
  type: {
    kind: 'object',
    name: _$$Y.StatsigFeatureGate
  },
  nullable: !0,
  bannedFromViews: !0,
  resolver: {
    type: 'Statsig',
    statsigUser: {
      customIDs: {
        userFigmateEmail: createParentRef('email') ?? ''
      },
      custom: {
        user_created_at: createParentRef('createdAt') ?? ''
      }
    },
    statsigResource: {
      type: 'flag',
      flagName: 'slides_starter_team_design_toggle'
    }
  }
};
let sG = {
  name: 'permissionFlagLitmusGuestAccess',
  type: {
    kind: 'object',
    name: _$$Y.StatsigFeatureGate
  },
  nullable: !0,
  bannedFromViews: !0,
  resolver: {
    type: 'Statsig',
    statsigUser: {
      customIDs: {
        userFigmateEmail: createParentRef('email') ?? ''
      },
      custom: {
        user_created_at: createParentRef('createdAt') ?? ''
      }
    },
    statsigResource: {
      type: 'flag',
      flagName: 'litmus_guest_access'
    }
  }
};
let sz = {
  name: 'permissionFlagBake',
  type: {
    kind: 'object',
    name: _$$Y.StatsigFeatureGate
  },
  nullable: !0,
  bannedFromViews: !0,
  resolver: {
    type: 'Statsig',
    statsigUser: {
      customIDs: {
        userFigmateEmail: createParentRef('email') ?? ''
      },
      custom: {
        user_created_at: createParentRef('createdAt') ?? ''
      }
    },
    statsigResource: {
      type: 'flag',
      flagName: 'bake'
    }
  }
};
let sH = {
  name: 'permissionFlagBakeCheckPlan',
  type: {
    kind: 'object',
    name: _$$Y.StatsigFeatureGate
  },
  nullable: !0,
  bannedFromViews: !0,
  resolver: {
    type: 'Statsig',
    statsigUser: {
      customIDs: {
        userFigmateEmail: createParentRef('email') ?? ''
      },
      custom: {
        user_created_at: createParentRef('createdAt') ?? ''
      }
    },
    statsigResource: {
      type: 'flag',
      flagName: 'bake_check_plan'
    }
  }
};
let sW = {
  name: 'permissionFlagBakePlanEnabled',
  type: {
    kind: 'object',
    name: _$$Y.StatsigFeatureGate
  },
  nullable: !0,
  bannedFromViews: !0,
  resolver: {
    type: 'Statsig',
    statsigUser: {
      customIDs: {
        userFigmateEmail: createParentRef('email') ?? ''
      },
      custom: {
        user_created_at: createParentRef('createdAt') ?? ''
      }
    },
    statsigResource: {
      type: 'flag',
      flagName: 'bake_plan_enabled'
    }
  }
};
let sK = {
  name: 'permissionFlagCmtyMakeDiscovery',
  type: {
    kind: 'object',
    name: _$$Y.StatsigFeatureGate
  },
  nullable: !0,
  bannedFromViews: !0,
  resolver: {
    type: 'Statsig',
    statsigUser: {
      customIDs: {
        userFigmateEmail: createParentRef('email') ?? ''
      },
      custom: {
        user_created_at: createParentRef('createdAt') ?? ''
      }
    },
    statsigResource: {
      type: 'flag',
      flagName: 'cmty_make_discovery'
    }
  }
};
let sY = {
  name: 'permissionFlagCmtyMakePublishing',
  type: {
    kind: 'object',
    name: _$$Y.StatsigFeatureGate
  },
  nullable: !0,
  bannedFromViews: !0,
  resolver: {
    type: 'Statsig',
    statsigUser: {
      customIDs: {
        userFigmateEmail: createParentRef('email') ?? ''
      },
      custom: {
        user_created_at: createParentRef('createdAt') ?? ''
      }
    },
    statsigResource: {
      type: 'flag',
      flagName: 'cmty_make_publishing'
    }
  }
};
let sq = {
  name: 'permissionFlagCmtyMakePublishingUpdates',
  type: {
    kind: 'object',
    name: _$$Y.StatsigFeatureGate
  },
  nullable: !0,
  bannedFromViews: !0,
  resolver: {
    type: 'Statsig',
    statsigUser: {
      customIDs: {
        userFigmateEmail: createParentRef('email') ?? ''
      },
      custom: {
        user_created_at: createParentRef('createdAt') ?? ''
      }
    },
    statsigResource: {
      type: 'flag',
      flagName: 'cmty_make_publishing_updates'
    }
  }
};
let s$ = {
  name: 'permissionFlagMakeTemplatePublishing',
  type: {
    kind: 'object',
    name: _$$Y.StatsigFeatureGate
  },
  nullable: !0,
  bannedFromViews: !0,
  resolver: {
    type: 'Statsig',
    statsigUser: {
      customIDs: {
        userFigmateEmail: createParentRef('email') ?? ''
      },
      custom: {
        user_created_at: createParentRef('createdAt') ?? ''
      }
    },
    statsigResource: {
      type: 'flag',
      flagName: 'make_template_publishing'
    }
  }
};
let sZ = {
  name: 'permissionFlagMakeTemplateDiscovery',
  type: {
    kind: 'object',
    name: _$$Y.StatsigFeatureGate
  },
  nullable: !0,
  bannedFromViews: !0,
  resolver: {
    type: 'Statsig',
    statsigUser: {
      customIDs: {
        userFigmateEmail: createParentRef('email') ?? ''
      },
      custom: {
        user_created_at: createParentRef('createdAt') ?? ''
      }
    },
    statsigResource: {
      type: 'flag',
      flagName: 'make_template_discovery'
    }
  }
};
let sX = {
  name: 'permissionFlagBakeStarterLimit',
  type: {
    kind: 'object',
    name: _$$Y.StatsigFeatureGate
  },
  nullable: !0,
  bannedFromViews: !0,
  resolver: {
    type: 'Statsig',
    statsigUser: {
      customIDs: {
        userFigmateEmail: createParentRef('email') ?? ''
      },
      custom: {
        user_created_at: createParentRef('createdAt') ?? ''
      }
    },
    statsigResource: {
      type: 'flag',
      flagName: 'bake_starter_limit'
    }
  }
};
let sQ = {
  name: 'permissionFlagBakeStarterPaywall',
  type: {
    kind: 'object',
    name: _$$Y.StatsigFeatureGate
  },
  nullable: !0,
  bannedFromViews: !0,
  resolver: {
    type: 'Statsig',
    statsigUser: {
      customIDs: {
        userFigmateEmail: createParentRef('email') ?? ''
      },
      custom: {
        user_created_at: createParentRef('createdAt') ?? ''
      }
    },
    statsigResource: {
      type: 'flag',
      flagName: 'bake_starter_paywall'
    }
  }
};
let sJ = {
  name: 'permissionFlagBakeMonetizationPlan',
  type: {
    kind: 'object',
    name: _$$Y.StatsigFeatureGate
  },
  nullable: !0,
  bannedFromViews: !0,
  resolver: {
    type: 'Statsig',
    statsigUser: {
      customIDs: {
        userFigmateEmail: createParentRef('email') ?? ''
      },
      custom: {
        user_created_at: createParentRef('createdAt') ?? ''
      }
    },
    statsigResource: {
      type: 'flag',
      flagName: 'bake_monetization_plan'
    }
  }
};
let s0 = {
  name: 'permissionFlagCeIlRoot',
  type: {
    kind: 'object',
    name: _$$Y.StatsigFeatureGate
  },
  nullable: !0,
  bannedFromViews: !0,
  resolver: {
    type: 'Statsig',
    statsigUser: {
      customIDs: {
        userFigmateEmail: createParentRef('email') ?? ''
      },
      custom: {
        user_created_at: createParentRef('createdAt') ?? ''
      }
    },
    statsigResource: {
      type: 'flag',
      flagName: 'ce_il_root'
    }
  }
};
let s1 = {
  name: 'permissionFlagStsStarterEnabled',
  type: {
    kind: 'object',
    name: _$$Y.StatsigFeatureGate
  },
  nullable: !0,
  bannedFromViews: !0,
  resolver: {
    type: 'Statsig',
    statsigUser: {
      customIDs: {
        userFigmateEmail: createParentRef('email') ?? ''
      },
      custom: {
        user_created_at: createParentRef('createdAt') ?? ''
      }
    },
    statsigResource: {
      type: 'flag',
      flagName: 'sts_starter_enabled'
    }
  }
};
let s2 = {
  name: 'permissionFlagDenyCollabWithoutProductsEnabled',
  type: {
    kind: 'object',
    name: _$$Y.StatsigFeatureGate
  },
  nullable: !0,
  bannedFromViews: !0,
  resolver: {
    type: 'Statsig',
    statsigUser: {
      customIDs: {
        userFigmateEmail: createParentRef('email') ?? ''
      },
      custom: {
        user_created_at: createParentRef('createdAt') ?? ''
      }
    },
    statsigResource: {
      type: 'flag',
      flagName: 'deny_collab_without_products_enabled'
    }
  }
};
let s5 = {
  name: 'permissionFlagBuzzPluginsRunnable',
  type: {
    kind: 'object',
    name: _$$Y.StatsigFeatureGate
  },
  nullable: !0,
  bannedFromViews: !0,
  resolver: {
    type: 'Statsig',
    statsigUser: {
      customIDs: {
        userFigmateEmail: createParentRef('email') ?? ''
      },
      custom: {
        user_created_at: createParentRef('createdAt') ?? ''
      }
    },
    statsigResource: {
      type: 'flag',
      flagName: 'buzz_plugins_runnable'
    }
  }
};
let s4 = {
  name: 'permissionFlagSharedContainerSettingPermV2',
  type: {
    kind: 'object',
    name: _$$Y.StatsigFeatureGate
  },
  nullable: !0,
  bannedFromViews: !0,
  resolver: {
    type: 'Statsig',
    statsigUser: {
      customIDs: {
        userFigmateEmail: createParentRef('email') ?? ''
      },
      custom: {
        user_created_at: createParentRef('createdAt') ?? ''
      }
    },
    statsigResource: {
      type: 'flag',
      flagName: 'shared_container_setting_perm_v2'
    }
  }
};
let s3 = {
  name: 'permissionFlagUserGroups',
  type: {
    kind: 'object',
    name: _$$Y.StatsigFeatureGate
  },
  nullable: !0,
  bannedFromViews: !0,
  resolver: {
    type: 'Statsig',
    statsigUser: {
      customIDs: {
        userFigmateEmail: createParentRef('email') ?? ''
      },
      custom: {
        user_created_at: createParentRef('createdAt') ?? ''
      }
    },
    statsigResource: {
      type: 'flag',
      flagName: 'user_groups'
    }
  }
};
let s6 = {
  name: 'permissionFlagPermissionsPlanTestFlag',
  type: {
    kind: 'object',
    name: _$$Y.StatsigFeatureGate
  },
  nullable: !0,
  bannedFromViews: !0,
  resolver: {
    type: 'Statsig',
    statsigUser: {
      customIDs: {
        _planParentClassForPlanKey: createParentRef('planParentType'),
        _planParentIdForPlanKey: createParentRef('planParentId')
      }
    },
    statsigResource: {
      type: 'flag',
      flagName: 'permissions_plan_test_flag'
    }
  }
};
let s7 = {
  name: 'permissionFlagPermissionsOrgTestFlag',
  type: {
    kind: 'object',
    name: _$$Y.StatsigFeatureGate
  },
  nullable: !0,
  bannedFromViews: !0,
  resolver: {
    type: 'Statsig',
    statsigUser: {
      customIDs: {
        orgID: createParentRef('id') ?? ''
      }
    },
    statsigResource: {
      type: 'flag',
      flagName: 'permissions_org_test_flag'
    }
  }
};
let s8 = {
  name: 'permissionFlagPermissionsTeamTestFlag',
  type: {
    kind: 'object',
    name: _$$Y.StatsigFeatureGate
  },
  nullable: !0,
  bannedFromViews: !0,
  resolver: {
    type: 'Statsig',
    statsigUser: {
      customIDs: {
        teamID: createParentRef('id') ?? ''
      }
    },
    statsigResource: {
      type: 'flag',
      flagName: 'permissions_team_test_flag'
    }
  }
};
let s9 = {
  'FILE::POL::ALLOW_IF_VALID_INVITE_EXISTS': {
    _org_permsV2: {
      id: null,
      permissionOrgFeatureFlags: null
    },
    _permissionsFromUserGroups: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      id: null,
      permissions: null
    }],
    currentUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      emailDomain: null,
      externalRestrictedOrgId: null,
      id: null,
      permissionFeatureFlagsV2: null
    }],
    invite: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      id: null,
      inviteeUserId: null,
      level: null,
      redeemedBy: null,
      resourceType: null,
      revokedAt: null,
      updatedAt: null
    }]
  },
  'FILE::POL::ALLOW_REPO_FILE_VIEWER': {
    _permissionsFromUserGroups: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      id: null,
      permissions: null
    }],
    currentUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      emailDomain: null,
      id: null,
      permissionFeatureFlagsV2: null
    }],
    roleOnObjectRepoForUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      level: null
    }]
  },
  'FILE::POL::ALLOW_REPO_FILE_EDITOR': {
    _permissionsFromUserGroups: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      id: null,
      permissions: null
    }],
    currentUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      emailDomain: null,
      id: null,
      permissionFeatureFlagsV2: null
    }],
    roleOnObjectRepoForUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      level: null
    }]
  },
  'FILE::POL::ALLOW_REPO_FILE_OWNER': {
    currentUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      emailDomain: null,
      id: null,
      permissionFeatureFlagsV2: null
    }],
    roleOnObjectRepoForUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      level: null
    }]
  },
  'FILE::POL::ALLOW_TEAM_FILE_VIEWER': {
    _permissionsFromUserGroups: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      id: null,
      permissions: null
    }],
    _project_permsV2: {
      id: null,
      inviteOnlyAt: null,
      path: null,
      teamId: null
    },
    currentUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      emailDomain: null,
      id: null,
      permissionFeatureFlagsV2: null
    }],
    roleOnObjectTeamForUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      level: null
    }]
  },
  'FILE::POL::ALLOW_TEAM_FILE_EDITOR': {
    _permissionsFromUserGroups: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      id: null,
      permissions: null
    }],
    _project_permsV2: {
      id: null,
      inviteOnlyAt: null,
      path: null,
      teamId: null,
      viewOnlyAt: null
    },
    currentUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      emailDomain: null,
      id: null,
      permissionFeatureFlagsV2: null
    }],
    roleOnObjectTeamForUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      level: null
    }]
  },
  'FILE::POL::ALLOW_TEAM_FILE_OWNER': {
    _project_permsV2: {
      id: null,
      inviteOnlyAt: null,
      path: null,
      teamId: null,
      viewOnlyAt: null
    },
    currentUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      emailDomain: null,
      id: null,
      permissionFeatureFlagsV2: null
    }],
    roleOnObjectTeamForUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      level: null
    }]
  },
  'FILE::POL::ALLOW_FILE_TEAM_ADMIN_ACCESS_FOR_ORPHANED_FOLDER': {
    _permissionsFromUserGroups: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      id: null,
      permissions: null
    }],
    currentUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      emailDomain: null,
      id: null,
      permissionFeatureFlagsV2: null
    }],
    folderOwnerRole: {
      id: null
    },
    roleOnObjectTeamForUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      level: null
    }]
  },
  'FILE::POL::ALLOW_FOLDER_FILE_VIEWER': {
    _permissionsFromUserGroups: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      id: null,
      permissions: null
    }],
    currentUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      emailDomain: null,
      id: null,
      permissionFeatureFlagsV2: null
    }],
    roleOnObjectProjectForUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      level: null
    }]
  },
  'FILE::POL::ALLOW_FOLDER_FILE_EDITOR': {
    _permissionsFromUserGroups: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      id: null,
      permissions: null
    }],
    currentUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      emailDomain: null,
      id: null,
      permissionFeatureFlagsV2: null
    }],
    roleOnObjectProjectForUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      level: null
    }]
  },
  'FILE::POL::ALLOW_FOLDER_FILE_OWNER': {
    currentUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      emailDomain: null,
      id: null,
      permissionFeatureFlagsV2: null
    }],
    roleOnObjectProjectForUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      level: null
    }]
  },
  'FILE::POL::ALLOW_HOST_PLAN_ADMINS_EDIT_CONNECTED_FOLDER_FILES': {
    connectedPlan: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      featureFlagFcPlanEnabled: {
        id: null,
        name: null,
        value: null
      },
      id: null
    }],
    currentPlanUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      permission: null
    }],
    currentUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      emailDomain: null,
      id: null,
      permissionFeatureFlagsV2: null
    }],
    plan: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      featureFlagFcPlanEnabled: {
        id: null,
        name: null,
        value: null
      },
      id: null
    }]
  },
  'FILE::POL::ALLOW_HOST_PLAN_ADMINS_EDIT_CONNECTED_FOLDER_FILES_V2': {
    currentUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      emailDomain: null,
      id: null,
      permissionFeatureFlagsV2: null
    }],
    _teamPlanUserRecord: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      permission: null
    }],
    _orgPlanUserRecord: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      permission: null
    }],
    _orgPlanRecord: {
      featureFlagFcPlanEnabled: {
        id: null,
        name: null,
        value: null
      },
      id: null
    },
    _teamPlanRecord: {
      featureFlagFcPlanEnabled: {
        id: null,
        name: null,
        value: null
      },
      id: null
    },
    _project_permsV2: {
      _mostRecentActiveResourceConnection: {
        connectedPlanType: null,
        _connectedOrgPlanRecord: {
          featureFlagFcPlanEnabled: {
            id: null,
            name: null,
            value: null
          },
          id: null
        },
        _connectedTeamPlanRecord: {
          featureFlagFcPlanEnabled: {
            id: null,
            name: null,
            value: null
          },
          id: null
        }
      }
    }
  },
  'FILE::POL::ALLOW_FILE_VIEWER': {
    _permissionsFromUserGroups: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      id: null,
      permissions: null
    }],
    currentUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      emailDomain: null,
      id: null,
      permissionFeatureFlagsV2: null
    }],
    roleOnObjectForUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      level: null
    }]
  },
  'FILE::POL::ALLOW_FILE_EDITOR': {
    _permissionsFromUserGroups: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      id: null,
      permissions: null
    }],
    currentUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      emailDomain: null,
      id: null,
      permissionFeatureFlagsV2: null
    }],
    roleOnObjectForUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      level: null
    }]
  },
  'FILE::POL::ALLOW_FILE_OWNER': {
    currentUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      emailDomain: null,
      id: null,
      permissionFeatureFlagsV2: null
    }],
    roleOnObjectForUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      level: null
    }]
  },
  'FILE::POL::ALLOW_FILE_ACCESS_IF_MENTIONED_ON_CANVAS': {
    deletedAt: null,
    editorType: null,
    fileRepoId: null,
    hasFileLinkPassword: null,
    id: null,
    key: null,
    linkAccess: null,
    parentOrgId: null,
    sourceFileKey: null,
    _org_permsV2: {
      bigmaEnabledAt: null,
      permissionOrgFeatureFlags: null
    },
    _repo_permsV2: {
      linkAccess: null
    },
    _sourceFile_permsV2: {
      hasFileLinkPassword: null,
      id: null
    },
    currentPlanUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      permission: null
    }],
    currentUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      emailDomain: null,
      emailValidatedAt: null,
      id: null,
      permissionFeatureFlagsV2: null
    }],
    fileCanvasMentionAny: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      deletedAt: null,
      id: null
    }],
    orgSharedSetting: {
      id: null,
      publicLinkControlsSetting: null
    },
    _team_permsV2: {
      workspaceSharedSetting: {
        id: null,
        publicLinkControlsSetting: null
      }
    },
    pwdConfigV2: {
      version: null
    },
    sourceFilePwdConfig: {
      version: null
    },
    passwordAuthentication: [{
      anonymousUserId: {
        type: 'view',
        ref: 'anonymousUserId'
      }
    }, {
      createdAt: null,
      passwordVersion: null
    }],
    sourceFilePasswordAuthentication: [{
      anonymousUserId: {
        type: 'view',
        ref: 'anonymousUserId'
      }
    }, {
      createdAt: null,
      passwordVersion: null
    }],
    fileLinkExpirationConfig: {
      accessReverted: null,
      expiresAt: null,
      id: null,
      prevPrivateLinkAccess: null
    },
    sourceFileLinkExpirationConfig: {
      accessReverted: null,
      expiresAt: null,
      id: null,
      prevPrivateLinkAccess: null
    }
  },
  'FILE::POL::ALLOW_FILE_ACCESS_IF_AT_MENTIONED_IN_COMMENT': {
    deletedAt: null,
    editorType: null,
    fileRepoId: null,
    hasFileLinkPassword: null,
    id: null,
    key: null,
    linkAccess: null,
    parentOrgId: null,
    sourceFileKey: null,
    _org_permsV2: {
      bigmaEnabledAt: null,
      permissionOrgFeatureFlags: null
    },
    _repo_permsV2: {
      linkAccess: null
    },
    _sourceFile_permsV2: {
      hasFileLinkPassword: null,
      id: null
    },
    atMention: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      id: null
    }],
    currentPlanUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      permission: null
    }],
    currentUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      emailDomain: null,
      emailValidatedAt: null,
      id: null,
      permissionFeatureFlagsV2: null
    }],
    orgSharedSetting: {
      id: null,
      publicLinkControlsSetting: null
    },
    _team_permsV2: {
      workspaceSharedSetting: {
        id: null,
        publicLinkControlsSetting: null
      }
    },
    pwdConfigV2: {
      version: null
    },
    sourceFilePwdConfig: {
      version: null
    },
    passwordAuthentication: [{
      anonymousUserId: {
        type: 'view',
        ref: 'anonymousUserId'
      }
    }, {
      createdAt: null,
      passwordVersion: null
    }],
    sourceFilePasswordAuthentication: [{
      anonymousUserId: {
        type: 'view',
        ref: 'anonymousUserId'
      }
    }, {
      createdAt: null,
      passwordVersion: null
    }],
    fileLinkExpirationConfig: {
      accessReverted: null,
      expiresAt: null,
      id: null,
      prevPrivateLinkAccess: null
    },
    sourceFileLinkExpirationConfig: {
      accessReverted: null,
      expiresAt: null,
      id: null,
      prevPrivateLinkAccess: null
    }
  },
  'FILE::POL::ALLOW_ORG_BROWSABLE_ACCESS_FOR_MEMBER': {
    deletedAt: null,
    editorType: null,
    fileRepoId: null,
    linkAccess: null,
    orgBrowsable: null,
    parentOrgId: null,
    trashedAt: null,
    _org_permsV2: {
      bigmaEnabledAt: null,
      permissionOrgFeatureFlags: null
    },
    _repo_permsV2: {
      linkAccess: null,
      orgBrowsable: null
    },
    currentPlanUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      permission: null
    }],
    currentUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      emailDomain: null,
      emailValidatedAt: null,
      id: null,
      permissionFeatureFlagsV2: null
    }],
    fileLinkExpirationConfig: {
      accessReverted: null,
      expiresAt: null,
      id: null,
      prevOrgBrowsable: null,
      prevPrivateLinkAccess: null
    },
    sourceFileLinkExpirationConfig: {
      accessReverted: null,
      expiresAt: null,
      id: null,
      prevOrgBrowsable: null,
      prevPrivateLinkAccess: null
    }
  },
  'FILE::POL::ALLOW_WORKSHOP_MODE_EDIT_ACCESS_V2': {
    editorType: null,
    fileRepoId: null,
    hasFileLinkPassword: null,
    id: null,
    key: null,
    sourceFileKey: null,
    _permissionsFromUserGroups: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      id: null,
      permissions: null
    }],
    _project_permsV2: {
      id: null,
      inviteOnlyAt: null,
      path: null,
      teamId: null
    },
    _sourceFile_permsV2: {
      hasFileLinkPassword: null,
      id: null
    },
    currentUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      emailDomain: null,
      id: null,
      permissionFeatureFlagsV2: null
    }],
    roleOnObjectForUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      level: null
    }],
    roleOnObjectProjectForUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      level: null
    }],
    roleOnObjectRepoForUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      level: null
    }],
    roleOnObjectTeamForUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      level: null
    }],
    workshopMode: {
      expiresAt: null
    },
    pwdConfigV2: {
      version: null
    },
    sourceFilePwdConfig: {
      version: null
    },
    passwordAuthentication: [{
      anonymousUserId: {
        type: 'view',
        ref: 'anonymousUserId'
      }
    }, {
      createdAt: null,
      passwordVersion: null
    }],
    sourceFilePasswordAuthentication: [{
      anonymousUserId: {
        type: 'view',
        ref: 'anonymousUserId'
      }
    }, {
      createdAt: null,
      passwordVersion: null
    }]
  },
  'FILE::POL::ALLOW_VIEW_FOR_LINK_ACCESS_USER_FILE_RECENTS': {
    deletedAt: null,
    editorType: null,
    fileRepoId: null,
    hasFileLinkPassword: null,
    id: null,
    key: null,
    linkAccess: null,
    parentOrgId: null,
    sourceFileKey: null,
    trashedAt: null,
    UserFileRecentAny: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      fileKey: null,
      userId: null
    }],
    _org_permsV2: {
      bigmaEnabledAt: null,
      permissionOrgFeatureFlags: null
    },
    _repo_permsV2: {
      linkAccess: null
    },
    _sourceFile_permsV2: {
      hasFileLinkPassword: null,
      id: null
    },
    currentPlanUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      permission: null
    }],
    currentUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      emailDomain: null,
      emailValidatedAt: null,
      id: null,
      permissionFeatureFlagsV2: null
    }],
    orgSharedSetting: {
      id: null,
      publicLinkControlsSetting: null
    },
    _team_permsV2: {
      workspaceSharedSetting: {
        id: null,
        publicLinkControlsSetting: null
      }
    },
    pwdConfigV2: {
      version: null
    },
    sourceFilePwdConfig: {
      version: null
    },
    passwordAuthentication: [{
      anonymousUserId: {
        type: 'view',
        ref: 'anonymousUserId'
      }
    }, {
      createdAt: null,
      passwordVersion: null
    }],
    sourceFilePasswordAuthentication: [{
      anonymousUserId: {
        type: 'view',
        ref: 'anonymousUserId'
      }
    }, {
      createdAt: null,
      passwordVersion: null
    }],
    fileLinkExpirationConfig: {
      accessReverted: null,
      expiresAt: null,
      id: null,
      prevPrivateLinkAccess: null
    },
    sourceFileLinkExpirationConfig: {
      accessReverted: null,
      expiresAt: null,
      id: null,
      prevPrivateLinkAccess: null
    }
  },
  'FILE::POL::ALLOW_FOLDER_VIEWER_DISCOVER': {
    deletedAt: null,
    editorType: null,
    fileRepoId: null,
    hasFileLinkPassword: null,
    id: null,
    key: null,
    linkAccess: null,
    parentOrgId: null,
    sourceFileKey: null,
    _org_permsV2: {
      bigmaEnabledAt: null,
      permissionOrgFeatureFlags: null
    },
    _project_permsV2: {
      id: null,
      sharingAudienceControl: null
    },
    _repo_permsV2: {
      linkAccess: null
    },
    _sourceFile_permsV2: {
      hasFileLinkPassword: null,
      id: null
    },
    currentPlanUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      permission: null
    }],
    currentUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      emailDomain: null,
      emailValidatedAt: null,
      id: null,
      permissionFeatureFlagsV2: null
    }],
    orgSharedSetting: {
      id: null,
      publicLinkControlsSetting: null
    },
    _team_permsV2: {
      workspaceSharedSetting: {
        id: null,
        publicLinkControlsSetting: null
      }
    },
    pwdConfigV2: {
      version: null
    },
    sourceFilePwdConfig: {
      version: null
    },
    passwordAuthentication: [{
      anonymousUserId: {
        type: 'view',
        ref: 'anonymousUserId'
      }
    }, {
      createdAt: null,
      passwordVersion: null
    }],
    sourceFilePasswordAuthentication: [{
      anonymousUserId: {
        type: 'view',
        ref: 'anonymousUserId'
      }
    }, {
      createdAt: null,
      passwordVersion: null
    }],
    fileLinkExpirationConfig: {
      accessReverted: null,
      expiresAt: null,
      id: null,
      prevPrivateLinkAccess: null
    },
    sourceFileLinkExpirationConfig: {
      accessReverted: null,
      expiresAt: null,
      id: null,
      prevPrivateLinkAccess: null
    }
  },
  'FILE::POL::ALLOW_FOLDER_VIEWER_DISCOVER_V2': {
    deletedAt: null,
    editorType: null,
    fileRepoId: null,
    hasFileLinkPassword: null,
    id: null,
    key: null,
    linkAccess: null,
    parentOrgId: null,
    sourceFileKey: null,
    _org_permsV2: {
      bigmaEnabledAt: null,
      permissionOrgFeatureFlags: null
    },
    _project_permsV2: {
      id: null,
      sharingAudienceControl: null
    },
    _repo_permsV2: {
      linkAccess: null
    },
    _sourceFile_permsV2: {
      hasFileLinkPassword: null,
      id: null
    },
    currentPlanUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      permission: null
    }],
    currentUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      emailDomain: null,
      emailValidatedAt: null,
      id: null,
      permissionFeatureFlagsV2: null
    }],
    orgSharedSetting: {
      id: null,
      publicLinkControlsSetting: null
    },
    _team_permsV2: {
      workspaceSharedSetting: {
        id: null,
        publicLinkControlsSetting: null
      }
    },
    pwdConfigV2: {
      version: null
    },
    sourceFilePwdConfig: {
      version: null
    },
    _teamPlanUserRecord: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      permission: null
    }],
    _orgPlanUserRecord: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      permission: null
    }],
    passwordAuthentication: [{
      anonymousUserId: {
        type: 'view',
        ref: 'anonymousUserId'
      }
    }, {
      createdAt: null,
      passwordVersion: null
    }],
    sourceFilePasswordAuthentication: [{
      anonymousUserId: {
        type: 'view',
        ref: 'anonymousUserId'
      }
    }, {
      createdAt: null,
      passwordVersion: null
    }],
    fileLinkExpirationConfig: {
      accessReverted: null,
      expiresAt: null,
      id: null,
      prevPrivateLinkAccess: null
    },
    sourceFileLinkExpirationConfig: {
      accessReverted: null,
      expiresAt: null,
      id: null,
      prevPrivateLinkAccess: null
    }
  },
  'FILE::POL::ALLOW_ORG_ADMIN_ABANDONED_DRAFTS': {
    _project_permsV2: {
      isAbandonedDrafts: null
    },
    currentPlanUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      id: null,
      permission: null,
      type: null
    }],
    currentUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      emailDomain: null,
      id: null,
      permissionFeatureFlagsV2: null
    }]
  },
  'FILE::POL::ALLOW_ORG_ADMIN_ABANDONED_DRAFTS_V2': {
    _project_permsV2: {
      isAbandonedDrafts: null
    },
    currentUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      emailDomain: null,
      id: null,
      permissionFeatureFlagsV2: null
    }],
    _teamPlanUserRecord: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      id: null,
      permission: null,
      type: null
    }],
    _orgPlanUserRecord: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      id: null,
      permission: null,
      type: null
    }]
  },
  'FILE::POL::DENY_EDITS_FOR_NIL_PLAN_USER_FOR_V_R_BY_DEFAULT': {
    editorType: null,
    currentPlanUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      id: null
    }],
    currentUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      emailDomain: null,
      id: null,
      permissionFeatureFlagsV2: null
    }],
    plan: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      designDefaultPaidStatus: null,
      id: null,
      whiteboardDefaultPaidStatus: null
    }]
  },
  'FILE::POL::DENY_EDITS_FOR_NIL_PLAN_USER': {
    currentPlanUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      id: null
    }],
    currentUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      emailDomain: null,
      id: null,
      permissionFeatureFlagsV2: null
    }],
    plan: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      campfireModelEnabledAt: null,
      id: null,
      tier: null
    }]
  },
  'FILE::POL::DENY_EDITS_FOR_PLAN_USER_WHEN_DRAFTS_OWNER_IS_RESTRICTED': {
    editorType: null,
    folderId: null,
    _project_permsV2: {
      path: null
    },
    currentPlanUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      draftsFolderId: null
    }],
    currentUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      emailDomain: null,
      id: null,
      permissionFeatureFlagsV2: null
    }],
    folderOwnerPlanUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      designPaidStatus: null,
      id: null,
      licenseTypes: null,
      provisionalLicenseTypes: null,
      whiteboardPaidStatus: null
    }],
    plan: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      activeTrialLicenseTypes: null,
      campfireModelEnabledAt: null,
      id: null,
      tier: null,
      monetizationConfig: {
        editorTypeToLicenseTypeMap: {
          fromValue: null,
          toValue: null
        }
      }
    }]
  },
  'FILE::POL::DENY_EDITS_FOR_RESTRICTED_PLAN_USER': {
    deletedAt: null,
    editorType: null,
    folderId: null,
    _project_permsV2: {
      path: null,
      _mostRecentActiveResourceConnection: {
        connectedPlanType: null,
        _connectedOrgPlanRecord: {
          _currentPlanUserRecord: [{
            userId: {
              type: 'view',
              ref: 'userId'
            }
          }, {
            id: null,
            licenseTypes: null,
            permission: null,
            provisionalLicenseTypes: null
          }],
          activeTrialLicenseTypes: null,
          campfireModelEnabledAt: null,
          featureFlagFcPlanEnabled: {
            id: null,
            name: null,
            value: null
          },
          id: null,
          tierLevel: null
        },
        _connectedTeamPlanRecord: {
          _currentPlanUserRecord: [{
            userId: {
              type: 'view',
              ref: 'userId'
            }
          }, {
            id: null,
            licenseTypes: null,
            permission: null,
            provisionalLicenseTypes: null
          }],
          activeTrialLicenseTypes: null,
          campfireModelEnabledAt: null,
          featureFlagFcPlanEnabled: {
            id: null,
            name: null,
            value: null
          },
          id: null,
          tierLevel: null
        }
      }
    },
    connectedPlan: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      activeTrialLicenseTypes: null,
      campfireModelEnabledAt: null,
      featureFlagFcPlanEnabled: {
        id: null,
        name: null,
        value: null
      },
      id: null,
      tier: null,
      tierLevel: null
    }],
    connectedPlanUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      designPaidStatus: null,
      id: null,
      licenseTypes: null,
      permission: null,
      provisionalLicenseTypes: null,
      whiteboardPaidStatus: null
    }],
    currentPlanUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      designPaidStatus: null,
      draftsFolderId: null,
      id: null,
      licenseTypes: null,
      permission: null,
      provisionalLicenseTypes: null,
      whiteboardPaidStatus: null
    }],
    currentUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      emailDomain: null,
      emailValidatedAt: null,
      id: null,
      permissionFeatureFlagsV2: null
    }],
    plan: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      activeTrialLicenseTypes: null,
      campfireModelEnabledAt: null,
      featureFlagFcPlanEnabled: {
        id: null,
        name: null,
        value: null
      },
      id: null,
      tier: null,
      tierLevel: null,
      monetizationConfig: {
        editorTypeToLicenseTypeMap: {
          fromValue: null,
          toValue: null
        }
      }
    }],
    _teamPlanUserRecord: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      id: null,
      licenseTypes: null,
      permission: null,
      provisionalLicenseTypes: null
    }],
    _orgPlanUserRecord: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      id: null,
      licenseTypes: null,
      permission: null,
      provisionalLicenseTypes: null
    }],
    _orgPlanRecord: {
      activeTrialLicenseTypes: null,
      campfireModelEnabledAt: null,
      featureFlagFcPlanEnabled: {
        id: null,
        name: null,
        value: null
      },
      id: null,
      tierLevel: null
    },
    _teamPlanRecord: {
      activeTrialLicenseTypes: null,
      campfireModelEnabledAt: null,
      featureFlagFcPlanEnabled: {
        id: null,
        name: null,
        value: null
      },
      id: null,
      tierLevel: null
    }
  },
  'FILE::POL::ALLOW_SHARED_LIBRARY_SHARING_GROUP_VIEW_ACCESS': {
    currentUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      emailDomain: null,
      id: null,
      permissionFeatureFlagsV2: null
    }],
    fileCompositeSharingGroup: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      id: null,
      maxLevel: null
    }],
    library: {
      hasAssets: null
    },
    plan: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      featureFlagFcPlanEnabled: {
        id: null,
        name: null,
        value: null
      },
      id: null
    }]
  },
  'FILE::POL::ALLOW_SHARED_LIBRARY_SHARING_GROUP_VIEW_ACCESS_V2': {
    currentUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      emailDomain: null,
      id: null,
      permissionFeatureFlagsV2: null
    }],
    fileCompositeSharingGroup: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      id: null,
      maxLevel: null
    }],
    library: {
      hasAssets: null
    },
    _orgPlanRecord: {
      featureFlagFcPlanEnabled: {
        id: null,
        name: null,
        value: null
      },
      id: null
    },
    _teamPlanRecord: {
      featureFlagFcPlanEnabled: {
        id: null,
        name: null,
        value: null
      },
      id: null
    }
  },
  'FILE::POL::DENY_EDITS_FOR_FIGMAKE_STARTER_TEAMS': {
    editorType: null,
    currentUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      emailDomain: null,
      id: null,
      permissionFeatureFlagsV2: null
    }],
    plan: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      tier: null
    }]
  },
  'FILE::POL::DENY_EDITS_FOR_FIGMAKE_STUDENT_TEAMS': {
    editorType: null,
    currentUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      emailDomain: null,
      id: null,
      permissionFeatureFlagsV2: null
    }],
    plan: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      tier: null
    }]
  },
  'FILE::POL::DENY_EDITS_FOR_SITES_STARTER_TEAMS': {
    editorType: null,
    currentUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      emailDomain: null,
      id: null,
      permissionFeatureFlagsV2: null
    }],
    plan: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      tier: null
    }]
  },
  'FILE::POL::DENY_EDITS_FOR_SITES_STUDENT_TEAMS': {
    editorType: null,
    currentUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      emailDomain: null,
      id: null,
      permissionFeatureFlagsV2: null
    }],
    plan: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      tier: null
    }]
  },
  'FILE::POL::DENY_EDITS_FOR_SITES_IN_DRAFTS_TO_MOVE': {
    editorType: null,
    id: null,
    parentOrgId: null,
    teamId: null,
    currentUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      emailDomain: null,
      id: null,
      permissionFeatureFlagsV2: null
    }]
  },
  'FILE::POL::DENY_DELETED_FILE': {
    deletedAt: null,
    currentUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      emailDomain: null,
      id: null,
      permissionFeatureFlagsV2: null
    }]
  },
  'FILE::POL::DENY_FILE_IN_DELETED_FOLDER': {
    _project_permsV2: {
      deletedAt: null
    },
    currentUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      emailDomain: null,
      id: null,
      permissionFeatureFlagsV2: null
    }]
  },
  'FILE::POL::DENY_ARCHIVED_FILE': {
    deletedAt: null,
    fileRepoId: null,
    currentUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      emailDomain: null,
      id: null,
      permissionFeatureFlagsV2: null
    }]
  },
  'FILE::POL::DENY_FILE_TRASHED_BRANCH': {
    fileRepoId: null,
    key: null,
    sourceFileKey: null,
    trashedAt: null,
    currentUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      emailDomain: null,
      id: null,
      permissionFeatureFlagsV2: null
    }]
  },
  'FILE::POL::DENY_EDIT_FOR_EXTERNAL_RESTRICTED_USERS': {
    _org_permsV2: {
      id: null,
      permissionOrgFeatureFlags: null
    },
    currentUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      emailDomain: null,
      externalRestrictedOrgId: null,
      id: null,
      permissionFeatureFlagsV2: null
    }]
  },
  'FILE::POL::DENY_EDITS_FOR_EXPIRED_EDU_GRACE_PERIOD': {
    parentOrgId: null,
    teamId: null,
    currentUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      emailDomain: null,
      id: null,
      permissionFeatureFlagsV2: null,
      studentValidatedAt: null
    }],
    eduGracePeriod: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      createdAt: null,
      id: null
    }],
    plan: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      tier: null
    }]
  },
  'FILE::POL::DENY_EDITS_FOR_LOCKED_TEAM': {
    folderId: null,
    teamId: null,
    _project_permsV2: {
      path: null
    },
    _team_permsV2: {
      hasLockedRestriction: null,
      permissionTeamFeatureFlags: null
    },
    currentPlanUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      draftsFolderId: null
    }],
    currentUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      emailDomain: null,
      id: null,
      permissionFeatureFlagsV2: null
    }]
  },
  'FILE::POL::DENY_EDITS_FOR_SLIDES_DISABLED_ORG': {
    editorType: null,
    _org_permsV2: {
      id: null,
      isSlidesDisabled: null,
      permissionOrgFeatureFlags: null
    },
    currentUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      emailDomain: null,
      id: null,
      permissionFeatureFlagsV2: null
    }]
  },
  'FILE::POL::DENY_EDITS_FOR_SITES_DISABLED_ORG': {
    editorType: null,
    _org_permsV2: {
      id: null,
      isSitesDisabled: null,
      permissionOrgFeatureFlags: null
    },
    currentUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      emailDomain: null,
      id: null,
      permissionFeatureFlagsV2: null
    }]
  },
  'FILE::POL::DENY_EDITS_FOR_FIGMAKE_DISABLED_ORG': {
    editorType: null,
    _org_permsV2: {
      id: null,
      isFigmakeDisabled: null,
      permissionOrgFeatureFlags: null
    },
    currentUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      emailDomain: null,
      id: null,
      permissionFeatureFlagsV2: null
    }]
  },
  'FILE::POL::DENY_EDITS_FOR_COOPER_DISABLED_ORG': {
    editorType: null,
    _org_permsV2: {
      id: null,
      isCooperDisabled: null,
      permissionOrgFeatureFlags: null
    },
    currentUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      emailDomain: null,
      id: null,
      permissionFeatureFlagsV2: null
    }]
  },
  'FILE::POL::DENY_ORG_NON_PUBLIC_FILE_MFA_RESTRICTED_GUESTS': {
    deletedAt: null,
    editorType: null,
    fileRepoId: null,
    hasFileLinkPassword: null,
    id: null,
    key: null,
    linkAccess: null,
    parentOrgId: null,
    sourceFileKey: null,
    _org_permsV2: {
      bigmaEnabledAt: null,
      isOrgGuestMfaForGoogleSsoEnabled: null,
      isOrgGuestMfaForSamlSsoEnabled: null,
      mfaRequired: null,
      permissionOrgFeatureFlags: null
    },
    _repo_permsV2: {
      linkAccess: null
    },
    _sourceFile_permsV2: {
      hasFileLinkPassword: null,
      id: null
    },
    currentPlanUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      id: null,
      permission: null
    }],
    currentUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      emailDomain: null,
      emailValidatedAt: null,
      googleSsoOnly: [{
        userId: {
          type: 'view',
          ref: 'userId'
        }
      }, null],
      id: null,
      permissionFeatureFlagsV2: null,
      phoneNumberExists: null,
      samlSsoOnly: [{
        userId: {
          type: 'view',
          ref: 'userId'
        }
      }, null],
      ssoOnly: [{
        userId: {
          type: 'view',
          ref: 'userId'
        }
      }, null]
    }],
    orgSharedSetting: {
      id: null,
      publicLinkControlsSetting: null
    },
    userAuthn: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      id: null,
      totpSecretExists: null
    }],
    workshopMode: {
      expiresAt: null
    },
    _team_permsV2: {
      workspaceSharedSetting: {
        id: null,
        publicLinkControlsSetting: null
      }
    },
    pwdConfigV2: {
      version: null
    },
    sourceFilePwdConfig: {
      version: null
    },
    passwordAuthentication: [{
      anonymousUserId: {
        type: 'view',
        ref: 'anonymousUserId'
      }
    }, {
      createdAt: null,
      passwordVersion: null
    }],
    sourceFilePasswordAuthentication: [{
      anonymousUserId: {
        type: 'view',
        ref: 'anonymousUserId'
      }
    }, {
      createdAt: null,
      passwordVersion: null
    }],
    fileLinkExpirationConfig: {
      accessReverted: null,
      expiresAt: null
    },
    sourceFileLinkExpirationConfig: {
      accessReverted: null,
      expiresAt: null
    }
  },
  'FILE::POL::DENY_SITES_FOR_NON_SITES_USERS': {
    editorType: null,
    currentUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      emailDomain: null,
      id: null,
      permissionFeatureFlagsV2: null
    }]
  },
  'FILE::POL::DENY_FILE_FOR_UNVALIDATED_USER_EMAIL': {
    currentUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      emailDomain: null,
      emailValidatedAt: null,
      id: null,
      permissionFeatureFlagsV2: null
    }]
  },
  'FILE::POL::DENY_FIGMAKE_FOR_NON_FIGMAKE_USERS': {
    editorType: null,
    isBakeEnabled: null,
    currentUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      emailDomain: null,
      id: null,
      permissionFeatureFlagsV2: null
    }]
  },
  'FILE::POL::DENY_EDIT_SITES_IN_K12_ORG': {
    editorType: null,
    parentOrgId: null,
    _org_permsV2: {
      k12GoogleOrg: null,
      permissionOrgFeatureFlags: null
    },
    currentUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      emailDomain: null,
      id: null,
      permissionFeatureFlagsV2: null
    }]
  },
  'FILE::POL::DENY_EDIT_FIGMAKE_IN_K12_ORG': {
    editorType: null,
    parentOrgId: null,
    _org_permsV2: {
      k12GoogleOrg: null,
      permissionOrgFeatureFlags: null
    },
    currentUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      emailDomain: null,
      id: null,
      permissionFeatureFlagsV2: null
    }]
  },
  'FILE::POL::DENY_SANCTIONED_TEAM_FILE_ACCESS': {
    teamId: null,
    currentUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      emailDomain: null,
      id: null,
      permissionFeatureFlagsV2: null
    }]
  },
  'FILE::POL::ALLOW_ORG_FILE_VIEW_LINK_ACCESS_V2': {
    deletedAt: null,
    editorType: null,
    fileRepoId: null,
    key: null,
    linkAccess: null,
    parentOrgId: null,
    _org_permsV2: {
      bigmaEnabledAt: null,
      permissionOrgFeatureFlags: null
    },
    _repo_permsV2: {
      linkAccess: null
    },
    currentPlanUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      permission: null
    }],
    currentUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      emailDomain: null,
      emailValidatedAt: null,
      id: null,
      permissionFeatureFlagsV2: null
    }],
    fileLinkExpirationConfig: {
      accessReverted: null,
      expiresAt: null,
      id: null,
      prevPrivateLinkAccess: null
    },
    sourceFileLinkExpirationConfig: {
      accessReverted: null,
      expiresAt: null,
      id: null,
      prevPrivateLinkAccess: null
    }
  },
  'FILE::POL::ALLOW_ORG_FILE_EDIT_LINK_ACCESS_V2': {
    deletedAt: null,
    fileRepoId: null,
    id: null,
    linkAccess: null,
    parentOrgId: null,
    _org_permsV2: {
      bigmaEnabledAt: null,
      permissionOrgFeatureFlags: null
    },
    _repo_permsV2: {
      linkAccess: null
    },
    currentPlanUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      permission: null
    }],
    currentUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      emailDomain: null,
      emailValidatedAt: null,
      id: null,
      permissionFeatureFlagsV2: null
    }],
    fileLinkExpirationConfig: {
      accessReverted: null,
      expiresAt: null,
      id: null,
      prevPrivateLinkAccess: null
    },
    sourceFileLinkExpirationConfig: {
      accessReverted: null,
      expiresAt: null,
      id: null,
      prevPrivateLinkAccess: null
    }
  },
  'FILE::POL::ALLOW_FILE_VIEW_LINK_ACCESS_V2': {
    deletedAt: null,
    fileRepoId: null,
    hasFileLinkPassword: null,
    id: null,
    key: null,
    linkAccess: null,
    parentOrgId: null,
    sourceFileKey: null,
    _org_permsV2: {
      bigmaEnabledAt: null,
      permissionOrgFeatureFlags: null
    },
    _repo_permsV2: {
      linkAccess: null
    },
    _sourceFile_permsV2: {
      hasFileLinkPassword: null,
      id: null
    },
    currentUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      emailDomain: null,
      emailValidatedAt: null,
      id: null,
      permissionFeatureFlagsV2: null
    }],
    orgSharedSetting: {
      id: null,
      publicLinkControlsSetting: null
    },
    _team_permsV2: {
      workspaceSharedSetting: {
        id: null,
        publicLinkControlsSetting: null
      }
    },
    pwdConfigV2: {
      version: null
    },
    sourceFilePwdConfig: {
      version: null
    },
    passwordAuthentication: [{
      anonymousUserId: {
        type: 'view',
        ref: 'anonymousUserId'
      }
    }, {
      createdAt: null,
      passwordVersion: null
    }],
    sourceFilePasswordAuthentication: [{
      anonymousUserId: {
        type: 'view',
        ref: 'anonymousUserId'
      }
    }, {
      createdAt: null,
      passwordVersion: null
    }],
    fileLinkExpirationConfig: {
      accessReverted: null,
      expiresAt: null
    },
    sourceFileLinkExpirationConfig: {
      accessReverted: null,
      expiresAt: null
    }
  },
  'FILE::POL::ALLOW_FILE_EDIT_LINK_ACCESS': {
    deletedAt: null,
    fileRepoId: null,
    hasFileLinkPassword: null,
    id: null,
    key: null,
    linkAccess: null,
    parentOrgId: null,
    sourceFileKey: null,
    _org_permsV2: {
      bigmaEnabledAt: null,
      permissionOrgFeatureFlags: null
    },
    _repo_permsV2: {
      linkAccess: null
    },
    _sourceFile_permsV2: {
      hasFileLinkPassword: null,
      id: null
    },
    currentUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      emailDomain: null,
      emailValidatedAt: null,
      id: null,
      permissionFeatureFlagsV2: null
    }],
    orgSharedSetting: {
      id: null,
      publicLinkControlsSetting: null
    },
    _team_permsV2: {
      workspaceSharedSetting: {
        id: null,
        publicLinkControlsSetting: null
      }
    },
    pwdConfigV2: {
      version: null
    },
    sourceFilePwdConfig: {
      version: null
    },
    passwordAuthentication: [{
      anonymousUserId: {
        type: 'view',
        ref: 'anonymousUserId'
      }
    }, {
      createdAt: null,
      passwordVersion: null
    }],
    sourceFilePasswordAuthentication: [{
      anonymousUserId: {
        type: 'view',
        ref: 'anonymousUserId'
      }
    }, {
      createdAt: null,
      passwordVersion: null
    }],
    fileLinkExpirationConfig: {
      accessReverted: null,
      expiresAt: null
    },
    sourceFileLinkExpirationConfig: {
      accessReverted: null,
      expiresAt: null
    }
  }
};
let oe = {
  name: 'fileAllowIfValidInviteExists',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'linkAccessOverrideKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionPolicyName: 'FILE::POL::ALLOW_IF_VALID_INVITE_EXISTS',
  dependencies: s9['FILE::POL::ALLOW_IF_VALID_INVITE_EXISTS']
};
let ot = {
  name: 'fileAllowRepoFileViewer',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'linkAccessOverrideKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionPolicyName: 'FILE::POL::ALLOW_REPO_FILE_VIEWER',
  dependencies: s9['FILE::POL::ALLOW_REPO_FILE_VIEWER']
};
let oi = {
  name: 'fileAllowRepoFileEditor',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'linkAccessOverrideKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionPolicyName: 'FILE::POL::ALLOW_REPO_FILE_EDITOR',
  dependencies: s9['FILE::POL::ALLOW_REPO_FILE_EDITOR']
};
let on = {
  name: 'fileAllowRepoFileOwner',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'linkAccessOverrideKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionPolicyName: 'FILE::POL::ALLOW_REPO_FILE_OWNER',
  dependencies: s9['FILE::POL::ALLOW_REPO_FILE_OWNER']
};
let or = {
  name: 'fileAllowTeamFileViewer',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'linkAccessOverrideKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionPolicyName: 'FILE::POL::ALLOW_TEAM_FILE_VIEWER',
  dependencies: s9['FILE::POL::ALLOW_TEAM_FILE_VIEWER']
};
let oa = {
  name: 'fileAllowTeamFileEditor',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'linkAccessOverrideKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionPolicyName: 'FILE::POL::ALLOW_TEAM_FILE_EDITOR',
  dependencies: s9['FILE::POL::ALLOW_TEAM_FILE_EDITOR']
};
let os = {
  name: 'fileAllowTeamFileOwner',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'linkAccessOverrideKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionPolicyName: 'FILE::POL::ALLOW_TEAM_FILE_OWNER',
  dependencies: s9['FILE::POL::ALLOW_TEAM_FILE_OWNER']
};
let oo = {
  name: 'fileAllowFileTeamAdminAccessForOrphanedFolder',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'linkAccessOverrideKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionPolicyName: 'FILE::POL::ALLOW_FILE_TEAM_ADMIN_ACCESS_FOR_ORPHANED_FOLDER',
  dependencies: s9['FILE::POL::ALLOW_FILE_TEAM_ADMIN_ACCESS_FOR_ORPHANED_FOLDER']
};
let ol = {
  name: 'fileAllowFolderFileViewer',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'linkAccessOverrideKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionPolicyName: 'FILE::POL::ALLOW_FOLDER_FILE_VIEWER',
  dependencies: s9['FILE::POL::ALLOW_FOLDER_FILE_VIEWER']
};
let od = {
  name: 'fileAllowFolderFileEditor',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'linkAccessOverrideKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionPolicyName: 'FILE::POL::ALLOW_FOLDER_FILE_EDITOR',
  dependencies: s9['FILE::POL::ALLOW_FOLDER_FILE_EDITOR']
};
let oc = {
  name: 'fileAllowFolderFileOwner',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'linkAccessOverrideKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionPolicyName: 'FILE::POL::ALLOW_FOLDER_FILE_OWNER',
  dependencies: s9['FILE::POL::ALLOW_FOLDER_FILE_OWNER']
};
let ou = {
  name: 'fileAllowHostPlanAdminsEditConnectedFolderFiles',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'linkAccessOverrideKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionPolicyName: 'FILE::POL::ALLOW_HOST_PLAN_ADMINS_EDIT_CONNECTED_FOLDER_FILES',
  dependencies: s9['FILE::POL::ALLOW_HOST_PLAN_ADMINS_EDIT_CONNECTED_FOLDER_FILES']
};
let op = {
  name: 'fileAllowHostPlanAdminsEditConnectedFolderFilesV2',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'linkAccessOverrideKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionPolicyName: 'FILE::POL::ALLOW_HOST_PLAN_ADMINS_EDIT_CONNECTED_FOLDER_FILES_V2',
  dependencies: s9['FILE::POL::ALLOW_HOST_PLAN_ADMINS_EDIT_CONNECTED_FOLDER_FILES_V2']
};
let om = {
  name: 'fileAllowFileViewer',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'linkAccessOverrideKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionPolicyName: 'FILE::POL::ALLOW_FILE_VIEWER',
  dependencies: s9['FILE::POL::ALLOW_FILE_VIEWER']
};
let oh = {
  name: 'fileAllowFileEditor',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'linkAccessOverrideKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionPolicyName: 'FILE::POL::ALLOW_FILE_EDITOR',
  dependencies: s9['FILE::POL::ALLOW_FILE_EDITOR']
};
let og = {
  name: 'fileAllowFileOwner',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'linkAccessOverrideKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionPolicyName: 'FILE::POL::ALLOW_FILE_OWNER',
  dependencies: s9['FILE::POL::ALLOW_FILE_OWNER']
};
let of = {
  name: 'fileAllowFileAccessIfMentionedOnCanvas',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'linkAccessOverrideKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionPolicyName: 'FILE::POL::ALLOW_FILE_ACCESS_IF_MENTIONED_ON_CANVAS',
  dependencies: s9['FILE::POL::ALLOW_FILE_ACCESS_IF_MENTIONED_ON_CANVAS']
};
let o_ = {
  name: 'fileAllowFileAccessIfAtMentionedInComment',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'linkAccessOverrideKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionPolicyName: 'FILE::POL::ALLOW_FILE_ACCESS_IF_AT_MENTIONED_IN_COMMENT',
  dependencies: s9['FILE::POL::ALLOW_FILE_ACCESS_IF_AT_MENTIONED_IN_COMMENT']
};
let oA = {
  name: 'fileAllowOrgBrowsableAccessForMember',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'linkAccessOverrideKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionPolicyName: 'FILE::POL::ALLOW_ORG_BROWSABLE_ACCESS_FOR_MEMBER',
  dependencies: s9['FILE::POL::ALLOW_ORG_BROWSABLE_ACCESS_FOR_MEMBER']
};
let oy = {
  name: 'fileAllowWorkshopModeEditAccessV2',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'linkAccessOverrideKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionPolicyName: 'FILE::POL::ALLOW_WORKSHOP_MODE_EDIT_ACCESS_V2',
  dependencies: s9['FILE::POL::ALLOW_WORKSHOP_MODE_EDIT_ACCESS_V2']
};
let ob = {
  name: 'fileAllowViewForLinkAccessUserFileRecents',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'linkAccessOverrideKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionPolicyName: 'FILE::POL::ALLOW_VIEW_FOR_LINK_ACCESS_USER_FILE_RECENTS',
  dependencies: s9['FILE::POL::ALLOW_VIEW_FOR_LINK_ACCESS_USER_FILE_RECENTS']
};
let ov = {
  name: 'fileAllowFolderViewerDiscover',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'linkAccessOverrideKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionPolicyName: 'FILE::POL::ALLOW_FOLDER_VIEWER_DISCOVER',
  dependencies: s9['FILE::POL::ALLOW_FOLDER_VIEWER_DISCOVER']
};
let oI = {
  name: 'fileAllowFolderViewerDiscoverV2',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'linkAccessOverrideKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionPolicyName: 'FILE::POL::ALLOW_FOLDER_VIEWER_DISCOVER_V2',
  dependencies: s9['FILE::POL::ALLOW_FOLDER_VIEWER_DISCOVER_V2']
};
let oE = {
  name: 'fileAllowOrgAdminAbandonedDrafts',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'linkAccessOverrideKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionPolicyName: 'FILE::POL::ALLOW_ORG_ADMIN_ABANDONED_DRAFTS',
  dependencies: s9['FILE::POL::ALLOW_ORG_ADMIN_ABANDONED_DRAFTS']
};
let ox = {
  name: 'fileAllowOrgAdminAbandonedDraftsV2',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'linkAccessOverrideKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionPolicyName: 'FILE::POL::ALLOW_ORG_ADMIN_ABANDONED_DRAFTS_V2',
  dependencies: s9['FILE::POL::ALLOW_ORG_ADMIN_ABANDONED_DRAFTS_V2']
};
let oS = {
  name: 'fileDenyEditsForNilPlanUserForVRByDefault',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionPolicyName: 'FILE::POL::DENY_EDITS_FOR_NIL_PLAN_USER_FOR_V_R_BY_DEFAULT',
  dependencies: s9['FILE::POL::DENY_EDITS_FOR_NIL_PLAN_USER_FOR_V_R_BY_DEFAULT']
};
let ow = {
  name: 'fileDenyEditsForNilPlanUser',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionPolicyName: 'FILE::POL::DENY_EDITS_FOR_NIL_PLAN_USER',
  dependencies: s9['FILE::POL::DENY_EDITS_FOR_NIL_PLAN_USER']
};
let oC = {
  name: 'fileDenyEditsForPlanUserWhenDraftsOwnerIsRestricted',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'linkAccessOverrideKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionPolicyName: 'FILE::POL::DENY_EDITS_FOR_PLAN_USER_WHEN_DRAFTS_OWNER_IS_RESTRICTED',
  dependencies: s9['FILE::POL::DENY_EDITS_FOR_PLAN_USER_WHEN_DRAFTS_OWNER_IS_RESTRICTED']
};
let oT = {
  name: 'fileDenyEditsForRestrictedPlanUser',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionPolicyName: 'FILE::POL::DENY_EDITS_FOR_RESTRICTED_PLAN_USER',
  dependencies: s9['FILE::POL::DENY_EDITS_FOR_RESTRICTED_PLAN_USER']
};
let ok = {
  name: 'fileAllowSharedLibrarySharingGroupViewAccess',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'linkAccessOverrideKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionPolicyName: 'FILE::POL::ALLOW_SHARED_LIBRARY_SHARING_GROUP_VIEW_ACCESS',
  dependencies: s9['FILE::POL::ALLOW_SHARED_LIBRARY_SHARING_GROUP_VIEW_ACCESS']
};
let oR = {
  name: 'fileAllowSharedLibrarySharingGroupViewAccessV2',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'linkAccessOverrideKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionPolicyName: 'FILE::POL::ALLOW_SHARED_LIBRARY_SHARING_GROUP_VIEW_ACCESS_V2',
  dependencies: s9['FILE::POL::ALLOW_SHARED_LIBRARY_SHARING_GROUP_VIEW_ACCESS_V2']
};
let oN = {
  name: 'fileDenyEditsForFigmakeStarterTeams',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionPolicyName: 'FILE::POL::DENY_EDITS_FOR_FIGMAKE_STARTER_TEAMS',
  dependencies: s9['FILE::POL::DENY_EDITS_FOR_FIGMAKE_STARTER_TEAMS']
};
let oP = {
  name: 'fileDenyEditsForFigmakeStudentTeams',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionPolicyName: 'FILE::POL::DENY_EDITS_FOR_FIGMAKE_STUDENT_TEAMS',
  dependencies: s9['FILE::POL::DENY_EDITS_FOR_FIGMAKE_STUDENT_TEAMS']
};
let oO = {
  name: 'fileDenyEditsForSitesStarterTeams',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionPolicyName: 'FILE::POL::DENY_EDITS_FOR_SITES_STARTER_TEAMS',
  dependencies: s9['FILE::POL::DENY_EDITS_FOR_SITES_STARTER_TEAMS']
};
let oD = {
  name: 'fileDenyEditsForSitesStudentTeams',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionPolicyName: 'FILE::POL::DENY_EDITS_FOR_SITES_STUDENT_TEAMS',
  dependencies: s9['FILE::POL::DENY_EDITS_FOR_SITES_STUDENT_TEAMS']
};
let oL = {
  name: 'fileDenyEditsForSitesInDraftsToMove',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionPolicyName: 'FILE::POL::DENY_EDITS_FOR_SITES_IN_DRAFTS_TO_MOVE',
  dependencies: s9['FILE::POL::DENY_EDITS_FOR_SITES_IN_DRAFTS_TO_MOVE']
};
let oF = {
  name: 'fileDenyDeletedFile',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'linkAccessOverrideKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionPolicyName: 'FILE::POL::DENY_DELETED_FILE',
  dependencies: s9['FILE::POL::DENY_DELETED_FILE']
};
let oM = {
  name: 'fileDenyFileInDeletedFolder',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'linkAccessOverrideKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionPolicyName: 'FILE::POL::DENY_FILE_IN_DELETED_FOLDER',
  dependencies: s9['FILE::POL::DENY_FILE_IN_DELETED_FOLDER']
};
let oj = {
  name: 'fileDenyArchivedFile',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionPolicyName: 'FILE::POL::DENY_ARCHIVED_FILE',
  dependencies: s9['FILE::POL::DENY_ARCHIVED_FILE']
};
let oU = {
  name: 'fileDenyFileTrashedBranch',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionPolicyName: 'FILE::POL::DENY_FILE_TRASHED_BRANCH',
  dependencies: s9['FILE::POL::DENY_FILE_TRASHED_BRANCH']
};
let oB = {
  name: 'fileDenyEditForExternalRestrictedUsers',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionPolicyName: 'FILE::POL::DENY_EDIT_FOR_EXTERNAL_RESTRICTED_USERS',
  dependencies: s9['FILE::POL::DENY_EDIT_FOR_EXTERNAL_RESTRICTED_USERS']
};
let oV = {
  name: 'fileDenyEditsForExpiredEduGracePeriod',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionPolicyName: 'FILE::POL::DENY_EDITS_FOR_EXPIRED_EDU_GRACE_PERIOD',
  dependencies: s9['FILE::POL::DENY_EDITS_FOR_EXPIRED_EDU_GRACE_PERIOD']
};
let oG = {
  name: 'fileDenyEditsForLockedTeam',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionPolicyName: 'FILE::POL::DENY_EDITS_FOR_LOCKED_TEAM',
  dependencies: s9['FILE::POL::DENY_EDITS_FOR_LOCKED_TEAM']
};
let oz = {
  name: 'fileDenyEditsForSlidesDisabledOrg',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionPolicyName: 'FILE::POL::DENY_EDITS_FOR_SLIDES_DISABLED_ORG',
  dependencies: s9['FILE::POL::DENY_EDITS_FOR_SLIDES_DISABLED_ORG']
};
let oH = {
  name: 'fileDenyEditsForSitesDisabledOrg',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionPolicyName: 'FILE::POL::DENY_EDITS_FOR_SITES_DISABLED_ORG',
  dependencies: s9['FILE::POL::DENY_EDITS_FOR_SITES_DISABLED_ORG']
};
let oW = {
  name: 'fileDenyEditsForFigmakeDisabledOrg',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionPolicyName: 'FILE::POL::DENY_EDITS_FOR_FIGMAKE_DISABLED_ORG',
  dependencies: s9['FILE::POL::DENY_EDITS_FOR_FIGMAKE_DISABLED_ORG']
};
let oK = {
  name: 'fileDenyEditsForCooperDisabledOrg',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionPolicyName: 'FILE::POL::DENY_EDITS_FOR_COOPER_DISABLED_ORG',
  dependencies: s9['FILE::POL::DENY_EDITS_FOR_COOPER_DISABLED_ORG']
};
let oY = {
  name: 'fileDenyOrgNonPublicFileMfaRestrictedGuests',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'linkAccessOverrideKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionPolicyName: 'FILE::POL::DENY_ORG_NON_PUBLIC_FILE_MFA_RESTRICTED_GUESTS',
  dependencies: s9['FILE::POL::DENY_ORG_NON_PUBLIC_FILE_MFA_RESTRICTED_GUESTS']
};
let oq = {
  name: 'fileDenySitesForNonSitesUsers',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'linkAccessOverrideKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionPolicyName: 'FILE::POL::DENY_SITES_FOR_NON_SITES_USERS',
  dependencies: s9['FILE::POL::DENY_SITES_FOR_NON_SITES_USERS']
};
let o$ = {
  name: 'fileDenyFileForUnvalidatedUserEmail',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'linkAccessOverrideKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionPolicyName: 'FILE::POL::DENY_FILE_FOR_UNVALIDATED_USER_EMAIL',
  dependencies: s9['FILE::POL::DENY_FILE_FOR_UNVALIDATED_USER_EMAIL']
};
let oZ = {
  name: 'fileDenyFigmakeForNonFigmakeUsers',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'linkAccessOverrideKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionPolicyName: 'FILE::POL::DENY_FIGMAKE_FOR_NON_FIGMAKE_USERS',
  dependencies: s9['FILE::POL::DENY_FIGMAKE_FOR_NON_FIGMAKE_USERS']
};
let oX = {
  name: 'fileDenyEditSitesInK12Org',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionPolicyName: 'FILE::POL::DENY_EDIT_SITES_IN_K12_ORG',
  dependencies: s9['FILE::POL::DENY_EDIT_SITES_IN_K12_ORG']
};
let oQ = {
  name: 'fileDenyEditFigmakeInK12Org',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionPolicyName: 'FILE::POL::DENY_EDIT_FIGMAKE_IN_K12_ORG',
  dependencies: s9['FILE::POL::DENY_EDIT_FIGMAKE_IN_K12_ORG']
};
let oJ = {
  name: 'fileDenySanctionedTeamFileAccess',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'linkAccessOverrideKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionPolicyName: 'FILE::POL::DENY_SANCTIONED_TEAM_FILE_ACCESS',
  dependencies: s9['FILE::POL::DENY_SANCTIONED_TEAM_FILE_ACCESS']
};
let o0 = {
  name: 'fileAllowOrgFileViewLinkAccessV2',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'linkAccessOverrideKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionPolicyName: 'FILE::POL::ALLOW_ORG_FILE_VIEW_LINK_ACCESS_V2',
  dependencies: s9['FILE::POL::ALLOW_ORG_FILE_VIEW_LINK_ACCESS_V2']
};
let o1 = {
  name: 'fileAllowOrgFileEditLinkAccessV2',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionPolicyName: 'FILE::POL::ALLOW_ORG_FILE_EDIT_LINK_ACCESS_V2',
  dependencies: s9['FILE::POL::ALLOW_ORG_FILE_EDIT_LINK_ACCESS_V2']
};
let o2 = {
  name: 'fileAllowFileViewLinkAccessV2',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'linkAccessOverrideKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionPolicyName: 'FILE::POL::ALLOW_FILE_VIEW_LINK_ACCESS_V2',
  dependencies: s9['FILE::POL::ALLOW_FILE_VIEW_LINK_ACCESS_V2']
};
let o5 = {
  name: 'fileAllowFileEditLinkAccess',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  computed: !0,
  permissionPolicyName: 'FILE::POL::ALLOW_FILE_EDIT_LINK_ACCESS',
  dependencies: s9['FILE::POL::ALLOW_FILE_EDIT_LINK_ACCESS']
};
let o3 = {
  name: 'canEditV3FromPolicies',
  type: {
    kind: 'bool'
  },
  computed: !0,
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'linkAccessOverrideKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  permissionName: 'FILE::CAN_EDIT',
  resolver: {
    type: 'permission',
    withReasons: !1,
    permissionName: 'FILE::CAN_EDIT',
    allowPolicies: {
      fileAllowRepoFileEditor: [{
        linkAccessOverrideKey: createFieldRef('linkAccessOverrideKey'),
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileAllowRepoFileOwner: [{
        linkAccessOverrideKey: createFieldRef('linkAccessOverrideKey'),
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileAllowTeamFileEditor: [{
        linkAccessOverrideKey: createFieldRef('linkAccessOverrideKey'),
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileAllowTeamFileOwner: [{
        linkAccessOverrideKey: createFieldRef('linkAccessOverrideKey'),
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileAllowFileTeamAdminAccessForOrphanedFolder: [{
        linkAccessOverrideKey: createFieldRef('linkAccessOverrideKey'),
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileAllowFolderFileEditor: [{
        linkAccessOverrideKey: createFieldRef('linkAccessOverrideKey'),
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileAllowFolderFileOwner: [{
        linkAccessOverrideKey: createFieldRef('linkAccessOverrideKey'),
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileAllowHostPlanAdminsEditConnectedFolderFiles: [{
        linkAccessOverrideKey: createFieldRef('linkAccessOverrideKey'),
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileAllowHostPlanAdminsEditConnectedFolderFilesV2: [{
        linkAccessOverrideKey: createFieldRef('linkAccessOverrideKey'),
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileAllowFileEditor: [{
        linkAccessOverrideKey: createFieldRef('linkAccessOverrideKey'),
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileAllowFileOwner: [{
        linkAccessOverrideKey: createFieldRef('linkAccessOverrideKey'),
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileAllowOrgAdminAbandonedDrafts: [{
        linkAccessOverrideKey: createFieldRef('linkAccessOverrideKey'),
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileAllowOrgAdminAbandonedDraftsV2: [{
        linkAccessOverrideKey: createFieldRef('linkAccessOverrideKey'),
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileAllowOrgFileEditLinkAccessV2: [{
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileAllowFileEditLinkAccess: [{
        userId: createFieldRef('userId'),
        anonymousUserId: createFieldRef('anonymousUserId'),
        sessionId: createFieldRef('sessionId')
      }, NULL_FIELD_REF]
    },
    denyPolicies: {
      fileDenyEditsForNilPlanUserForVRByDefault: [{
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileDenyEditsForNilPlanUser: [{
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileDenyEditsForPlanUserWhenDraftsOwnerIsRestricted: [{
        linkAccessOverrideKey: createFieldRef('linkAccessOverrideKey'),
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileDenyEditsForRestrictedPlanUser: [{
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileDenyEditsForFigmakeStarterTeams: [{
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileDenyEditsForFigmakeStudentTeams: [{
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileDenyEditsForSitesStarterTeams: [{
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileDenyEditsForSitesStudentTeams: [{
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileDenyEditsForSitesInDraftsToMove: [{
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileDenyDeletedFile: [{
        linkAccessOverrideKey: createFieldRef('linkAccessOverrideKey'),
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileDenyFileInDeletedFolder: [{
        linkAccessOverrideKey: createFieldRef('linkAccessOverrideKey'),
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileDenyArchivedFile: [{
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileDenyFileTrashedBranch: [{
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileDenyEditForExternalRestrictedUsers: [{
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileDenyEditsForExpiredEduGracePeriod: [{
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileDenyEditsForLockedTeam: [{
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileDenyEditsForSlidesDisabledOrg: [{
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileDenyEditsForSitesDisabledOrg: [{
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileDenyEditsForFigmakeDisabledOrg: [{
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileDenyEditsForCooperDisabledOrg: [{
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileDenyOrgNonPublicFileMfaRestrictedGuests: [{
        linkAccessOverrideKey: createFieldRef('linkAccessOverrideKey'),
        userId: createFieldRef('userId'),
        anonymousUserId: createFieldRef('anonymousUserId'),
        sessionId: createFieldRef('sessionId')
      }, NULL_FIELD_REF],
      fileDenySitesForNonSitesUsers: [{
        linkAccessOverrideKey: createFieldRef('linkAccessOverrideKey'),
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileDenyFileForUnvalidatedUserEmail: [{
        linkAccessOverrideKey: createFieldRef('linkAccessOverrideKey'),
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileDenyFigmakeForNonFigmakeUsers: [{
        linkAccessOverrideKey: createFieldRef('linkAccessOverrideKey'),
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileDenyEditSitesInK12Org: [{
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileDenyEditFigmakeInK12Org: [{
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileDenySanctionedTeamFileAccess: [{
        linkAccessOverrideKey: createFieldRef('linkAccessOverrideKey'),
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF]
    }
  }
};
let o6 = {
  name: 'canAccessFromPolicies',
  type: {
    kind: 'bool'
  },
  computed: !0,
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sessionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'anonymousUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'linkAccessOverrideKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  permissionName: 'FILE::CAN_ACCESS',
  resolver: {
    type: 'permission',
    withReasons: !1,
    permissionName: 'FILE::CAN_ACCESS',
    allowPolicies: {
      fileAllowIfValidInviteExists: [{
        linkAccessOverrideKey: createFieldRef('linkAccessOverrideKey'),
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileAllowRepoFileViewer: [{
        linkAccessOverrideKey: createFieldRef('linkAccessOverrideKey'),
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileAllowRepoFileEditor: [{
        linkAccessOverrideKey: createFieldRef('linkAccessOverrideKey'),
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileAllowRepoFileOwner: [{
        linkAccessOverrideKey: createFieldRef('linkAccessOverrideKey'),
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileAllowTeamFileViewer: [{
        linkAccessOverrideKey: createFieldRef('linkAccessOverrideKey'),
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileAllowTeamFileEditor: [{
        linkAccessOverrideKey: createFieldRef('linkAccessOverrideKey'),
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileAllowTeamFileOwner: [{
        linkAccessOverrideKey: createFieldRef('linkAccessOverrideKey'),
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileAllowFileTeamAdminAccessForOrphanedFolder: [{
        linkAccessOverrideKey: createFieldRef('linkAccessOverrideKey'),
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileAllowFolderFileViewer: [{
        linkAccessOverrideKey: createFieldRef('linkAccessOverrideKey'),
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileAllowFolderFileEditor: [{
        linkAccessOverrideKey: createFieldRef('linkAccessOverrideKey'),
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileAllowFolderFileOwner: [{
        linkAccessOverrideKey: createFieldRef('linkAccessOverrideKey'),
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileAllowHostPlanAdminsEditConnectedFolderFiles: [{
        linkAccessOverrideKey: createFieldRef('linkAccessOverrideKey'),
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileAllowHostPlanAdminsEditConnectedFolderFilesV2: [{
        linkAccessOverrideKey: createFieldRef('linkAccessOverrideKey'),
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileAllowFileViewer: [{
        linkAccessOverrideKey: createFieldRef('linkAccessOverrideKey'),
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileAllowFileEditor: [{
        linkAccessOverrideKey: createFieldRef('linkAccessOverrideKey'),
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileAllowFileOwner: [{
        linkAccessOverrideKey: createFieldRef('linkAccessOverrideKey'),
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileAllowFileAccessIfMentionedOnCanvas: [{
        linkAccessOverrideKey: createFieldRef('linkAccessOverrideKey'),
        userId: createFieldRef('userId'),
        anonymousUserId: createFieldRef('anonymousUserId'),
        sessionId: createFieldRef('sessionId')
      }, NULL_FIELD_REF],
      fileAllowFileAccessIfAtMentionedInComment: [{
        linkAccessOverrideKey: createFieldRef('linkAccessOverrideKey'),
        userId: createFieldRef('userId'),
        anonymousUserId: createFieldRef('anonymousUserId'),
        sessionId: createFieldRef('sessionId')
      }, NULL_FIELD_REF],
      fileAllowOrgBrowsableAccessForMember: [{
        linkAccessOverrideKey: createFieldRef('linkAccessOverrideKey'),
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileAllowWorkshopModeEditAccessV2: [{
        linkAccessOverrideKey: createFieldRef('linkAccessOverrideKey'),
        userId: createFieldRef('userId'),
        anonymousUserId: createFieldRef('anonymousUserId'),
        sessionId: createFieldRef('sessionId')
      }, NULL_FIELD_REF],
      fileAllowViewForLinkAccessUserFileRecents: [{
        linkAccessOverrideKey: createFieldRef('linkAccessOverrideKey'),
        userId: createFieldRef('userId'),
        anonymousUserId: createFieldRef('anonymousUserId'),
        sessionId: createFieldRef('sessionId')
      }, NULL_FIELD_REF],
      fileAllowFolderViewerDiscover: [{
        linkAccessOverrideKey: createFieldRef('linkAccessOverrideKey'),
        userId: createFieldRef('userId'),
        anonymousUserId: createFieldRef('anonymousUserId'),
        sessionId: createFieldRef('sessionId')
      }, NULL_FIELD_REF],
      fileAllowFolderViewerDiscoverV2: [{
        linkAccessOverrideKey: createFieldRef('linkAccessOverrideKey'),
        userId: createFieldRef('userId'),
        anonymousUserId: createFieldRef('anonymousUserId'),
        sessionId: createFieldRef('sessionId')
      }, NULL_FIELD_REF],
      fileAllowOrgAdminAbandonedDrafts: [{
        linkAccessOverrideKey: createFieldRef('linkAccessOverrideKey'),
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileAllowOrgAdminAbandonedDraftsV2: [{
        linkAccessOverrideKey: createFieldRef('linkAccessOverrideKey'),
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileAllowSharedLibrarySharingGroupViewAccess: [{
        linkAccessOverrideKey: createFieldRef('linkAccessOverrideKey'),
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileAllowSharedLibrarySharingGroupViewAccessV2: [{
        linkAccessOverrideKey: createFieldRef('linkAccessOverrideKey'),
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileAllowOrgFileViewLinkAccessV2: [{
        linkAccessOverrideKey: createFieldRef('linkAccessOverrideKey'),
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileAllowFileViewLinkAccessV2: [{
        linkAccessOverrideKey: createFieldRef('linkAccessOverrideKey'),
        userId: createFieldRef('userId'),
        anonymousUserId: createFieldRef('anonymousUserId'),
        sessionId: createFieldRef('sessionId')
      }, NULL_FIELD_REF]
    },
    denyPolicies: {
      fileDenyEditsForPlanUserWhenDraftsOwnerIsRestricted: [{
        linkAccessOverrideKey: createFieldRef('linkAccessOverrideKey'),
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileDenyDeletedFile: [{
        linkAccessOverrideKey: createFieldRef('linkAccessOverrideKey'),
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileDenyFileInDeletedFolder: [{
        linkAccessOverrideKey: createFieldRef('linkAccessOverrideKey'),
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileDenyOrgNonPublicFileMfaRestrictedGuests: [{
        linkAccessOverrideKey: createFieldRef('linkAccessOverrideKey'),
        userId: createFieldRef('userId'),
        anonymousUserId: createFieldRef('anonymousUserId'),
        sessionId: createFieldRef('sessionId')
      }, NULL_FIELD_REF],
      fileDenySitesForNonSitesUsers: [{
        linkAccessOverrideKey: createFieldRef('linkAccessOverrideKey'),
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileDenyFileForUnvalidatedUserEmail: [{
        linkAccessOverrideKey: createFieldRef('linkAccessOverrideKey'),
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileDenyFigmakeForNonFigmakeUsers: [{
        linkAccessOverrideKey: createFieldRef('linkAccessOverrideKey'),
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF],
      fileDenySanctionedTeamFileAccess: [{
        linkAccessOverrideKey: createFieldRef('linkAccessOverrideKey'),
        userId: createFieldRef('userId')
      }, NULL_FIELD_REF]
    }
  }
};
let o7 = {
  id: NULL_FIELD_REF,
  userId: NULL_FIELD_REF,
  designPaidStatus: NULL_FIELD_REF,
  devModePaidStatus: NULL_FIELD_REF,
  whiteboardPaidStatus: NULL_FIELD_REF,
  showFigjamUserOnboarding: NULL_FIELD_REF,
  hasShownFigjamAdminOnboarding: NULL_FIELD_REF,
  draftsFolderId: NULL_FIELD_REF,
  orgId: NULL_FIELD_REF,
  createdAt: NULL_FIELD_REF,
  permission: NULL_FIELD_REF,
  activeSeatTypeUpgrade: {
    resourceType: NULL_FIELD_REF,
    resourceId: NULL_FIELD_REF,
    actorId: NULL_FIELD_REF,
    reason: NULL_FIELD_REF,
    _editorTypeRaw: NULL_FIELD_REF,
    downgradedAt: NULL_FIELD_REF,
    billableProduct: {
      licenseTypes: NULL_FIELD_REF
    },
    billableProductKey: NULL_FIELD_REF
  },
  latestProvisionalAccess: {
    status: NULL_FIELD_REF,
    billableProduct: {
      licenseTypes: NULL_FIELD_REF
    },
    billableProductKey: NULL_FIELD_REF
  },
  isLicenseGroupAdmin: NULL_FIELD_REF,
  pendingAccountTypeRequests: {
    billableProductKey: NULL_FIELD_REF
  },
  provisionalAccesses: {
    id: NULL_FIELD_REF,
    billableProductKey: NULL_FIELD_REF
  },
  orgUserDowngrades: {
    id: NULL_FIELD_REF,
    billableProductKey: NULL_FIELD_REF,
    downgradedAt: NULL_FIELD_REF,
    downgradeReason: NULL_FIELD_REF
  }
};
let o8 = {
  id: NULL_FIELD_REF,
  userId: NULL_FIELD_REF,
  designPaidStatus: NULL_FIELD_REF,
  whiteboardPaidStatus: NULL_FIELD_REF,
  draftsFolderId: NULL_FIELD_REF,
  teamId: NULL_FIELD_REF,
  createdAt: NULL_FIELD_REF,
  teamRole: {
    id: NULL_FIELD_REF,
    level: NULL_FIELD_REF
  },
  activeSeatTypeUpgrade: {
    billableProduct: {
      licenseTypes: NULL_FIELD_REF
    },
    billableProductKey: NULL_FIELD_REF
  },
  latestProvisionalAccess: {
    status: NULL_FIELD_REF,
    billableProduct: {
      licenseTypes: NULL_FIELD_REF
    },
    billableProductKey: NULL_FIELD_REF
  },
  pendingAccountTypeRequests: {
    billableProductKey: NULL_FIELD_REF
  },
  provisionalAccesses: {
    id: NULL_FIELD_REF,
    billableProductKey: NULL_FIELD_REF
  },
  teamUserDowngrades: {
    id: NULL_FIELD_REF,
    billableProductKey: NULL_FIELD_REF,
    downgradedAt: NULL_FIELD_REF,
    downgradeReason: NULL_FIELD_REF
  }
};
let o9 = {
  activeProjectResourceConnections: {
    _connectedTeamUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      ...o8
    }],
    _connectedOrgUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      ...o7
    }],
    connectedPlanType: NULL_FIELD_REF,
    disconnectedAt: NULL_FIELD_REF
  }
};
let le = {
  id: NULL_FIELD_REF,
  type: NULL_FIELD_REF,
  userId: NULL_FIELD_REF,
  designPaidStatus: NULL_FIELD_REF,
  devModePaidStatus: NULL_FIELD_REF,
  whiteboardPaidStatus: NULL_FIELD_REF,
  showFigjamUserOnboarding: NULL_FIELD_REF,
  hasShownFigjamAdminOnboarding: NULL_FIELD_REF,
  draftsFolderId: NULL_FIELD_REF,
  activeSeatTypeUpgrade: {
    id: NULL_FIELD_REF,
    resourceType: NULL_FIELD_REF,
    resourceId: NULL_FIELD_REF,
    actorId: NULL_FIELD_REF,
    reason: NULL_FIELD_REF,
    _editorTypeRaw: NULL_FIELD_REF,
    downgradedAt: NULL_FIELD_REF,
    billableProduct: {
      id: NULL_FIELD_REF,
      key: NULL_FIELD_REF,
      licenseTypes: NULL_FIELD_REF
    },
    billableProductKey: NULL_FIELD_REF
  },
  permission: NULL_FIELD_REF,
  _planUserId: NULL_FIELD_REF,
  _planUserTypeCamelCase: NULL_FIELD_REF,
  _orgId: NULL_FIELD_REF,
  licenseTypes: NULL_FIELD_REF,
  seatTypeLicenseTypes: NULL_FIELD_REF,
  provisionalLicenseTypes: NULL_FIELD_REF,
  provisionalBillableProductKey: NULL_FIELD_REF,
  key: NULL_FIELD_REF,
  planKey: NULL_FIELD_REF,
  createdAt: NULL_FIELD_REF,
  pendingAccountTypeRequestBillableProductKeys: NULL_FIELD_REF,
  billableProductKeys: NULL_FIELD_REF,
  provisionalAccessesBillableProductKeys: NULL_FIELD_REF,
  planUserDowngradesNonCheckoutBillableProductKeys: NULL_FIELD_REF
};
let lt = {
  id: NULL_FIELD_REF,
  level: NULL_FIELD_REF
};
let li = [{
  userId: {
    type: 'view',
    ref: 'userId'
  }
}, {
  ...o7
}];
let ln = [{
  userId: {
    type: 'view',
    ref: 'userId'
  }
}, {
  ...o8
}];
let lr = [{
  userId: {
    type: 'view',
    ref: 'userId'
  }
}, {
  ...lt
}];
let la = [{
  name: 'currentPlanUser',
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  type: {
    kind: 'object',
    name: _$$Y.PlanUser
  },
  computed: !0,
  nullable: !0,
  dependencies: {
    id: NULL_FIELD_REF,
    org: {
      id: NULL_FIELD_REF,
      currentBaseOrgUser: li
    },
    currentTeamUser: ln,
    roleOnObjectTeamForUser: lr
  }
}];
let ls = [{
  name: 'currentPlanUser',
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  type: {
    kind: 'object',
    name: _$$Y.PlanUser
  },
  nullable: !0,
  computed: !0,
  dependencies: {
    id: NULL_FIELD_REF,
    currentBaseOrgUser: li
  }
}];
let lo = [{
  name: 'currentPlanUser',
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  type: {
    kind: 'object',
    name: _$$Y.PlanUser
  },
  computed: !0,
  nullable: !0,
  dependencies: {
    parentOrgId: NULL_FIELD_REF,
    currentBaseOrgUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      ...o7
    }],
    currentTeamUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      ...o8
    }],
    roleOnObjectTeamForUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      ...lt
    }]
  }
}];
let ll = {
  name: 'folderOwnerPlanUser',
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  type: {
    kind: 'object',
    name: _$$Y.PlanUser
  },
  computed: !0,
  nullable: !0,
  dependencies: {
    project: [{
      userId: createViewRef('userId')
    }, {
      draftsFolderOwnerPlanUser: {
        type: NULL_FIELD_REF,
        id: NULL_FIELD_REF,
        userId: NULL_FIELD_REF,
        createdAt: NULL_FIELD_REF,
        designPaidStatus: NULL_FIELD_REF,
        devModePaidStatus: NULL_FIELD_REF,
        whiteboardPaidStatus: NULL_FIELD_REF,
        activeSeatTypeUpgrade: NULL_FIELD_REF,
        showFigjamUserOnboarding: NULL_FIELD_REF,
        hasShownFigjamAdminOnboarding: NULL_FIELD_REF,
        draftsFolderId: NULL_FIELD_REF,
        permission: NULL_FIELD_REF,
        licenseTypes: NULL_FIELD_REF,
        seatTypeLicenseTypes: NULL_FIELD_REF,
        provisionalLicenseTypes: NULL_FIELD_REF,
        provisionalBillableProductKey: NULL_FIELD_REF,
        key: NULL_FIELD_REF,
        planKey: NULL_FIELD_REF,
        _planUserId: NULL_FIELD_REF,
        _planUserTypeCamelCase: NULL_FIELD_REF,
        _orgId: NULL_FIELD_REF,
        pendingAccountTypeRequestBillableProductKeys: NULL_FIELD_REF,
        billableProductKeys: NULL_FIELD_REF,
        provisionalAccessesBillableProductKeys: NULL_FIELD_REF,
        planUserDowngradesNonCheckoutBillableProductKeys: NULL_FIELD_REF
      }
    }]
  }
};
let ld = {
  name: 'folderOwnerPlanUser',
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  type: {
    kind: 'object',
    name: _$$Y.PlanUser
  },
  computed: !0,
  nullable: !0,
  dependencies: {
    _project_permsV2: {
      draftsFolderOwnerPlanUser: {
        type: NULL_FIELD_REF,
        id: NULL_FIELD_REF,
        userId: NULL_FIELD_REF,
        createdAt: NULL_FIELD_REF,
        designPaidStatus: NULL_FIELD_REF,
        devModePaidStatus: NULL_FIELD_REF,
        whiteboardPaidStatus: NULL_FIELD_REF,
        activeSeatTypeUpgrade: NULL_FIELD_REF,
        showFigjamUserOnboarding: NULL_FIELD_REF,
        hasShownFigjamAdminOnboarding: NULL_FIELD_REF,
        draftsFolderId: NULL_FIELD_REF,
        permission: NULL_FIELD_REF,
        licenseTypes: NULL_FIELD_REF,
        seatTypeLicenseTypes: NULL_FIELD_REF,
        provisionalLicenseTypes: NULL_FIELD_REF,
        provisionalBillableProductKey: NULL_FIELD_REF,
        key: NULL_FIELD_REF,
        planKey: NULL_FIELD_REF,
        _planUserId: NULL_FIELD_REF,
        _planUserTypeCamelCase: NULL_FIELD_REF,
        _orgId: NULL_FIELD_REF,
        pendingAccountTypeRequestBillableProductKeys: NULL_FIELD_REF,
        billableProductKeys: NULL_FIELD_REF,
        provisionalAccessesBillableProductKeys: NULL_FIELD_REF,
        planUserDowngradesNonCheckoutBillableProductKeys: NULL_FIELD_REF
      }
    }
  }
};
let lc = [{
  name: 'currentPlanUser',
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  type: {
    kind: 'object',
    name: _$$Y.PlanUser
  },
  computed: !0,
  nullable: !0,
  dependencies: {
    org: {
      currentBaseOrgUser: [{
        userId: {
          type: 'view',
          ref: 'userId'
        }
      }, {
        ...o7
      }]
    },
    team: {
      currentTeamUser: [{
        userId: {
          type: 'view',
          ref: 'userId'
        }
      }, {
        ...o8
      }],
      roleOnObjectTeamForUser: [{
        userId: {
          type: 'view',
          ref: 'userId'
        }
      }, {
        ...lt
      }],
      org: {
        currentBaseOrgUser: [{
          userId: {
            type: 'view',
            ref: 'userId'
          }
        }, {
          ...o7
        }]
      }
    }
  }
}];
let lu = [{
  name: 'planUser',
  type: {
    kind: 'object',
    name: _$$Y.PlanUser
  },
  args: [{
    name: 'parentId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'planType',
    type: {
      kind: 'enum',
      name: 'PlanType'
    },
    nullable: !0
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  nullable: !0,
  computed: !0,
  dependencies: {
    _orgUserByUserIdAndOrgId: [{
      orgId: createViewRef('parentId'),
      userId: createViewRef('userId')
    }, {
      org: [{
        userId: createViewRef('userId')
      }, {
        id: NULL_FIELD_REF,
        currentBaseOrgUser: li,
        canRead: [{
          userId: createViewRef('userId')
        }, NULL_FIELD_REF]
      }]
    }],
    _teamUserByUserIdAndTeamId: [{
      teamId: createViewRef('parentId'),
      userId: createViewRef('userId')
    }, {
      team: {
        id: NULL_FIELD_REF,
        currentTeamUser: ln,
        roleOnObjectTeamForUser: lr,
        canRead: [{
          userId: createViewRef('userId')
        }, NULL_FIELD_REF]
      }
    }]
  }
}];
let lp = [{
  name: 'planUserById',
  type: {
    kind: 'object',
    name: _$$Y.PlanUser
  },
  args: [{
    name: 'requestingUserId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'targetPlanUserId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'targetUserId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'planType',
    type: {
      kind: 'enum',
      name: 'PlanType'
    }
  }],
  nullable: !0,
  computed: !0,
  dependencies: {
    _orgUser: [{
      id: createViewRef('targetPlanUserId')
    }, {
      org: [{
        userId: createViewRef('requestingUserId')
      }, {
        id: NULL_FIELD_REF,
        currentBaseOrgUser: [{
          userId: createViewRef('targetUserId')
        }, {
          ...o7
        }],
        canRead: [{
          userId: createViewRef('requestingUserId')
        }, NULL_FIELD_REF]
      }]
    }],
    _teamUser: [{
      id: createViewRef('targetPlanUserId')
    }, {
      team: {
        id: NULL_FIELD_REF,
        currentTeamUser: [{
          userId: createViewRef('targetUserId')
        }, {
          ...o8
        }],
        roleOnObjectTeamForUser: [{
          userId: createViewRef('targetUserId')
        }, {
          ...lt
        }],
        canRead: [{
          userId: createViewRef('requestingUserId')
        }, NULL_FIELD_REF]
      }
    }]
  }
}];
let lm = [{
  name: 'draftsFolderOwnerPlanUser',
  type: {
    kind: 'object',
    name: _$$Y.PlanUser
  },
  computed: !0,
  nullable: !0,
  dependencies: {
    orgDraftsFolderOwnerBaseOrgUser: {
      ...o7
    },
    teamDraftsFolderOwnerTeamUser: {
      ...o8
    }
  }
}];
let lh = {
  name: 'connectedPlanUser',
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  type: {
    kind: 'object',
    name: _$$Y.PlanUser
  },
  computed: !0,
  nullable: !0,
  dependencies: {
    ...o9
  }
};
let lg = {
  name: 'connectedPlanUser',
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  type: {
    kind: 'object',
    name: _$$Y.PlanUser
  },
  computed: !0,
  nullable: !0,
  dependencies: {
    ...o9
  }
};
let lf = {
  name: 'connectedPlanUser',
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  type: {
    kind: 'object',
    name: _$$Y.PlanUser
  },
  computed: !0,
  nullable: !0,
  dependencies: {
    ...o9
  }
};
let l_ = {
  name: 'currentPlanUser',
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  type: {
    kind: 'object',
    name: _$$Y.PlanUser
  },
  computed: !0,
  nullable: !0,
  dependencies: {
    planType: NULL_FIELD_REF,
    _teamUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      ...o8
    }],
    _orgUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      ...o7
    }]
  }
};
let lA = {
  name: 'resolvedHostOrConnectedPlanUser',
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  type: {
    kind: 'object',
    name: _$$Y.PlanUser
  },
  computed: !0,
  nullable: !0,
  dependencies: {
    shouldUseConnectedPlanUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, NULL_FIELD_REF],
    connectedPlanUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      ...le
    }],
    currentPlanUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      ...le
    }]
  }
};
let ly = {
  name: 'resolvedHostOrConnectedPlanUserDevMode',
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  type: {
    kind: 'object',
    name: _$$Y.PlanUser
  },
  computed: !0,
  nullable: !0,
  dependencies: {
    editorType: NULL_FIELD_REF,
    shouldUseConnectedPlanUserDevMode: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, NULL_FIELD_REF],
    connectedPlanUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      ...le
    }],
    currentPlanUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      ...le
    }]
  }
};
let lb = {
  name: 'resolvedHostOrConnectedPlanUser',
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'permissionArguments',
    type: {
      kind: 'map',
      valueType: {
        kind: 'string'
      }
    },
    nullable: !0
  }],
  type: {
    kind: 'object',
    name: _$$Y.PlanUser
  },
  computed: !0,
  nullable: !0,
  dependencies: {
    shouldUseConnectedPlanUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      },
      permissionArguments: {
        type: 'view',
        ref: 'permissionArguments'
      }
    }, NULL_FIELD_REF],
    connectedPlanUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      ...le
    }],
    currentPlanUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      ...le
    }]
  }
};
let lv = {
  name: 'resolvedHostOrConnectedPlanUserDesign',
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  type: {
    kind: 'object',
    name: _$$Y.PlanUser
  },
  computed: !0,
  nullable: !0,
  dependencies: {
    shouldUseConnectedPlanUserDesign: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, NULL_FIELD_REF],
    connectedPlanUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      ...le
    }],
    currentPlanUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      ...le
    }]
  }
};
let lI = {
  name: 'resolvedHostOrConnectedPlanUserFigjam',
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  type: {
    kind: 'object',
    name: _$$Y.PlanUser
  },
  computed: !0,
  nullable: !0,
  dependencies: {
    shouldUseConnectedPlanUserFigjam: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, NULL_FIELD_REF],
    connectedPlanUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      ...le
    }],
    currentPlanUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      ...le
    }]
  }
};
let lE = {
  name: 'resolvedHostOrConnectedPlanUserSlides',
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  type: {
    kind: 'object',
    name: _$$Y.PlanUser
  },
  computed: !0,
  nullable: !0,
  dependencies: {
    shouldUseConnectedPlanUserSlides: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, NULL_FIELD_REF],
    connectedPlanUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      ...le
    }],
    currentPlanUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      ...le
    }]
  }
};
let lx = {
  name: 'resolvedHostOrConnectedPlanUserDevMode',
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  type: {
    kind: 'object',
    name: _$$Y.PlanUser
  },
  computed: !0,
  nullable: !0,
  dependencies: {
    shouldUseConnectedPlanUserDevMode: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, NULL_FIELD_REF],
    connectedPlanUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      ...le
    }],
    currentPlanUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      ...le
    }]
  }
};
let lS = {
  name: 'resolvedHostOrConnectedPlanUserSites',
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  type: {
    kind: 'object',
    name: _$$Y.PlanUser
  },
  computed: !0,
  nullable: !0,
  dependencies: {
    shouldUseConnectedPlanUserSites: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, NULL_FIELD_REF],
    connectedPlanUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      ...le
    }],
    currentPlanUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      ...le
    }]
  }
};
let lw = {
  name: 'resolvedHostOrConnectedPlanUserFigmake',
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  type: {
    kind: 'object',
    name: _$$Y.PlanUser
  },
  computed: !0,
  nullable: !0,
  dependencies: {
    shouldUseConnectedPlanUserFigmake: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, NULL_FIELD_REF],
    connectedPlanUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      ...le
    }],
    currentPlanUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      ...le
    }]
  }
};
let lC = [{
  name: 'currentPlanUser',
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  type: {
    kind: 'object',
    name: _$$Y.PlanUser
  },
  computed: !0,
  nullable: !0,
  dependencies: {
    org: {
      id: NULL_FIELD_REF,
      currentBaseOrgUser: li
    }
  }
}];
let lT = [aw, aI, ax];
let lk = mergeFieldRefs(...Object.values(_$$h2));
let lR = mergeFieldRefs(_$$h2['PLAN::IS_ADMIN'], _$$h2['PLAN::IS_GUEST'], _$$h2['PLAN::IS_MEMBER']);
let {
  planConnectionCount,
  ...lP
} = lk;
let lO = mergeFieldRefs({
  id: NULL_FIELD_REF,
  name: NULL_FIELD_REF,
  standing: NULL_FIELD_REF,
  imgUrl: NULL_FIELD_REF,
  stripeCustomerId: NULL_FIELD_REF,
  vatGstId: NULL_FIELD_REF,
  taxIdVerificationStatus: NULL_FIELD_REF,
  aiFeaturesDisabledAt: NULL_FIELD_REF,
  figmaProvidedLibrariesDisabledAt: NULL_FIELD_REF,
  voiceDisabledAt: NULL_FIELD_REF,
  figjamDisabledAt: NULL_FIELD_REF,
  isSlidesDisabled: NULL_FIELD_REF,
  workshopDisabledAt: NULL_FIELD_REF,
  pluginRequestsAllowed: NULL_FIELD_REF,
  widgetRequestsAllowed: NULL_FIELD_REF,
  cmtyPublishAsUserEnabledAt: NULL_FIELD_REF,
  widgetsWhitelistEnforced: NULL_FIELD_REF,
  pluginsWhitelistEnforced: NULL_FIELD_REF,
  templatePickerDisabled: NULL_FIELD_REF,
  cursorChatDisabledAt: NULL_FIELD_REF,
  customTemplatesAllowed: NULL_FIELD_REF,
  bigmaEnabledAt: NULL_FIELD_REF,
  designDefaultPaidStatus: NULL_FIELD_REF,
  whiteboardDefaultPaidStatus: NULL_FIELD_REF,
  planSubscription: {
    tier: NULL_FIELD_REF,
    status: NULL_FIELD_REF
  },
  upgradeApprovalSettingsDeveloper: NULL_FIELD_REF,
  upgradeApprovalSettingsCollaborator: NULL_FIELD_REF,
  upgradeApprovalSettingsExpert: NULL_FIELD_REF,
  upgradeApprovalSettingsContent: NULL_FIELD_REF,
  bundlesEnabledAt: NULL_FIELD_REF,
  prorationBillingEnabledAt: NULL_FIELD_REF,
  billingTrials: {
    id: NULL_FIELD_REF,
    trialType: NULL_FIELD_REF,
    productLicenseTypes: NULL_FIELD_REF,
    status: NULL_FIELD_REF
  },
  guestInviteSetting: NULL_FIELD_REF,
  unlimitedConnectionsEnabled: NULL_FIELD_REF,
  testingOnlyUnlimitedConnectionsEnabled: NULL_FIELD_REF,
  isResourceHubCmtyTabDisabled: NULL_FIELD_REF,
  connectionCount: NULL_FIELD_REF,
  featureFlagCampfireProvisionalAccessEnabled: {
    id: NULL_FIELD_REF,
    name: NULL_FIELD_REF,
    value: NULL_FIELD_REF
  },
  _planRecord: {
    id: NULL_FIELD_REF
  }
}, lR);
let lD = mergeFieldRefs({
  ...lO,
  emptyDeveloperSeat: {
    id: NULL_FIELD_REF,
    planParentId: NULL_FIELD_REF,
    planParentType: NULL_FIELD_REF,
    billableProductKey: NULL_FIELD_REF,
    deprovisionedAt: NULL_FIELD_REF,
    currentPlanUserId: NULL_FIELD_REF
  },
  emptyCollaboratorSeat: {
    id: NULL_FIELD_REF,
    planParentId: NULL_FIELD_REF,
    planParentType: NULL_FIELD_REF,
    billableProductKey: NULL_FIELD_REF,
    deprovisionedAt: NULL_FIELD_REF,
    currentPlanUserId: NULL_FIELD_REF
  },
  emptyExpertSeat: {
    id: NULL_FIELD_REF,
    planParentId: NULL_FIELD_REF,
    planParentType: NULL_FIELD_REF,
    billableProductKey: NULL_FIELD_REF,
    deprovisionedAt: NULL_FIELD_REF,
    currentPlanUserId: NULL_FIELD_REF
  },
  emptyContentSeat: {
    id: NULL_FIELD_REF,
    planParentId: NULL_FIELD_REF,
    planParentType: NULL_FIELD_REF,
    billableProductKey: NULL_FIELD_REF,
    deprovisionedAt: NULL_FIELD_REF,
    currentPlanUserId: NULL_FIELD_REF
  }
}, lP);
let lL = {
  id: NULL_FIELD_REF,
  subscription: NULL_FIELD_REF,
  studentTeamAt: NULL_FIELD_REF,
  gracePeriodEnd: NULL_FIELD_REF,
  planSubscription: {
    tier: NULL_FIELD_REF,
    status: NULL_FIELD_REF
  },
  _teamPlanRecord: {
    id: NULL_FIELD_REF
  }
};
let lF = {
  id: NULL_FIELD_REF,
  bigmaEnabledAt: NULL_FIELD_REF,
  planSubscription: {
    tier: NULL_FIELD_REF,
    status: NULL_FIELD_REF
  },
  _planRecord: {
    id: NULL_FIELD_REF
  }
};
let lM = mergeFieldRefs({
  ...lL,
  stripeCustomerId: NULL_FIELD_REF,
  name: NULL_FIELD_REF,
  imgUrl: NULL_FIELD_REF,
  vatGstId: NULL_FIELD_REF,
  taxIdVerificationStatus: NULL_FIELD_REF,
  aiFeaturesDisabledAt: NULL_FIELD_REF,
  figmaProvidedLibrariesDisabledAt: NULL_FIELD_REF,
  designDefaultPaidStatus: NULL_FIELD_REF,
  whiteboardDefaultPaidStatus: NULL_FIELD_REF,
  upgradeApprovalSettingsDeveloper: NULL_FIELD_REF,
  upgradeApprovalSettingsCollaborator: NULL_FIELD_REF,
  upgradeApprovalSettingsExpert: NULL_FIELD_REF,
  upgradeApprovalSettingsContent: NULL_FIELD_REF,
  bundlesEnabledAt: NULL_FIELD_REF,
  prorationBillingEnabledAt: NULL_FIELD_REF,
  studentTeamState: NULL_FIELD_REF,
  planSubscription: {
    tier: NULL_FIELD_REF,
    status: NULL_FIELD_REF
  },
  testingOnlyUnlimitedConnectionsEnabled: NULL_FIELD_REF,
  connectionCount: NULL_FIELD_REF,
  featureFlagCampfireProvisionalAccessEnabled: {
    id: NULL_FIELD_REF,
    name: NULL_FIELD_REF,
    value: NULL_FIELD_REF
  },
  _teamPlanRecord: {
    id: NULL_FIELD_REF
  },
  _orgPlanRecord: {
    id: NULL_FIELD_REF
  }
}, lR);
let lj = mergeFieldRefs({
  ...lM,
  emptyDeveloperSeat: {
    id: NULL_FIELD_REF,
    planParentId: NULL_FIELD_REF,
    planParentType: NULL_FIELD_REF,
    billableProductKey: NULL_FIELD_REF,
    deprovisionedAt: NULL_FIELD_REF,
    currentPlanUserId: NULL_FIELD_REF
  },
  emptyCollaboratorSeat: {
    id: NULL_FIELD_REF,
    planParentId: NULL_FIELD_REF,
    planParentType: NULL_FIELD_REF,
    billableProductKey: NULL_FIELD_REF,
    deprovisionedAt: NULL_FIELD_REF,
    currentPlanUserId: NULL_FIELD_REF
  },
  emptyExpertSeat: {
    id: NULL_FIELD_REF,
    planParentId: NULL_FIELD_REF,
    planParentType: NULL_FIELD_REF,
    billableProductKey: NULL_FIELD_REF,
    deprovisionedAt: NULL_FIELD_REF,
    currentPlanUserId: NULL_FIELD_REF
  },
  emptyContentSeat: {
    id: NULL_FIELD_REF,
    planParentId: NULL_FIELD_REF,
    planParentType: NULL_FIELD_REF,
    billableProductKey: NULL_FIELD_REF,
    deprovisionedAt: NULL_FIELD_REF,
    currentPlanUserId: NULL_FIELD_REF
  },
  planSubscription: {
    tier: NULL_FIELD_REF,
    status: NULL_FIELD_REF
  },
  testingOnlyUnlimitedConnectionsEnabled: NULL_FIELD_REF,
  connectionCount: NULL_FIELD_REF
}, lP);
let lU = {
  activeProjectResourceConnections: {
    _connectedOrg: lO,
    _connectedTeam: {
      ...lM,
      org: lO
    }
  }
};
let lB = {
  activeProjectResourceConnections: {
    _connectedOrg: lD,
    _connectedTeam: {
      ...lj,
      org: lD
    }
  }
};
let lV = {
  id: NULL_FIELD_REF,
  _parentId: NULL_FIELD_REF,
  _parentClass: NULL_FIELD_REF,
  type: NULL_FIELD_REF,
  tier: NULL_FIELD_REF,
  status: NULL_FIELD_REF,
  tierLevel: NULL_FIELD_REF,
  stripeCustomerId: NULL_FIELD_REF,
  vatGstId: NULL_FIELD_REF,
  taxIdVerificationStatus: NULL_FIELD_REF,
  aiFeaturesEnabled: NULL_FIELD_REF,
  voiceEnabled: NULL_FIELD_REF,
  figjamDisabledAt: NULL_FIELD_REF,
  isSlidesDisabled: NULL_FIELD_REF,
  workshopEnabled: NULL_FIELD_REF,
  pluginRequestsAllowed: NULL_FIELD_REF,
  widgetRequestsAllowed: NULL_FIELD_REF,
  cmtyPublishAsUserEnabled: NULL_FIELD_REF,
  figmaProvidedLibrariesEnabled: NULL_FIELD_REF,
  pluginsWhitelistEnforced: NULL_FIELD_REF,
  widgetsWhitelistEnforced: NULL_FIELD_REF,
  templatePickerEnabled: NULL_FIELD_REF,
  customTemplatesAllowed: NULL_FIELD_REF,
  cursorChatEnabled: NULL_FIELD_REF,
  designDefaultPaidStatus: NULL_FIELD_REF,
  whiteboardDefaultPaidStatus: NULL_FIELD_REF,
  isBillingRemodelEnabled: NULL_FIELD_REF,
  upgradeApprovalSettingsDeveloper: NULL_FIELD_REF,
  upgradeApprovalSettingsCollaborator: NULL_FIELD_REF,
  upgradeApprovalSettingsExpert: NULL_FIELD_REF,
  upgradeApprovalSettingsContent: NULL_FIELD_REF,
  name: NULL_FIELD_REF,
  imgUrl: NULL_FIELD_REF,
  campfireModelEnabledAt: NULL_FIELD_REF,
  prorationBillingEnabledAt: NULL_FIELD_REF,
  activeTrialLicenseTypes: NULL_FIELD_REF,
  key: NULL_FIELD_REF,
  studentTeamState: NULL_FIELD_REF,
  guestInviteSetting: NULL_FIELD_REF,
  unlimitedConnectionsEnabled: NULL_FIELD_REF,
  testingOnlyUnlimitedConnectionsEnabled: NULL_FIELD_REF,
  isResourceHubCmtyTabDisabled: NULL_FIELD_REF,
  campfireProvisionalAccessEnabled: NULL_FIELD_REF,
  connectionCount: NULL_FIELD_REF,
  planConnectionCount: {
    id: NULL_FIELD_REF,
    planKey: NULL_FIELD_REF,
    connectionCount: NULL_FIELD_REF
  },
  monetizationConfig: {
    id: NULL_FIELD_REF,
    planKey: NULL_FIELD_REF,
    editorTypeToLicenseTypeMap: NULL_FIELD_REF
  },
  planRecordId: NULL_FIELD_REF,
  ...lT.reduce((e, t) => ({
    ...e,
    [t.name]: NULL_FIELD_REF
  }), {})
};
let lG = {
  ...lV,
  emptyDeveloperSeat: {
    id: NULL_FIELD_REF,
    planParentId: NULL_FIELD_REF,
    planParentType: NULL_FIELD_REF,
    billableProductKey: NULL_FIELD_REF,
    deprovisionedAt: NULL_FIELD_REF,
    currentPlanUserId: NULL_FIELD_REF
  },
  emptyCollaboratorSeat: {
    id: NULL_FIELD_REF,
    planParentId: NULL_FIELD_REF,
    planParentType: NULL_FIELD_REF,
    billableProductKey: NULL_FIELD_REF,
    deprovisionedAt: NULL_FIELD_REF,
    currentPlanUserId: NULL_FIELD_REF
  },
  emptyExpertSeat: {
    id: NULL_FIELD_REF,
    planParentId: NULL_FIELD_REF,
    planParentType: NULL_FIELD_REF,
    billableProductKey: NULL_FIELD_REF,
    deprovisionedAt: NULL_FIELD_REF,
    currentPlanUserId: NULL_FIELD_REF
  },
  emptyContentSeat: {
    id: NULL_FIELD_REF,
    planParentId: NULL_FIELD_REF,
    planParentType: NULL_FIELD_REF,
    billableProductKey: NULL_FIELD_REF,
    deprovisionedAt: NULL_FIELD_REF,
    currentPlanUserId: NULL_FIELD_REF
  },
  guestInviteSetting: NULL_FIELD_REF,
  unlimitedConnectionsEnabled: NULL_FIELD_REF,
  testingOnlyUnlimitedConnectionsEnabled: NULL_FIELD_REF,
  isResourceHubCmtyTabDisabled: NULL_FIELD_REF,
  campfireProvisionalAccessEnabled: NULL_FIELD_REF,
  connectionCount: NULL_FIELD_REF,
  planConnectionCount: {
    id: NULL_FIELD_REF,
    planKey: NULL_FIELD_REF,
    connectionCount: NULL_FIELD_REF
  },
  ...aq.reduce((e, t) => {
    let i = t.type.kind === 'bool' ? NULL_FIELD_REF : {
      result: NULL_FIELD_REF,
      publicDenyReasons: NULL_FIELD_REF
    };
    return {
      ...e,
      [t.name]: i
    };
  }, {})
};
let lz = [{
  name: 'planPublicInfo',
  type: {
    kind: 'object',
    name: _$$Y.PlanPublicInfo
  },
  computed: !0,
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  dependencies: {
    ...lL,
    org: {
      ...lF
    }
  }
}];
let lH = [{
  name: 'plan',
  type: {
    kind: 'object',
    name: _$$Y.Plan
  },
  computed: !0,
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  dependencies: {
    ...lM,
    org: lO
  }
}];
let lW = [{
  name: 'planPermissions',
  type: {
    kind: 'object',
    name: _$$Y.PlanPermissions
  },
  computed: !0,
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  dependencies: {
    ...lj,
    org: lD
  }
}];
let lK = [{
  name: 'planPublicInfo',
  type: {
    kind: 'object',
    name: _$$Y.PlanPublicInfo
  },
  computed: !0,
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  dependencies: {
    ...lF
  }
}];
let lY = [{
  name: 'plan',
  type: {
    kind: 'object',
    name: _$$Y.Plan
  },
  computed: !0,
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  dependencies: lO,
  typechecked: !1
}];
let lq = [{
  name: 'planPermissions',
  type: {
    kind: 'object',
    name: _$$Y.PlanPermissions
  },
  computed: !0,
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  dependencies: lD,
  typechecked: !1
}];
let l$ = [{
  name: 'plan',
  type: {
    kind: 'object',
    name: _$$Y.Plan
  },
  nullable: !0,
  computed: !0,
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  dependencies: {
    _org_permsV2: lO,
    _team_permsV2: lM
  }
}];
let lZ = [{
  name: 'planPublicInfo',
  type: {
    kind: 'object',
    name: _$$Y.PlanPublicInfo
  },
  nullable: !0,
  computed: !0,
  dependencies: {
    orgPublicInfo: lF,
    teamPublicInfo: lL
  }
}];
let lX = [{
  name: 'planPermissions',
  type: {
    kind: 'object',
    name: _$$Y.PlanPermissions
  },
  nullable: !0,
  computed: !0,
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  dependencies: {
    _org_permsV2: lD,
    _team_permsV2: lj
  }
}];
let lQ = [{
  name: 'planPermissions',
  type: {
    kind: 'object',
    name: _$$Y.PlanPermissions
  },
  nullable: !0,
  computed: !0,
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  dependencies: {
    org: lD,
    team: {
      ...lj,
      org: lD
    }
  }
}];
let lJ = [{
  name: 'plan',
  type: {
    kind: 'object',
    name: _$$Y.Plan
  },
  nullable: !0,
  computed: !0,
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  dependencies: {
    org: lO,
    team: {
      ...lM,
      org: lO
    }
  }
}];
let l0 = [{
  name: 'planPublicInfo',
  type: {
    kind: 'object',
    name: _$$Y.PlanPublicInfo
  },
  nullable: !0,
  computed: !0,
  dependencies: {
    orgPublicInfoForDraftProjects: lF,
    teamPublicInfo: {
      ...lL,
      org: lF
    }
  }
}];
let l1 = [{
  name: 'connectedPlan',
  type: {
    kind: 'object',
    name: _$$Y.Plan
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  nullable: !0,
  computed: !0,
  dependencies: {
    ...lU
  }
}, {
  name: 'connectedPlanPermissions',
  type: {
    kind: 'object',
    name: _$$Y.PlanPermissions
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  nullable: !0,
  computed: !0,
  dependencies: {
    ...lB
  }
}];
let l2 = [{
  name: 'connectedPlan',
  type: {
    kind: 'object',
    name: _$$Y.Plan
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  nullable: !0,
  computed: !0,
  dependencies: {
    ...lU
  }
}, {
  name: 'connectedPlanPermissions',
  type: {
    kind: 'object',
    name: _$$Y.PlanPermissions
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  nullable: !0,
  computed: !0,
  dependencies: {
    ...lB
  }
}];
let l5 = [{
  name: 'connectedPlan',
  type: {
    kind: 'object',
    name: _$$Y.Plan
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  nullable: !0,
  computed: !0,
  dependencies: {
    ...lU
  }
}, {
  name: 'connectedPlanPermissions',
  type: {
    kind: 'object',
    name: _$$Y.PlanPermissions
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  nullable: !0,
  computed: !0,
  dependencies: {
    ...lB
  }
}];
let l4 = {
  name: 'plan',
  type: {
    kind: 'object',
    name: _$$Y.Plan
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  nullable: !0,
  computed: !0,
  dependencies: {
    planType: NULL_FIELD_REF,
    _org: lO,
    _team: {
      ...lM,
      org: lO
    }
  }
};
_$$Y.Plan;
_$$Y.Plan;
let l3 = [{
  name: 'resolvedHostOrConnectedPlan',
  type: {
    kind: 'object',
    name: _$$Y.Plan
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  nullable: !0,
  computed: !0,
  dependencies: {
    shouldUseConnectedPlanUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, NULL_FIELD_REF],
    connectedPlan: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      ...lV
    }],
    plan: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      ...lV
    }]
  }
}, {
  name: 'resolvedHostOrConnectedPlanPermissions',
  type: {
    kind: 'object',
    name: _$$Y.PlanPermissions
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  nullable: !0,
  computed: !0,
  dependencies: {
    shouldUseConnectedPlanUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, NULL_FIELD_REF],
    connectedPlanPermissions: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      ...lG
    }],
    planPermissions: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      ...lG
    }]
  }
}];
let l6 = [{
  name: 'resolvedHostOrConnectedPlanDevMode',
  type: {
    kind: 'object',
    name: _$$Y.Plan
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  nullable: !0,
  computed: !0,
  dependencies: {
    editorType: NULL_FIELD_REF,
    shouldUseConnectedPlanUserDevMode: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, NULL_FIELD_REF],
    connectedPlan: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      ...lV
    }],
    plan: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      ...lV
    }]
  }
}, {
  name: 'resolvedHostOrConnectedPlanDevModePermissions',
  type: {
    kind: 'object',
    name: _$$Y.PlanPermissions
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  nullable: !0,
  computed: !0,
  dependencies: {
    editorType: NULL_FIELD_REF,
    shouldUseConnectedPlanUserDevMode: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, NULL_FIELD_REF],
    connectedPlanPermissions: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      ...lG
    }],
    planPermissions: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      ...lG
    }]
  }
}];
let l7 = [{
  name: 'resolvedHostOrConnectedPlanDesign',
  type: {
    kind: 'object',
    name: _$$Y.Plan
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  nullable: !0,
  computed: !0,
  dependencies: {
    shouldUseConnectedPlanUserDesign: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, NULL_FIELD_REF],
    connectedPlan: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      ...lV
    }],
    plan: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      ...lV
    }]
  }
}, {
  name: 'resolvedHostOrConnectedPlanDesignPermissions',
  type: {
    kind: 'object',
    name: _$$Y.PlanPermissions
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  nullable: !0,
  computed: !0,
  dependencies: {
    shouldUseConnectedPlanUserDesign: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, NULL_FIELD_REF],
    connectedPlanPermissions: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      ...lG
    }],
    planPermissions: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      ...lG
    }]
  }
}];
let l8 = [{
  name: 'resolvedHostOrConnectedPlanFigjam',
  type: {
    kind: 'object',
    name: _$$Y.Plan
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  nullable: !0,
  computed: !0,
  dependencies: {
    shouldUseConnectedPlanUserFigjam: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, NULL_FIELD_REF],
    connectedPlan: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      ...lV
    }],
    plan: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      ...lV
    }]
  }
}, {
  name: 'resolvedHostOrConnectedPlanFigjamPermissions',
  type: {
    kind: 'object',
    name: _$$Y.PlanPermissions
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  nullable: !0,
  computed: !0,
  dependencies: {
    shouldUseConnectedPlanUserFigjam: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, NULL_FIELD_REF],
    connectedPlanPermissions: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      ...lG
    }],
    planPermissions: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      ...lG
    }]
  }
}];
let l9 = [{
  name: 'resolvedHostOrConnectedPlanSlides',
  type: {
    kind: 'object',
    name: _$$Y.Plan
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  nullable: !0,
  computed: !0,
  dependencies: {
    shouldUseConnectedPlanUserSlides: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, NULL_FIELD_REF],
    connectedPlan: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      ...lV
    }],
    plan: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      ...lV
    }]
  }
}, {
  name: 'resolvedHostOrConnectedPlanSlidesPermissions',
  type: {
    kind: 'object',
    name: _$$Y.PlanPermissions
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  nullable: !0,
  computed: !0,
  dependencies: {
    shouldUseConnectedPlanUserSlides: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, NULL_FIELD_REF],
    connectedPlanPermissions: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      ...lG
    }],
    planPermissions: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      ...lG
    }]
  }
}];
let de = [{
  name: 'resolvedHostOrConnectedPlanDevMode',
  type: {
    kind: 'object',
    name: _$$Y.Plan
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  nullable: !0,
  computed: !0,
  dependencies: {
    shouldUseConnectedPlanUserDevMode: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, NULL_FIELD_REF],
    connectedPlan: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      ...lV
    }],
    plan: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      ...lV
    }]
  }
}, {
  name: 'resolvedHostOrConnectedPlanDevModePermissions',
  type: {
    kind: 'object',
    name: _$$Y.PlanPermissions
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  nullable: !0,
  computed: !0,
  dependencies: {
    shouldUseConnectedPlanUserDevMode: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, NULL_FIELD_REF],
    connectedPlanPermissions: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      ...lG
    }],
    planPermissions: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      ...lG
    }]
  }
}];
let dt = [{
  name: 'resolvedHostOrConnectedPlanSites',
  type: {
    kind: 'object',
    name: _$$Y.Plan
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  nullable: !0,
  computed: !0,
  dependencies: {
    shouldUseConnectedPlanUserSites: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, NULL_FIELD_REF],
    connectedPlan: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      ...lV
    }],
    plan: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      ...lV
    }]
  }
}, {
  name: 'resolvedHostOrConnectedPlanSitesPermissions',
  type: {
    kind: 'object',
    name: _$$Y.PlanPermissions
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  nullable: !0,
  computed: !0,
  dependencies: {
    shouldUseConnectedPlanUserSites: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, NULL_FIELD_REF],
    connectedPlanPermissions: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      ...lG
    }],
    planPermissions: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      ...lG
    }]
  }
}];
let di = [{
  name: 'resolvedHostOrConnectedPlanFigmake',
  type: {
    kind: 'object',
    name: _$$Y.Plan
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  nullable: !0,
  computed: !0,
  dependencies: {
    shouldUseConnectedPlanUserFigmake: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, NULL_FIELD_REF],
    connectedPlan: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      ...lV
    }],
    plan: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      ...lV
    }]
  }
}, {
  name: 'resolvedHostOrConnectedPlanFigmakePermissions',
  type: {
    kind: 'object',
    name: _$$Y.PlanPermissions
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  nullable: !0,
  computed: !0,
  dependencies: {
    shouldUseConnectedPlanUserFigmake: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, NULL_FIELD_REF],
    connectedPlanPermissions: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      ...lG
    }],
    planPermissions: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      ...lG
    }]
  }
}];
let dn = [{
  name: 'resolvedHostOrConnectedPlan',
  type: {
    kind: 'object',
    name: _$$Y.Plan
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'permissionArguments',
    type: {
      kind: 'map',
      valueType: {
        kind: 'string'
      }
    },
    nullable: !0
  }],
  nullable: !0,
  computed: !0,
  dependencies: {
    shouldUseConnectedPlanUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      },
      permissionArguments: {
        type: 'view',
        ref: 'permissionArguments'
      }
    }, NULL_FIELD_REF],
    connectedPlan: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      ...lV
    }],
    plan: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      ...lV
    }]
  }
}, {
  name: 'resolvedHostOrConnectedPlanPermissions',
  type: {
    kind: 'object',
    name: _$$Y.PlanPermissions
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'permissionArguments',
    type: {
      kind: 'map',
      valueType: {
        kind: 'string'
      }
    },
    nullable: !0
  }],
  nullable: !0,
  computed: !0,
  dependencies: {
    shouldUseConnectedPlanUser: [{
      userId: {
        type: 'view',
        ref: 'userId'
      },
      permissionArguments: {
        type: 'view',
        ref: 'permissionArguments'
      }
    }, NULL_FIELD_REF],
    connectedPlanPermissions: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      ...lG
    }],
    planPermissions: [{
      userId: {
        type: 'view',
        ref: 'userId'
      }
    }, {
      ...lG
    }]
  }
}];
let dr = [{
  name: 'planPermissions',
  type: {
    kind: 'object',
    name: _$$Y.PlanPermissions
  },
  args: [{
    name: 'planParentId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'planType',
    type: {
      kind: 'enum',
      name: 'PlanType'
    },
    nullable: !0
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  nullable: !0,
  computed: !0,
  dependencies: {
    orgInfo: [{
      id: createViewRef('planParentId'),
      userId: createViewRef('userId')
    }, {
      ...lD,
      canRead: [{
        userId: createViewRef('userId')
      }, NULL_FIELD_REF]
    }],
    teamLimitedInfo: [{
      id: createViewRef('planParentId'),
      userId: createViewRef('userId')
    }, {
      ...lj,
      canRead: [{
        userId: createViewRef('userId')
      }, NULL_FIELD_REF]
    }]
  }
}];
let da = [{
  name: 'planPublicInfo',
  type: {
    kind: 'object',
    name: _$$Y.PlanPublicInfo
  },
  args: [{
    name: 'planParentId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'planType',
    type: {
      kind: 'enum',
      name: 'PlanType'
    }
  }],
  nullable: !0,
  computed: !0,
  dependencies: {
    orgPublicInfo: [{
      id: createViewRef('planParentId')
    }, lF],
    teamPublicInfo: [{
      id: createViewRef('planParentId')
    }, lL]
  }
}];
let ds = [{
  name: 'plan',
  type: {
    kind: 'object',
    name: _$$Y.Plan
  },
  args: [{
    name: 'planParentId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'planType',
    type: {
      kind: 'enum',
      name: 'PlanType'
    },
    nullable: !0
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  nullable: !0,
  computed: !0,
  dependencies: {
    orgInfo: [{
      id: createViewRef('planParentId'),
      userId: createViewRef('userId')
    }, {
      ...lO,
      canRead: [{
        userId: createViewRef('userId')
      }, NULL_FIELD_REF]
    }],
    teamLimitedInfo: [{
      id: createViewRef('planParentId'),
      userId: createViewRef('userId')
    }, {
      ...lM,
      canRead: [{
        userId: createViewRef('userId')
      }, NULL_FIELD_REF]
    }]
  }
}];
let dl = [{
  name: 'planConnectedProjectsForUser',
  type: {
    kind: 'objects',
    name: _$$Y.ConnectedProjectForPlanUser
  },
  args: [{
    name: 'planParentId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'planType',
    type: {
      kind: 'enum',
      name: 'PlanType'
    },
    nullable: !0
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  nullable: !0,
  resolver: {
    type: 'HTTP',
    uri: '/api/internal/livegraph/sinatra_resolver/connected_projects_for_plan',
    queryParams: {
      plan_parent_id: createFieldRef('planParentId'),
      plan_type: createFieldRef('planType'),
      userId: createFieldRef('userId')
    },
    realtimePolicy: {
      type: 'Static'
    }
  }
}];
let dd = [...lY, ...ls, ...lq];
let dc = [...lH, ...la, ...lW];
let du = [...lJ, ...l0, ...lc, ...lm, ...lQ];
let dp = [...lX, ...lZ, ...l$, ...lo];
let dm = [...lC];
function dh({
  resourceType: e,
  resourceIdFieldName: t
}) {
  return [{
    name: '_userGroupResourcePermissions',
    type: {
      kind: 'objects',
      name: _$$Y.UserGroupResourcePermission
    },
    filter: {
      and: [['resourceType', '=', e], ['resourceId', '=', createParentRef(t)]]
    },
    nullable: !0,
    expectedMaxCount: 200,
    bannedFromViews: !0
  }, {
    name: '_permissionsFromUserGroups',
    type: {
      kind: 'object',
      name: _$$Y.PermissionsFromUserGroups
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    nullable: !0,
    dependencies: {
      [t]: NULL_FIELD_REF,
      _userGroupResourcePermissions: {
        permission: NULL_FIELD_REF,
        _userGroup: {
          currentUserGroupMember: [{
            userId: createViewRef('userId')
          }, {
            id: NULL_FIELD_REF
          }]
        }
      }
    },
    bannedFromViews: !0
  }];
}
let dg = dh({
  resourceType: 'file',
  resourceIdFieldName: 'key'
});
let df = dh({
  resourceType: 'folder',
  resourceIdFieldName: 'id'
});
let d_ = dh({
  resourceType: 'team',
  resourceIdFieldName: 'id'
});
let dA = dh({
  resourceType: 'file_repo',
  resourceIdFieldName: 'id'
});
let dy = [{
  name: 'id',
  type: {
    kind: 'uuid'
  }
}, {
  name: 'planParentId',
  type: {
    kind: 'bigint'
  }
}, {
  name: 'planParentType',
  type: {
    kind: 'enum',
    name: 'PlanParentClass'
  }
}, {
  name: 'createdAt',
  type: {
    kind: 'datetime'
  }
}, {
  name: 'updatedAt',
  type: {
    kind: 'datetime'
  }
}, {
  name: 'deactivatedAt',
  type: {
    kind: 'datetime'
  },
  nullable: !0
}];
let db = [{
  name: '_orgPlanRecord',
  type: {
    kind: 'object',
    name: _$$Y.OrgPlanRecord
  },
  filter: {
    and: [['id', '=', createParentRef('id')], ['planParentType', '=', 'Org'], ['planParentId', '=', createParentRef('planParentId')]]
  },
  nullable: !0,
  bannedFromViews: !0
}, {
  name: '_teamPlanRecord',
  type: {
    kind: 'object',
    name: _$$Y.TeamPlanRecord
  },
  filter: {
    and: [['id', '=', createParentRef('id')], ['planParentType', '=', 'Team'], ['planParentId', '=', createParentRef('planParentId')]]
  },
  nullable: !0,
  bannedFromViews: !0
}];
let dv = [{
  name: '_teamPlanRecord',
  type: {
    kind: 'object',
    name: _$$Y.PlanRecord
  },
  filter: {
    and: [['planParentType', '=', 'Team'], ['planParentId', '=', createParentRef('teamId')], ['deactivatedAt', '=', null]]
  },
  nullable: !0,
  bannedFromViews: !0
}, {
  name: '_orgPlanRecord',
  type: {
    kind: 'object',
    name: _$$Y.PlanRecord
  },
  filter: {
    and: [['planParentType', '=', 'Org'], ['planParentId', '=', createParentRef('parentOrgId')], ['deactivatedAt', '=', null]]
  },
  nullable: !0,
  bannedFromViews: !0
}, {
  name: 'planRecordId',
  type: {
    kind: 'uuid'
  },
  computed: !0,
  nullable: !0,
  dependencies: {
    _teamPlanRecord: {
      id: NULL_FIELD_REF
    },
    _orgPlanRecord: {
      id: NULL_FIELD_REF
    }
  }
}];
let dI = [{
  name: '_teamPlanRecord',
  type: {
    kind: 'object',
    name: _$$Y.PlanRecord
  },
  filter: {
    and: [['planParentType', '=', 'Team'], ['planParentId', '=', createParentRef('id')], ['deactivatedAt', '=', null]]
  },
  nullable: !0,
  bannedFromViews: !0
}, {
  name: '_orgPlanRecord',
  type: {
    kind: 'object',
    name: _$$Y.PlanRecord
  },
  filter: {
    and: [['planParentType', '=', 'Org'], ['planParentId', '=', createParentRef('orgId')], ['deactivatedAt', '=', null]]
  },
  nullable: !0,
  bannedFromViews: !0
}, {
  name: 'planRecordId',
  type: {
    kind: 'uuid'
  },
  computed: !0,
  nullable: !0,
  dependencies: {
    _teamPlanRecord: {
      id: NULL_FIELD_REF
    },
    _orgPlanRecord: {
      id: NULL_FIELD_REF
    }
  }
}];
let dE = {
  name: '_planRecord',
  type: {
    kind: 'object',
    name: _$$Y.PlanRecord
  },
  filter: {
    and: [['planParentType', '=', 'Org'], ['planParentId', '=', createParentRef('id')], ['deactivatedAt', '=', null]]
  },
  nullable: !0,
  bannedFromViews: !0
};
let dx = [{
  name: '_connectedTeamPlanRecord',
  type: {
    kind: 'object',
    name: _$$Y.PlanRecord
  },
  filter: {
    and: [['planParentType', '=', 'Team'], ['planParentId', '=', createParentRef('connectedPlanId')], ['deactivatedAt', '=', null]]
  },
  nullable: !0,
  bannedFromViews: !0
}, {
  name: '_connectedOrgPlanRecord',
  type: {
    kind: 'object',
    name: _$$Y.PlanRecord
  },
  filter: {
    and: [['planParentType', '=', 'Org'], ['planParentId', '=', createParentRef('connectedPlanId')], ['deactivatedAt', '=', null]]
  },
  nullable: !0,
  bannedFromViews: !0
}];
let dS = [{
  name: 'fileKey',
  type: {
    kind: 'string'
  },
  bannedFromViews: !0
}, {
  name: 'hubFileId',
  type: {
    kind: 'bigint'
  },
  nullable: !0
}, {
  name: 'figJamSubscribed',
  type: {
    kind: 'bool'
  },
  nullable: !0
}, {
  name: 'slidesSubscribed',
  type: {
    kind: 'bool'
  },
  nullable: !0
}, {
  name: 'buzzSubscribed',
  type: {
    kind: 'bool'
  },
  nullable: !0
}, {
  name: 'library',
  type: {
    kind: 'object',
    name: _$$Y.Library
  },
  filter: {
    and: [['fileKey', '=', createParentRef('fileKey')], ['hubFileId', '=', null]]
  },
  nullable: !0,
  checkCanRead: {
    userId: createSessionRef('userId')
  }
}, {
  name: 'communityLibrary',
  type: {
    kind: 'object',
    name: _$$Y.CommunityLibrary
  },
  filter: {
    and: [['hubFileId', '=', createParentRef('hubFileId')], ['hubFileId', '<>', null]]
  },
  nullable: !0,
  checkCanRead: {
    userId: createSessionRef('userId')
  }
}, {
  name: 'libraryFileSubscriptionOverride',
  type: {
    kind: 'object',
    name: _$$Y.LibraryFileSubscription
  },
  args: [{
    name: 'subscribingFileKey',
    type: {
      kind: 'string'
    }
  }],
  filter: {
    and: [['libraryFileKey', '=', createParentRef('fileKey')], ['fileKey', '=', createFieldRef('subscribingFileKey')]]
  },
  nullable: !0
}, {
  name: 'communityLibraryKeyToFile',
  type: {
    kind: 'object',
    name: _$$Y.LibraryKeyToFile
  },
  filter: {
    and: [['hubFileId', '=', createParentRef('hubFileId')], ['hubFileId', '<>', null]]
  },
  nullable: !0,
  bannedFromViews: !0
}, {
  name: 'teamLibraryKeyToFile',
  type: {
    kind: 'object',
    name: _$$Y.LibraryKeyToFile
  },
  filter: {
    and: [['fileKey', '=', createParentRef('fileKey')], ['hubFileId', '=', null]]
  },
  nullable: !0,
  bannedFromViews: !0
}, {
  name: 'libraryKey',
  type: {
    kind: 'string'
  },
  computed: !0,
  nullable: !0,
  dependencies: {
    communityLibraryKeyToFile: {
      libraryKey: NULL_FIELD_REF
    },
    teamLibraryKeyToFile: {
      libraryKey: NULL_FIELD_REF
    }
  }
}, {
  name: 'canRead',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  dependencies: {
    library: {
      canRead: [{
        userId: createViewRef('userId')
      }, NULL_FIELD_REF]
    },
    communityLibrary: {
      canRead: [{
        userId: createViewRef('userId')
      }, NULL_FIELD_REF]
    }
  }
}];
let dw = {
  name: _$$Y.LibraryOrgSubscription,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, ...dS, {
    name: 'isSubscribed',
    type: {
      kind: 'bool'
    },
    nullable: !0
  }, {
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'org',
    type: {
      kind: 'object',
      name: _$$Y.Org
    },
    filter: ['id', '=', createParentRef('orgId')],
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'libraryWorkspaceSubscriptionOverride',
    type: {
      kind: 'object',
      name: _$$Y.LibraryWorkspaceSubscription
    },
    args: [{
      name: 'subscribingFileWorkspaceId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    filter: {
      and: [['fileKey', '=', createParentRef('fileKey')], ['workspaceId', '=', createFieldRef('subscribingFileWorkspaceId')]]
    },
    nullable: !0
  }, {
    name: 'libraryTeamSubscriptionOverride',
    type: {
      kind: 'object',
      name: _$$Y.LibraryTeamSubscription
    },
    args: [{
      name: 'subscribingFileTeamId',
      type: {
        kind: 'bigint'
      }
    }],
    filter: {
      and: [['fileKey', '=', createParentRef('fileKey')], ['teamId', '=', createFieldRef('subscribingFileTeamId')]]
    },
    nullable: !0
  }, {
    name: 'libraryUserSubscriptionOverride',
    type: {
      kind: 'object',
      name: _$$Y.LibraryUserSubscription
    },
    args: [{
      name: 'subscribingUserId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    filter: {
      and: [['fileKey', '=', createParentRef('fileKey')], ['userId', '=', createFieldRef('subscribingUserId')]]
    },
    nullable: !0
  }]
};
let dC = {
  type: {
    kind: 'objects',
    name: _$$Y.LibraryOrgSubscription
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'initialPageSize',
    type: {
      kind: 'int'
    }
  }],
  expectedMaxCount: 1e3
};
let dT = {
  name: _$$Y.LibraryTeamSubscription,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, ...dS, {
    name: 'isSubscribed',
    type: {
      kind: 'bool'
    }
  }, {
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'team',
    type: {
      kind: 'object',
      name: _$$Y.Team
    },
    filter: ['id', '=', createParentRef('teamId')],
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'libraryUserSubscriptionOverride',
    type: {
      kind: 'object',
      name: _$$Y.LibraryUserSubscription
    },
    args: [{
      name: 'subscribingUserId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    filter: {
      and: [['fileKey', '=', createParentRef('fileKey')], ['userId', '=', createFieldRef('subscribingUserId')]]
    },
    nullable: !0
  }]
};
let dk = {
  type: {
    kind: 'objects',
    name: _$$Y.LibraryTeamSubscription
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'initialPageSize',
    type: {
      kind: 'int'
    }
  }],
  expectedMaxCount: 1e3
};
let dR = {
  name: _$$Y.LibraryUserSubscription,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, ...dS, {
    name: 'isSubscribed',
    type: {
      kind: 'bool'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'user',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    filter: ['id', '=', createParentRef('userId')]
  }]
};
let dN = {
  type: {
    kind: 'objects',
    name: _$$Y.LibraryUserSubscription
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'initialPageSize',
    type: {
      kind: 'int'
    }
  }],
  expectedMaxCount: 1e3
};
function dP(e) {
  let t = !1;
  if (e?.passwordAuthentication && (t = !0, e = mergeFieldRefs(e), Array.isArray(e?.passwordAuthentication) && e.passwordAuthentication.length > 0 && (e.passwordAuthentication[0].anonymousUserId = null)), e?.sourceFilePasswordAuthentication && (t = !0, e = mergeFieldRefs(e), Array.isArray(e?.sourceFilePasswordAuthentication) && e.sourceFilePasswordAuthentication.length > 0 && (e.sourceFilePasswordAuthentication[0].anonymousUserId = null)), !t) throw new Error('Unnecessary usage of `deprecatedInjectNullAnonymousUserId`.');
  return e;
}
let dO = [{
  name: '_id',
  type: {
    kind: 'bigint'
  }
}, {
  name: 'id',
  type: {
    kind: 'string'
  }
}, {
  name: '_name',
  type: {
    kind: 'string'
  },
  nullable: !0
}, {
  name: 'name',
  type: {
    kind: 'string'
  },
  computed: !0,
  dependencies: {
    _name: NULL_FIELD_REF
  }
}, {
  name: 'key',
  type: {
    kind: 'string'
  }
}, {
  name: 'createdAt',
  type: {
    kind: 'datetime'
  }
}, {
  name: 'trashedAt',
  type: {
    kind: 'datetime'
  },
  nullable: !0
}, {
  name: 'updatedAt',
  type: {
    kind: 'datetime'
  }
}, {
  name: 'deletedAt',
  type: {
    kind: 'datetime'
  },
  nullable: !0
}, {
  name: 'teamId',
  type: {
    kind: 'bigint'
  },
  nullable: !0
}, {
  name: 'folderId',
  type: {
    kind: 'bigint'
  },
  nullable: !0
}, {
  name: '_editorTypeRaw',
  type: {
    kind: 'int'
  },
  nullable: !0
}, {
  name: 'editorType',
  type: {
    kind: 'enum',
    name: 'EditorType'
  },
  computed: !0,
  nullable: !0,
  dependencies: {
    _editorTypeRaw: NULL_FIELD_REF
  }
}, {
  name: 'linkAccess',
  type: {
    kind: 'enum',
    name: 'LinkAccess'
  }
}, {
  name: 'protoLinkAccess',
  type: {
    kind: 'enum',
    name: 'ProtoLinkAccess'
  },
  nullable: !0
}, {
  name: 'hasViewPrototypeRole',
  type: {
    kind: 'bool'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  computed: !0,
  permissionName: 'FILE::HAS_ROLE_ACCESS',
  dependencies: Mx['FILE::HAS_ROLE_ACCESS']
}, {
  name: 'currentUserFileFollower',
  type: {
    kind: 'object',
    name: _$$Y.FileFollower
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  nullable: !0,
  filter: {
    and: [['key', '=', createParentRef('key')], ['userId', '=', createFieldRef('userId')]]
  }
}, {
  name: 'comments',
  type: {
    kind: 'objects',
    name: _$$Y.Comment
  },
  orderBy: [['createdAt', 'DESC']],
  filter: {
    and: [['key', '=', createParentRef('key')], ['deletedAt', '=', null]]
  },
  expectedMaxCount: 99999
}, {
  name: 'unresolvedComments',
  type: {
    kind: 'objects',
    name: _$$Y.Comment
  },
  args: [{
    name: 'initialPageSize',
    type: {
      kind: 'int'
    }
  }],
  orderBy: [['createdAt', 'DESC']],
  filter: {
    and: [['key', '=', createParentRef('key')], ['deletedAt', '=', null], ['resolvedAt', '=', null]]
  },
  expectedMaxCount: 99999,
  checkCanRead: {
    userId: createSessionRef('userId'),
    sessionId: createSessionRef('sessionId'),
    anonymousUserId: createSessionRef('anonymousUserId'),
    featureFlag: 'livegraph_file_comments_check_can_read'
  }
}, {
  name: 'resolvedComments',
  type: {
    kind: 'objects',
    name: _$$Y.Comment
  },
  args: [{
    name: 'initialPageSize',
    type: {
      kind: 'int'
    }
  }],
  orderBy: [['createdAt', 'DESC']],
  filter: {
    and: [['key', '=', createParentRef('key')], ['deletedAt', '=', null], ['resolvedAt', '<>', null]]
  },
  expectedMaxCount: 99999,
  checkCanRead: {
    userId: createSessionRef('userId'),
    sessionId: createSessionRef('sessionId'),
    anonymousUserId: createSessionRef('anonymousUserId'),
    featureFlag: 'livegraph_file_comments_check_can_read'
  }
}, {
  name: 'commentsPaginated',
  type: {
    kind: 'objects',
    name: _$$Y.Comment
  },
  args: [{
    name: 'initialPageSize',
    type: {
      kind: 'int'
    }
  }],
  orderBy: [['createdAt', 'DESC']],
  filter: {
    and: [['key', '=', createParentRef('key')], ['deletedAt', '=', null]]
  },
  deprecated: {
    reason: 'Use unresolvedComments and resolvedComments where possible',
    date: '2022-11-08'
  },
  expectedMaxCount: 99999
}, {
  name: 'mobileComments',
  type: {
    kind: 'objects',
    name: _$$Y.Comment
  },
  args: [{
    name: 'initialPageSize',
    type: {
      kind: 'int'
    }
  }, {
    name: 'parentId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  orderBy: [['createdAt', 'DESC']],
  filter: {
    and: [['key', '=', createParentRef('key')], ['deletedAt', '=', null], ['resolvedAt', '=', null], ['parentId', '=', createFieldRef('parentId')]]
  },
  expectedMaxCount: 99999
}, {
  name: 'mobileCommentThread',
  type: {
    kind: 'objects',
    name: _$$Y.Comment
  },
  args: [{
    name: 'initialPageSize',
    type: {
      kind: 'int'
    }
  }, {
    name: 'rootId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  filter: {
    and: [['key', '=', createParentRef('key')], {
      or: [['id', '=', createFieldRef('rootId')], {
        and: [['parentId', '=', createFieldRef('rootId')], ['deletedAt', '=', null]]
      }]
    }]
  },
  expectedMaxCount: 1e4
}, {
  name: 'commentAttachments',
  type: {
    kind: 'objects',
    name: _$$Y.CommentAttachment
  },
  filter: {
    and: [['fileKey', '=', createParentRef('key')], ['fileCommentId', '<>', null], ['deletedAt', '=', null]]
  },
  orderBy: [['uploadedAt', 'ASC']],
  expectedMaxCount: 1e4
}, {
  name: 'currentUserCommentReadStatus',
  type: {
    kind: 'object',
    name: _$$Y.CommentReadStatus
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  nullable: !0,
  filter: {
    and: [['fileKey', '=', createParentRef('key')], ['userId', '=', createFieldRef('userId')]]
  }
}, {
  name: 'reactions',
  type: {
    kind: 'objects',
    name: _$$Y.CommentReaction
  },
  args: [{
    name: 'initialPageSize',
    type: {
      kind: 'int'
    }
  }],
  filter: ['fileKey', '=', createParentRef('key')],
  orderBy: [['createdAt', 'DESC']],
  expectedMaxCount: 5e4
}, {
  name: 'presenter',
  type: {
    kind: 'object',
    name: _$$Y.FilePresenter
  },
  args: [],
  filter: ['fileKey', '=', createParentRef('key')],
  nullable: !0
}];
let dD = {
  name: _$$Y.File,
  naturalKey: new Set(['key']),
  permissionRequired: !0,
  fields: [{
    name: 'sourceFileKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'sourceLibraryKeyToFile',
    type: {
      kind: 'object',
      name: _$$Y.LibraryKeyToFile
    },
    filter: {
      and: [['hubFileId', '=', null], ['fileKey', '=', createParentRef('sourceFileKey')]]
    },
    nullable: !0
  }, {
    name: 'sourceLibraryKey',
    type: {
      kind: 'string'
    },
    nullable: !0,
    computed: !0,
    dependencies: {
      sourceLibraryKeyToFile: {
        libraryKey: NULL_FIELD_REF
      }
    }
  }, {
    name: 'sourceCheckpointId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'fileRepoId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'parentOrgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'trashedWithParent',
    type: {
      kind: 'enum',
      name: 'TrashedWithParent'
    },
    nullable: !0
  }, {
    name: 'folderAccessEnabled',
    type: {
      kind: 'bool'
    }
  }, {
    name: 'UserFileRecentAny',
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    type: {
      kind: 'object',
      name: _$$Y.RecentFile2
    },
    nullable: !0,
    filter: {
      and: [['userId', '=', createFieldRef('userId')], ['fileKey', '=', createParentRef('key')]]
    },
    expectedMaxCount: 1
  }, {
    name: 'thumbnailUrl',
    type: {
      kind: 'string'
    },
    nullable: !0,
    deprecated: {
      reason: `thumbnailUrl returns incorrect values, do not use.
      Like seriously, don't use it.`,
      date: '2023-06-15'
    }
  }, {
    name: 'signedThumbnailUrl',
    type: {
      kind: 'string'
    },
    computed: !0,
    nullable: !0,
    dependencies: {
      figFileCheckpointV2: {
        checkpoint: {
          thumbnailUrl: NULL_FIELD_REF,
          createdAt: NULL_FIELD_REF
        }
      }
    }
  }, {
    name: 'signedThumbnailUrlV2',
    type: {
      kind: 'string'
    },
    computed: !0,
    nullable: !0,
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'sessionId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }, {
      name: 'anonymousUserId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }],
    dependencies: {
      canViewV3: [{
        userId: createViewRef('userId'),
        sessionId: createViewRef('sessionId'),
        anonymousUserId: createViewRef('anonymousUserId')
      }, NULL_FIELD_REF],
      signedThumbnailUrl: NULL_FIELD_REF
    }
  }, {
    name: 'thumbnailUrlOverride',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'signedThumbnailUrlOverride',
    type: {
      kind: 'string'
    },
    computed: !0,
    nullable: !0,
    dependencies: {
      thumbnailUrlOverride: NULL_FIELD_REF
    },
    deprecated: {
      reason: 'thumbnailUrlOverride values are already public and do not need to be signed',
      date: '2024-09-18'
    }
  }, {
    name: 'pagesSignedThumbnailData',
    type: {
      kind: 'string'
    },
    computed: !0,
    nullable: !0,
    dependencies: {
      figFileCheckpointV2: {
        checkpoint: {
          pageThumbnails: NULL_FIELD_REF,
          createdAt: NULL_FIELD_REF
        }
      }
    }
  }, {
    name: 'thumbnailGuid',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'filePreviewFragments',
    type: {
      kind: 'object',
      name: _$$Y.FilePreviewFragments
    },
    filter: ['fileKey', '=', createParentRef('key')],
    bannedFromViews: !0,
    nullable: !0
  }, {
    name: 'signedPreviewThumbnailUrls',
    type: {
      kind: 'list',
      ofType: {
        kind: 'string'
      }
    },
    computed: !0,
    nullable: !0,
    dependencies: {
      filePreviewFragments: {
        fileKey: NULL_FIELD_REF,
        nodeIds: NULL_FIELD_REF,
        isFragment: NULL_FIELD_REF
      }
    }
  }, {
    name: 'trashedUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'orgBrowsable',
    type: {
      kind: 'bool'
    },
    nullable: !0
  }, {
    name: 'orgAudience',
    type: {
      kind: 'bool'
    },
    nullable: !0
  }, {
    name: 'hasFileLinkPassword',
    type: {
      kind: 'bool'
    },
    nullable: !0
  }, {
    name: 'hasProtoLinkPassword',
    type: {
      kind: 'bool'
    },
    nullable: !0
  }, {
    name: 'clientMeta',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'checkpointClientMeta',
    type: {
      kind: 'string'
    },
    computed: !0,
    nullable: !0,
    dependencies: {
      figFileCheckpointV2: {
        checkpoint: {
          clientMeta: NULL_FIELD_REF
        }
      }
    }
  }, {
    name: 'description',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'license',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'viewerExportRestrictedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'viewerExportRestricted',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      viewerExportRestrictedAt: NULL_FIELD_REF,
      teamPublicInfo: {
        isStarterTeam: NULL_FIELD_REF,
        isStudentTeam: NULL_FIELD_REF
      }
    }
  }, {
    name: 'isTrashed',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      trashedAt: NULL_FIELD_REF
    }
  }, {
    name: 'trashedUser',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    nullable: !0,
    filter: ['id', '=', createParentRef('trashedUserId')]
  }, {
    name: 'trackTags',
    type: {
      kind: 'object',
      name: _$$Y.FileTrackTags
    },
    embedded: !0,
    nullable: !0
  }, {
    name: 'trackTagsRaw',
    type: {
      kind: 'string'
    },
    nullable: !0,
    deprecated: {
      reason: 'trackTagsRaw is unsafe as it can return sensitive tags. Use trackTags instead.',
      date: '2025-03-14'
    }
  }, {
    name: 'newUserPlaygroundLibrary',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      trackTags: {
        defaultLibraryFileTreatmentId: NULL_FIELD_REF
      }
    }
  }, {
    name: 'isBranch',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      fileRepoId: NULL_FIELD_REF,
      sourceFileKey: NULL_FIELD_REF
    }
  }, {
    name: 'creatorId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'creator',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    nullable: !0,
    filter: ['id', '=', createParentRef('creatorId')]
  }, {
    name: 'ownerRole',
    type: {
      kind: 'object',
      name: _$$Y.FileRole
    },
    filter: {
      and: [['resourceId', '=', createParentRef('key')], ['resourceType', '=', 'file'], ['level', '=', e6.OWNER]]
    },
    nullable: !0,
    shadowCheckCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'roles',
    type: {
      kind: 'objects',
      name: _$$Y.FileRole
    },
    filter: {
      and: [['resourceId', '=', createParentRef('key')], ['resourceType', '=', 'file']]
    },
    expectedMaxCount: 1e4,
    shadowCheckCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'readableRoles',
    type: {
      kind: 'objects',
      name: _$$Y.FileRole
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    filter: {
      and: [['resourceId', '=', createParentRef('key')], ['resourceType', '=', 'file']]
    },
    expectedMaxCount: 1e4,
    checkCanRead: {
      userId: createViewRef('userId')
    }
  }, {
    name: 'roleOnObjectForUser',
    type: {
      kind: 'object',
      name: _$$Y.FileRole
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: {
      and: [['userId', '=', createFieldRef('userId')], ['resourceId', '=', createParentRef('key')], ['resourceType', '=', 'file']]
    },
    shadowCheckCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'roleOnObjectRepoForUser',
    type: {
      kind: 'object',
      name: _$$Y.RepoRole
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: {
      and: [['userId', '=', createFieldRef('userId')], ['resourceId', '=', createParentRef('fileRepoId')], ['resourceType', '=', 'file_repo']]
    }
  }, {
    name: 'roleOnObjectProjectForUser',
    type: {
      kind: 'object',
      name: _$$Y.ProjectRole
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: {
      and: [['userId', '=', createFieldRef('userId')], ['resourceId', '=', createParentRef('folderId')], ['resourceType', '=', 'folder']]
    }
  }, {
    name: 'roleOnObjectTeamForUser',
    type: {
      kind: 'object',
      name: _$$Y.TeamRole
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: {
      and: [['userId', '=', createFieldRef('userId')], ['resourceId', '=', createParentRef('teamId')], ['resourceType', '=', 'team']]
    }
  }, {
    name: 'pendingUserOrgJoinRequest',
    type: {
      kind: 'object',
      name: _$$Y.OrgJoinRequest
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: {
      and: [['requesterUserId', '=', createFieldRef('userId')], ['orgId', '=', createParentRef('parentOrgId')], ['status', '=', 'pending']]
    }
  }, {
    name: 'userAuthn',
    type: {
      kind: 'object',
      name: _$$Y.UserAuthn
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: ['userId', '=', createFieldRef('userId')],
    bannedFromViews: !0
  }, {
    name: 'currentOrgUser',
    type: {
      kind: 'object',
      name: _$$Y.OrgUser
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: {
      and: [['userId', '=', createFieldRef('userId')], ['orgId', '=', createParentRef('parentOrgId')], ['permission', '<>', 'guest']]
    }
  }, {
    name: 'currentPrivilegedOrgUser',
    type: {
      kind: 'object',
      name: _$$Y.PrivilegedOrgUser
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: {
      and: [['userId', '=', createFieldRef('userId')], ['orgId', '=', createParentRef('parentOrgId')], ['permission', '<>', 'guest']]
    }
  }, {
    name: 'currentPartialOrgUser',
    type: {
      kind: 'object',
      name: _$$Y.GuestOrgUser
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: {
      and: [['userId', '=', createFieldRef('userId')], ['orgId', '=', createParentRef('parentOrgId')]]
    }
  }, {
    name: 'currentBaseOrgUser',
    type: {
      kind: 'object',
      name: _$$Y.BaseOrgUser
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: {
      and: [['userId', '=', createFieldRef('userId')], ['orgId', '=', createParentRef('parentOrgId')]]
    }
  }, {
    name: 'currentTeamUser',
    type: {
      kind: 'object',
      name: _$$Y.TeamUser
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: {
      and: [['userId', '=', createFieldRef('userId')], ['teamId', '=', createParentRef('teamId')]]
    }
  }, {
    name: 'sourceFile',
    type: {
      kind: 'object',
      name: _$$Y.File
    },
    nullable: !0,
    filter: ['key', '=', createParentRef('sourceFileKey')],
    checkCanRead: {
      fieldName: 'canViewV3',
      userId: createSessionRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId')
    }
  }, {
    name: '_sourceFile_permsV2',
    type: {
      kind: 'object',
      name: _$$Y.File
    },
    nullable: !0,
    filter: ['key', '=', createParentRef('sourceFileKey')],
    bannedFromViews: !0
  }, {
    name: 'repo',
    type: {
      kind: 'object',
      name: _$$Y.Repo
    },
    nullable: !0,
    filter: ['id', '=', createParentRef('fileRepoId')],
    checkCanRead: {
      fieldName: 'canViewV3',
      userId: createSessionRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId')
    }
  }, {
    name: '_repoForLegacyViews',
    type: {
      kind: 'object',
      name: _$$Y.Repo
    },
    nullable: !0,
    filter: ['id', '=', createParentRef('fileRepoId')],
    deprecated: {
      reason: 'This field does not perform permission-checking. Use .repo instead.',
      date: '2025-07-02'
    }
  }, {
    name: '_repo_permsV2',
    type: {
      kind: 'object',
      name: _$$Y.Repo
    },
    nullable: !0,
    filter: ['id', '=', createParentRef('fileRepoId')],
    bannedFromViews: !0
  }, {
    name: 'project',
    type: {
      kind: 'object',
      name: _$$Y.Project
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: ['id', '=', createParentRef('folderId')],
    checkCanRead: {
      userId: createFieldRef('userId')
    }
  }, {
    name: '_project_permsV2',
    type: {
      kind: 'object',
      name: _$$Y.Project
    },
    nullable: !0,
    filter: ['id', '=', createParentRef('folderId')],
    bannedFromViews: !0
  }, {
    name: 'team',
    type: {
      kind: 'object',
      name: _$$Y.Team
    },
    nullable: !0,
    filter: ['id', '=', createParentRef('teamId')],
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'teamLimitedInfo',
    type: {
      kind: 'object',
      name: _$$Y.TeamLimitedInfo
    },
    nullable: !0,
    filter: ['id', '=', createParentRef('teamId')],
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'teamPublicInfo',
    type: {
      kind: 'object',
      name: _$$Y.TeamPublicInfo
    },
    nullable: !0,
    filter: ['id', '=', createParentRef('teamId')]
  }, {
    name: 'orgPublicInfo',
    type: {
      kind: 'object',
      name: _$$Y.OrgPublicInfo
    },
    nullable: !0,
    filter: ['id', '=', createParentRef('parentOrgId')]
  }, {
    name: '_orgForLegacyViews',
    type: {
      kind: 'object',
      name: _$$Y.Org
    },
    nullable: !0,
    filter: ['id', '=', createParentRef('parentOrgId')],
    deprecated: {
      reason: 'This field does not perform permission-checking. Use .org instead.',
      date: '2025-06-16'
    }
  }, {
    name: 'org',
    type: {
      kind: 'object',
      name: _$$Y.Org
    },
    filter: ['id', '=', createParentRef('parentOrgId')],
    nullable: !0,
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'orgInfo',
    type: {
      kind: 'object',
      name: _$$Y.OrgInfo
    },
    filter: ['id', '=', createParentRef('parentOrgId')],
    nullable: !0
  }, {
    name: '_team_permsV2',
    type: {
      kind: 'object',
      name: _$$Y.Team
    },
    nullable: !0,
    filter: ['id', '=', createParentRef('teamId')],
    bannedFromViews: !0
  }, {
    name: '_teamForLegacyViews',
    type: {
      kind: 'object',
      name: _$$Y.Team
    },
    nullable: !0,
    filter: ['id', '=', createParentRef('teamId')],
    deprecated: {
      reason: 'This field does not perform permission-checking. Use .team instead.',
      date: '2025-03-27'
    }
  }, {
    name: '_org_permsV2',
    type: {
      kind: 'object',
      name: _$$Y.Org
    },
    filter: ['id', '=', createParentRef('parentOrgId')],
    nullable: !0,
    bannedFromViews: !0
  }, {
    name: 'publishedHubFile',
    type: {
      kind: 'object',
      name: _$$Y.HubFile
    },
    nullable: !0,
    filter: ['figFileId', '=', createParentRef('_id')],
    shadowCheckCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'feedPosts',
    type: {
      kind: 'objects',
      name: _$$Y.FeedPost
    },
    filter: {
      and: [['fileKey', '=', createParentRef('key')], ['pending', '=', !1]]
    },
    orderBy: [['createdAt', 'DESC']],
    expectedMaxCount: 1e4
  }, {
    name: 'fileCanvasMentions',
    type: {
      kind: 'objects',
      name: _$$Y.FileCanvasMention
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    filter: {
      and: [['fileKey', '=', createParentRef('key')], ['mentionedUserId', '=', createFieldRef('userId')], ['deletedAt', '=', null]]
    },
    orderBy: [['createdAt', 'DESC']],
    expectedMaxCount: 1e4
  }, {
    name: 'fileCanvasMentionAny',
    type: {
      kind: 'object',
      name: _$$Y.FileCanvasMention
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    filter: {
      and: [['fileKey', '=', createParentRef('key')], ['mentionedUserId', '=', createFieldRef('userId')], ['deletedAt', '=', null]]
    },
    expectedMaxCount: 1,
    nullable: !0
  }, {
    name: 'atMention',
    type: {
      kind: 'object',
      name: _$$Y.AtMention
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    filter: {
      and: [['fileKey', '=', createParentRef('key')], ['mentionedUserId', '=', createFieldRef('userId')]]
    },
    nullable: !0
  }, {
    name: 'currentUser',
    nullable: !0,
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    filter: ['id', '=', createFieldRef('userId')]
  }, {
    name: 'currentUserFileCanvasMentionReadStatus',
    type: {
      kind: 'object',
      name: _$$Y.FileCanvasMentionReadStatus
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: {
      and: [['fileKey', '=', createParentRef('key')], ['userId', '=', createFieldRef('userId')]]
    }
  }, {
    name: 'libraryHierarchyPaths',
    type: {
      kind: 'objects',
      name: _$$Y.LibraryHierarchyPath
    },
    args: [{
      name: 'initialPageSize',
      type: {
        kind: 'int'
      }
    }],
    filter: {
      and: [['fileKey', '=', createParentRef('key')], ['hubFileId', '=', null]]
    },
    expectedMaxCount: 1e4
  }, {
    name: 'library',
    type: {
      kind: 'object',
      name: _$$Y.Library
    },
    filter: {
      and: [['fileKey', '=', createParentRef('key')], ['hubFileId', '=', null]]
    },
    orderBy: [['updatedAt', 'DESC']],
    nullable: !0,
    shadowCheckCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'libraryFileSubscriptions',
    type: {
      kind: 'objects',
      name: _$$Y.LibraryFileSubscription
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'initialPageSize',
      type: {
        kind: 'int'
      }
    }],
    checkCanRead: {
      userId: createFieldRef('userId')
    },
    filter: {
      and: [['fileKey', '=', createParentRef('key')], ['isSubscribed', '=', !0]]
    },
    expectedMaxCount: 1e3
  }, {
    name: 'libraryFileSubscriptionOverrides',
    type: {
      kind: 'objects',
      name: _$$Y.LibraryFileSubscription
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    checkCanRead: {
      userId: createFieldRef('userId')
    },
    filter: ['fileKey', '=', createParentRef('key')],
    expectedMaxCount: 1e3
  }, {
    name: 'libraryFileSubscriptionOverridesV2',
    type: {
      kind: 'objects',
      name: _$$Y.LibraryFileSubscription
    },
    args: [],
    filter: ['fileKey', '=', createParentRef('key')],
    expectedMaxCount: 1e3
  }, {
    name: 'communityLibraryFileSubscriptions',
    type: {
      kind: 'objects',
      name: _$$Y.CommunityLibraryFileSubscription
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'initialPageSize',
      type: {
        kind: 'int'
      }
    }],
    checkCanRead: {
      userId: createFieldRef('userId')
    },
    filter: {
      and: [['fileKey', '=', createParentRef('key')], ['hubFileId', '<>', null]]
    },
    expectedMaxCount: 1e3
  }, {
    name: 'communityQuickstartLibraries',
    type: {
      kind: 'objects',
      name: _$$Y.CommunityQuickstartLibrary
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    deprecated: {
      reason: 'Use libraryPresetSubscriptionsV2 instead.',
      date: '2025-03-29'
    },
    resolver: {
      type: 'HTTP',
      uri: '/api/internal/livegraph/sinatra_resolver/quickstart_community_libraries',
      queryParams: {
        userId: createFieldRef('userId')
      },
      realtimePolicy: {
        type: 'Static'
      }
    }
  }, {
    name: 'libraryPresetSubscriptions',
    type: {
      kind: 'objects',
      name: _$$Y.LibraryPresetSubscription
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    deprecated: {
      reason: 'Use libraryPresetSubscriptionsV2 instead.',
      date: '2025-03-29'
    },
    resolver: {
      type: 'HTTP',
      uri: '/api/internal/livegraph/sinatra_resolver/quickstart_community_libraries',
      queryParams: {
        userId: createFieldRef('userId')
      },
      realtimePolicy: {
        type: 'Static'
      }
    }
  }, {
    ...dk,
    name: 'libraryTeamSubscriptions',
    checkCanRead: {
      userId: createFieldRef('userId')
    },
    filter: {
      and: [['isSubscribed', '=', !0], ['teamId', '=', createParentRef('teamId')]]
    }
  }, {
    ...dk,
    name: 'libraryTeamSubscriptionsForSlides',
    checkCanRead: {
      userId: createFieldRef('userId')
    },
    filter: {
      and: [['slidesSubscribed', '=', !0], ['teamId', '=', createParentRef('teamId')]]
    }
  }, {
    ...dk,
    name: 'libraryTeamSubscriptionsForBuzz',
    checkCanRead: {
      userId: createFieldRef('userId')
    },
    filter: {
      and: [['buzzSubscribed', '=', !0], ['teamId', '=', createParentRef('teamId')]]
    }
  }, {
    ...dk,
    name: 'libraryTeamSubscriptionsForFigJam',
    checkCanRead: {
      userId: createSessionRef('userId')
    },
    filter: {
      and: [['figJamSubscribed', '=', !0], ['teamId', '=', createParentRef('teamId')]]
    }
  }, {
    ...dN,
    name: 'libraryUserSubscriptions',
    checkCanRead: {
      userId: createFieldRef('userId')
    },
    filter: {
      and: [['isSubscribed', '=', !0], ['userId', '=', createFieldRef('userId')]]
    }
  }, {
    ...dN,
    name: 'libraryUserSubscriptionsForSlides',
    checkCanRead: {
      userId: createSessionRef('userId')
    },
    filter: {
      and: [['slidesSubscribed', '=', !0], ['userId', '=', createFieldRef('userId')]]
    }
  }, {
    ...dN,
    name: 'libraryUserSubscriptionsForBuzz',
    checkCanRead: {
      userId: createSessionRef('userId')
    },
    filter: {
      and: [['buzzSubscribed', '=', !0], ['userId', '=', createFieldRef('userId')]]
    }
  }, {
    ...dN,
    name: 'libraryUserSubscriptionsForFigJam',
    checkCanRead: {
      userId: createSessionRef('userId')
    },
    filter: {
      and: [['figJamSubscribed', '=', !0], ['userId', '=', createFieldRef('userId')]]
    }
  }, {
    ...dC,
    name: 'libraryOrgSubscriptions',
    checkCanRead: {
      userId: createFieldRef('userId')
    },
    filter: {
      and: [['isSubscribed', '=', !0], ['orgId', '=', createParentRef('parentOrgId')]]
    }
  }, {
    ...dC,
    name: 'libraryOrgSubscriptionsForSlides',
    checkCanRead: {
      userId: createFieldRef('userId')
    },
    filter: {
      and: [['slidesSubscribed', '=', !0], ['orgId', '=', createParentRef('parentOrgId')]]
    }
  }, {
    ...dC,
    name: 'libraryOrgSubscriptionsForBuzz',
    checkCanRead: {
      userId: createFieldRef('userId')
    },
    filter: {
      and: [['buzzSubscribed', '=', !0], ['orgId', '=', createParentRef('parentOrgId')]]
    }
  }, {
    ...dC,
    name: 'libraryOrgSubscriptionsForFigJam',
    checkCanRead: {
      userId: createSessionRef('userId')
    },
    filter: {
      and: [['figJamSubscribed', '=', !0], ['orgId', '=', createParentRef('parentOrgId')]]
    }
  }, {
    name: 'workshopMode',
    nullable: !0,
    type: {
      kind: 'object',
      name: _$$Y.FigFileWorkshopMode
    },
    filter: ['fileKey', '=', createParentRef('key')]
  }, {
    name: 'orgSharedSetting',
    type: {
      kind: 'object',
      name: _$$Y.SharedOrgLicenseGroupSetting
    },
    nullable: !0,
    filter: {
      and: [['resourceType', '=', 'Org'], ['resourceId', '=', createParentRef('parentOrgId')]]
    }
  }, {
    name: 'votingSessions',
    nullable: !0,
    type: {
      kind: 'objects',
      name: _$$Y.VotingSession
    },
    filter: {
      and: [['fileKey', '=', createParentRef('key')]]
    },
    orderBy: [['createdAt', 'DESC']],
    expectedMaxCount: 100
  }, {
    name: 'openMergeRequest',
    nullable: !0,
    type: {
      kind: 'object',
      name: _$$Y.OpenMergeRequest
    },
    filter: ['branchFileKey', '=', createParentRef('key')]
  }, {
    name: 'fileMerges',
    type: {
      kind: 'objects',
      name: _$$Y.FileMerge
    },
    filter: ['branchFileKey', '=', createParentRef('key')],
    expectedMaxCount: 1e3,
    orderBy: [['updatedAt', 'DESC']]
  }, {
    name: 'fileRoleRequests',
    type: {
      kind: 'objects',
      name: _$$Y.FileRoleRequest
    },
    args: [{
      name: 'initialPageSize',
      type: {
        kind: 'int'
      }
    }],
    filter: {
      and: [['fileKey', '=', createParentRef('key')], ['status', '=', 'pending']]
    },
    expectedMaxCount: 1e4,
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'fileRoleRequest',
    type: {
      kind: 'object',
      name: _$$Y.FileRoleRequest
    },
    args: [{
      name: 'id',
      type: {
        kind: 'bigint'
      }
    }],
    filter: ['id', '=', createFieldRef('id')],
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'pendingUserFileRoleRequest',
    type: {
      kind: 'object',
      name: _$$Y.FileRoleRequest
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: {
      and: [['fileKey', '=', createParentRef('key')], ['status', '=', 'pending'], ['requesterUserId', '=', createFieldRef('userId')]]
    },
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'fileVersions',
    type: {
      kind: 'objects',
      name: _$$Y.FileVersion
    },
    filter: ['fileKey', '=', createParentRef('key')],
    expectedMaxCount: 3e4,
    orderBy: [['updatedAt', 'DESC']],
    deprecated: {
      reason: 'Files can have over 25k versions, usually not all are needed. Use recentFileVersions or create a new filtered query.',
      date: '2024-07-16'
    }
  }, {
    name: 'recentFileVersions',
    type: {
      kind: 'objects',
      name: _$$Y.FileVersion
    },
    filter: ['fileKey', '=', createParentRef('key')],
    expectedMaxCount: 500,
    orderBy: [['createdAt', 'DESC']]
  }, {
    name: 'folderOwnerRole',
    type: {
      kind: 'object',
      name: _$$Y.ProjectRole
    },
    nullable: !0,
    filter: {
      and: [['resourceId', '=', createParentRef('folderId')], ['resourceType', '=', 'folder'], ['level', '=', e6.OWNER]]
    }
  }, {
    name: 'orgDraftsFolderOwnerBaseOrgUser',
    nullable: !0,
    type: {
      kind: 'object',
      name: _$$Y.BaseOrgUser
    },
    filter: ['draftsFolderId', '=', createParentRef('folderId')]
  }, {
    name: '_hasFileAccess',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'permissionLevel',
      type: {
        kind: 'int'
      }
    }, {
      name: 'ignoreLinkAccess',
      type: {
        kind: 'bool'
      },
      nullable: !0
    }, {
      name: 'ignoreArchivedBranch',
      type: {
        kind: 'bool'
      },
      nullable: !0
    }, {
      name: 'sessionId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {}
  }, {
    name: 'stylesWithLegacySourceAssets',
    type: {
      kind: 'objects',
      name: _$$Y.StyleWithLegacySourceAsset
    },
    args: [{
      name: 'initialPageSize',
      type: {
        kind: 'int'
      }
    }],
    filter: ['fileKey', '=', createParentRef('key')],
    expectedMaxCount: 1e4
  }, {
    name: 'canEdit',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: dP(Mx['FILE::CAN_EDIT']),
    deprecated: {
      reason: 'Use canEditV3 instead.',
      date: '2024-04-26'
    }
  }, {
    name: 'canEditV2',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'sessionId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: dP(Mx['FILE::CAN_EDIT']),
    deprecated: {
      reason: 'Use canEditV3 instead.',
      date: '2024-04-15'
    }
  }, {
    name: 'canEditCanvas',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'sessionId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: dP(Mx['FILE::CAN_EDIT_CANVAS']),
    deprecated: {
      reason: 'Use canEditCanvasV2 instead.',
      date: '2024-04-25'
    }
  }, {
    name: 'canEditIgnorePaidStatus',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'sessionId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: dP(Mx['FILE::CAN_EDIT_IGNORE_PAID_STATUS']),
    deprecated: {
      reason: 'Use canEditIgnorePaidStatusV2 instead.',
      date: '2024-04-25'
    }
  }, {
    name: 'canEditIgnoreEduGracePeriod',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'sessionId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: dP(Mx['FILE::CAN_EDIT_IGNORE_EDU_GRACE_PERIOD']),
    deprecated: {
      reason: 'Use canEditIgnoreEduGracePeriodV2 instead',
      date: '2024-04-15'
    }
  }, {
    name: 'canViewAndCreateComments',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'sessionId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: dP(Mx['FILE::CAN_VIEW_AND_CREATE_COMMENTS']),
    deprecated: {
      reason: 'Use canViewAndCreateCommentsV2 instead.',
      date: '2024-04-25'
    }
  }, {
    name: 'canMoveComments',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'sessionId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: dP(Mx['FILE::CAN_MOVE_COMMENTS']),
    deprecated: {
      reason: 'Use canMoveCommentsV2 instead.',
      date: '2024-04-15'
    }
  }, {
    name: 'canRename',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'sessionId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: dP(Mx['FILE::CAN_RENAME']),
    deprecated: {
      reason: 'Use canRenameV2 instead.',
      date: '2024-04-25'
    }
  }, {
    name: 'canDelete',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'sessionId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: Mx['FILE::CAN_DELETE'],
    deprecated: {
      reason: 'Use canDeleteV2 instead.',
      date: '2024-04-25'
    }
  }, {
    name: 'canTrash',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'sessionId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: dP(Mx['FILE::CAN_TRASH']),
    deprecated: {
      reason: 'Use canTrashV2 instead.',
      date: '2024-04-25'
    }
  }, {
    name: 'canTrashV2',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: dP(Mx['FILE::CAN_TRASH']),
    deprecated: {
      reason: 'Use canTrashV3 instead.',
      date: '2024-06-14'
    }
  }, {
    name: 'canRestore',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'sessionId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: dP(Mx['FILE::CAN_RESTORE']),
    deprecated: {
      reason: 'Use canRestoreV2 instead.',
      date: '2024-04-25'
    }
  }, {
    name: 'canRestoreV2',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: dP(Mx['FILE::CAN_RESTORE']),
    deprecated: {
      reason: 'Use canRestoreV3 instead.',
      date: '2024-06-14'
    }
  }, {
    name: 'canPermanentlyDelete',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'sessionId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: dP(Mx['FILE::CAN_PERMANENTLY_DELETE']),
    deprecated: {
      reason: 'Use canPermanentlyDeleteV2 instead.',
      date: '2024-04-25'
    }
  }, {
    name: 'canPermanentlyDeleteV2',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: dP(Mx['FILE::CAN_PERMANENTLY_DELETE']),
    deprecated: {
      reason: 'Use canPermanentlyDeleteV3 instead.',
      date: '2024-06-14'
    }
  }, {
    name: 'canFavorite',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'sessionId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: dP(Mx['FILE::CAN_FAVORITE']),
    deprecated: {
      reason: 'Use canFavoriteV2 instead.',
      date: '2024-04-25'
    }
  }, {
    name: 'canManage',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: dP(Mx['FILE::CAN_MANAGE']),
    deprecated: {
      reason: 'Use canManageV2 instead.',
      date: '2024-04-25'
    }
  }, {
    name: 'hasEditRole',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    permissionName: 'FILE::CAN_MODIFY_ROLES',
    dependencies: Mx['FILE::CAN_MODIFY_ROLES']
  }, {
    name: 'eduGracePeriod',
    type: {
      kind: 'object',
      name: _$$Y.EduGracePeriod
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: {
      and: [['userId', '=', createFieldRef('userId')], ['teamId', '=', createParentRef('teamId')]]
    }
  }, {
    name: 'canViewPrototype',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: dP(Mx['FILE::CAN_VIEW_PROTOTYPE']),
    deprecated: {
      reason: 'Use canViewPrototypeV3 instead.',
      date: '2024-04-29'
    }
  }, {
    name: 'canViewPrototypeV2',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'sessionId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: dP(Mx['FILE::CAN_VIEW_PROTOTYPE']),
    deprecated: {
      reason: 'Use canViewPrototypeV3 instead.',
      date: '2024-04-29'
    }
  }, {
    name: 'hasViewRole',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    permissionName: 'FILE::HAS_ROLE_ACCESS',
    dependencies: Mx['FILE::HAS_ROLE_ACCESS']
  }, {
    name: 'canView',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: dP(Mx['FILE::CAN_VIEW']),
    deprecated: {
      reason: 'This field does not grant access to users who have entered the file password. Please use canViewV3 instead.',
      date: '2024-04-29'
    }
  }, {
    name: 'canViewV2',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'sessionId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: dP(Mx['FILE::CAN_VIEW']),
    deprecated: {
      reason: 'Use canViewV3 instead.',
      date: '2024-04-29'
    }
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: dP(Mx['FILE::CAN_VIEW_PROTOTYPE']),
    deprecated: {
      reason: 'This field does not grant access to users who have entered the file password. Please use canReadV3 instead.',
      date: '2024-04-29'
    }
  }, {
    name: 'canReadV2',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'sessionId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: mergeFieldRefs(dP(Mx['FILE::CAN_VIEW_PROTOTYPE']), {
      pwdConfigV2: {
        version: NULL_FIELD_REF
      },
      sourceFile: {
        pwdConfigV2: {
          version: NULL_FIELD_REF
        }
      },
      key: NULL_FIELD_REF
    }),
    deprecated: {
      reason: 'Use canReadV3 instead.',
      date: '2024-04-29'
    }
  }, {
    name: 'canReadV3',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'sessionId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }, {
      name: 'anonymousUserId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }],
    computed: !0,
    permissionName: 'FILE::CAN_VIEW_PROTOTYPE',
    dependencies: Mx['FILE::CAN_VIEW_PROTOTYPE']
  }, {
    name: 'canAccessWithKillSwitch',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'sessionId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }, {
      name: 'anonymousUserId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }, {
      name: 'linkAccessOverrideKey',
      type: {
        kind: 'string'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: mergeFieldRefs(Mx['FILE::CAN_VIEW_PROTOTYPE'], Mx['FILE::CAN_ACCESS'], {
      fileCanAccessFeatureGate: {
        value: NULL_FIELD_REF
      }
    })
  }, {
    name: 'fileCanAccessFeatureGate',
    type: {
      kind: 'object',
      name: _$$Y.StatsigFeatureGate
    },
    nullable: !0,
    resolver: {
      type: 'Statsig',
      statsigUser: {},
      statsigResource: {
        type: 'flag',
        flagName: 'livegraph_file_can_access'
      }
    }
  }, {
    name: 'fileIsBakeEnabled',
    type: {
      kind: 'object',
      name: _$$Y.StatsigFeatureGate
    },
    nullable: !0,
    resolver: {
      type: 'Statsig',
      statsigUser: {},
      statsigResource: {
        type: 'flag',
        flagName: 'bake'
      }
    }
  }, {
    name: 'projectPath',
    type: {
      kind: 'string'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      project: [{
        userId: createViewRef('userId')
      }, {
        path: NULL_FIELD_REF
      }]
    }
  }, {
    name: 'isDraftFile',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      _project_permsV2: {
        path: NULL_FIELD_REF
      }
    }
  }, {
    name: 'isAbandonedDraftFile',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      _project_permsV2: {
        isAbandonedDrafts: NULL_FIELD_REF
      }
    }
  }, {
    name: 'prototypeLibCppConfig',
    type: {
      kind: 'object',
      name: _$$Y.FilePrototypeLibCppConfig
    },
    nullable: !0,
    filter: ['fileKey', '=', createParentRef('key')]
  }, {
    name: 'variableSets',
    type: {
      kind: 'objects',
      name: _$$Y.VariableSet
    },
    filter: {
      and: [['fileKey', '=', createParentRef('key')], ['unpublishedAt', '=', null], ['hubFileId', '=', null]]
    },
    args: [{
      name: 'initialPageSize',
      type: {
        kind: 'int'
      }
    }],
    expectedMaxCount: 1e4,
    deprecated: {
      reason: 'Use variableCollections',
      date: '2021-04-27'
    }
  }, {
    name: 'variableCollections',
    type: {
      kind: 'objects',
      name: _$$Y.VariableSet
    },
    filter: {
      and: [['fileKey', '=', createParentRef('key')], ['unpublishedAt', '=', null], ['hubFileId', '=', null]]
    },
    args: [{
      name: 'initialPageSize',
      type: {
        kind: 'int'
      }
    }],
    expectedMaxCount: 1e4
  }, {
    name: 'variables',
    type: {
      kind: 'objects',
      name: _$$Y.Variable
    },
    filter: {
      and: [['fileKey', '=', createParentRef('key')], ['unpublishedAt', '=', null], ['hubFileId', '=', null]]
    },
    args: [{
      name: 'initialPageSize',
      type: {
        kind: 'int'
      }
    }],
    expectedMaxCount: 1e4
  }, {
    name: 'libraryAssets',
    args: [{
      name: 'libraryKey',
      type: {
        kind: 'string'
      }
    }],
    type: {
      kind: 'objects',
      name: _$$Y.LibraryAsset
    },
    filter: {
      and: [['fileKey', '=', createParentRef('key')], ['libraryKey', '=', createFieldRef('libraryKey')], ['unpublishedAt', '=', null]]
    },
    expectedMaxCount: 1e4
  }, {
    name: 'libraryAssetsOfType',
    args: [{
      name: 'libraryKey',
      type: {
        kind: 'string'
      }
    }, {
      name: 'assetType',
      type: {
        kind: 'enum',
        name: 'AssetType'
      }
    }],
    type: {
      kind: 'objects',
      name: _$$Y.LibraryAsset
    },
    filter: {
      and: [['fileKey', '=', createParentRef('key')], ['libraryKey', '=', createFieldRef('libraryKey')], ['assetType', '=', createFieldRef('assetType')], ['unpublishedAt', '=', null]]
    },
    expectedMaxCount: 1e4
  }, {
    name: 'codeComponentLibraryAssets',
    args: [{
      name: 'libraryKey',
      type: {
        kind: 'string'
      }
    }],
    type: {
      kind: 'objects',
      name: _$$Y.LibraryAsset
    },
    filter: {
      and: [['fileKey', '=', createParentRef('key')], ['libraryKey', '=', createFieldRef('libraryKey')], ['assetType', '=', e7.CodeComponent], ['unpublishedAt', '=', null]]
    },
    expectedMaxCount: 1e4
  }, {
    name: 'canAccessFullDevMode',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'sessionId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: dP(Mx['FILE::CAN_ACCESS_FULL_DEV_MODE']),
    deprecated: {
      reason: 'Use canAccessFullDevModeV2 instead.',
      date: '2024-04-24'
    }
  }, {
    name: 'canAccessFullDevModeOrgPlus',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'sessionId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: dP(Mx['FILE::CAN_ACCESS_FULL_DEV_MODE_ORG_PLUS']),
    deprecated: {
      reason: 'Use canAccessFullDevModeOrgPlusV2 instead.',
      date: '2024-04-24'
    }
  }, {
    name: 'isEligibleForDevModeTrial',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'sessionId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: Mx['FILE::IS_ELIGIBLE_FOR_DEV_MODE_TRIAL'],
    deprecated: {
      reason: 'Use isEligibleForDevModeTrialV2 instead.',
      date: '2024-04-24'
    }
  }, {
    name: 'isInDevModeTrial',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'sessionId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: Mx['FILE::IS_IN_DEV_MODE_TRIAL'],
    deprecated: {
      reason: 'Use isInDevModeTrialV2 instead.',
      date: '2024-04-24'
    }
  }, {
    name: 'canAccessDevModeEntryPoint',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'sessionId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: dP(Mx['FILE::CAN_ACCESS_DEV_MODE_ENTRY_POINT']),
    deprecated: {
      reason: 'Use canAccessDevModeEntryPointV2 instead.',
      date: '2024-04-23'
    }
  }, {
    name: 'invite',
    nullable: !0,
    type: {
      kind: 'object',
      name: _$$Y.Invite
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    filter: {
      and: [['resourceId', '=', createParentRef('key')], ['resourceType', '=', 'file'], ['inviteeUserId', '=', createFieldRef('userId')]]
    }
  }, {
    name: 'components',
    type: {
      kind: 'objects',
      name: _$$Y.Component
    },
    args: [{
      name: 'initialPageSize',
      type: {
        kind: 'int'
      }
    }],
    filter: {
      and: [['fileKey', '=', createParentRef('key')], ['unpublishedAt', '=', null], ['hubFileId', '=', null]]
    },
    deprecated: {
      reason: 'Deprecated in favor of storing components, styles, and state groups inside a library hierarchy path',
      date: '2021-08-10'
    },
    expectedMaxCount: 1e4
  }, {
    name: 'styles',
    type: {
      kind: 'objects',
      name: _$$Y.Style
    },
    args: [{
      name: 'initialPageSize',
      type: {
        kind: 'int'
      }
    }],
    filter: {
      and: [['fileKey', '=', createParentRef('key')], ['unpublishedAt', '=', null], ['hubFileId', '=', null]]
    },
    expectedMaxCount: 1e4
  }, {
    name: 'stateGroups',
    type: {
      kind: 'objects',
      name: _$$Y.StateGroup
    },
    args: [{
      name: 'initialPageSize',
      type: {
        kind: 'int'
      }
    }],
    filter: {
      and: [['fileKey', '=', createParentRef('key')], ['unpublishedAt', '=', null], ['hubFileId', '=', null]]
    },
    expectedMaxCount: 1e4
  }, {
    name: 'modules',
    type: {
      kind: 'objects',
      name: _$$Y.Module
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    filter: {
      and: [['fileKey', '=', createParentRef('key')], ['unpublishedAt', '=', null], ['hubFileId', '=', null]]
    },
    checkCanRead: {
      userId: createFieldRef('userId')
    },
    expectedMaxCount: 1e4
  }, {
    name: 'fileSeenStates',
    type: {
      kind: 'objects',
      name: _$$Y.FileSeenState
    },
    filter: {
      and: [['fileKey', '=', createParentRef('key')]]
    },
    expectedMaxCount: 99999
  }, {
    name: 'linkedFigFiles',
    type: {
      kind: 'objects',
      name: _$$Y.LinkedFigFile
    },
    filter: {
      and: [['sourceFileKey', '=', createParentRef('key')]]
    },
    deprecated: {
      reason: 'Use figFileLinks',
      date: '2021-09-23'
    },
    expectedMaxCount: 15
  }, {
    name: 'figFileLinks',
    type: {
      kind: 'objects',
      name: _$$Y.FigFileLink
    },
    filter: {
      and: [['sourceFileKey', '=', createParentRef('key')]]
    },
    expectedMaxCount: 15,
    orderBy: [['sortPosition', 'ASC']],
    deprecated: {
      reason: 'Abandoned feature with code deleted',
      date: '2025-03-21'
    }
  }, {
    name: 'isTryFile',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      creator: {
        email: NULL_FIELD_REF
      }
    }
  }, {
    name: 'template',
    type: {
      kind: 'object',
      name: _$$Y.Template
    },
    filter: ['fileKey', '=', createParentRef('key')],
    nullable: !0
  }, {
    name: 'isTeamTemplate',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      template: {
        unpublishedAt: NULL_FIELD_REF
      }
    }
  }, {
    name: 'isDefaultTemplate',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      trackTags: {
        isTemplate: NULL_FIELD_REF
      }
    }
  }, {
    name: 'isDevModeDemoFile',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      key: NULL_FIELD_REF
    }
  }, {
    name: 'passwordAuthentication',
    type: {
      kind: 'object',
      name: _$$Y.FigFilePasswordAuthentication
    },
    args: [{
      name: 'anonymousUserId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: {
      and: [['fileKey', '=', createParentRef('key')], ['anonymousUserId', '=', createFieldRef('anonymousUserId')]]
    }
  }, {
    name: 'sourceFilePasswordAuthentication',
    type: {
      kind: 'object',
      name: _$$Y.FigFilePasswordAuthentication
    },
    args: [{
      name: 'anonymousUserId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: {
      and: [['fileKey', '=', createParentRef('sourceFileKey')], ['anonymousUserId', '=', createFieldRef('anonymousUserId')]]
    }
  }, {
    name: 'pwdConfig',
    type: {
      kind: 'object',
      name: _$$Y.FigFilePwdConfig
    },
    filter: ['figFileId', '=', createParentRef('_id')],
    nullable: !0,
    deprecated: {
      reason: 'This is a scatter-gather query once rds-files becomes horizontally sharded. Query fig_file_pwd_configs by file_key column instead',
      date: '2023-06-24'
    }
  }, {
    name: 'pwdConfigV2',
    type: {
      kind: 'object',
      name: _$$Y.FigFilePwdConfig
    },
    filter: ['fileKey', '=', createParentRef('key')],
    nullable: !0
  }, {
    name: 'sourceFilePwdConfig',
    type: {
      kind: 'object',
      name: _$$Y.FigFilePwdConfig
    },
    filter: ['fileKey', '=', createParentRef('sourceFileKey')],
    nullable: !0
  }, {
    name: 'linkExpirationConfig',
    type: {
      kind: 'object',
      name: _$$Y.FigFileLinkExpirationConfig
    },
    filter: {
      and: [['figFileKey', '=', createParentRef('key')], ['accessReverted', '=', !1]]
    },
    nullable: !0,
    deprecated: {
      reason: `Use sourceFileLinkExpirationConfig and fileLinkExpirationConfig
        (do the OR on the client). Reason is that livegraph100 cannot support queries
          with top level ORs`,
      date: '2023-05-31'
    }
  }, {
    name: 'sourceFileLinkExpirationConfig',
    type: {
      kind: 'object',
      name: _$$Y.FigFileLinkExpirationConfig
    },
    filter: ['figFileKey', '=', createParentRef('sourceFileKey')],
    nullable: !0
  }, {
    name: 'fileLinkExpirationConfig',
    type: {
      kind: 'object',
      name: _$$Y.FigFileLinkExpirationConfig
    },
    filter: ['figFileKey', '=', createParentRef('key')],
    nullable: !0
  }, {
    name: 'figFileCheckpointId',
    type: {
      kind: 'bigint'
    },
    nullable: !0,
    deprecated: {
      reason: '`fig_file_checkpoint_id` is no longer used by FigFiles.',
      date: '2024-07-08'
    }
  }, {
    name: 'figFileCheckpoint',
    type: {
      kind: 'object',
      name: _$$Y.FigFileCheckpoint
    },
    filter: ['id', '=', createParentRef('figFileCheckpointId')],
    nullable: !0,
    deprecated: {
      reason: 'Use figFileCheckpointV2 which is not a scatter gather query, since fig_file_checkpoints is sharded by file_key.',
      date: '2024-05-29'
    }
  }, {
    name: 'figFileCheckpointV2',
    type: {
      kind: 'object',
      name: _$$Y.FigFileCheckpoint
    },
    filter: ['fileKey', '=', createParentRef('key')],
    nullable: !0
  }, {
    name: 'canPublishTemplate',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'sessionId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: dP(Mx['FILE::CAN_PUBLISH_TEMPLATE']),
    deprecated: {
      reason: 'Use canPublishTemplateV2 instead.',
      date: '2024-04-23'
    }
  }, {
    name: 'canInsertTemplate',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'sessionId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: dP(Mx['FILE::CAN_PUBLISH_TEMPLATE']),
    deprecated: {
      reason: 'Use canInsertTemplateV3 instead.',
      date: '2024-04-23'
    }
  }, {
    name: 'canInsertTemplateV2',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: dP(Mx['FILE::CAN_PUBLISH_TEMPLATE']),
    deprecated: {
      reason: 'Use canInsertTemplateV3 instead.',
      date: '2024-12-11'
    }
  }, {
    name: 'favoriteFile',
    type: {
      kind: 'object',
      name: _$$Y.FavoritedFile
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: {
      and: [['resourceId', '=', createParentRef('key')], ['resourceType', '=', 'file'], ['userId', '=', createFieldRef('userId')], ['orgId', '=', createParentRef('parentOrgId')]]
    }
  }, {
    name: 'isFavorited',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      favoriteFile: [{
        userId: createViewRef('userId')
      }, {
        id: NULL_FIELD_REF
      }]
    }
  }, {
    name: 'developerRelatedLinks',
    type: {
      kind: 'objects',
      name: _$$Y.DeveloperRelatedLink
    },
    filter: ['fileKey', '=', createParentRef('key')],
    expectedMaxCount: 1e4
  }, {
    name: 'developerRelatedLinksForNode',
    type: {
      kind: 'objects',
      name: _$$Y.DeveloperRelatedLink
    },
    args: [{
      name: 'nodeId',
      type: {
        kind: 'string'
      }
    }],
    filter: {
      and: [['fileKey', '=', createParentRef('key')], ['nodeId', '=', createFieldRef('nodeId')]]
    },
    expectedMaxCount: 200
  }, {
    name: 'devModeActivity',
    type: {
      kind: 'objects',
      name: _$$Y.DevModeActivity
    },
    args: [{
      name: 'nodeId',
      type: {
        kind: 'string'
      }
    }],
    filter: {
      and: [['fileKey', '=', createParentRef('key')], ['nodeId', '=', createFieldRef('nodeId')]]
    },
    expectedMaxCount: 200
  }, {
    name: 'activeFileUsers',
    type: {
      kind: 'objects',
      name: _$$Y.ActiveFileUser
    },
    filter: ['id', '=', createParentRef('key')],
    nullable: !0,
    expectedMaxCount: 200
  }, {
    name: 'defaultColorPaletteData',
    type: {
      kind: 'object',
      name: _$$Y.FileColorPalette
    },
    filter: ['fileKey', '=', createParentRef('key')],
    nullable: !0
  }, {
    name: 'userColorPaletteOverrideData',
    type: {
      kind: 'object',
      name: _$$Y.UserColorPaletteOverrideForFile
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    filter: {
      and: [['fileKey', '=', createParentRef('key')], ['userId', '=', createFieldRef('userId')]]
    },
    checkCanRead: {
      userId: createFieldRef('userId')
    },
    nullable: !0
  }, {
    name: 'branchCheckpointId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'scheme',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'editUrl',
    type: {
      kind: 'string'
    },
    computed: !0,
    dependencies: {
      key: NULL_FIELD_REF,
      name: NULL_FIELD_REF
    }
  }, {
    name: 'handoffUrl',
    type: {
      kind: 'string'
    },
    computed: !0,
    dependencies: {
      key: NULL_FIELD_REF,
      name: NULL_FIELD_REF
    }
  }, {
    name: 'prototypeUrl',
    type: {
      kind: 'string'
    },
    computed: !0,
    dependencies: {
      key: NULL_FIELD_REF,
      name: NULL_FIELD_REF
    }
  }, {
    name: 'touchedAt',
    type: {
      kind: 'string'
    },
    computed: !0,
    dependencies: {
      figFileCheckpointV2: {
        updatedAt: NULL_FIELD_REF
      }
    }
  }, {
    name: 'url',
    type: {
      kind: 'string'
    },
    computed: !0,
    dependencies: {
      key: NULL_FIELD_REF,
      name: NULL_FIELD_REF
    }
  }, {
    name: 'checkpointId',
    type: {
      kind: 'string'
    },
    computed: !0,
    dependencies: {
      figFileCheckpointV2: {
        checkpointId: NULL_FIELD_REF
      }
    }
  }, {
    name: 'checkpointKey',
    type: {
      kind: 'string'
    },
    computed: !0,
    dependencies: {
      figFileCheckpointV2: {
        checkpoint: {
          key: NULL_FIELD_REF
        }
      }
    }
  }, {
    name: 'lastPublishedAt',
    type: {
      kind: 'string'
    },
    computed: !0,
    dependencies: {
      library: {
        numComponents: NULL_FIELD_REF,
        numStyles: NULL_FIELD_REF,
        numStateGroups: NULL_FIELD_REF,
        numVariableSets: NULL_FIELD_REF,
        numVariables: NULL_FIELD_REF,
        numModuleAssets: NULL_FIELD_REF,
        numLibraryAssets: NULL_FIELD_REF,
        updatedAt: NULL_FIELD_REF
      }
    }
  }, {
    name: 'hasConnectedProjectSharingGroup',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      lastPublishedAt: NULL_FIELD_REF,
      fileSharingGroups: {
        id: NULL_FIELD_REF
      }
    }
  }, {
    name: 'code_connect_for_node_lk',
    type: {
      kind: 'objects',
      name: _$$Y.CodeConnect
    },
    args: [{
      name: 'nodeId',
      type: {
        kind: 'string'
      }
    }, {
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'instances',
      type: {
        kind: 'list',
        ofType: {
          kind: 'string'
        }
      },
      nullable: !0
    }, {
      name: 'libraryKey',
      type: {
        kind: 'string'
      }
    }, {
      name: 'isCommunityLibrary',
      type: {
        kind: 'bool'
      }
    }],
    resolver: {
      type: 'HTTP',
      uri: '/api/internal/livegraph/sinatra_resolver/code_connect_for_node_lk',
      queryParams: {
        userId: createFieldRef('userId'),
        instances: createFieldRef('instances'),
        openFileKey: createParentRef('key'),
        node_id: createFieldRef('nodeId'),
        libraryKey: createFieldRef('libraryKey'),
        isCommunityLibrary: createFieldRef('isCommunityLibrary')
      },
      realtimePolicy: {
        type: 'RedisPubsub',
        channelPrefix: 'code-connect-for-node-',
        channelPostfix: [createFieldRef('libraryKey'), createFieldRef('nodeId')]
      }
    }
  }, {
    name: 'preload_code_connect_lk',
    type: {
      kind: 'object',
      name: _$$Y.PreloadCodeConnect
    },
    args: [{
      name: 'nodes',
      type: {
        kind: 'list',
        ofType: {
          kind: 'string'
        }
      }
    }, {
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    resolver: {
      type: 'HTTP',
      uri: '/api/internal/livegraph/sinatra_resolver/preload_code_connect_lk',
      method: 'POST',
      queryParams: {
        openFileKey: createParentRef('key'),
        nodes: createFieldRef('nodes'),
        userId: createFieldRef('userId')
      },
      realtimePolicy: {
        type: 'Polling',
        intervalMs: 3e5
      }
    }
  }, {
    name: 'componentUpdates',
    type: {
      kind: 'objects',
      name: _$$Y.FileComponentUpdate
    },
    nullable: !0,
    resolver: {
      type: 'Redis',
      keyPrefix: 'file-component-updates',
      keyPostfix: [createParentRef('key')]
    }
  }, {
    name: 'stateGroupUpdates',
    type: {
      kind: 'objects',
      name: _$$Y.FileStateGroupUpdate
    },
    nullable: !0,
    resolver: {
      type: 'Redis',
      keyPrefix: 'file-state-group-updates',
      keyPostfix: [createParentRef('id')]
    }
  }, {
    name: 'libraryKeyToFile',
    type: {
      kind: 'object',
      name: _$$Y.LibraryKeyToFile
    },
    filter: ['fileKey', '=', createParentRef('key')],
    nullable: !0
  }, {
    name: 'libraryKey',
    type: {
      kind: 'string'
    },
    computed: !0,
    dependencies: {
      libraryKeyToFile: {
        libraryKey: NULL_FIELD_REF
      }
    }
  }, {
    name: 'scFileExperienceEnabled',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      id: NULL_FIELD_REF,
      parentOrgId: NULL_FIELD_REF,
      teamId: NULL_FIELD_REF
    },
    deprecated: {
      reason: 'sharing clarity has been fully rolled out.',
      date: '2024-11-20'
    }
  }, {
    name: 'workspaceId',
    type: {
      kind: 'bigint'
    },
    nullable: !0,
    computed: !0,
    dependencies: {
      _team_permsV2: {
        workspaceId: NULL_FIELD_REF
      }
    }
  }, {
    name: 'computedWorkspacePublicInfo',
    type: {
      kind: 'object',
      name: _$$Y.ComputedWorkspacePublicInfo
    },
    nullable: !0,
    computed: !0,
    dependencies: {
      workspaceId: NULL_FIELD_REF
    }
  }, {
    name: 'computedWorkspace',
    type: {
      kind: 'object',
      name: _$$Y.ComputedWorkspace
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    computed: !0,
    dependencies: {
      workspaceId: NULL_FIELD_REF,
      _team_permsV2: {
        workspace: {
          canRead: [{
            userId: createViewRef('userId')
          }, NULL_FIELD_REF]
        }
      }
    }
  }, {
    name: 'canBecomeEditor',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'sessionId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }, {
      name: 'anonymousUserId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }],
    computed: !0,
    permissionName: 'FILE::CAN_BECOME_EDITOR',
    dependencies: Mx['FILE::CAN_BECOME_EDITOR']
  }, {
    name: 'fileViewHistory',
    type: {
      kind: 'objects',
      name: _$$Y.FileViewHistory
    },
    filter: ['fileKey', '=', createParentRef('key')],
    orderBy: [['viewedAt', 'DESC']],
    expectedMaxCount: 500,
    checkCanRead: {
      userId: createSessionRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId')
    }
  }, {
    name: 'paginatedFileViewHistory',
    type: {
      kind: 'objects',
      name: _$$Y.FileViewHistory
    },
    args: [{
      name: 'firstPageSize',
      type: {
        kind: 'int'
      }
    }, {
      name: 'sortOrder',
      type: {
        kind: 'string'
      }
    }],
    checkCanRead: {
      userId: createSessionRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId')
    },
    filter: ['fileKey', '=', createParentRef('key')],
    pagination: {
      firstPageSize: createFieldRef('firstPageSize'),
      sortOrder: createFieldRef('sortOrder'),
      cursorColumnSet: {
        viewedAt: ['viewedAt']
      },
      selectedCursorColumn: 'viewedAt'
    }
  }, {
    name: 'siteMount',
    type: {
      kind: 'object',
      name: _$$Y.SiteMount
    },
    filter: ['fileKey', '=', createParentRef('key')],
    nullable: !0,
    expectedMaxCount: 1
  }, {
    name: 'isPublishedSite',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      siteMount: {
        status: NULL_FIELD_REF
      }
    }
  }, {
    name: 'activeProjectResourceConnections',
    type: {
      kind: 'objects',
      name: _$$Y.ResourceConnection
    },
    nullable: !0,
    filter: {
      and: [['resourceId', '=', createParentRef('folderId')], ['resourceType', '=', 'folder'], ['disconnectedAt', '=', null]]
    },
    expectedMaxCount: 10,
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }, ...dg, {
    name: 'fileSharingGroups',
    type: {
      kind: 'objects',
      name: _$$Y.SharingGroup
    },
    filter: {
      and: [['resourceType', '=', 'file'], ['resourceId', '=', createParentRef('key')]]
    },
    nullable: !0,
    expectedMaxCount: 200,
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'fileCompositeSharingGroup',
    type: {
      kind: 'object',
      name: _$$Y.FileCompositeSharingGroup
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    nullable: !0,
    dependencies: {
      key: NULL_FIELD_REF,
      fileSharingGroups: {
        level: NULL_FIELD_REF,
        resourceConnection: {
          resourceConnectedUsers: [{
            userId: createViewRef('userId')
          }, {
            id: NULL_FIELD_REF,
            userId: NULL_FIELD_REF
          }]
        }
      }
    }
  }, {
    name: 'resourceConnectionSharingGroupUsers',
    type: {
      kind: 'objects',
      name: 'ResourceConnectionSharingGroupUser'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    resolver: {
      type: 'HTTP',
      uri: '/api/internal/livegraph/sinatra_resolver/resource_connection_sharing_group_users',
      queryParams: {
        userId: createFieldRef('userId'),
        fileKey: createParentRef('key')
      },
      realtimePolicy: {
        type: 'Static'
      }
    }
  }, {
    name: 'isBakeEnabled',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      fileIsBakeEnabled: {
        value: NULL_FIELD_REF
      }
    }
  }, {
    name: 'fileCmsCollections',
    type: {
      kind: 'objects',
      name: _$$Y.FileCmsCollection
    },
    checkCanRead: {
      userId: createSessionRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId')
    },
    filter: ['fileKey', '=', createParentRef('key')],
    expectedMaxCount: 1e3,
    nullable: !0,
    bannedFromViews: !0
  }, {
    name: 'fileHasCmsCollections',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      fileCmsCollections: {
        id: NULL_FIELD_REF
      }
    }
  }, {
    name: 'slotsFileEnablement',
    type: {
      kind: 'object',
      name: _$$Y.SlotsFileEnablement
    },
    args: [],
    filter: ['fileKey', '=', createParentRef('key')],
    nullable: !0
  }, {
    name: 'sharedContainerSetting',
    type: {
      kind: 'object',
      name: _$$Y.SharedContainerSetting
    },
    computed: !0,
    nullable: !0,
    dependencies: {
      orgSharedSetting: {
        id: NULL_FIELD_REF,
        autogenPasswordControls: NULL_FIELD_REF
      },
      team: {
        id: NULL_FIELD_REF,
        workspaceSharedSetting: {
          id: NULL_FIELD_REF,
          autogenPasswordControls: NULL_FIELD_REF
        }
      }
    }
  }, ...dO, ...dp, ...dv, ...w, ...nz, o_, of, o5, oh, og, oo, o2, om, od, oc, ol, ov, oI, ou, op, oe, oE, ox, oA, o1, o0, oi, on, ot, ok, oR, oa, os, or, ob, oy, oj, oF, oQ, oB, oX, oK, oV, oW, oN, oP, oG, ow, oS, oC, oT, oH, oL, oO, oD, oz, oZ, o$, oM, oU, oY, oJ, oq, o6, o3, ll, lh, ...l1, lA, ly, ...l3, ...l6]
};
let dL = new Set([...dO, ...nz].map(e => e.name));
let dF = dD.fields.filter(e => e.name !== 'canRead').map(e => dL.has(e.name) ? e : {
  ...e,
  bannedFromViews: !0
});
let dM = {
  name: _$$Y.FilePrototypeInfo,
  naturalKey: new Set(['key']),
  permissionRequired: !0,
  fields: [{
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'sessionId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }, {
      name: 'anonymousUserId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }],
    computed: !0,
    permissionName: 'FILE::CAN_VIEW_PROTOTYPE',
    dependencies: Mx['FILE::CAN_VIEW_PROTOTYPE']
  }, ...dF]
};
let dj = {
  name: _$$Y.FileActivity,
  permissionRequired: !1,
  embedded: !0,
  fields: [{
    name: 'lastSeen',
    type: {
      kind: 'object',
      name: _$$Y.OrgActivity
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      }
    }, {
      name: 'orgId',
      type: {
        kind: 'bigint'
      }
    }],
    nullable: !0,
    filter: {
      and: [['userId', '=', createFieldRef('userId')], ['orgId', '=', createFieldRef('orgId')], ['activityType', 'in', ['file_seen', 'design_file_seen', 'whiteboard_file_seen']]]
    },
    orderBy: [['actionAt', 'DESC']]
  }, {
    name: 'lastEdit',
    type: {
      kind: 'object',
      name: _$$Y.OrgActivity
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      }
    }, {
      name: 'orgId',
      type: {
        kind: 'bigint'
      }
    }],
    nullable: !0,
    filter: {
      and: [['userId', '=', createFieldRef('userId')], ['orgId', '=', createFieldRef('orgId')], ['activityType', 'in', ['file_edit', 'design_file_edit', 'whiteboard_file_edit']]]
    },
    orderBy: [['actionAt', 'DESC']]
  }, {
    name: 'lastDesignEdit',
    type: {
      kind: 'object',
      name: _$$Y.OrgActivity
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      }
    }, {
      name: 'orgId',
      type: {
        kind: 'bigint'
      }
    }],
    nullable: !0,
    filter: {
      and: [['userId', '=', createFieldRef('userId')], ['orgId', '=', createFieldRef('orgId')], ['activityType', '=', 'design_file_edit']]
    },
    orderBy: [['actionAt', 'DESC']]
  }, {
    name: 'lastDesignSeen',
    type: {
      kind: 'object',
      name: _$$Y.OrgActivity
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      }
    }, {
      name: 'orgId',
      type: {
        kind: 'bigint'
      }
    }],
    nullable: !0,
    filter: {
      and: [['userId', '=', createFieldRef('userId')], ['orgId', '=', createFieldRef('orgId')], ['activityType', '=', 'design_file_seen']]
    },
    orderBy: [['actionAt', 'DESC']]
  }, {
    name: 'lastWhiteboardEdit',
    type: {
      kind: 'object',
      name: _$$Y.OrgActivity
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      }
    }, {
      name: 'orgId',
      type: {
        kind: 'bigint'
      }
    }],
    nullable: !0,
    filter: {
      and: [['userId', '=', createFieldRef('userId')], ['orgId', '=', createFieldRef('orgId')], ['activityType', '=', 'whiteboard_file_edit']]
    },
    orderBy: [['actionAt', 'DESC']]
  }, {
    name: 'lastWhiteboardSeen',
    type: {
      kind: 'object',
      name: _$$Y.OrgActivity
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      }
    }, {
      name: 'orgId',
      type: {
        kind: 'bigint'
      }
    }],
    nullable: !0,
    filter: {
      and: [['userId', '=', createFieldRef('userId')], ['orgId', '=', createFieldRef('orgId')], ['activityType', '=', 'whiteboard_file_seen']]
    },
    orderBy: [['actionAt', 'DESC']]
  }]
};
let dU = {
  name: _$$Y.FileBrowserPreferences,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'teamId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'migratedToSections',
    type: {
      kind: 'bool'
    },
    nullable: !0
  }, {
    name: 'sidebarMigrationStatus',
    type: {
      kind: 'enum',
      name: 'SidebarMigrationStatus'
    },
    nullable: !0
  }, {
    name: 'orderedTeamIds',
    type: {
      kind: 'list',
      ofType: {
        kind: 'bigint'
      }
    },
    nullable: !0
  }, {
    name: 'orderedFavoritedResourceIds',
    type: {
      kind: 'list',
      ofType: {
        kind: 'bigint'
      }
    },
    nullable: !0
  }, {
    name: 'orderedLicenseGroupIds',
    type: {
      kind: 'list',
      ofType: {
        kind: 'bigint'
      }
    },
    nullable: !0
  }, {
    name: 'orderedSidebarSections',
    type: {
      kind: 'list',
      ofType: {
        kind: 'bigint'
      }
    },
    nullable: !0
  }]
};
let dB = {
  name: _$$Y.FileBrowserSectionPreferences,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'sectionType',
    type: {
      kind: 'string'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'teamId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'orderedFolderIds',
    type: {
      kind: 'list',
      ofType: {
        kind: 'bigint'
      }
    },
    nullable: !0
  }]
};
let dV = {
  name: _$$Y.FileCanvasMention,
  permissionRequired: !1,
  naturalKey: new Set(['fileKey', 'id']),
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'mentionedUserId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'mentionedByUserId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'mentionedByUser',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    filter: ['id', '=', createParentRef('mentionedByUserId')]
  }, {
    name: 'lastEditedByUserId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'lastEditedByUser',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    filter: ['id', '=', createParentRef('lastEditedByUserId')],
    nullable: !0
  }, {
    name: 'messageMeta',
    type: {
      kind: 'objects',
      name: _$$Y.CommentMessageMeta
    },
    embedded: !0
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'editedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'deletedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'thumbnailUrl',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'nodeIdPath',
    type: {
      kind: 'list',
      ofType: {
        kind: 'string'
      }
    }
  }, {
    name: 'pageId',
    type: {
      kind: 'string'
    }
  }]
};
let dG = {
  name: _$$Y.FileCanvasMentionReadStatus,
  permissionRequired: !1,
  naturalKey: new Set(['fileKey', 'userId']),
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'allReadAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'readCanvasMentions',
    type: {
      kind: 'map',
      valueType: {
        kind: 'string'
      }
    }
  }, {
    name: 'unreadCanvasMentions',
    type: {
      kind: 'map',
      valueType: {
        kind: 'string'
      }
    }
  }]
};
let dz = {
  name: _$$Y.FileCheckpoint,
  permissionRequired: !1,
  naturalKey: new Set(['id']),
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'key',
    type: {
      kind: 'string'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'clientMeta',
    type: {
      kind: 'string'
    },
    typechecked: !1
  }, {
    name: 'thumbnailUrl',
    type: {
      kind: 'string'
    },
    typechecked: !1
  }, {
    name: 'pageThumbnails',
    type: {
      kind: 'string'
    },
    nullable: !0
  }]
};
let dH = {
  name: _$$Y.FileColorPalette,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    },
    bannedFromViews: !0
  }, {
    name: 'colorPaletteUuid',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'colorPalette',
    type: {
      kind: 'object',
      name: _$$Y.ColorPalette
    },
    filter: ['uuid', '=', createParentRef('colorPaletteUuid')],
    nullable: !0,
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }]
};
let dW = {
  name: _$$Y.FileFollower,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'key',
    type: {
      kind: 'string'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'notificationPreference',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'unreadComments',
    type: {
      kind: 'map',
      valueType: {
        kind: 'bool'
      }
    },
    nullable: !0
  }, {
    name: 'statusChangeNotifs',
    type: {
      kind: 'bool'
    },
    nullable: !0
  }]
};
let dK = {
  name: _$$Y.FileMerge,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'branchFileKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'branchFile',
    type: {
      kind: 'object',
      name: _$$Y.File
    },
    filter: ['key', '=', createParentRef('branchFileKey')],
    checkCanRead: {
      fieldName: 'canViewV3',
      userId: createSessionRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId')
    }
  }, {
    name: 'direction',
    type: {
      kind: 'int'
    }
  }, {
    name: 'checkpointDiffId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'mergeResultCheckpointId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'mergeRequest',
    type: {
      kind: 'object',
      name: _$$Y.MergeRequest
    },
    filter: ['fileMergeId', '=', createParentRef('id')],
    nullable: !0
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'user',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    filter: ['id', '=', createParentRef('userId')],
    nullable: !0
  }, {
    name: 'mergeResultFileversionId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }]
};
let dY = {
  name: _$$Y.FilePresenter,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'string'
    }
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'presenterExists',
    type: {
      kind: 'bool'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'handle',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'imageURL',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'color',
    type: {
      kind: 'map',
      valueType: {
        kind: 'int'
      }
    },
    nullable: !0,
    typechecked: !1
  }]
};
let dq = {
  name: _$$Y.FilePrototypeLibCppConfig,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    },
    bannedFromViews: !0
  }, {
    name: 'shouldLoad',
    type: {
      kind: 'bool'
    }
  }]
};
let d$ = [{
  name: 'id',
  type: {
    kind: 'bigint'
  }
}, {
  name: 'teamId',
  type: {
    kind: 'bigint'
  },
  nullable: !0
}, {
  name: 'userId',
  type: {
    kind: 'bigint'
  },
  nullable: !0
}, {
  name: 'resourceId',
  type: {
    kind: 'string'
  }
}, {
  name: 'resourceType',
  type: {
    kind: 'enum',
    name: 'ResourceType'
  }
}, {
  name: 'pending',
  type: {
    kind: 'bool'
  },
  computed: !0,
  dependencies: {
    userId: NULL_FIELD_REF,
    pendingEmail: NULL_FIELD_REF
  }
}, {
  name: 'level',
  type: {
    kind: 'int'
  }
}, {
  name: 'updatedAt',
  type: {
    kind: 'datetime'
  }
}, {
  name: 'createdAt',
  type: {
    kind: 'datetime'
  }
}, {
  name: 'pendingEmail',
  type: {
    kind: 'string'
  },
  nullable: !0
}, {
  name: 'user',
  type: {
    kind: 'object',
    name: _$$Y.User
  },
  filter: ['id', '=', createParentRef('userId')],
  nullable: !0
}, {
  name: 'isOwnerOfResource',
  type: {
    kind: 'bool'
  },
  computed: !0,
  dependencies: {
    level: NULL_FIELD_REF
  }
}, {
  name: 'invite',
  type: {
    kind: 'object',
    name: _$$Y.Invite
  },
  filter: ['roleId', '=', createParentRef('id')],
  nullable: !0
}];
let dZ = {
  name: _$$Y.FileRole,
  permissionRequired: !1,
  fields: [...d$, {
    name: 'file',
    type: {
      kind: 'object',
      name: _$$Y.File
    },
    filter: ['key', '=', createParentRef('resourceId')],
    checkCanRead: {
      fieldName: 'canAccess',
      userId: createSessionRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId'),
      linkAccessOverrideKey: null
    }
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      id: NULL_FIELD_REF,
      pending: NULL_FIELD_REF,
      file: {
        id: NULL_FIELD_REF,
        linkAccess: NULL_FIELD_REF,
        roleOnObjectForUser: [{
          userId: createViewRef('userId')
        }, {
          id: NULL_FIELD_REF
        }],
        roleOnObjectProjectForUser: [{
          userId: createViewRef('userId')
        }, {
          id: NULL_FIELD_REF
        }]
      }
    }
  }]
};
let dX = {
  name: _$$Y.FileRoleRequest,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'status',
    type: {
      kind: 'string'
    }
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    },
    bannedFromViews: !0
  }, {
    name: 'file',
    type: {
      kind: 'object',
      name: _$$Y.File
    },
    filter: ['key', '=', createParentRef('fileKey')],
    bannedFromViews: !0
  }, {
    name: 'level',
    type: {
      kind: 'int'
    }
  }, {
    name: 'requesterUserId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'requesterUser',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    filter: ['id', '=', createParentRef('requesterUserId')],
    nullable: !0
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      file: {
        hasEditRole: [{
          userId: createFieldRef('userId')
        }, NULL_FIELD_REF]
      },
      requesterUserId: NULL_FIELD_REF
    }
  }]
};
let dQ = {
  name: _$$Y.FileSeenState,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'viewedOn',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'user',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    filter: ['id', '=', createParentRef('userId')]
  }]
};
let dJ = {
  name: _$$Y.FileShareBroadcast,
  permissionRequired: !0,
  fields: [{
    name: 'id',
    type: {
      kind: 'string'
    }
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'fromUserId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'targetUserId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'broadcastType',
    type: {
      kind: 'string'
    }
  }, {
    name: 'metadata',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'status',
    type: {
      kind: 'string'
    }
  }, {
    name: 'broadcastedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'fromUser',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    filter: ['id', '=', createParentRef('fromUserId')]
  }, {
    name: 'targetUser',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    filter: ['id', '=', createParentRef('targetUserId')]
  }, {
    name: 'file',
    type: {
      kind: 'object',
      name: _$$Y.File
    },
    filter: ['key', '=', createParentRef('fileKey')],
    checkCanRead: {
      fieldName: 'canAccess',
      userId: createSessionRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId'),
      linkAccessOverrideKey: null
    }
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'sessionId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }, {
      name: 'anonymousUserId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }],
    computed: !0,
    nullable: !0,
    dependencies: {
      broadcastedAt: NULL_FIELD_REF
    }
  }]
};
let d0 = {
  name: _$$Y.FileTrackTags,
  permissionRequired: !1,
  embedded: !0,
  fields: [{
    name: 'isTemplate',
    type: {
      kind: 'bool'
    },
    nullable: !0
  }, {
    name: 'starterLibrarySrcFileKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'figmaBasicsExperiment',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'source',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'defaultLibraryFileTreatmentId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'migratedFromDraftsFolderId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'isDuplicatedFromDevModeDemoFile',
    type: {
      kind: 'bool'
    },
    nullable: !0
  }, {
    name: 'isDuplicatedFromSupabaseConnectedFile',
    type: {
      kind: 'bool'
    },
    nullable: !0
  }]
};
let d1 = {
  name: _$$Y.FileVersion,
  permissionRequired: !1,
  naturalKey: new Set(['fileKey', 'id']),
  fields: [{
    name: 'id',
    type: {
      kind: 'string'
    }
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    },
    bannedFromViews: !0
  }, {
    name: 'view',
    type: {
      kind: 'int'
    }
  }, {
    name: 'label',
    nullable: !0,
    type: {
      kind: 'string'
    }
  }, {
    name: 'description',
    nullable: !0,
    type: {
      kind: 'string'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'checkpointId',
    nullable: !0,
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'user',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    filter: ['id', '=', createParentRef('userId')]
  }, {
    name: 'checkpoint',
    type: {
      kind: 'object',
      name: _$$Y.FileVersionCheckpoint
    },
    embedded: !0,
    nullable: !0
  }]
};
let d2 = {
  name: _$$Y.FileVersionCheckpoint,
  permissionRequired: !1,
  embedded: !0,
  fields: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }, {
    name: 'id',
    type: {
      kind: 'string'
    },
    typechecked: !1
  }, {
    name: 'createdAt',
    type: {
      kind: 'string'
    }
  }, {
    name: 'meta',
    type: {
      kind: 'object',
      name: _$$Y.FileVersionCheckpointMeta
    },
    embedded: !0,
    nullable: !0
  }]
};
let d5 = {
  name: _$$Y.FileVersionCheckpointMeta,
  permissionRequired: !1,
  embedded: !0,
  fields: [{
    name: 'diffs',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'editCounts',
    type: {
      kind: 'map',
      valueType: {
        kind: 'string'
      }
    },
    nullable: !0,
    typechecked: !1
  }]
};
let d4 = {
  name: _$$Y.GuestOrgUser,
  permissionRequired: !1,
  fields: [...O, {
    name: 'user',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    filter: ['id', '=', createParentRef('userId')]
  }, {
    name: 'org',
    type: {
      kind: 'object',
      name: _$$Y.OrgInfo
    },
    filter: ['id', '=', createParentRef('orgId')],
    nullable: !0
  }]
};
let d3 = {
  name: _$$Y.ConnectedProjectForPlanUser,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'string'
    }
  }, {
    name: 'projectId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'planType',
    type: {
      kind: 'string'
    }
  }, {
    name: 'planParentId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'project',
    type: {
      kind: 'object',
      name: _$$Y.Project
    },
    filter: ['id', '=', createParentRef('projectId')],
    nullable: !0,
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }]
};
let d6 = {
  name: _$$Y.HubFile,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'unpublishedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'publishingStatusUpdatedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'contentVerifiedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'contentBlockedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'profileId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'figFileId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'monetizedResourceMetadataId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'publishingStatus',
    type: {
      kind: 'enum',
      name: 'PublishingStatus'
    },
    nullable: !0
  }, {
    name: 'duplicateCount',
    type: {
      kind: 'int'
    }
  }, {
    name: 'likeCount',
    type: {
      kind: 'int'
    }
  }, {
    name: 'viewCount',
    type: {
      kind: 'int'
    }
  }, {
    name: 'commentCount',
    type: {
      kind: 'int'
    }
  }, {
    name: 'resourcePinnedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'categoryId',
    type: {
      kind: 'uuid'
    },
    nullable: !0
  }, {
    name: 'commentsSetting',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'supportContact',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    },
    bannedFromViews: !0
  }, {
    name: '_viewerMode',
    type: {
      kind: 'int'
    }
  }, {
    name: 'viewerMode',
    type: {
      kind: 'enum',
      name: 'ViewerMode'
    },
    computed: !0,
    dependencies: {
      _viewerMode: NULL_FIELD_REF
    }
  }, {
    name: 'profile',
    type: {
      kind: 'object',
      name: _$$Y.Profile
    },
    filter: ['id', '=', createParentRef('profileId')]
  }, {
    name: 'currentHubFileVersionId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'currentHubFileVersion',
    type: {
      kind: 'object',
      name: _$$Y.HubFileVersion
    },
    nullable: !0,
    filter: ['id', '=', createParentRef('currentHubFileVersionId')]
  }, {
    name: 'verificationStatus',
    type: {
      kind: 'enum',
      name: 'VerificationStatus'
    },
    computed: !0,
    dependencies: {
      contentVerifiedAt: NULL_FIELD_REF,
      contentBlockedAt: NULL_FIELD_REF
    }
  }, {
    name: 'thumbnailUrl',
    type: {
      kind: 'string'
    },
    computed: !0,
    nullable: !0,
    dependencies: {
      currentHubFileVersion: {
        coverImagePath: NULL_FIELD_REF
      }
    }
  }, {
    name: 'redirectCanvasThumbnailUrl',
    type: {
      kind: 'string'
    },
    computed: !0,
    nullable: !0,
    dependencies: {
      currentHubFileVersion: {
        canvasCoverImagePath: NULL_FIELD_REF
      }
    }
  }, {
    name: 'canvasSnapshotUrl',
    type: {
      kind: 'string'
    },
    computed: !0,
    nullable: !0,
    dependencies: {
      currentHubFileVersion: {
        canvasSnapshotPath: NULL_FIELD_REF
      }
    }
  }, {
    name: 'thumbnailIsSet',
    type: {
      kind: 'bool'
    },
    computed: !0,
    nullable: !0,
    dependencies: {
      currentHubFileVersion: {
        thumbnailGuid: NULL_FIELD_REF
      }
    }
  }, {
    name: 'isPinned',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      resourcePinnedAt: NULL_FIELD_REF
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'publishedByUser',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    nullable: !0,
    filter: ['id', '=', createParentRef('userId')]
  }, {
    name: 'currentUser',
    nullable: !0,
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    filter: ['id', '=', createFieldRef('userId')]
  }, {
    name: 'canRead',
    computed: !0,
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    permissionName: 'HUB_FILE::CAN_VIEW',
    dependencies: $W['HUB_FILE::CAN_VIEW']
  }, {
    name: 'hubFileMonetizedResourceMetadata',
    type: {
      kind: 'object',
      name: _$$Y.MonetizedResourceMetadata
    },
    nullable: !0,
    filter: ['id', '=', createParentRef('monetizedResourceMetadataId')]
  }, {
    name: 'hubFileCommunityRating',
    nullable: !0,
    type: {
      kind: 'object',
      name: _$$Y.CommunityComment
    },
    args: [{
      name: 'profileId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    filter: {
      and: [['profileId', '=', createFieldRef('profileId')], ['ratingValue', '<>', null], ['hubFileId', '=', createParentRef('id')]]
    }
  }, {
    name: 'hubFileDuplicates',
    type: {
      kind: 'object',
      name: _$$Y.HubFileDuplicate
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: {
      and: [['hubFileId', '=', createParentRef('id')], ['userId', '=', createFieldRef('userId')], ['userId', '<>', null]]
    }
  }, {
    name: 'hubFileDuplicatesList',
    type: {
      kind: 'objects',
      name: _$$Y.HubFileDuplicate
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: {
      and: [['hubFileId', '=', createParentRef('id')], ['userId', '=', createFieldRef('userId')], ['userId', '<>', null]]
    },
    orderBy: [['createdAt', 'DESC']],
    expectedMaxCount: 200
  }, {
    name: 'communityResourcePayment',
    type: {
      kind: 'object',
      name: _$$Y.CommunityResourcePayment
    },
    nullable: !0,
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    bannedFromViews: !0,
    filter: {
      and: [['monetizedResourceMetadataId', '=', createParentRef('monetizedResourceMetadataId')], ['userId', '=', createFieldRef('userId')], ['userId', '<>', null]]
    }
  }, {
    name: 'userMonetizationMetadata',
    type: {
      kind: 'object',
      name: _$$Y.UserMonetizationMetadata
    },
    filter: ['userId', '=', createParentRef('id')],
    nullable: !0,
    bannedFromViews: !0
  }, {
    name: 'monetizationStatus',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'monetizationStatusEnum',
    type: {
      kind: 'enum',
      name: 'MonetizationStatus'
    },
    nullable: !0,
    computed: !0,
    dependencies: {
      monetizationStatus: NULL_FIELD_REF
    }
  }, {
    name: 'communityPublisher',
    type: {
      kind: 'object',
      name: _$$Y.CommunityPublisher
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    bannedFromViews: !0,
    filter: {
      and: [['hubFileId', '=', createParentRef('id')], ['userId', '=', createFieldRef('userId')]]
    }
  }, {
    name: 'communityPublishers',
    type: {
      kind: 'objects',
      name: _$$Y.CommunityPublisher
    },
    nullable: !0,
    filter: ['hubFileId', '=', createParentRef('id')],
    expectedMaxCount: 200
  }, {
    name: 'resizedThumbnailUrls',
    type: {
      kind: 'map',
      valueType: {
        kind: 'string'
      }
    },
    nullable: !0,
    computed: !0,
    dependencies: {
      currentHubFileVersion: {
        coverImagePath: NULL_FIELD_REF
      }
    }
  }, {
    name: 'modules',
    type: {
      kind: 'objects',
      name: _$$Y.Module
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    filter: {
      and: [['unpublishedAt', '=', null], ['hubFileId', '=', createParentRef('id')]]
    },
    checkCanRead: {
      userId: createFieldRef('userId')
    },
    expectedMaxCount: 1e4,
    deprecated: {
      reason: 'Use modules_v2 instead',
      date: '2024-05-10'
    }
  }, {
    name: 'modules_v2',
    type: {
      kind: 'objects',
      name: _$$Y.Module
    },
    filter: {
      and: [['unpublishedAt', '=', null], ['hubFileId', '=', createParentRef('id')]]
    },
    expectedMaxCount: 1e4
  }, {
    name: 'libraryAssets',
    type: {
      kind: 'objects',
      name: _$$Y.LibraryAsset
    },
    args: [{
      name: 'libraryKey',
      type: {
        kind: 'string'
      }
    }],
    filter: {
      and: [['unpublishedAt', '=', null], ['libraryKey', '=', createFieldRef('libraryKey')]]
    },
    expectedMaxCount: 1e4
  }, {
    name: 'libraryAssetsOfType',
    args: [{
      name: 'libraryKey',
      type: {
        kind: 'string'
      }
    }, {
      name: 'assetType',
      type: {
        kind: 'enum',
        name: 'AssetType'
      }
    }],
    type: {
      kind: 'objects',
      name: _$$Y.LibraryAsset
    },
    filter: {
      and: [['unpublishedAt', '=', null], ['libraryKey', '=', createFieldRef('libraryKey')], ['assetType', '=', createFieldRef('assetType')]]
    },
    expectedMaxCount: 1e4
  }, {
    name: 'codeComponentLibraryAssets',
    args: [{
      name: 'libraryKey',
      type: {
        kind: 'string'
      }
    }],
    type: {
      kind: 'objects',
      name: _$$Y.LibraryAsset
    },
    filter: {
      and: [['unpublishedAt', '=', null], ['libraryKey', '=', createFieldRef('libraryKey')], ['assetType', '=', e7.CodeComponent]]
    },
    expectedMaxCount: 1e4
  }, {
    name: 'libraryKeyToFile',
    type: {
      kind: 'object',
      name: _$$Y.LibraryKeyToFile
    },
    filter: ['hubFileId', '=', createParentRef('id')],
    nullable: !0
  }, {
    name: 'libraryKey',
    type: {
      kind: 'string'
    },
    computed: !0,
    dependencies: {
      libraryKeyToFile: {
        libraryKey: NULL_FIELD_REF
      }
    }
  }, {
    name: 'badges',
    type: {
      kind: 'objects',
      name: _$$Y.CommunityBadge
    },
    filter: ['hubFileId', '=', createParentRef('id')],
    expectedMaxCount: 200
  }, {
    name: 'communityLibrary',
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    type: {
      kind: 'object',
      name: _$$Y.CommunityLibrary
    },
    filter: ['hubFileId', '=', createParentRef('id')],
    checkCanRead: {
      userId: createFieldRef('userId')
    }
  }, {
    name: 'variableCollections',
    type: {
      kind: 'objects',
      name: _$$Y.VariableSet
    },
    filter: {
      and: [['unpublishedAt', '=', null], ['hubFileId', '=', createParentRef('id')]]
    },
    args: [{
      name: 'initialPageSize',
      type: {
        kind: 'int'
      }
    }],
    expectedMaxCount: 1e4
  }, {
    name: 'libraryHierarchyPaths',
    type: {
      kind: 'objects',
      name: _$$Y.LibraryHierarchyPath
    },
    args: [{
      name: 'initialPageSize',
      type: {
        kind: 'int'
      }
    }],
    filter: ['hubFileId', '=', createParentRef('id')],
    expectedMaxCount: 1e4
  }, r8, r9]
};
let d7 = {
  name: _$$Y.HubFileDuplicate,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'hubFileId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'figFileId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'checkpointId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'isPreview',
    type: {
      kind: 'bool'
    },
    nullable: !0
  }]
};
let d8 = {
  name: _$$Y.HubFileVersion,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'hubFileId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'name',
    type: {
      kind: 'string'
    }
  }, {
    name: 'description',
    type: {
      kind: 'string'
    }
  }, {
    name: 'version',
    type: {
      kind: 'string'
    }
  }, {
    name: 'creatorPolicy',
    type: {
      kind: 'string'
    },
    typechecked: !1
  }, {
    name: 'releaseNotes',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'validPrototype',
    type: {
      kind: 'bool'
    },
    typechecked: !1
  }, {
    name: 'coverImagePath',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'thumbnailGuid',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'canvasCoverImagePath',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'canvasSnapshotPath',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'clientMeta',
    type: {
      kind: 'string'
    },
    nullable: !0
  }]
};
let d9 = {
  name: _$$Y.IDPGroup,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'orgSamlConfigId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'name',
    type: {
      kind: 'string'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'deletedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'externalId',
    type: {
      kind: 'string'
    },
    typechecked: !1
  }, {
    name: 'orgSamlConfig',
    type: {
      kind: 'object',
      name: _$$Y.OrgSamlConfig
    },
    nullable: !0,
    filter: ['id', '=', createParentRef('orgSamlConfigId')],
    shadowCheckCanRead: {
      userId: createSessionRef('userId')
    }
  }]
};
let ce = {
  name: _$$Y.IDPUser,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'userName',
    type: {
      kind: 'string'
    }
  }, {
    name: 'scim',
    embedded: !0,
    type: {
      kind: 'object',
      name: _$$Y.EmbeddedSCIMInfo
    }
  }, {
    name: 'orgSamlId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'seatType',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'orgSamlConfig',
    type: {
      kind: 'object',
      name: _$$Y.OrgSamlConfig
    },
    nullable: !0,
    filter: ['id', '=', createParentRef('orgSamlId')],
    shadowCheckCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'scimActive',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      scim: {
        active: NULL_FIELD_REF
      }
    }
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'filterOrgId',
      type: {
        kind: 'string'
      }
    }],
    computed: !0,
    dependencies: {
      orgSamlConfig: {
        org: {
          id: NULL_FIELD_REF,
          currentBaseOrgUser: [{
            userId: createViewRef('userId')
          }, {
            permission: NULL_FIELD_REF,
            licenseGroupAdmins: {
              id: NULL_FIELD_REF
            },
            userId: NULL_FIELD_REF
          }]
        }
      }
    }
  }]
};
let ct = {
  name: _$$Y.Invite,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'inviteeEmail',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'resourceId',
    type: {
      kind: 'string'
    }
  }, {
    name: 'revokedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'resourceType',
    type: {
      kind: 'string'
    }
  }, {
    name: 'redeemedBy',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'inviteeUserId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'roleId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'fileRole',
    type: {
      kind: 'object',
      name: _$$Y.FileRole
    },
    filter: ['id', '=', createParentRef('roleId')],
    nullable: !0,
    bannedFromViews: !0
  }, {
    name: 'level',
    type: {
      kind: 'int'
    },
    computed: !0,
    dependencies: {
      fileRole: {
        level: NULL_FIELD_REF
      }
    }
  }, {
    name: 'billableProductKey',
    type: {
      kind: 'enum',
      name: 'BillableProductKey'
    },
    nullable: !0
  }]
};
let ci = {
  name: _$$Y.OrgIpRange,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'createdBy',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'enabledAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'ipRange',
    type: {
      kind: 'string'
    }
  }, {
    name: 'productType',
    type: {
      kind: 'enum',
      name: 'OrgIpRangeProductType'
    }
  }]
};
let cn = {
  name: _$$Y.JamboardOfferRedeemedAt,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'redeemedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }]
};
let cr = {
  name: _$$Y.LastFrameSelection,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'string'
    },
    typechecked: !1
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'frameId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'frameName',
    type: {
      kind: 'string'
    },
    nullable: !0
  }]
};
let ca = {
  name: _$$Y.LatestClipboardData,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'string'
    }
  }, {
    name: 'deviceType',
    type: {
      kind: 'enum',
      name: 'DeviceType'
    },
    typechecked: !1
  }, {
    name: 'timestamp',
    type: {
      kind: 'string'
    },
    typechecked: !1
  }, {
    name: 'presignedDownloadUrl',
    type: {
      kind: 'string'
    },
    typechecked: !1
  }]
};
let cs = {
  name: _$$Y.Library,
  permissionRequired: !1,
  naturalKey: new Set(['fileKey', 'id']),
  fields: [...ee, {
    name: 'file',
    type: {
      kind: 'object',
      name: _$$Y.File
    },
    filter: ['id', '=', createParentRef('fileKey')],
    nullable: !0
  }, {
    name: 'hubFileId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'hasAssets',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      numComponents: NULL_FIELD_REF,
      numStyles: NULL_FIELD_REF,
      numStateGroups: NULL_FIELD_REF,
      numVariableSets: NULL_FIELD_REF,
      numVariables: NULL_FIELD_REF,
      numModuleAssets: NULL_FIELD_REF,
      numLibraryAssets: NULL_FIELD_REF
    }
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      file: {
        id: NULL_FIELD_REF,
        canView: [{
          userId: createViewRef('userId')
        }, NULL_FIELD_REF],
        trashedAt: NULL_FIELD_REF
      }
    }
  }, {
    name: 'approvedLibraries',
    type: {
      kind: 'objects',
      name: _$$Y.ApprovedLibrary
    },
    filter: ['fileKey', '=', createParentRef('fileKey')],
    nullable: !0,
    expectedMaxCount: 200
  }]
};
let co = {
  name: _$$Y.LibraryFileSubscription,
  permissionRequired: !1,
  fields: [...en, {
    name: 'hubFileId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'libraryFileKey',
    type: {
      kind: 'string'
    },
    bannedFromViews: !0
  }, {
    name: 'communityLibraryKeyToFile',
    type: {
      kind: 'object',
      name: _$$Y.LibraryKeyToFile
    },
    filter: {
      and: [['hubFileId', '=', createParentRef('hubFileId')], ['hubFileId', '<>', null]]
    },
    nullable: !0,
    bannedFromViews: !0
  }, {
    name: 'teamLibraryKeyToFile',
    type: {
      kind: 'object',
      name: _$$Y.LibraryKeyToFile
    },
    filter: {
      and: [['fileKey', '=', createParentRef('libraryFileKey')], ['hubFileId', '=', null]]
    },
    nullable: !0,
    bannedFromViews: !0
  }, {
    name: 'libraryKey',
    type: {
      kind: 'string'
    },
    computed: !0,
    nullable: !0,
    dependencies: {
      communityLibraryKeyToFile: {
        libraryKey: NULL_FIELD_REF
      },
      teamLibraryKeyToFile: {
        libraryKey: NULL_FIELD_REF
      }
    }
  }, {
    name: 'library',
    type: {
      kind: 'object',
      name: _$$Y.Library
    },
    filter: {
      and: [['fileKey', '=', createParentRef('libraryFileKey')], ['hubFileId', '=', null]]
    },
    nullable: !0,
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'communityLibrary',
    type: {
      kind: 'object',
      name: _$$Y.CommunityLibrary
    },
    filter: {
      and: [['hubFileId', '=', createParentRef('hubFileId')], ['hubFileId', '<>', null]]
    },
    nullable: !0,
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      library: {
        canRead: [{
          userId: createViewRef('userId')
        }, NULL_FIELD_REF]
      },
      communityLibrary: {
        canRead: [{
          userId: createViewRef('userId')
        }, NULL_FIELD_REF]
      }
    }
  }]
};
let cl = {
  name: _$$Y.LibraryHierarchyPath,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    },
    bannedFromViews: !0
  }, {
    name: 'hubFileId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'pageName',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'containingFrameName',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'nameHierarchyPath',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'components',
    type: {
      kind: 'objects',
      name: _$$Y.Component
    },
    args: [{
      name: 'initialPageSize',
      type: {
        kind: 'int'
      }
    }],
    filter: {
      and: [['libraryHierarchyPathId', '=', createParentRef('id')], ['unpublishedAt', '=', null]]
    },
    expectedMaxCount: 4e4
  }, {
    name: 'styles',
    type: {
      kind: 'objects',
      name: _$$Y.Style
    },
    args: [{
      name: 'initialPageSize',
      type: {
        kind: 'int'
      }
    }],
    filter: {
      and: [['libraryHierarchyPathId', '=', createParentRef('id')], ['unpublishedAt', '=', null]]
    },
    expectedMaxCount: 1e4
  }, {
    name: 'stateGroups',
    type: {
      kind: 'objects',
      name: _$$Y.StateGroup
    },
    args: [{
      name: 'initialPageSize',
      type: {
        kind: 'int'
      }
    }],
    filter: {
      and: [['libraryHierarchyPathId', '=', createParentRef('id')], ['unpublishedAt', '=', null]]
    },
    expectedMaxCount: 1e4
  }]
};
let cd = {
  name: _$$Y.LibraryItemContainingFrame,
  permissionRequired: !1,
  embedded: !0,
  fields: [{
    name: 'name',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'nodeId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'backgroundColor',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'pageName',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'pageId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'sortPosition',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'containingStateGroup',
    type: {
      kind: 'object',
      name: _$$Y.LibraryItemContainingStateGroup
    },
    embedded: !0,
    nullable: !0
  }]
};
let cc = {
  name: _$$Y.LibraryItemContainingStateGroup,
  permissionRequired: !1,
  embedded: !0,
  fields: [{
    name: 'name',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'nodeId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }]
};
let cu = {
  name: _$$Y.LibraryKeyToFile,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'libraryKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    },
    typechecked: !1,
    bannedFromViews: !0
  }, {
    name: 'hubFileId',
    type: {
      kind: 'bigint'
    },
    typechecked: !1,
    bannedFromViews: !0
  }, {
    name: 'file',
    type: {
      kind: 'object',
      name: _$$Y.File
    },
    filter: ['key', '=', createParentRef('fileKey')],
    deprecated: {
      reason: 'Prefer fileCanAccess, which checks CAN_DISCOVER',
      date: '2024-09-20'
    },
    nullable: !0,
    checkCanRead: {
      fieldName: 'canReadV3',
      userId: createSessionRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId')
    }
  }, {
    name: 'fileCanAccess',
    type: {
      kind: 'object',
      name: _$$Y.File
    },
    filter: ['key', '=', createParentRef('fileKey')],
    nullable: !0,
    checkCanRead: {
      fieldName: 'canAccess',
      userId: createSessionRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId'),
      linkAccessOverrideKey: null
    }
  }, {
    name: '_file',
    type: {
      kind: 'object',
      name: _$$Y.File
    },
    filter: ['key', '=', createParentRef('fileKey')],
    nullable: !0,
    bannedFromViews: !0
  }, {
    name: 'teamTemplateFile',
    type: {
      kind: 'object',
      name: _$$Y.File
    },
    filter: ['key', '=', createParentRef('fileKey')],
    nullable: !0,
    checkCanRead: {
      fieldName: 'canInsertTemplateV2',
      userId: createSessionRef('userId')
    }
  }, {
    name: 'hubFile',
    type: {
      kind: 'object',
      name: _$$Y.HubFile
    },
    filter: ['id', '=', createParentRef('hubFileId')],
    nullable: !0,
    checkCanRead: {
      fieldName: 'canView',
      userId: createSessionRef('userId')
    }
  }, {
    name: 'libraryPublishScope',
    type: {
      kind: 'object',
      name: _$$Y.LibraryPublishScope
    },
    filter: ['libraryKey', '=', createParentRef('libraryKey')],
    nullable: !0
  }]
};
let cp = {
  name: _$$Y.LibraryPublish,
  permissionRequired: !0,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    },
    bannedFromViews: !0
  }, {
    name: 'fileCheckpointId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'count',
    type: {
      kind: 'int'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'assetPublishStatuses',
    type: {
      kind: 'objects',
      name: _$$Y.AssetPublishStatus
    },
    expectedMaxCount: 1e4,
    filter: ['libraryPublishId', '=', createParentRef('id')],
    nullable: !0
  }, {
    name: 'error',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'file',
    type: {
      kind: 'object',
      name: _$$Y.File
    },
    filter: ['key', '=', createParentRef('fileKey')],
    bannedFromViews: !0
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      file: {
        id: NULL_FIELD_REF,
        canView: [{
          userId: createViewRef('userId')
        }, NULL_FIELD_REF],
        trashedAt: NULL_FIELD_REF
      }
    }
  }]
};
let cm = {
  name: _$$Y.LibraryPublishV2,
  permissionRequired: !0,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'fileCheckpointId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'count',
    type: {
      kind: 'int'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'error',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'assetSuccessCount',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'assetFailureCount',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'assetPendingCount',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'firstAssetError',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'file',
    type: {
      kind: 'object',
      name: _$$Y.File
    },
    filter: ['key', '=', createParentRef('fileKey')],
    bannedFromViews: !0
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      file: {
        id: NULL_FIELD_REF,
        canView: [{
          userId: createViewRef('userId')
        }, NULL_FIELD_REF],
        trashedAt: NULL_FIELD_REF
      }
    }
  }]
};
let ch = {
  name: _$$Y.LibraryPublishScope,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'libraryKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'publishScopeType',
    type: {
      kind: 'enum',
      name: 'LibraryPublishScopeType'
    }
  }, {
    name: 'publishScopeId',
    type: {
      kind: 'bigint'
    }
  }]
};
let cg = {
  name: _$$Y.LibraryWorkspaceSubscription,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, ...dS, {
    name: 'isSubscribed',
    type: {
      kind: 'bool'
    }
  }, {
    name: 'workspaceId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'workspace',
    type: {
      kind: 'object',
      name: _$$Y.Workspace
    },
    filter: ['id', '=', createParentRef('workspaceId')],
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'libraryTeamSubscriptionOverride',
    type: {
      kind: 'object',
      name: _$$Y.LibraryTeamSubscription
    },
    args: [{
      name: 'subscribingFileTeamId',
      type: {
        kind: 'bigint'
      }
    }],
    filter: {
      and: [['fileKey', '=', createParentRef('fileKey')], ['teamId', '=', createFieldRef('subscribingFileTeamId')]]
    },
    nullable: !0
  }]
};
let cf = {
  name: _$$Y.LicenseGroupFullPaidStatusCount,
  permissionRequired: !1,
  embedded: !0,
  fields: [{
    name: 'licenseType',
    type: {
      kind: 'enum',
      name: 'LicenseType'
    }
  }, {
    name: 'count',
    type: {
      kind: 'bigint'
    }
  }]
};
let c_ = {
  name: _$$Y.LicenseGroupMemberCounts,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'string'
    }
  }, {
    name: 'totalCount',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'fullPaidStatusCounts',
    type: {
      kind: 'objects',
      name: _$$Y.LicenseGroupFullPaidStatusCount
    },
    embedded: !0
  }, {
    name: 'designEditorCount',
    type: {
      kind: 'bigint'
    },
    deprecated: {
      reason: 'Use `fullPaidStatusCounts` instead',
      date: '2023-11-07'
    }
  }, {
    name: 'whiteboardEditorCount',
    type: {
      kind: 'bigint'
    },
    deprecated: {
      reason: 'Use `fullPaidStatusCounts` instead',
      date: '2023-11-07'
    }
  }]
};
let cA = {
  name: _$$Y.LicenseGroup,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'org',
    type: {
      kind: 'object',
      name: _$$Y.Org
    },
    filter: ['id', '=', createParentRef('orgId')],
    bannedFromViews: !0
  }, {
    name: 'licenseGroupsConfigId',
    type: {
      kind: 'bigint'
    },
    typechecked: !1
  }, {
    name: 'name',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'deletedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'mirroredWorkspaceId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'allowlistedPlugins',
    type: {
      kind: 'objects',
      name: _$$Y.AllowlistedPlugin
    },
    filter: {
      and: [['allowlistGroupId', '=', createParentRef('id')], ['allowlistGroupType', '=', 'LicenseGroup']]
    },
    expectedMaxCount: 1e4
  }, {
    name: 'isPluginAllowlisted',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'pluginId',
      type: {
        kind: 'string'
      }
    }],
    computed: !0,
    dependencies: {
      allowlistedPlugins: {
        pluginId: NULL_FIELD_REF
      }
    }
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      org: {
        canRead: [{
          userId: createFieldRef('userId')
        }, NULL_FIELD_REF]
      }
    }
  }, {
    name: 'licenseGroupMemberCounts',
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    type: {
      kind: 'object',
      name: _$$Y.LicenseGroupMemberCounts
    },
    resolver: {
      type: 'HTTP',
      uri: '/api/internal/livegraph/sinatra_resolver/license_group_member_counts',
      queryParams: {
        licenseGroupId: createParentRef('id'),
        userId: createFieldRef('userId')
      },
      realtimePolicy: {
        type: 'RedisPubsub',
        channelPrefix: 'license-group-full-paid-status-counts-',
        channelPostfix: [createParentRef('id')]
      }
    }
  }, {
    name: 'licenseGroupSeatCounts',
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    type: {
      kind: 'objects',
      name: _$$Y.LicenseGroupAssignedBillableProductSeatCount
    },
    resolver: {
      type: 'HTTP',
      uri: '/api/internal/livegraph/sinatra_resolver/license_group_seat_counts',
      queryParams: {
        license_group_id: createParentRef('id'),
        userId: createFieldRef('userId')
      },
      realtimePolicy: {
        type: 'RedisPubsub',
        channelPrefix: 'license-group-assigned-seat-counts-',
        channelPostfix: [createParentRef('id')]
      }
    }
  }]
};
let cy = {
  name: _$$Y.LicenseGroupAdmin,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'licenseGroupId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'orgUserId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'licenseGroup',
    type: {
      kind: 'object',
      name: _$$Y.LicenseGroup
    },
    filter: ['id', '=', createParentRef('licenseGroupId')]
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }]
};
let cb = {
  name: _$$Y.LicenseGroupMember,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'licenseGroupId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'orgUserId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'assignedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'idpGroupUuid',
    type: {
      kind: 'uuid'
    },
    nullable: !0
  }, {
    name: 'idpGroup',
    type: {
      kind: 'object',
      name: _$$Y.IDPGroup
    },
    filter: ['id', '=', createParentRef('idpGroupUuid')],
    nullable: !0
  }, {
    name: 'updateReason',
    type: {
      kind: 'enum',
      name: 'LicenseGroupUpdateReason'
    },
    nullable: !0,
    typechecked: !1
  }, {
    name: 'actorUserId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'licenseGroup',
    type: {
      kind: 'object',
      name: _$$Y.LicenseGroup
    },
    filter: ['id', '=', createParentRef('licenseGroupId')]
  }]
};
let cv = {
  name: _$$Y.LicenseGroupsConfig,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'nuxActiveAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'licenseGroups',
    type: {
      kind: 'objects',
      name: _$$Y.LicenseGroup
    },
    args: [{
      name: 'initialPageSize',
      type: {
        kind: 'int'
      }
    }],
    filter: {
      and: [['licenseGroupsConfigId', '=', createParentRef('id')], ['deletedAt', '=', null]]
    },
    expectedMaxCount: 200
  }]
};
let cI = {
  name: _$$Y.LinkedFigFile,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'sourceFileKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'destinationFileKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'name',
    type: {
      kind: 'string'
    }
  }, {
    name: 'position',
    type: {
      kind: 'string'
    }
  }],
  deprecated: {
    reason: 'Use FigFileLink',
    date: '2021-10-23'
  }
};
let cE = {
  name: _$$Y.MergeRequest,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'key',
    type: {
      kind: 'string'
    }
  }, {
    name: 'reviewNumber',
    type: {
      kind: 'int'
    },
    nullable: !0
  }, {
    name: 'branchFileKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'branchFile',
    type: {
      kind: 'object',
      name: _$$Y.File
    },
    filter: ['key', '=', createParentRef('branchFileKey')],
    checkCanRead: {
      fieldName: 'canViewV3',
      userId: createSessionRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId')
    }
  }, {
    name: 'fileRepoId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'ownedBy',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'owner',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    filter: ['id', '=', createParentRef('ownedBy')],
    nullable: !0
  }, {
    name: 'title',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'description',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'closedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'closedBy',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'closer',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    filter: ['id', '=', createParentRef('closedBy')],
    nullable: !0
  }, {
    name: 'fileMergeId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'reviewers',
    type: {
      kind: 'objects',
      name: _$$Y.MergeRequestReviewer
    },
    filter: ['mergeRequestKey', '=', createParentRef('key')],
    expectedMaxCount: 100
  }, {
    name: 'mergeSummaryNotes',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'requestedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }]
};
let cx = {
  name: _$$Y.MergeRequestReviewer,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'mergeRequestKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'user',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    filter: ['id', '=', createParentRef('userId')],
    nullable: !0
  }, {
    name: 'notes',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'changesRequestedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'approvedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }]
};
let cS = {
  name: _$$Y.Module,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    },
    bannedFromViews: !0
  }, {
    name: 'hubFileId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'nodeId',
    type: {
      kind: 'string'
    }
  }, {
    name: 'key',
    type: {
      kind: 'string'
    }
  }, {
    name: 'name',
    type: {
      kind: 'string'
    }
  }, {
    name: 'description',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'description_rt',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'checkpoint',
    type: {
      kind: 'object',
      name: _$$Y.Checkpoint
    },
    embedded: !0
  }, {
    name: 'thumbnailUrl',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'version',
    type: {
      kind: 'string'
    }
  }, {
    name: 'userFacingVersion',
    type: {
      kind: 'string'
    }
  }, {
    name: 'width',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'height',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'moduleSource',
    type: {
      kind: 'string'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'unpublishedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'file',
    type: {
      kind: 'object',
      name: _$$Y.File
    },
    filter: ['key', '=', createParentRef('fileKey')],
    nullable: !0,
    bannedFromViews: !0
  }, {
    name: 'hubFile',
    type: {
      kind: 'object',
      name: _$$Y.HubFile
    },
    filter: ['id', '=', createParentRef('hubFileId')],
    nullable: !0
  }, {
    name: 'user',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    filter: ['id', '=', createParentRef('userId')],
    nullable: !0
  }, {
    name: 'containingFrame',
    type: {
      kind: 'object',
      name: _$$Y.LibraryItemContainingFrame
    },
    embedded: !0,
    nullable: !0
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      unpublishedAt: NULL_FIELD_REF,
      file: {
        ...ec
      }
    }
  }]
};
let cw = {
  name: _$$Y.MonetizedResourceMetadata,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'hubFileId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'pluginId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'widgetId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'isSubscription',
    type: {
      kind: 'bool'
    },
    nullable: !0
  }, {
    name: 'price',
    type: {
      kind: 'int'
    }
  }, {
    name: 'stripeProductObjectId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'purchaseCount',
    type: {
      kind: 'int'
    }
  }, {
    name: 'trialLengthInDays',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'hasFreemiumCode',
    type: {
      kind: 'bool'
    },
    nullable: !0
  }, {
    name: 'priceUpdatedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'annualDiscountPercentage',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'annualDiscountActiveAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'hubFile',
    type: {
      kind: 'object',
      name: _$$Y.HubFile
    },
    filter: ['id', '=', createParentRef('hubFileId')],
    nullable: !0
  }, {
    name: 'plugin',
    type: {
      kind: 'object',
      name: _$$Y.Plugin
    },
    filter: ['id', '=', createParentRef('pluginId')],
    nullable: !0
  }, {
    name: 'widget',
    type: {
      kind: 'object',
      name: _$$Y.Plugin
    },
    filter: ['id', '=', createParentRef('widgetId')],
    nullable: !0
  }]
};
let cC = {
  name: _$$Y.OnboardingUserSignalAnswer,
  permissionRequired: !1,
  embedded: !0,
  fields: [{
    name: 'value',
    type: {
      kind: 'list',
      ofType: {
        kind: 'string'
      }
    },
    nullable: !0
  }, {
    name: 'updatedAt',
    type: {
      kind: 'date'
    },
    nullable: !0
  }]
};
let cT = {
  name: _$$Y.OnboardingUserSignalData,
  permissionRequired: !1,
  embedded: !0,
  fields: [{
    name: 'workLocationV1',
    type: {
      kind: 'object',
      name: _$$Y.OnboardingUserSignalAnswer
    },
    embedded: !0,
    nullable: !0
  }, {
    name: 'expandedUsagePurposeV1',
    type: {
      kind: 'object',
      name: _$$Y.OnboardingUserSignalAnswer
    },
    embedded: !0,
    nullable: !0
  }, {
    name: 'howCollabV1',
    type: {
      kind: 'object',
      name: _$$Y.OnboardingUserSignalAnswer
    },
    embedded: !0,
    nullable: !0
  }, {
    name: 'howWillYouUseFigmaV1',
    type: {
      kind: 'object',
      name: _$$Y.OnboardingUserSignalAnswer
    },
    embedded: !0,
    nullable: !0
  }, {
    name: 'expandedUsagePurposeV2',
    type: {
      kind: 'object',
      name: _$$Y.OnboardingUserSignalAnswer
    },
    embedded: !0,
    nullable: !0
  }, {
    name: 'howCollabV2',
    type: {
      kind: 'object',
      name: _$$Y.OnboardingUserSignalAnswer
    },
    embedded: !0,
    nullable: !0
  }, {
    name: 'haveUsedFigmaProductsBeforeV1',
    type: {
      kind: 'object',
      name: _$$Y.OnboardingUserSignalAnswer
    },
    embedded: !0,
    nullable: !0
  }, {
    name: 'whatBringsYouToFigmaTodayV1',
    type: {
      kind: 'object',
      name: _$$Y.OnboardingUserSignalAnswer
    },
    embedded: !0,
    nullable: !0
  }]
};
let ck = {
  name: _$$Y.OnboardingUserSignals,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'signals',
    type: {
      kind: 'object',
      name: _$$Y.OnboardingUserSignalData
    },
    embedded: !0,
    nullable: !0
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }]
};
let cR = {
  name: _$$Y.OpenMergeRequest,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'mergeRequestKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'mergeRequest',
    type: {
      kind: 'object',
      name: _$$Y.MergeRequest
    },
    filter: ['key', '=', createParentRef('mergeRequestKey')]
  }, {
    name: 'branchFileKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'branchFile',
    type: {
      kind: 'object',
      name: _$$Y.File
    },
    filter: ['key', '=', createParentRef('branchFileKey')],
    checkCanRead: {
      fieldName: 'canViewV3',
      userId: createSessionRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId')
    }
  }]
};
let cN = ['expert', 'developer', 'collaborator', 'content'];
let cP = e => `empty${e.charAt(0).toUpperCase()}${e.slice(1)}Seat`;
let cO = e => {
  let t = [];
  for (let i of cN) {
    let n = cP(i);
    t.push({
      name: n,
      type: {
        kind: 'object',
        name: 'Seat'
      },
      filter: {
        and: [['planParentId', '=', createParentRef('id')], ['planParentType', '=', e], ['currentPlanUserId', '=', null], ['billableProductKey', '=', i], ['deprovisionedAt', '=', null]]
      },
      nullable: !0,
      expectedMaxCount: 1,
      bannedFromViews: !0
    });
  }
  return t;
};
let cD = [{
  name: 'id',
  type: {
    kind: 'bigint'
  }
}, {
  name: 'bigmaEnabledAt',
  type: {
    kind: 'datetime'
  },
  nullable: !0
}, {
  name: 'mfaRequired',
  type: {
    kind: 'string'
  },
  nullable: !0
}, {
  name: 'currentBaseOrgUser',
  type: {
    kind: 'object',
    name: _$$Y.BaseOrgUser
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  nullable: !0,
  filter: {
    and: [['userId', '=', createFieldRef('userId')], ['orgId', '=', createParentRef('id')]]
  }
}, {
  name: 'planSubscription',
  nullable: !0,
  type: {
    kind: 'object',
    name: _$$Y.PlanSubscription
  },
  orderBy: [['createdAt', 'DESC']],
  filter: {
    and: [['planParentId', '=', createParentRef('id')], ['planParentType', '=', 'Org']]
  },
  expectedMaxCount: 1
}, {
  name: 'cursorChatDisabledAt',
  type: {
    kind: 'datetime'
  },
  nullable: !0
}, {
  name: 'voiceDisabledAt',
  type: {
    kind: 'datetime'
  },
  nullable: !0
}, {
  name: 'widgetsWhitelistEnforced',
  nullable: !0,
  type: {
    kind: 'bool'
  }
}, {
  name: 'pluginsWhitelistEnforced',
  nullable: !0,
  type: {
    kind: 'bool'
  }
}, {
  name: 'expOneClickAskToEditOrgId',
  type: {
    kind: 'object',
    name: _$$Y.ExpOneClickAskToEditOrgId
  },
  resolver: {
    type: 'Statsig',
    statsigUser: {
      customIDs: {
        orgID: createParentRef('id')
      }
    },
    statsigResource: {
      type: 'experiment',
      experimentName: 'exp_one_click_ask_to_edit_org_id'
    }
  }
}];
let cL = {
  name: _$$Y.OrgPublicInfo,
  permissionRequired: !1,
  fields: [...cD, ...lK, ...ls, dE]
};
let cF = {
  name: _$$Y.OrgInfo,
  permissionRequired: !1,
  fields: [...cD, {
    name: 'name',
    type: {
      kind: 'string'
    }
  }, {
    name: 'standing',
    type: {
      kind: 'enum',
      name: 'OrgStanding'
    }
  }, {
    name: 'imgUrl',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'imgUrlTransformed',
    type: {
      kind: 'string'
    },
    nullable: !0,
    computed: !0,
    dependencies: {
      imgUrl: NULL_FIELD_REF
    }
  }, {
    name: 'imgUrls',
    type: {
      kind: 'map',
      valueType: {
        kind: 'string'
      }
    },
    nullable: !0
  }, {
    name: 'imgUrlsTransformed',
    type: {
      kind: 'map',
      valueType: {
        kind: 'string'
      }
    },
    nullable: !0,
    computed: !0,
    dependencies: {
      imgUrls: NULL_FIELD_REF
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'stripeCustomerId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'cmtyPublishAsUserEnabledAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'domainCapture',
    type: {
      kind: 'bool'
    },
    nullable: !0
  }, {
    name: 'inviteWhitelist',
    type: {
      kind: 'object',
      name: _$$Y.OrgInviteAllowlist
    },
    nullable: !0,
    embedded: !0
  }, {
    name: 'templatePickerDisabled',
    type: {
      kind: 'bool'
    },
    nullable: !0
  }, {
    name: 'figjamDisabledAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'isFigJamDisabled',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      figjamDisabledAt: NULL_FIELD_REF
    }
  }, {
    name: '_allowedPublicPlugins',
    nullable: !0,
    type: {
      kind: 'object',
      name: _$$Y.OrgAllowedPublicPlugins
    },
    filter: ['orgId', '=', createParentRef('id')]
  }, {
    name: 'publicPluginsAllowed',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      _allowedPublicPlugins: {
        id: NULL_FIELD_REF,
        publicPluginsAllowed: NULL_FIELD_REF
      }
    }
  }, {
    name: 'customTemplatesAllowed',
    type: {
      kind: 'enum',
      name: 'CustomTemplatesPermissions'
    },
    nullable: !0
  }, {
    name: 'sharedOrgLicenseGroupSetting',
    type: {
      kind: 'object',
      name: _$$Y.SharedOrgLicenseGroupSetting
    },
    nullable: !0,
    deprecated: {
      reason: 'Use orgSharedSetting',
      date: '2025-07-11'
    },
    filter: {
      and: [['resourceType', '=', 'Org'], ['resourceId', '=', createParentRef('id')]]
    }
  }, {
    name: 'orgSharedSetting',
    type: {
      kind: 'object',
      name: _$$Y.SharedOrgLicenseGroupSetting
    },
    nullable: !0,
    filter: {
      and: [['resourceType', '=', 'Org'], ['resourceId', '=', createParentRef('id')]]
    }
  }, {
    name: 'inExpExpiringPublicLinks',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {}
  }, {
    name: 'inExpWorkspaceLevelLinkControls',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {}
  }, {
    name: 'featuredScimMetadata',
    type: {
      kind: 'enum',
      name: 'FeaturedScimMetadata'
    },
    nullable: !0
  }, {
    name: 'orgSamlConfigs',
    type: {
      kind: 'objects',
      name: _$$Y.OrgSamlConfig
    },
    filter: ['orgId', '=', createParentRef('id')],
    checkCanRead: {
      userId: createSessionRef('userId')
    },
    nullable: !0,
    expectedMaxCount: 50
  }, {
    name: 'currentIDPUser',
    type: {
      kind: 'object',
      name: _$$Y.ComputedIDPUser
    },
    nullable: !0,
    computed: !0,
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    dependencies: {
      orgSamlConfigs: {
        id: NULL_FIELD_REF
      },
      currentUser: [{
        userId: createFieldRef('userId')
      }, {
        id: NULL_FIELD_REF,
        email: NULL_FIELD_REF
      }]
    }
  }, {
    name: 'vatGstId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'taxIdVerificationStatus',
    type: {
      kind: 'enum',
      name: 'TaxIdVerificationStatus'
    },
    nullable: !0
  }, {
    name: 'taxInfo',
    type: {
      kind: 'object',
      name: _$$Y.TaxInfo
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    resolver: {
      type: 'HTTP',
      uri: '/api/internal/livegraph/sinatra_resolver/tax_info',
      queryParams: {
        userId: createFieldRef('userId'),
        org_id: createParentRef('id')
      },
      realtimePolicy: {
        type: 'Static'
      }
    }
  }, {
    name: 'devModeOptInPlanProperty',
    type: {
      kind: 'object',
      name: _$$Y.PlanProperties
    },
    filter: {
      and: [['planId', '=', createParentRef('id')], ['planType', '=', 'organization'], ['property', '=', 'DEV_MODE_OPT_IN_REQUIREMENT_ACCEPTANCE_DATE']]
    },
    nullable: !0
  }, {
    name: 'isSalesAssistedPlanProperty',
    type: {
      kind: 'object',
      name: _$$Y.PlanProperties
    },
    filter: {
      and: [['planId', '=', createParentRef('id')], ['planType', '=', 'organization'], ['property', '=', 'is_sales_assisted']]
    },
    nullable: !0
  }, {
    name: 'subscriptionShouldNotAutoRenewPlanProperty',
    type: {
      kind: 'object',
      name: _$$Y.PlanProperties
    },
    filter: {
      and: [['planId', '=', createParentRef('id')], ['planType', '=', 'organization'], ['property', '=', 'SUBSCRIPTION_SHOULD_NOT_AUTO_RENEW']]
    },
    nullable: !0
  }, {
    name: 'publicLinksBannedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0,
    deprecated: {
      reason: 'Use sharedOrgLicenseGroupSetting or orgSharedSetting',
      date: '2023-04-19'
    }
  }, {
    name: 'publicLinksBanned',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {},
    deprecated: {
      reason: 'Use sharedOrgLicenseGroupSetting or orgSharedSetting',
      date: '2023-04-19'
    }
  }, {
    name: 'publicLinksRequirePassword',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {},
    deprecated: {
      reason: 'Use sharedOrgLicenseGroupSetting or orgSharedSetting',
      date: '2023-04-19'
    }
  }, {
    name: 'publicLinksRequirePasswordEnabledAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0,
    deprecated: {
      reason: 'Use sharedOrgLicenseGroupSetting or orgSharedSetting',
      date: '2023-04-19'
    }
  }, {
    name: 'devModeAccountTypeRequests',
    type: {
      kind: 'objects',
      name: _$$Y.AccountTypeRequest
    },
    filter: {
      and: [['planId', '=', createParentRef('id')], ['planType', '=', 'Org'], ['_editorTypeRaw', '=', 2], ['status', '=', 'pending']]
    },
    nullable: !0,
    expectedMaxCount: 1e4
  }, {
    name: 'orgDefaultPaidStatusDesign',
    type: {
      kind: 'object',
      name: _$$Y.PlanProperties
    },
    nullable: !0,
    filter: {
      and: [['planId', '=', createParentRef('id')], ['planType', '=', 'organization'], ['property', '=', 'default_paid_status_design']]
    }
  }, {
    name: 'designDefaultPaidStatus',
    type: {
      kind: 'string'
    },
    nullable: !0,
    computed: !0,
    dependencies: {
      orgDefaultPaidStatusDesign: {
        value: NULL_FIELD_REF
      }
    }
  }, {
    name: 'orgDefaultPaidStatusWhiteboard',
    type: {
      kind: 'object',
      name: _$$Y.PlanProperties
    },
    nullable: !0,
    filter: {
      and: [['planId', '=', createParentRef('id')], ['planType', '=', 'organization'], ['property', '=', 'default_paid_status_whiteboard']]
    }
  }, {
    name: 'whiteboardDefaultPaidStatus',
    type: {
      kind: 'string'
    },
    nullable: !0,
    computed: !0,
    dependencies: {
      orgDefaultPaidStatusWhiteboard: {
        value: NULL_FIELD_REF
      }
    }
  }, {
    name: 'upgradeApprovalSettings',
    type: {
      kind: 'object',
      name: _$$Y.UpgradeApprovalSettings
    },
    embedded: !0,
    nullable: !0
  }, {
    name: 'upgradeApprovalSettingsDeveloper',
    type: {
      kind: 'string'
    },
    computed: !0,
    dependencies: {
      upgradeApprovalSettings: {
        developer: NULL_FIELD_REF
      }
    }
  }, {
    name: 'upgradeApprovalSettingsCollaborator',
    type: {
      kind: 'string'
    },
    computed: !0,
    dependencies: {
      upgradeApprovalSettings: {
        collaborator: NULL_FIELD_REF
      }
    }
  }, {
    name: 'upgradeApprovalSettingsExpert',
    type: {
      kind: 'string'
    },
    computed: !0,
    dependencies: {
      upgradeApprovalSettings: {
        expert: NULL_FIELD_REF
      }
    }
  }, {
    name: 'upgradeApprovalSettingsContent',
    type: {
      kind: 'string'
    },
    computed: !0,
    dependencies: {
      upgradeApprovalSettings: {
        content: makeFieldRefOptional(NULL_FIELD_REF)
      }
    }
  }, {
    name: 'upgradeApprovalSetting',
    type: {
      kind: 'string'
    },
    nullable: !0,
    computed: !0,
    dependencies: {},
    deprecated: {
      reason: 'Used for an initial version of the billing remodel upgrade mechanics. No longer needed',
      date: '2024-08-21'
    }
  }, {
    name: 'aiDataSharingEnabledAtPlanProperty',
    type: {
      kind: 'object',
      name: _$$Y.PlanProperties
    },
    filter: {
      and: [['planId', '=', createParentRef('id')], ['planType', '=', 'organization'], ['property', '=', 'AI_DATA_SHARING_ENABLED_AT']]
    },
    nullable: !0
  }, {
    name: 'isAiDataSharingEnabled',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      aiDataSharingEnabledAtPlanProperty: {
        value: NULL_FIELD_REF
      }
    }
  }, {
    name: 'guestInviteSetting',
    type: {
      kind: 'string'
    },
    computed: !0,
    nullable: !0,
    dependencies: {
      inviteWhitelist: {
        guestInviteSetting: NULL_FIELD_REF
      }
    }
  }, {
    name: 'aiDataSharingSearchEnabledAtPlanProperty',
    type: {
      kind: 'object',
      name: _$$Y.PlanProperties
    },
    filter: {
      and: [['planId', '=', createParentRef('id')], ['planType', '=', 'organization'], ['property', '=', 'AI_DATA_SHARING_SEARCH_ENABLED_AT']]
    },
    nullable: !0,
    deprecated: {
      reason: 'Use `aiDataSharingEnabledAtPlanProperty` instead.',
      date: '2024-06-07'
    }
  }, {
    name: 'isAiDataSharingSearchEnabled',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      aiDataSharingSearchEnabledAtPlanProperty: {
        value: NULL_FIELD_REF
      }
    },
    deprecated: {
      reason: 'Use `isAiDataSharingEnabled` instead.',
      date: '2024-06-07'
    }
  }, {
    name: 'aiDataSharingGenerativeEnabledAtPlanProperty',
    type: {
      kind: 'object',
      name: _$$Y.PlanProperties
    },
    filter: {
      and: [['planId', '=', createParentRef('id')], ['planType', '=', 'organization'], ['property', '=', 'AI_DATA_SHARING_GENERATIVE_ENABLED_AT']]
    },
    nullable: !0,
    deprecated: {
      reason: 'Use `aiDataSharingEnabledAtPlanProperty` instead.',
      date: '2024-06-07'
    }
  }, {
    name: 'isAiDataSharingGenerativeEnabled',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      aiDataSharingGenerativeEnabledAtPlanProperty: {
        value: NULL_FIELD_REF
      }
    },
    deprecated: {
      reason: 'Use `isAiDataSharingEnabled` instead.',
      date: '2024-06-07'
    }
  }, {
    name: 'billingTrials',
    type: {
      kind: 'objects',
      name: _$$Y.BillingTrial
    },
    nullable: !0,
    filter: {
      and: [['resourceId', '=', createParentRef('id')], ['resourceType', '=', 'Org']]
    },
    expectedMaxCount: 100
  }, {
    name: 'slidesDisabledAt',
    type: {
      kind: 'object',
      name: _$$Y.PlanProperties
    },
    nullable: !0,
    filter: {
      and: [['planId', '=', createParentRef('id')], ['planType', '=', 'organization'], ['property', '=', 'SLIDES_DISABLED_AT']]
    }
  }, {
    name: 'isSlidesDisabled',
    type: {
      kind: 'bool'
    },
    nullable: !0,
    computed: !0,
    dependencies: {
      slidesDisabledAt: {
        value: NULL_FIELD_REF
      }
    }
  }, {
    name: 'sitesDisabledAt',
    type: {
      kind: 'object',
      name: _$$Y.PlanProperties
    },
    nullable: !0,
    filter: {
      and: [['planId', '=', createParentRef('id')], ['planType', '=', 'organization'], ['property', '=', 'SITES_DISABLED_AT']]
    }
  }, {
    name: 'isSitesDisabled',
    type: {
      kind: 'bool'
    },
    nullable: !0,
    computed: !0,
    dependencies: {
      sitesDisabledAt: {
        value: NULL_FIELD_REF
      }
    }
  }, {
    name: 'cooperDisabledAt',
    type: {
      kind: 'object',
      name: _$$Y.PlanProperties
    },
    nullable: !0,
    filter: {
      and: [['planId', '=', createParentRef('id')], ['planType', '=', 'organization'], ['property', '=', 'COOPER_DISABLED_AT']]
    }
  }, {
    name: 'isCooperDisabled',
    type: {
      kind: 'bool'
    },
    nullable: !0,
    computed: !0,
    dependencies: {
      cooperDisabledAt: {
        value: NULL_FIELD_REF
      }
    }
  }, {
    name: 'figmakeDisabledAt',
    type: {
      kind: 'object',
      name: _$$Y.PlanProperties
    },
    nullable: !0,
    filter: {
      and: [['planId', '=', createParentRef('id')], ['planType', '=', 'organization'], ['property', '=', 'FIGMAKE_DISABLED_AT']]
    }
  }, {
    name: 'isFigmakeDisabled',
    type: {
      kind: 'bool'
    },
    nullable: !0,
    computed: !0,
    dependencies: {
      figmakeDisabledAt: {
        value: NULL_FIELD_REF
      }
    }
  }, {
    name: 'aiFeaturesDisabledAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'figmaProvidedLibrariesDisabledAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'workshopDisabledAt',
    nullable: !0,
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'pluginRequestsAllowed',
    type: {
      kind: 'bool'
    }
  }, {
    name: 'widgetRequestsAllowed',
    type: {
      kind: 'bool'
    }
  }, {
    name: 'billingTier',
    nullable: !0,
    type: {
      kind: 'enum',
      name: 'PlanTier'
    }
  }, {
    name: 'bundlesEnabledAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0,
    bannedFromViews: !0
  }, {
    name: 'prorationBillingEnabledAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'k12GoogleOrg',
    type: {
      kind: 'bool'
    },
    nullable: !0
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      _org: {
        isGuest: [{
          userId: createFieldRef('userId')
        }, NULL_FIELD_REF]
      }
    }
  }, {
    name: '_org',
    type: {
      kind: 'object',
      name: _$$Y.Org
    },
    filter: ['id', '=', createParentRef('id')],
    bannedFromViews: !0
  }, {
    name: 'currentUser',
    nullable: !0,
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    filter: ['id', '=', createFieldRef('userId')]
  }, {
    name: 'currentOrgUser',
    type: {
      kind: 'object',
      name: _$$Y.OrgUser
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: {
      and: [['userId', '=', createFieldRef('userId')], ['orgId', '=', createParentRef('id')], ['permission', '<>', 'guest']]
    }
  }, {
    name: 'currentPrivilegedOrgUser',
    type: {
      kind: 'object',
      name: _$$Y.PrivilegedOrgUser
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: {
      and: [['userId', '=', createFieldRef('userId')], ['orgId', '=', createParentRef('id')], ['permission', '<>', 'guest']]
    }
  }, {
    name: '_unlimitedConnectionsEnabledAtPlanProperty',
    type: {
      kind: 'object',
      name: _$$Y.PlanProperties
    },
    bannedFromViews: !0,
    filter: {
      and: [['planId', '=', createParentRef('id')], ['planType', '=', 'organization'], ['property', '=', 'UNLIMITED_CONNECTIONS_ENABLED_AT']]
    },
    nullable: !0
  }, {
    name: 'unlimitedConnectionsEnabled',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      _unlimitedConnectionsEnabledAtPlanProperty: {
        value: NULL_FIELD_REF
      }
    }
  }, {
    name: '_testingOnlyUnlimitedConnectionsEnabledAtPlanProperty',
    type: {
      kind: 'object',
      name: _$$Y.PlanProperties
    },
    bannedFromViews: !0,
    filter: {
      and: [['planId', '=', createParentRef('id')], ['planType', '=', 'organization'], ['property', '=', 'TESTING_ONLY_UNLIMITED_CONNECTIONS_ENABLED_AT']]
    },
    nullable: !0
  }, {
    name: 'testingOnlyUnlimitedConnectionsEnabled',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      _testingOnlyUnlimitedConnectionsEnabledAtPlanProperty: {
        value: NULL_FIELD_REF
      }
    }
  }, {
    name: '_hostPlanActiveResourceConnections',
    type: {
      kind: 'objects',
      name: _$$Y.ResourceConnection
    },
    nullable: !0,
    bannedFromViews: !0,
    filter: {
      and: [['hostPlanId', '=', createParentRef('id')], ['hostPlanType', '=', 'organization'], ['disconnectedAt', '=', null]]
    },
    expectedMaxCount: 100
  }, {
    name: '_connectedPlanActiveResourceConnections',
    type: {
      kind: 'objects',
      name: _$$Y.ResourceConnection
    },
    nullable: !0,
    bannedFromViews: !0,
    filter: {
      and: [['connectedPlanId', '=', createParentRef('id')], ['connectedPlanType', '=', 'organization'], ['disconnectedAt', '=', null]]
    },
    expectedMaxCount: 100
  }, {
    name: '_hostPlanPendingResourceConnectionInvites',
    type: {
      kind: 'objects',
      name: _$$Y.ResourceConnectionInvite
    },
    nullable: !0,
    bannedFromViews: !0,
    filter: {
      and: [['hostPlanId', '=', createParentRef('id')], ['hostPlanType', '=', 'organization'], ['status', '=', 'pending']]
    },
    expectedMaxCount: 100
  }, {
    name: 'connectionCount',
    type: {
      kind: 'int'
    },
    computed: !0,
    dependencies: {
      _hostPlanActiveResourceConnections: {
        id: NULL_FIELD_REF
      },
      _connectedPlanActiveResourceConnections: {
        id: NULL_FIELD_REF
      },
      _hostPlanPendingResourceConnectionInvites: {
        id: NULL_FIELD_REF
      }
    }
  }, {
    name: 'whitelistedPlugins',
    type: {
      kind: 'objects',
      name: _$$Y.AllowlistedPlugin
    },
    filter: ['orgId', '=', createParentRef('id')],
    expectedMaxCount: 1e4
  }, {
    name: 'allowlistedPlugins',
    type: {
      kind: 'objects',
      name: _$$Y.AllowlistedPlugin
    },
    filter: {
      and: [['allowlistGroupId', '=', createParentRef('id')], ['allowlistGroupType', '=', 'Org']]
    },
    expectedMaxCount: 1e4
  }, {
    name: 'flagOrgGuestMfaForGoogleSso',
    type: {
      kind: 'object',
      name: _$$Y.StatsigFeatureGate
    },
    nullable: !0,
    resolver: {
      type: 'Statsig',
      statsigUser: {
        customIDs: {
          orgID: createParentRef('id')
        }
      },
      statsigResource: {
        type: 'flag',
        flagName: 'org_guest_mfa_for_google_sso'
      }
    }
  }, {
    name: 'isOrgGuestMfaForGoogleSsoEnabled',
    type: {
      kind: 'bool'
    },
    computed: !0,
    nullable: !0,
    dependencies: {
      flagOrgGuestMfaForGoogleSso: {
        value: NULL_FIELD_REF
      }
    }
  }, {
    name: 'flagOrgGuestMfaForSamlSso',
    type: {
      kind: 'object',
      name: _$$Y.StatsigFeatureGate
    },
    nullable: !0,
    resolver: {
      type: 'Statsig',
      statsigUser: {
        customIDs: {
          orgID: createParentRef('id')
        }
      },
      statsigResource: {
        type: 'flag',
        flagName: 'org_guest_mfa_for_saml_sso'
      }
    }
  }, {
    name: 'isOrgGuestMfaForSamlSsoEnabled',
    type: {
      kind: 'bool'
    },
    computed: !0,
    nullable: !0,
    dependencies: {
      flagOrgGuestMfaForSamlSso: {
        value: NULL_FIELD_REF
      }
    }
  }, {
    name: '_org_permsV2',
    type: {
      kind: 'object',
      name: _$$Y.Org
    },
    filter: ['id', '=', createParentRef('id')],
    nullable: !0,
    bannedFromViews: !0
  }, {
    name: 'sitesPublishingDisabledAt',
    type: {
      kind: 'object',
      name: _$$Y.PlanProperties
    },
    nullable: !0,
    filter: {
      and: [['planId', '=', createParentRef('id')], ['planType', '=', 'organization'], ['property', '=', 'SITES_PUBLISHING_DISABLED_AT']]
    }
  }, {
    name: 'sitesPublishingDisabled',
    type: {
      kind: 'bool'
    },
    nullable: !0,
    computed: !0,
    dependencies: {
      sitesPublishingDisabledAt: {
        value: NULL_FIELD_REF
      }
    }
  }, {
    name: 'supabaseDisabledAt',
    type: {
      kind: 'object',
      name: _$$Y.PlanProperties
    },
    nullable: !0,
    filter: {
      and: [['planId', '=', createParentRef('id')], ['planType', '=', 'organization'], ['property', '=', 'SUPABASE_DISABLED_AT']]
    }
  }, {
    name: 'supabaseDisabled',
    type: {
      kind: 'bool'
    },
    nullable: !0,
    computed: !0,
    dependencies: {
      supabaseDisabledAt: {
        value: NULL_FIELD_REF
      }
    }
  }, {
    name: 'featureFlagCampfireProvisionalAccessEnabled',
    type: {
      kind: 'object',
      name: _$$Y.StatsigFeatureGate
    },
    nullable: !0,
    resolver: {
      type: 'Statsig',
      statsigUser: {
        customIDs: {
          orgID: createParentRef('id')
        }
      },
      statsigResource: {
        type: 'flag',
        flagName: 'org_campfire_provisional_access_enabled'
      }
    }
  }, {
    name: 'resourceHubCmtyTabDisabledAt',
    type: {
      kind: 'object',
      name: _$$Y.PlanProperties
    },
    nullable: !0,
    filter: {
      and: [['planId', '=', createParentRef('id')], ['planType', '=', 'organization'], ['property', '=', 'RESOURCE_HUB_CMTY_TAB_DISABLED_AT']]
    }
  }, {
    name: 'isResourceHubCmtyTabDisabled',
    type: {
      kind: 'bool'
    },
    nullable: !0,
    computed: !0,
    dependencies: {
      resourceHubCmtyTabDisabledAt: {
        value: NULL_FIELD_REF
      }
    }
  }, {
    name: 'orgDomains',
    type: {
      kind: 'objects',
      name: _$$Y.OrgDomain
    },
    filter: ['orgId', '=', createParentRef('id')],
    expectedMaxCount: 1500
  }, {
    name: 'workspaces',
    type: {
      kind: 'objects',
      name: _$$Y.Workspace
    },
    checkCanRead: {
      userId: createSessionRef('userId')
    },
    filter: ['orgId', '=', createParentRef('id')],
    nullable: !0,
    expectedMaxCount: 1e3
  }, {
    name: 'hasWorkspaces',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      workspaces: {
        id: NULL_FIELD_REF
      }
    }
  }, ...cO('Org'), ...dd, R, dE]
};
let cM = {
  name: _$$Y.OrgMemberCount,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'string'
    }
  }, {
    name: 'data',
    type: {
      kind: 'int'
    }
  }]
};
let cj = {
  name: _$$Y.OrgWorkspaceCount,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'string'
    }
  }, {
    name: 'data',
    type: {
      kind: 'int'
    }
  }]
};
let cU = {
  name: _$$Y.OrgDiscoverableTeamCount,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'string'
    }
  }, {
    name: 'data',
    type: {
      kind: 'int'
    }
  }]
};
let cB = {
  name: _$$Y.Org,
  permissionRequired: !0,
  fields: [...cF.fields.filter(e => e.name !== 'canRead'), {
    name: 'googleSsoOnlyAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'samlSsoOnlyAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'teams',
    type: {
      kind: 'objects',
      name: _$$Y.Team
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    filter: ['orgId', '=', createParentRef('id')],
    checkCanRead: {
      userId: createFieldRef('userId')
    },
    expectedMaxCount: 1e4
  }, {
    name: 'activeTeams',
    type: {
      kind: 'objects',
      name: _$$Y.Team
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    filter: {
      and: [['orgId', '=', createParentRef('id')], ['deletedAt', '=', null]]
    },
    checkCanRead: {
      userId: createFieldRef('userId')
    },
    expectedMaxCount: 1e4
  }, {
    name: 'teamsWithSummary',
    type: {
      kind: 'objects',
      name: _$$Y.TeamWithSummary
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    checkCanRead: {
      userId: createFieldRef('userId')
    },
    filter: ['orgId', '=', createParentRef('id')],
    expectedMaxCount: 1e4
  }, {
    name: 'teamsById',
    type: {
      kind: 'objects',
      name: _$$Y.Team
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'teamIds',
      type: {
        kind: 'list',
        ofType: {
          kind: 'bigint'
        }
      }
    }],
    nullable: !0,
    checkCanRead: {
      userId: createFieldRef('userId')
    },
    filter: {
      and: [['orgId', '=', createParentRef('id')], ['id', 'in', createFieldRef('teamIds')]]
    },
    expectedMaxCount: 50
  }, {
    name: 'teamsByIdInAdmin',
    type: {
      kind: 'objects',
      name: _$$Y.TeamInAdmin
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'teamIds',
      type: {
        kind: 'list',
        ofType: {
          kind: 'bigint'
        }
      }
    }],
    nullable: !0,
    checkCanRead: {
      userId: createFieldRef('userId')
    },
    filter: {
      and: [['orgId', '=', createParentRef('id')], ['id', 'in', createFieldRef('teamIds')]]
    },
    expectedMaxCount: 50
  }, {
    name: 'members',
    type: {
      kind: 'objects',
      name: _$$Y.OrgUser
    },
    nullable: !0,
    filter: ['orgId', '=', createParentRef('id')],
    deprecated: {
      reason: 'Use baseOrgUserMembers',
      date: '2022-02-11'
    },
    expectedMaxCount: 200
  }, {
    name: 'baseOrgUserMembers',
    type: {
      kind: 'objects',
      name: _$$Y.BaseOrgUser
    },
    nullable: !0,
    args: [{
      name: 'initialPageSize',
      type: {
        kind: 'int'
      }
    }],
    filter: ['orgId', '=', createParentRef('id')],
    expectedMaxCount: 200
  }, {
    name: 'baseOrgUserMembersById',
    type: {
      kind: 'objects',
      name: _$$Y.BaseOrgUser
    },
    nullable: !0,
    args: [{
      name: 'orgUserIds',
      type: {
        kind: 'list',
        ofType: {
          kind: 'bigint'
        }
      }
    }],
    filter: {
      and: [['orgId', '=', createParentRef('id')], ['id', 'in', createFieldRef('orgUserIds')]]
    },
    expectedMaxCount: 50
  }, {
    name: 'isOrgUserExternallyRestricted',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      id: NULL_FIELD_REF,
      currentUser: [{
        userId: createViewRef('userId')
      }, {
        id: NULL_FIELD_REF,
        externalRestrictedOrgId: NULL_FIELD_REF
      }]
    }
  }, {
    name: 'installedPlugins',
    type: {
      kind: 'objects',
      name: _$$Y.PluginInstall
    },
    args: [{
      name: 'initialPageSize',
      type: {
        kind: 'int'
      }
    }],
    filter: ['orgId', '=', createParentRef('id')],
    expectedMaxCount: 1e3
  }, {
    name: 'domainCaptureDomains',
    type: {
      kind: 'list',
      ofType: {
        kind: 'string'
      }
    },
    computed: !0,
    dependencies: {
      orgDomains: {
        domain: NULL_FIELD_REF
      }
    }
  }, {
    name: 'domainsRequireVerification',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      domainCapture: NULL_FIELD_REF,
      sharedOrgLicenseGroupSetting: {
        ipAllowlist: NULL_FIELD_REF
      }
    }
  }, {
    name: 'pluginRequests',
    type: {
      kind: 'objects',
      name: _$$Y.PluginRequest
    },
    filter: ['orgId', '=', createParentRef('id')],
    expectedMaxCount: 1e4,
    shadowCheckCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'pendingPluginRequests',
    type: {
      kind: 'objects',
      name: _$$Y.PluginRequest
    },
    filter: {
      and: [['orgId', '=', createParentRef('id')], ['status', '=', 'pending']]
    },
    expectedMaxCount: 1e4,
    shadowCheckCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'isPluginAllowlisted',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'pluginId',
      type: {
        kind: 'string'
      }
    }],
    computed: !0,
    dependencies: {
      allowlistedPlugins: {
        pluginId: NULL_FIELD_REF
      }
    }
  }, {
    name: 'licenseGroupsConfig',
    type: {
      kind: 'object',
      name: _$$Y.LicenseGroupsConfig
    },
    filter: ['orgId', '=', createParentRef('id')],
    nullable: !0,
    expectedMaxCount: 1e3
  }, {
    name: 'librarySubscriptions',
    type: {
      kind: 'objects',
      name: _$$Y.LibraryOrgSubscription
    },
    filter: {
      and: [['orgId', '=', createParentRef('id')]]
    },
    nullable: !0,
    expectedMaxCount: 200
  }, {
    name: 'librarySubscriptionByLibraryKey',
    type: {
      kind: 'object',
      name: _$$Y.LibraryOrgSubscription
    },
    args: [{
      name: 'fileKey',
      type: {
        kind: 'string'
      }
    }],
    filter: {
      and: [['fileKey', '=', createFieldRef('fileKey')], ['orgId', '=', createParentRef('id')], ['hubFileId', '=', null]]
    },
    nullable: !0
  }, {
    name: 'librarySubscriptionByLibraryHubFileId',
    type: {
      kind: 'object',
      name: _$$Y.LibraryOrgSubscription
    },
    args: [{
      name: 'hubFileId',
      type: {
        kind: 'bigint'
      }
    }],
    filter: {
      and: [['hubFileId', '=', createFieldRef('hubFileId')], ['orgId', '=', createParentRef('id')]]
    },
    nullable: !0
  }, {
    name: 'approvedLibraries',
    type: {
      kind: 'objects',
      name: _$$Y.ApprovedLibrary
    },
    filter: {
      and: [['resourceType', '=', _$$Y.Org], ['resourceId', '=', createParentRef('id')]]
    },
    nullable: !0,
    expectedMaxCount: 200
  }, {
    name: 'inExpTeamCreationControls',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {},
    deprecated: {
      reason: ' No longer needed to maintain compliance with PermissionsV2 required fields',
      date: '2023-01-24'
    }
  }, {
    name: 'hasOrgEditLinksEditHeuristics',
    type: {
      kind: 'bool'
    },
    computed: !0,
    deprecated: {
      reason: 'Use bigmaEnabledAt',
      date: '2024-04-16'
    },
    dependencies: {}
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    permissionName: 'ORG::IS_MEMBER',
    dependencies: _$$mJ['ORG::IS_MEMBER']
  }, {
    name: 'canView',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    permissionName: 'ORG::IS_MEMBER',
    dependencies: _$$mJ['ORG::IS_MEMBER']
  }, {
    name: 'canAccessDraftsFolder',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    permissionName: 'ORG::IS_GUEST',
    dependencies: _$$mJ['ORG::IS_GUEST']
  }, {
    name: 'canAdmin',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    permissionName: 'ORG::IS_ADMIN',
    dependencies: _$$mJ['ORG::IS_ADMIN']
  }, {
    name: 'orgBillingPeriods',
    type: {
      kind: 'objects',
      name: _$$Y.OrgBillingPeriod
    },
    args: [{
      name: 'orgId',
      type: {
        kind: 'bigint'
      }
    }],
    filter: ['orgId', '=', createFieldRef('orgId')],
    nullable: !0,
    expectedMaxCount: 500
  }, {
    name: 'activeOrgBillingPeriod',
    computed: !0,
    nullable: !0,
    type: {
      kind: 'object',
      name: _$$Y.ActiveOrgBillingPeriod
    },
    args: [{
      name: 'orgId',
      type: {
        kind: 'bigint'
      }
    }],
    dependencies: {
      orgBillingPeriods: [{
        orgId: createViewRef('orgId')
      }, {
        id: NULL_FIELD_REF,
        orgId: NULL_FIELD_REF,
        startAt: NULL_FIELD_REF,
        effectiveEndAt: NULL_FIELD_REF,
        isEla: NULL_FIELD_REF,
        isActive: NULL_FIELD_REF
      }]
    }
  }, {
    name: 'licenseGroups',
    type: {
      kind: 'objects',
      name: _$$Y.LicenseGroup
    },
    filter: ['orgId', '=', createParentRef('id')],
    nullable: !0,
    expectedMaxCount: 1e3
  }, {
    name: 'memberCount',
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    type: {
      kind: 'object',
      name: _$$Y.OrgMemberCount
    },
    resolver: {
      type: 'HTTP',
      uri: '/api/internal/livegraph/sinatra_resolver/org_member_count',
      queryParams: {
        org_id: createParentRef('id'),
        userId: createFieldRef('userId')
      },
      realtimePolicy: {
        type: 'Static'
      }
    }
  }, {
    name: 'workspaceCount',
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    type: {
      kind: 'object',
      name: _$$Y.OrgWorkspaceCount
    },
    resolver: {
      type: 'HTTP',
      uri: '/api/internal/livegraph/sinatra_resolver/org_workspace_count',
      queryParams: {
        org_id: createParentRef('id'),
        userId: createFieldRef('userId')
      },
      realtimePolicy: {
        type: 'Static'
      }
    }
  }, {
    name: 'discoverableTeamCount',
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    type: {
      kind: 'object',
      name: _$$Y.OrgDiscoverableTeamCount
    },
    resolver: {
      type: 'HTTP',
      uri: '/api/internal/livegraph/sinatra_resolver/org_discoverable_team_count',
      queryParams: {
        org_id: createParentRef('id'),
        userId: createFieldRef('userId')
      },
      realtimePolicy: {
        type: 'Static'
      }
    }
  }, {
    name: 'activityLog',
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    type: {
      kind: 'objects',
      name: _$$Y.ActivityLog
    },
    filter: ['orgId', '=', createParentRef('id')],
    checkCanRead: {
      userId: createFieldRef('userId')
    },
    expectedMaxCount: 200
  }, {
    name: 'activityLogByActedOnId',
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'actedOnIdOrKey',
      type: {
        kind: 'string'
      },
      nullable: !0
    }],
    type: {
      kind: 'objects',
      name: _$$Y.ActivityLog
    },
    filter: {
      and: [['orgId', '=', createParentRef('id')], ['actedOnIdOrKey', '=', createFieldRef('actedOnIdOrKey')]]
    },
    checkCanRead: {
      userId: createFieldRef('userId')
    },
    expectedMaxCount: 200
  }, {
    name: 'newDesignEditors',
    type: {
      kind: 'object',
      name: _$$Y.OrgAdminNewEditorsInfo
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    resolver: {
      type: 'HTTP',
      uri: '/api/internal/livegraph/sinatra_resolver/org_admin_new_editors_info',
      queryParams: {
        org_id: createParentRef('id'),
        userId: createFieldRef('userId'),
        license_type: 'design'
      },
      realtimePolicy: {
        type: 'Static'
      }
    }
  }, {
    name: 'newFigjamEditors',
    type: {
      kind: 'object',
      name: _$$Y.OrgAdminNewEditorsInfo
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    resolver: {
      type: 'HTTP',
      uri: '/api/internal/livegraph/sinatra_resolver/org_admin_new_editors_info',
      queryParams: {
        org_id: createParentRef('id'),
        userId: createFieldRef('userId'),
        license_type: 'whiteboard'
      },
      realtimePolicy: {
        type: 'Static'
      }
    }
  }, {
    name: 'newDevmodeEditors',
    type: {
      kind: 'object',
      name: _$$Y.OrgAdminNewEditorsInfo
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    resolver: {
      type: 'HTTP',
      uri: '/api/internal/livegraph/sinatra_resolver/org_admin_new_editors_info',
      queryParams: {
        org_id: createParentRef('id'),
        userId: createFieldRef('userId'),
        license_type: 'dev_mode'
      },
      realtimePolicy: {
        type: 'Static'
      }
    }
  }, {
    name: 'ipAllowlistRanges',
    type: {
      kind: 'objects',
      name: _$$Y.OrgIpRange
    },
    filter: {
      and: [['orgId', '=', createParentRef('id')], ['productType', '=', 'ip_allowlist']]
    },
    expectedMaxCount: 1500
  }, {
    name: 'pluginUpdates',
    type: {
      kind: 'objects',
      name: _$$Y.Plugin
    },
    args: [{
      name: 'orgId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'updatedAtTimestamp',
      type: {
        kind: 'datetime'
      }
    }],
    filter: {
      and: [['orgId', '=', createParentRef('id')], ['updatedAt', '>', createFieldRef('updatedAtTimestamp')], ['isWidget', '<>', !0]]
    },
    checkCanRead: {
      orgId: createFieldRef('orgId'),
      userId: createSessionRef('userId')
    },
    expectedMaxCount: 2e3
  }, {
    name: 'widgetUpdates',
    type: {
      kind: 'objects',
      name: _$$Y.Plugin
    },
    args: [{
      name: 'orgId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'updatedAtTimestamp',
      type: {
        kind: 'datetime'
      }
    }],
    filter: {
      and: [['orgId', '=', createParentRef('id')], ['updatedAt', '>', createFieldRef('updatedAtTimestamp')], ['isWidget', '=', !0]]
    },
    checkCanRead: {
      orgId: createFieldRef('orgId'),
      userId: createSessionRef('userId')
    },
    expectedMaxCount: 2e3
  }, {
    name: 'fontFileUpdateForOrg',
    type: {
      kind: 'objects',
      name: _$$Y.FontFile
    },
    nullable: !0,
    args: [{
      name: 'updatedAtTimestamp',
      type: {
        kind: 'datetime'
      },
      nullable: !0
    }],
    filter: {
      and: [['orgId', '=', createParentRef('id')], ['updatedAt', '>', createFieldRef('updatedAtTimestamp')]]
    },
    orderBy: [['createdAt', 'DESC']],
    expectedMaxCount: 100
  }, {
    name: 'billingRemodelEnabledExperiment',
    type: {
      kind: 'object',
      name: _$$Y.BillingRemodelEnabledExperiment
    },
    resolver: {
      type: 'Statsig',
      statsigUser: {
        customIDs: {
          orgID: createParentRef('id')
        }
      },
      statsigResource: {
        type: 'experiment',
        experimentName: 'campfire_for_org'
      }
    }
  }, {
    name: 'assignedSeatCounts',
    deprecated: {
      reason: 'Use assignedSeatCountsV2 on the Plan object',
      date: '2025-05-13'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    type: {
      kind: 'objects',
      name: _$$Y.AssignedBillableProductSeatCount
    },
    resolver: {
      type: 'HTTP',
      uri: '/api/internal/livegraph/sinatra_resolver/assigned_seat_counts',
      queryParams: {
        plan_parent_id: createParentRef('id'),
        plan_type: 'Org',
        userId: createFieldRef('userId')
      },
      realtimePolicy: {
        type: 'RedisPubsub',
        channelPrefix: 'assigned-seat-counts-',
        channelPostfix: ['organization', createParentRef('id')]
      }
    }
  }, {
    name: 'availableSeatCounts',
    deprecated: {
      reason: 'Use availableSeatCountsV2 on the Plan object',
      date: '2025-05-13'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    type: {
      kind: 'objects',
      name: _$$Y.AvailableBillableProductSeatCount
    },
    resolver: {
      type: 'HTTP',
      uri: '/api/internal/livegraph/sinatra_resolver/available_seat_counts',
      queryParams: {
        plan_parent_id: createParentRef('id'),
        plan_type: 'Org',
        userId: createFieldRef('userId')
      },
      realtimePolicy: {
        type: 'RedisPubsub',
        channelPrefix: 'available-seat-counts-',
        channelPostfix: ['organization', createParentRef('id')]
      }
    }
  }, {
    name: 'expSocialProofExpansionOrgId',
    type: {
      kind: 'object',
      name: _$$Y.ExpSocialProofExpansionOrgId
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    resolver: {
      type: 'Statsig',
      statsigUser: {
        customIDs: {
          userID: createFieldRef('userId'),
          orgID: createParentRef('id')
        }
      },
      statsigResource: {
        type: 'experiment',
        experimentName: 'exp_social_proof_expansion_org_id'
      }
    }
  }, ap, ah, ag, am, af, aA, ay, a_, ac, au, al, ad, ab, av, as, ao, ai, an, ar, aa, s7, {
    name: 'permissionOrgFeatureFlags',
    type: {
      kind: 'list',
      ofType: {
        kind: 'string'
      }
    },
    computed: !0,
    dependencies: {
      permissionFlagPermissionsOrgTestFlag: {
        id: null,
        name: null,
        value: null
      }
    }
  }]
};
let cV = {
  name: _$$Y.OrgAccountTypeRequest,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'orgUserId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'status',
    type: {
      kind: 'string'
    }
  }, {
    name: '_editorTypeRaw',
    type: {
      kind: 'int'
    },
    nullable: !0
  }, {
    name: 'editorType',
    type: {
      kind: 'enum',
      name: 'EditorType'
    },
    computed: !0,
    nullable: !0,
    dependencies: {
      _editorTypeRaw: NULL_FIELD_REF
    }
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    },
    nullable: !0,
    bannedFromViews: !0
  }]
};
let cG = {
  name: _$$Y.OrgActivity,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'string'
    }
  }, {
    name: 'activityType',
    type: {
      kind: 'enum',
      name: 'ActivityType'
    }
  }, {
    name: 'actionAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'metadata',
    type: {
      kind: 'string'
    },
    nullable: !0
  }]
};
let cz = {
  name: _$$Y.OrgAdminUserSearchResult,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'string'
    },
    typechecked: !1
  }, {
    name: 'type',
    type: {
      kind: 'string'
    }
  }, {
    name: 'orgUserId',
    type: {
      kind: 'bigint'
    },
    typechecked: !1
  }, {
    name: 'orgUser',
    type: {
      kind: 'object',
      name: _$$Y.BaseOrgUser
    },
    nullable: !0,
    filter: ['id', '=', createParentRef('orgUserId')]
  }, {
    name: 'idpUserId',
    type: {
      kind: 'bigint'
    },
    typechecked: !1
  }, {
    name: 'idpUser',
    type: {
      kind: 'object',
      name: _$$Y.IDPUser
    },
    nullable: !0,
    filter: ['id', '=', createParentRef('idpUserId')]
  }, {
    name: 'orgInviteId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'orgInvite',
    type: {
      kind: 'object',
      name: _$$Y.OrgInvite
    },
    nullable: !0,
    filter: ['id', '=', createParentRef('orgInviteId')]
  }, {
    name: 'lastEdit',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'lastSeen',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'lastDesignEdit',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'lastWhiteboardEdit',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'lastDesignSeen',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'lastWhiteboardSeen',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'lastDevModeSeen',
    type: {
      kind: 'string'
    },
    nullable: !0
  }]
};
let cH = {
  name: _$$Y.OrgAdminUserMinimalFieldsSearchResult,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'string'
    }
  }, {
    name: 'orgUserId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'orgUser',
    type: {
      kind: 'object',
      name: _$$Y.BaseOrgUser
    },
    nullable: !0,
    filter: ['id', '=', createParentRef('orgUserId')]
  }]
};
let cW = {
  name: _$$Y.OrgAdminUsersInfo,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'totalUserCount',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'designEditorCutoff',
    type: {
      kind: 'object',
      name: _$$Y.OrgUserFetchNewEditorCutoff
    },
    embedded: !0,
    nullable: !0
  }, {
    name: 'designEditorBuffer',
    type: {
      kind: 'object',
      name: _$$Y.OrgUserFetchNewEditorBuffer
    },
    embedded: !0,
    nullable: !0
  }, {
    name: 'whiteboardEditorCutoff',
    type: {
      kind: 'object',
      name: _$$Y.OrgUserFetchNewEditorCutoff
    },
    embedded: !0,
    nullable: !0
  }, {
    name: 'whiteboardEditorBuffer',
    type: {
      kind: 'object',
      name: _$$Y.OrgUserFetchNewEditorBuffer
    },
    embedded: !0,
    nullable: !0
  }, {
    name: 'canRoleSetWithScim',
    type: {
      kind: 'bool'
    }
  }]
};
let cK = {
  name: _$$Y.OrgAllowedPublicPlugins,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'publicPluginsAllowed',
    type: {
      kind: 'bool'
    },
    nullable: !0
  }]
};
let cY = {
  name: _$$Y.OrgAwareTeamRole,
  permissionRequired: !0,
  fields: [...d$, {
    name: 'team',
    type: {
      kind: 'object',
      name: _$$Y.Team
    },
    filter: ['id', '=', createParentRef('resourceId')],
    nullable: !0,
    checkCanRead: {
      fieldName: 'canDiscover',
      userId: createSessionRef('userId')
    }
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'orgId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      team: {
        orgId: NULL_FIELD_REF
      }
    }
  }]
};
let cq = {
  name: _$$Y.OrgBillingPeriod,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'startAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'effectiveEndAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'endAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'salesforceContractId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'isEla',
    type: {
      kind: 'bool'
    }
  }, {
    name: 'isActive',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      startAt: NULL_FIELD_REF,
      effectiveEndAt: NULL_FIELD_REF,
      periodicUpdateField: {
        refreshValue: NULL_FIELD_REF
      }
    }
  }, {
    name: 'periodicUpdateField',
    type: {
      kind: 'object',
      name: _$$Y.PeriodicUpdate
    },
    nullable: !0,
    resolver: {
      type: 'PeriodicUpdate'
    }
  }]
};
let c$ = {
  name: _$$Y.OrgDomain,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'domain',
    type: {
      kind: 'string'
    }
  }, {
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'googleSsoOnlyAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'samlSsoOnlyAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'verifiedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'orgSamlConfigId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }]
};
let cZ = {
  name: _$$Y.OrgInvite,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'email',
    type: {
      kind: 'string'
    }
  }, {
    name: 'accountType',
    type: {
      kind: 'enum',
      name: 'OrgAccountType'
    }
  }, {
    name: 'billableProductKey',
    type: {
      kind: 'enum',
      name: 'BillableProductKey'
    },
    nullable: !0
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'licenseGroupId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'workspaceId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }]
};
let cX = {
  name: _$$Y.OrgInviteAllowlist,
  permissionRequired: !1,
  embedded: !0,
  fields: [{
    name: 'enabled',
    type: {
      kind: 'string'
    },
    nullable: !0,
    typechecked: !1
  }, {
    name: 'guestEnabled',
    type: {
      kind: 'string'
    },
    nullable: !0,
    typechecked: !1
  }, {
    name: 'memberAllowlistEnabled',
    type: {
      kind: 'string'
    },
    nullable: !0,
    typechecked: !1
  }, {
    name: 'guestInviteSetting',
    type: {
      kind: 'string'
    },
    nullable: !0
  }]
};
let cQ = {
  name: _$$Y.OrgJoinRequest,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'status',
    type: {
      kind: 'string'
    }
  }, {
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'requesterUserId',
    type: {
      kind: 'bigint'
    }
  }]
};
let cJ = {
  name: _$$Y.OrgSetting,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'setting',
    type: {
      kind: 'string'
    }
  }, {
    name: 'value',
    type: {
      kind: 'string'
    },
    nullable: !0
  }]
};
let c0 = {
  name: _$$Y.OrgTeamResult,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'teamId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'team',
    type: {
      kind: 'object',
      name: _$$Y.Team
    },
    filter: {
      and: [['id', '=', createParentRef('teamId')], ['deletedAt', '=', null]]
    },
    nullable: !0
  }, {
    name: 'memberCount',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'ownerRole',
    type: {
      kind: 'object',
      name: _$$Y.TeamRole
    },
    filter: {
      and: [['teamId', '=', createParentRef('teamId')], ['level', '=', 999]]
    },
    nullable: !0,
    deprecated: {
      reason: 'Use team.ownerRole instead',
      date: '2024-11-27'
    }
  }, {
    name: 'teamOwnerRole',
    type: {
      kind: 'object',
      name: _$$Y.TeamRole
    },
    filter: {
      and: [['resourceId', '=', createParentRef('teamId')], ['level', '=', e6.OWNER], ['resourceType', '=', 'team'], ['userId', '<>', null], ['pendingEmail', '=', null]]
    },
    nullable: !0
  }, {
    name: 'workspaceId',
    type: {
      kind: 'bigint'
    },
    nullable: !0,
    deprecated: {
      reason: 'This field is no longer set in the resolver. It\'s always null.',
      date: '2024-11-27'
    }
  }, {
    name: 'ownerId',
    type: {
      kind: 'bigint'
    },
    nullable: !0,
    deprecated: {
      reason: 'This field is no longer set in the resolver. It\'s always null.',
      date: '2024-11-27'
    }
  }, {
    name: 'owner',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    filter: ['id', '=', createParentRef('ownerId')],
    deprecated: {
      reason: 'This field is no longer set in the resolver. It\'s always null.',
      date: '2024-11-27'
    }
  }, {
    name: 'projects',
    type: {
      kind: 'bigint'
    },
    nullable: !0,
    deprecated: {
      reason: 'This field is no longer set in the resolver. It\'s always null.',
      date: '2024-11-27'
    }
  }, {
    name: 'orgAccess',
    type: {
      kind: 'string'
    },
    nullable: !0,
    deprecated: {
      reason: 'This field is no longer set in the resolver. It\'s always null.',
      date: '2024-11-27'
    }
  }]
};
let c1 = {
  name: _$$Y.OrgTeamResultInAdmin,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'teamId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'memberCount',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'team',
    type: {
      kind: 'object',
      name: _$$Y.Team
    },
    filter: {
      and: [['id', '=', createParentRef('teamId')], ['deletedAt', '=', null]]
    },
    checkCanRead: {
      fieldName: 'canViewInAdmin',
      userId: createSessionRef('userId')
    },
    nullable: !0
  }]
};
let c2 = {
  name: _$$Y.OrgUser,
  permissionRequired: !1,
  fields: [...O, {
    name: 'user',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    filter: ['id', '=', createParentRef('userId')]
  }, {
    name: 'org',
    type: {
      kind: 'object',
      name: _$$Y.Org
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    filter: ['id', '=', createParentRef('orgId')],
    checkCanRead: {
      userId: createFieldRef('userId')
    },
    nullable: !0
  }]
};
let c5 = {
  name: _$$Y.OrgUserEvent,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'orgUserId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'eventType',
    type: {
      kind: 'string'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }]
};
let c4 = {
  name: _$$Y.OrgUserFetchNewEditorBuffer,
  permissionRequired: !1,
  embedded: !0,
  fields: [{
    name: 'buffer',
    type: {
      kind: 'int'
    }
  }, {
    name: 'orgUserIds',
    type: {
      kind: 'list',
      ofType: {
        kind: 'string'
      }
    },
    nullable: !0
  }]
};
let c3 = {
  name: _$$Y.OrgUserFetchNewEditorCutoff,
  permissionRequired: !1,
  embedded: !0,
  fields: [{
    name: 'editorCount',
    type: {
      kind: 'int'
    }
  }, {
    name: 'orgUserId',
    type: {
      kind: 'string'
    }
  }, {
    name: 'timestamp',
    type: {
      kind: 'string'
    },
    typechecked: !1
  }]
};
let c6 = {
  name: _$$Y.OrgUserUpgrade,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      id: NULL_FIELD_REF,
      org: {
        currentPrivilegedOrgUser: [{
          userId: createFieldRef('userId')
        }, {
          id: NULL_FIELD_REF,
          permission: NULL_FIELD_REF,
          licenseGroupAdmins: {
            id: NULL_FIELD_REF
          }
        }]
      }
    }
  }, {
    name: 'orgUserId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'org',
    type: {
      kind: 'object',
      name: _$$Y.Org
    },
    filter: ['id', '=', createParentRef('orgId')],
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'reason',
    type: {
      kind: 'enum',
      name: 'OrgUserUpgradeReason'
    },
    typechecked: !1
  }, {
    name: 'actorId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'actor',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    nullable: !0,
    filter: ['id', '=', createParentRef('actorId')]
  }, {
    name: 'resourceType',
    type: {
      kind: 'enum',
      name: 'OrgUserUpgradeResourceType'
    },
    nullable: !0
  }, {
    name: 'resourceId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'resourceFile',
    type: {
      kind: 'object',
      name: _$$Y.OrgUserUpgradeWithFile
    },
    nullable: !0,
    filter: {
      and: [['id', '=', createParentRef('id')], ['resourceType', '=', 'file']]
    }
  }, {
    name: 'resourceProject',
    type: {
      kind: 'object',
      name: _$$Y.OrgUserUpgradeWithProject
    },
    nullable: !0,
    filter: {
      and: [['id', '=', createParentRef('id')], ['resourceType', '=', 'folder']]
    }
  }, {
    name: 'resourceTeam',
    type: {
      kind: 'object',
      name: _$$Y.OrgUserUpgradeWithTeam
    },
    nullable: !0,
    filter: {
      and: [['id', '=', createParentRef('id')], ['resourceType', '=', 'team']]
    }
  }, {
    name: 'resourceRepo',
    type: {
      kind: 'object',
      name: _$$Y.OrgUserUpgradeWithRepo
    },
    nullable: !0,
    filter: {
      and: [['id', '=', createParentRef('id')], ['resourceType', '=', 'file_repo']]
    }
  }, {
    name: 'resourceOrg',
    type: {
      kind: 'object',
      name: _$$Y.OrgUserUpgradeWithOrg
    },
    nullable: !0,
    filter: {
      and: [['id', '=', createParentRef('id')], ['resourceType', '=', 'org']]
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: '_editorTypeRaw',
    type: {
      kind: 'int'
    }
  }, {
    name: 'editorType',
    type: {
      kind: 'enum',
      name: 'EditorType'
    },
    computed: !0,
    nullable: !0,
    dependencies: {
      _editorTypeRaw: NULL_FIELD_REF
    },
    deprecated: {
      reason: 'Use `licenseType` instead',
      date: '2023-10-24'
    }
  }, {
    name: 'licenseType',
    type: {
      kind: 'enum',
      name: 'LicenseType'
    },
    computed: !0,
    nullable: !0,
    dependencies: {
      _editorTypeRaw: NULL_FIELD_REF
    }
  }, {
    name: 'downgradedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'downgradeReason',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'billableProductKey',
    type: {
      kind: 'enum',
      name: 'BillableProductKey'
    },
    nullable: !0
  }, {
    name: 'billableProduct',
    type: {
      kind: 'object',
      name: 'BillableProduct'
    },
    nullable: !0,
    filter: ['key', '=', createParentRef('billableProductKey')]
  }, {
    name: 'upgradeMethod',
    type: {
      kind: 'enum',
      name: 'UpgradeMethod'
    },
    nullable: !0
  }]
};
let c7 = {
  name: _$$Y.OrgSamlConfig,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'nickname',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'idpName',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'idpEntityId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'idpSsoTargetUrl',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'org',
    type: {
      kind: 'object',
      name: _$$Y.Org
    },
    filter: ['id', '=', createParentRef('orgId')],
    bannedFromViews: !0
  }, {
    name: 'orgDomains',
    type: {
      kind: 'objects',
      name: _$$Y.OrgDomain
    },
    filter: ['orgSamlConfigId', '=', createParentRef('id')],
    expectedMaxCount: 2e3
  }, {
    name: 'idpGroups',
    type: {
      kind: 'objects',
      name: _$$Y.IDPGroup
    },
    filter: ['orgSamlConfigId', '=', createParentRef('id')],
    expectedMaxCount: 2e3
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      org: {
        canAdmin: [{
          userId: createFieldRef('userId')
        }, NULL_FIELD_REF]
      }
    }
  }, {
    name: '_seatManagedViaScim',
    type: {
      kind: 'object',
      name: _$$Y.IDPUser
    },
    nullable: !0,
    filter: {
      and: [['orgSamlId', '=', createParentRef('id')], ['seatType', '<>', null]]
    },
    expectedMaxCount: 1,
    bannedFromViews: !0
  }, {
    name: 'hasSeatManagedViaScim',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      _seatManagedViaScim: {
        id: NULL_FIELD_REF
      }
    }
  }, {
    name: 'spEntityId',
    type: {
      kind: 'string'
    },
    computed: !0,
    dependencies: {
      id: NULL_FIELD_REF
    }
  }, {
    name: 'spAcsUrl',
    type: {
      kind: 'string'
    },
    computed: !0,
    dependencies: {
      spEntityId: NULL_FIELD_REF
    }
  }, {
    name: 'spScimBearerTokenAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0,
    dependencies: {
      id: NULL_FIELD_REF
    }
  }]
};
let c8 = {
  name: _$$Y.OrgUserUpgradeWithFile,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'resourceId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'resourceType',
    type: {
      kind: 'enum',
      name: 'OrgUserUpgradeResourceType'
    },
    nullable: !0
  }, {
    name: 'file',
    type: {
      kind: 'object',
      name: _$$Y.File
    },
    filter: ['key', '=', createParentRef('resourceId')],
    nullable: !0,
    shadowCheckCanRead: {
      fieldName: 'canAccess',
      userId: createSessionRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId'),
      linkAccessOverrideKey: null
    }
  }]
};
let c9 = {
  name: _$$Y.OrgUserUpgradeWithOrg,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'resourceId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'resourceType',
    type: {
      kind: 'enum',
      name: 'OrgUserUpgradeResourceType'
    },
    nullable: !0
  }, {
    name: 'orgInfo',
    type: {
      kind: 'object',
      name: _$$Y.OrgInfo
    },
    filter: ['id', '=', createParentRef('resourceId')],
    nullable: !0,
    shadowCheckCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'org',
    type: {
      kind: 'object',
      name: _$$Y.Org
    },
    filter: ['id', '=', createParentRef('resourceId')],
    nullable: !0
  }]
};
let ue = {
  name: _$$Y.OrgUserUpgradeWithProject,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'resourceId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'resourceType',
    type: {
      kind: 'enum',
      name: 'OrgUserUpgradeResourceType'
    },
    nullable: !0
  }, {
    name: 'project',
    type: {
      kind: 'object',
      name: _$$Y.Project
    },
    filter: ['id', '=', createParentRef('resourceId')],
    nullable: !0,
    shadowCheckCanRead: {
      userId: createSessionRef('userId')
    }
  }]
};
let ut = {
  name: _$$Y.OrgUserUpgradeWithRepo,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'resourceId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'resourceType',
    type: {
      kind: 'enum',
      name: 'OrgUserUpgradeResourceType'
    },
    nullable: !0
  }, {
    name: 'repo',
    type: {
      kind: 'object',
      name: _$$Y.Repo
    },
    filter: ['id', '=', createParentRef('resourceId')],
    nullable: !0,
    shadowCheckCanRead: {
      fieldName: 'canViewV3',
      userId: createSessionRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId')
    }
  }]
};
let ui = {
  name: _$$Y.OrgUserUpgradeWithTeam,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'resourceId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'resourceType',
    type: {
      kind: 'enum',
      name: 'OrgUserUpgradeResourceType'
    },
    nullable: !0
  }, {
    name: 'teamLimitedInfo',
    type: {
      kind: 'object',
      name: _$$Y.TeamLimitedInfo
    },
    filter: ['id', '=', createParentRef('resourceId')],
    nullable: !0,
    shadowCheckCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'team',
    type: {
      kind: 'object',
      name: _$$Y.Team
    },
    filter: ['id', '=', createParentRef('resourceId')],
    nullable: !0
  }]
};
let un = {
  name: _$$Y.PendingUserMentions,
  permissionRequired: !1,
  naturalKey: new Set(['fileKey', 'id']),
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'inviteId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'inviterUserId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'inviteeEmail',
    type: {
      kind: 'string'
    }
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    },
    bannedFromViews: !0
  }, {
    name: 'fileCommentId',
    type: {
      kind: 'bigint'
    }
  }]
};
let ur = {
  name: _$$Y.PermissionFeatureFlag,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'string'
    }
  }, {
    name: 'name',
    type: {
      kind: 'string'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'string'
    },
    nullable: !0,
    typechecked: !1
  }]
};
let ua = {
  name: _$$Y.PinnedFile,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'string'
    }
  }, {
    name: 'key',
    type: {
      kind: 'string'
    }
  }, {
    name: 'folderId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'pinnedBy',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'file',
    type: {
      kind: 'object',
      name: _$$Y.File
    },
    nullable: !0,
    filter: ['key', '=', createParentRef('key')],
    checkCanRead: {
      fieldName: 'canReadV3',
      userId: createSessionRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId')
    },
    expectedMaxCount: 1e3
  }, {
    name: 'pinnedByUser',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    nullable: !0,
    filter: ['id', '=', createParentRef('pinnedBy')]
  }]
};
let us = {
  name: _$$Y.PinnedFileV2,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'string'
    }
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    },
    bannedFromViews: !0
  }, {
    name: 'resourceId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'resourceType',
    type: {
      kind: 'enum',
      name: 'PinnedFileV2ResourceType'
    }
  }, {
    name: 'creatorId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'description',
    type: {
      kind: 'objects',
      name: _$$Y.CommentMessageMeta
    },
    embedded: !0,
    nullable: !0
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'openCount',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'file',
    type: {
      kind: 'object',
      name: _$$Y.File
    },
    nullable: !0,
    filter: ['key', '=', createParentRef('fileKey')],
    checkCanRead: {
      fieldName: 'canAccess',
      userId: createSessionRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId'),
      linkAccessOverrideKey: null
    }
  }, {
    name: 'creator',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    nullable: !0,
    filter: ['id', '=', createParentRef('creatorId')]
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'sessionId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }, {
      name: 'anonymousUserId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      resourceType: NULL_FIELD_REF,
      resourceId: NULL_FIELD_REF,
      file: {
        id: NULL_FIELD_REF,
        team: {
          workspace: {
            id: NULL_FIELD_REF
          }
        },
        canViewV3: [{
          userId: createViewRef('userId'),
          sessionId: createViewRef('sessionId'),
          anonymousUserId: createViewRef('anonymousUserId')
        }, NULL_FIELD_REF],
        canAccess: [{
          userId: createViewRef('userId'),
          sessionId: createViewRef('sessionId'),
          anonymousUserId: createViewRef('anonymousUserId'),
          linkAccessOverrideKey: null
        }, NULL_FIELD_REF],
        isWorkspaceVisible: [{
          userId: createViewRef('userId'),
          sessionId: createViewRef('sessionId'),
          anonymousUserId: createViewRef('anonymousUserId')
        }, NULL_FIELD_REF],
        canViewWorkspacePin: [{
          userId: createViewRef('userId'),
          sessionId: createViewRef('sessionId'),
          anonymousUserId: createViewRef('anonymousUserId')
        }, NULL_FIELD_REF],
        trashedAt: NULL_FIELD_REF,
        currentBaseOrgUser: [{
          userId: createViewRef('userId')
        }, {
          workspaceUsers: {
            workspaceId: NULL_FIELD_REF
          }
        }]
      }
    }
  }]
};
let uo = {
  name: _$$Y.PinnedPlugin,
  permissionRequired: !1,
  embedded: !0,
  fields: [{
    name: 'pluginId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'inherited',
    type: {
      kind: 'bool'
    },
    nullable: !0
  }, {
    name: 'plugin',
    type: {
      kind: 'object',
      name: _$$Y.Plugin
    },
    nullable: !0,
    filter: ['id', '=', createParentRef('pluginId')]
  }]
};
let ul = {
  name: _$$Y.PlanConnectionCount,
  permissionRequired: !1,
  embedded: !0,
  fields: [{
    name: 'id',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'planKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'connectionCount',
    type: {
      kind: 'int'
    },
    nullable: !0
  }]
};
let ud = {
  name: _$$Y.PlanKey,
  permissionRequired: !1,
  computed: !0,
  embedded: !0,
  fields: [{
    name: 'parentId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'type',
    type: {
      kind: 'enum',
      name: 'PlanType'
    }
  }]
};
let uc = {
  name: _$$Y.PlanProperties,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'property',
    type: {
      kind: 'string'
    }
  }, {
    name: 'value',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'planId',
    type: {
      kind: 'string'
    }
  }, {
    name: 'planType',
    type: {
      kind: 'string'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }]
};
let uu = {
  name: 'PlanUserMembershipRecordMetadata',
  permissionRequired: !1,
  embedded: !0,
  fields: [{
    name: 'previous_team_name',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'previous_team_id',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }]
};
let up = {
  name: _$$Y.PlanUserMembershipRecord,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'planParentId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'planParentType',
    type: {
      kind: 'enum',
      name: 'PlanParentClass'
    }
  }, {
    name: 'planUserId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'source',
    type: {
      kind: 'enum',
      name: 'PlanUserMembershipRecordSource'
    },
    typechecked: !1
  }, {
    name: 'actorId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'resourceType',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'resourceId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'resourceName',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'actor',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    filter: ['id', '=', createParentRef('actorId')],
    nullable: !0
  }, {
    name: 'metadata',
    type: {
      kind: 'object',
      name: uu.name
    },
    nullable: !0,
    embedded: !0
  }]
};
let um = {
  name: _$$Y.PlanUserUpgrade,
  permissionRequired: !1,
  computed: !0,
  embedded: !0,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'downgradedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'downgradeReason',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'billableProductKey',
    type: {
      kind: 'enum',
      name: 'BillableProductKey'
    },
    nullable: !0
  }]
};
let uh = {
  name: _$$Y.PlanUserKey,
  permissionRequired: !1,
  computed: !0,
  embedded: !0,
  fields: [{
    name: 'parentId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'type',
    type: {
      kind: 'enum',
      name: 'PlanUserType'
    }
  }]
};
let ug = {
  name: _$$Y.Plugin,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'currentPluginVersionId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'categoryId',
    type: {
      kind: 'uuid'
    },
    nullable: !0
  }, {
    name: 'unpublishedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'supportContact',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'approvedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0,
    deprecated: {
      reason: 'Column was dropped from the database',
      date: '2023-04-25'
    }
  }, {
    name: 'installCount',
    type: {
      kind: 'int'
    }
  }, {
    name: 'likeCount',
    type: {
      kind: 'int'
    }
  }, {
    name: 'publishingStatus',
    type: {
      kind: 'enum',
      name: 'PublishingStatus'
    },
    nullable: !0
  }, {
    name: 'viewCount',
    type: {
      kind: 'int'
    }
  }, {
    name: 'blockedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'profileId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'commentCount',
    type: {
      kind: 'int'
    },
    nullable: !0
  }, {
    name: 'hideRelatedContentByOthers',
    type: {
      kind: 'bool'
    },
    nullable: !0
  }, {
    name: 'isPublic',
    type: {
      kind: 'bool'
    },
    nullable: !0
  }, {
    name: 'isWidget',
    type: {
      kind: 'bool'
    },
    nullable: !0
  }, {
    name: 'isInspect',
    type: {
      kind: 'bool'
    },
    nullable: !0
  }, {
    name: 'isSlides',
    type: {
      kind: 'bool'
    },
    nullable: !0
  }, {
    name: 'widgetsWhitelistEnforced',
    type: {
      kind: 'bool'
    },
    nullable: !0
  }, {
    name: 'pluginsWhitelistEnforced',
    type: {
      kind: 'bool'
    },
    nullable: !0
  }, {
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'monetizedResourceMetadataId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'thirdPartyM10nStatus',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'monetizationStatus',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'uniqueRunCount',
    type: {
      kind: 'int'
    }
  }, {
    name: 'pluginEditorType',
    type: {
      kind: 'int'
    },
    nullable: !0
  }, {
    name: 'commentsSetting',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'publishingStatusUpdatedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'isSeoIndexingAllowed',
    type: {
      kind: 'bool'
    },
    nullable: !0
  }, {
    name: 'profile',
    type: {
      kind: 'object',
      name: _$$Y.Profile
    },
    filter: ['id', '=', createParentRef('profileId')]
  }, {
    name: 'currentPluginVersion',
    type: {
      kind: 'object',
      name: _$$Y.PluginVersion
    },
    nullable: !0,
    filter: ['id', '=', createParentRef('currentPluginVersionId')]
  }, {
    name: 'installedPlugins',
    type: {
      kind: 'objects',
      name: _$$Y.PluginInstall
    },
    args: [{
      name: 'initialPageSize',
      type: {
        kind: 'int'
      }
    }],
    filter: ['orgId', '=', createParentRef('orgId')],
    expectedMaxCount: 1e4
  }, {
    name: 'monetizedResourceMetadata',
    type: {
      kind: 'object',
      name: _$$Y.MonetizedResourceMetadata
    },
    filter: ['id', '=', createParentRef('monetizedResourceMetadataId')],
    nullable: !0
  }, {
    name: 'userMonetizationMetadata',
    type: {
      kind: 'object',
      name: _$$Y.UserMonetizationMetadata
    },
    filter: ['userId', '=', createParentRef('userId')],
    nullable: !0
  }, {
    name: 'communityResourcePayment',
    type: {
      kind: 'object',
      name: _$$Y.CommunityResourcePayment
    },
    nullable: !0,
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    filter: {
      and: [['monetizedResourceMetadataId', '=', createParentRef('monetizedResourceMetadataId')], ['userId', '=', createFieldRef('userId')], ['userId', '<>', null]]
    }
  }, {
    name: 'orgWhitelist',
    type: {
      kind: 'object',
      name: _$$Y.AllowlistedPlugin
    },
    nullable: !0,
    args: [{
      name: 'orgId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    filter: {
      and: [['orgId', '=', createFieldRef('orgId')], ['pluginId', '=', createParentRef('id')]]
    }
  }, {
    name: 'pluginRequests',
    type: {
      kind: 'objects',
      name: _$$Y.PluginRequest
    },
    args: [{
      name: 'orgId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    filter: {
      and: [['orgId', '=', createFieldRef('orgId')], ['pluginId', '=', createParentRef('id')]]
    },
    orderBy: [['createdAt', 'DESC']],
    expectedMaxCount: 200,
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'communityPublishers',
    type: {
      kind: 'objects',
      name: _$$Y.CommunityPublisher
    },
    args: [{
      name: 'initialPageSize',
      type: {
        kind: 'int'
      }
    }],
    nullable: !0,
    filter: {
      and: [['pluginId', '=', createParentRef('id')], ['isPending', '=', !1]]
    },
    expectedMaxCount: 100
  }, {
    name: 'user',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    nullable: !0,
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    filter: ['id', '=', createFieldRef('userId')]
  }, {
    name: 'creator',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    nullable: !0,
    filter: ['id', '=', createParentRef('userId')]
  }, {
    name: 'currentUser',
    nullable: !0,
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    filter: ['id', '=', createFieldRef('userId')]
  }, {
    name: 'currentBaseOrgUser',
    nullable: !0,
    type: {
      kind: 'object',
      name: _$$Y.BaseOrgUser
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    filter: {
      and: [['userId', '=', createFieldRef('userId')], ['orgId', '=', createParentRef('orgId')]]
    }
  }, {
    name: '_org',
    type: {
      kind: 'object',
      name: _$$Y.Org
    },
    nullable: !0,
    args: [{
      name: 'orgId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    bannedFromViews: !0,
    filter: ['id', '=', createFieldRef('orgId')]
  }, {
    name: 'org',
    type: {
      kind: 'object',
      name: _$$Y.Org
    },
    nullable: !0,
    bannedFromViews: !0,
    filter: ['id', '=', createParentRef('orgId')]
  }, {
    name: '_org_permsV2',
    type: {
      kind: 'object',
      name: _$$Y.Org
    },
    filter: ['id', '=', createParentRef('orgId')],
    nullable: !0,
    bannedFromViews: !0
  }, {
    name: 'pluginCommunityPublisher',
    type: {
      kind: 'object',
      name: _$$Y.PluginCommunityPublisher
    },
    nullable: !0,
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    filter: {
      and: [['userId', '=', createFieldRef('userId')], ['pluginId', '=', createParentRef('id')]]
    }
  }, {
    name: 'viewableInEditor',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'orgId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: mergeFieldRefs(_$$tt['PLUGIN::CAN_VIEW'], {
      id: NULL_FIELD_REF,
      publishingStatus: NULL_FIELD_REF,
      isPublic: NULL_FIELD_REF,
      orgId: NULL_FIELD_REF,
      isWidget: NULL_FIELD_REF,
      user: [{
        userId: createViewRef('userId')
      }, {
        id: NULL_FIELD_REF,
        privilegedOrgUser: [{
          orgId: createViewRef('orgId')
        }, {
          id: NULL_FIELD_REF,
          permission: NULL_FIELD_REF
        }],
        adminAt: NULL_FIELD_REF
      }],
      _org: [{
        orgId: createViewRef('orgId')
      }, {
        id: NULL_FIELD_REF,
        pluginsWhitelistEnforced: NULL_FIELD_REF,
        widgetsWhitelistEnforced: NULL_FIELD_REF,
        publicPluginsAllowed: NULL_FIELD_REF
      }],
      orgWhitelist: [{
        orgId: createViewRef('orgId')
      }, {
        id: NULL_FIELD_REF
      }]
    })
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'orgId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: mergeFieldRefs(_$$tt['PLUGIN::CAN_VIEW'], {
      id: NULL_FIELD_REF,
      publishingStatus: NULL_FIELD_REF,
      isPublic: NULL_FIELD_REF,
      orgId: NULL_FIELD_REF,
      isWidget: NULL_FIELD_REF,
      user: [{
        userId: createViewRef('userId')
      }, {
        id: NULL_FIELD_REF,
        privilegedOrgUser: [{
          orgId: createViewRef('orgId')
        }, {
          id: NULL_FIELD_REF,
          permission: NULL_FIELD_REF
        }],
        adminAt: NULL_FIELD_REF
      }],
      _org: [{
        orgId: createViewRef('orgId')
      }, {
        id: NULL_FIELD_REF,
        pluginsWhitelistEnforced: NULL_FIELD_REF,
        widgetsWhitelistEnforced: NULL_FIELD_REF,
        publicPluginsAllowed: NULL_FIELD_REF
      }],
      orgWhitelist: [{
        orgId: createViewRef('orgId')
      }, {
        id: NULL_FIELD_REF
      }]
    })
  }, {
    name: 'pluginRun',
    type: {
      kind: 'object',
      name: _$$Y.PluginRun
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: {
      and: [['pluginId', '=', createParentRef('id')], ['userId', '=', createFieldRef('userId')], ['userId', '<>', null]]
    }
  }, {
    name: 'badges',
    type: {
      kind: 'objects',
      name: _$$Y.CommunityBadge
    },
    args: [],
    nullable: !0,
    filter: ['pluginId', '=', createParentRef('id')],
    expectedMaxCount: 200
  }, {
    name: 'currentUserFirstRanAt',
    type: {
      kind: 'string'
    },
    nullable: !0,
    computed: !0,
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    dependencies: {
      pluginRun: [{
        userId: createViewRef('userId')
      }, {
        id: NULL_FIELD_REF,
        createdAt: NULL_FIELD_REF,
        userId: NULL_FIELD_REF
      }]
    }
  }, {
    name: 'installedPluginForUser',
    type: {
      kind: 'object',
      name: _$$Y.PluginInstall
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    filter: {
      and: [['userId', '=', createFieldRef('userId')], ['pluginId', '=', createParentRef('id')]]
    },
    nullable: !0
  }, {
    name: 'installedPluginsForUser',
    type: {
      kind: 'objects',
      name: _$$Y.PluginInstall
    },
    filter: ['userId', '=', createParentRef('userId')],
    nullable: !0,
    expectedMaxCount: 1e4
  }, {
    name: 'profileInstallStatus',
    type: {
      kind: 'int'
    },
    nullable: !0,
    computed: !0,
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    dependencies: {
      id: NULL_FIELD_REF,
      publishingStatus: NULL_FIELD_REF,
      installedPluginForUser: [{
        userId: createViewRef('userId')
      }, {
        id: NULL_FIELD_REF,
        pluginId: NULL_FIELD_REF
      }]
    }
  }, {
    name: 'redirectThumbnailUrl',
    type: {
      kind: 'string'
    },
    nullable: !0,
    computed: !0,
    dependencies: {
      id: NULL_FIELD_REF
    }
  }, {
    name: 'thumbnailUrl',
    type: {
      kind: 'string'
    },
    nullable: !0,
    computed: !0,
    dependencies: {
      currentPluginVersion: {
        coverImagePath: NULL_FIELD_REF
      }
    }
  }, ...dm]
};
let uf = {
  name: _$$Y.PluginCodegenSettings,
  permissionRequired: !1,
  embedded: !0,
  fields: [{
    name: 'language',
    type: {
      kind: 'object',
      name: _$$Y.CodeExtensionLanguage
    },
    embedded: !0
  }, {
    name: 'preferences',
    type: {
      kind: 'object',
      name: _$$Y.CodeExtensionPreferences
    },
    embedded: !0
  }, {
    name: 'behavior',
    type: {
      kind: 'enum',
      name: 'CodegenSettingsBehavior'
    }
  }]
};
let u_ = {
  name: _$$Y.PluginInstall,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'pluginId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'pluginVersionId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'plugin',
    type: {
      kind: 'object',
      name: _$$Y.Plugin
    },
    nullable: !0,
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'orgId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    checkCanRead: {
      userId: createFieldRef('userId'),
      orgId: createFieldRef('orgId')
    },
    filter: {
      and: [['id', '=', createParentRef('pluginId')], ['blockedAt', '=', null], ['unpublishedAt', '=', null]]
    }
  }, {
    name: '_pinnedStatusRaw',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'pinnedStatus',
    type: {
      kind: 'enum',
      name: 'PinnedStatus'
    },
    computed: !0,
    nullable: !0,
    dependencies: {
      _pinnedStatusRaw: NULL_FIELD_REF
    }
  }]
};
let uA = {
  name: _$$Y.PluginPreferences,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'preferences',
    type: {
      kind: 'object',
      name: _$$Y.PluginPreferencesConfig
    },
    nullable: !0,
    embedded: !0
  }, {
    name: 'baseOrgUser',
    type: {
      kind: 'object',
      name: _$$Y.BaseOrgUser
    },
    args: [{
      name: 'currentUserId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'targetOrgId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: {
      and: [['userId', '=', createFieldRef('currentUserId')], ['orgId', '=', createFieldRef('targetOrgId')]]
    }
  }, {
    name: 'autoRunPluginId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'autoRunBehavior',
    type: {
      kind: 'enum',
      name: 'AutoRunBehavior'
    }
  }, {
    name: 'autoRunPlugin',
    type: {
      kind: 'object',
      name: _$$Y.Plugin
    },
    nullable: !0,
    filter: ['id', '=', createParentRef('autoRunPluginId')]
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'targetOrgId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'targetUserId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'currentUserId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      baseOrgUser: [{
        currentUserId: createFieldRef('currentUserId'),
        targetOrgId: createFieldRef('targetOrgId')
      }, {
        id: NULL_FIELD_REF,
        orgId: NULL_FIELD_REF
      }]
    }
  }, {
    name: 'autoRunEnabled',
    type: {
      kind: 'bool'
    },
    nullable: !0
  }, {
    name: 'codegenEnabled',
    type: {
      kind: 'bool'
    },
    nullable: !0
  }, {
    name: 'pinnedPluginsEnabled',
    type: {
      kind: 'bool'
    },
    nullable: !0
  }]
};
let uy = {
  name: _$$Y.PluginPreferencesConfig,
  permissionRequired: !1,
  embedded: !0,
  fields: [{
    name: 'pins',
    type: {
      kind: 'objects',
      name: _$$Y.PinnedPlugin
    },
    embedded: !0
  }, {
    name: 'removedInheritedPins',
    type: {
      kind: 'list',
      ofType: {
        kind: 'bigint'
      }
    }
  }, {
    name: 'codegenSettings',
    type: {
      kind: 'object',
      name: _$$Y.PluginCodegenSettings
    },
    nullable: !0,
    embedded: !0
  }]
};
let ub = {
  name: _$$Y.PluginCommunityPublisher,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'hubFileId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'pluginId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'profileId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'isPending',
    type: {
      kind: 'bool'
    },
    nullable: !1
  }]
};
let uv = {
  name: _$$Y.PluginRequest,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'pluginId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'orgUserId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'workspaceId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'plugin',
    type: {
      kind: 'object',
      name: _$$Y.Plugin
    },
    filter: ['id', '=', createParentRef('pluginId')],
    nullable: !0
  }, {
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'orgUser',
    type: {
      kind: 'object',
      name: _$$Y.OrgUser
    },
    filter: ['id', '=', createParentRef('orgUserId')],
    nullable: !0
  }, {
    name: '_org',
    type: {
      kind: 'object',
      name: _$$Y.Org
    },
    filter: ['id', '=', createParentRef('orgId')],
    bannedFromViews: !0
  }, {
    name: 'status',
    type: {
      kind: 'string'
    }
  }, {
    name: 'declineNote',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'requesterNote',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'workspaceAllowlistedPlugins',
    type: {
      kind: 'objects',
      name: _$$Y.AllowlistedPlugin
    },
    filter: {
      and: [['orgId', '=', createParentRef('orgId')], ['pluginId', '=', createParentRef('pluginId')], ['allowlistGroupType', '=', 'Workspace']]
    },
    expectedMaxCount: 200
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      _org: {
        canAdmin: [{
          userId: createFieldRef('userId')
        }, NULL_FIELD_REF]
      }
    }
  }]
};
let uI = {
  name: _$$Y.PluginRun,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'pluginId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }]
};
let uE = {
  name: _$$Y.PluginSecurityFormResponses,
  permissionRequired: !0,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'pluginId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'status',
    type: {
      kind: 'enum',
      name: 'PluginSecurityFormResponseStatus'
    }
  }, {
    name: 'formVersion',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'responses',
    type: {
      kind: 'string'
    }
  }, {
    name: 'plugin',
    type: {
      kind: 'object',
      name: _$$Y.Plugin
    },
    filter: ['id', '=', createParentRef('pluginId')]
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      status: NULL_FIELD_REF,
      plugin: {
        userId: NULL_FIELD_REF
      }
    }
  }]
};
let ux = {
  name: _$$Y.PluginVersion,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'pluginId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'plugin',
    type: {
      kind: 'object',
      name: _$$Y.Plugin
    },
    filter: ['id', '=', createParentRef('pluginId')]
  }, {
    name: 'name',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'description',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'tagline',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'creatorPolicy',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'version',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'iconPath',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'coverImagePath',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'codePath',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'resourceStagingSignature',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'manifest',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'releaseNotes',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'playgroundFileVersionId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'snapshotPath',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'iconUrl',
    type: {
      kind: 'string'
    },
    computed: !0,
    nullable: !0,
    dependencies: {
      iconPath: NULL_FIELD_REF
    }
  }, {
    name: 'coverImageUrl',
    type: {
      kind: 'string'
    },
    computed: !0,
    nullable: !0,
    dependencies: {
      coverImagePath: NULL_FIELD_REF
    }
  }, {
    name: 'playgroundFigFileKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'hasPlaygroundFile',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      playgroundFigFileKey: NULL_FIELD_REF
    }
  }]
};
let uS = {
  name: _$$Y.PrivilegedOrgUser,
  permissionRequired: !1,
  fields: [...O, {
    name: 'user',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    filter: ['id', '=', createParentRef('userId')]
  }, {
    name: 'org',
    type: {
      kind: 'object',
      name: _$$Y.Org
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    filter: ['id', '=', createParentRef('orgId')],
    checkCanRead: {
      userId: createFieldRef('userId')
    },
    nullable: !0
  }, {
    name: 'licenseGroupAdminExistsMetric',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      isLicenseGroupAdmin: NULL_FIELD_REF,
      licenseGroupAdminExists: NULL_FIELD_REF
    },
    deprecated: {
      reason: 'Temporarily used during exists template rollout, will be removed as soon as backwards compatibility is satisfied',
      date: '2025-07-18'
    }
  }]
};
let uw = {
  name: _$$Y.UpgradeApprovalSettings,
  permissionRequired: !1,
  embedded: !0,
  fields: [{
    name: 'developer',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'collaborator',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'expert',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'content',
    type: {
      kind: 'string'
    },
    nullable: !0
  }]
};
let uC = {
  name: _$$Y.ProAccountTypeRequest,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'requestableUserId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'requestableUserType',
    type: {
      kind: 'string'
    }
  }, {
    name: 'status',
    type: {
      kind: 'string'
    }
  }, {
    name: '_editorTypeRaw',
    type: {
      kind: 'int'
    }
  }, {
    name: 'editorType',
    type: {
      kind: 'enum',
      name: 'EditorType'
    },
    computed: !0,
    nullable: !0,
    dependencies: {
      _editorTypeRaw: NULL_FIELD_REF
    }
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    },
    nullable: !0,
    bannedFromViews: !0
  }]
};
let uT = {
  name: _$$Y.Profile,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'profileHandle',
    type: {
      kind: 'string'
    }
  }, {
    name: 'publicAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'website',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'description',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'location',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'twitter',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'instagram',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'followerCount',
    type: {
      kind: 'int'
    }
  }, {
    name: 'followingCount',
    type: {
      kind: 'int'
    }
  }, {
    name: 'coverImagePath',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'pronouns',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'badges',
    type: {
      kind: 'objects',
      name: _$$Y.CommunityBadge
    },
    filter: ['profileId', '=', createParentRef('id')],
    expectedMaxCount: 200
  }, {
    name: 'communityHubFollowing',
    type: {
      kind: 'objects',
      name: _$$Y.CommunityHubFollow
    },
    filter: ['followerProfileId', '=', createParentRef('id')],
    expectedMaxCount: 1e4
  }, {
    name: 'communityHubFollowed',
    type: {
      kind: 'objects',
      name: _$$Y.CommunityHubFollow
    },
    filter: ['followedProfileId', '=', createParentRef('id')],
    expectedMaxCount: 200
  }, {
    name: 'entityType',
    type: {
      kind: 'string'
    },
    computed: !0,
    dependencies: {
      primaryUserId: NULL_FIELD_REF,
      teamId: NULL_FIELD_REF,
      orgId: NULL_FIELD_REF
    }
  }, {
    name: 'currentUser',
    nullable: !0,
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    filter: ['id', '=', createFieldRef('userId')]
  }, {
    name: 'currentUserIsFollowing',
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      id: NULL_FIELD_REF,
      currentUser: [{
        userId: createFieldRef('userId')
      }, {
        communityProfile: {
          communityHubFollowing: {
            followerProfileId: NULL_FIELD_REF,
            followedProfileId: NULL_FIELD_REF
          }
        }
      }]
    }
  }, {
    name: 'currentUserIsFollowed',
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      id: NULL_FIELD_REF,
      communityHubFollowing: {
        followerProfileId: NULL_FIELD_REF,
        followedProfileId: NULL_FIELD_REF
      },
      currentUser: [{
        userId: createFieldRef('userId')
      }, {
        id: NULL_FIELD_REF,
        profileId: NULL_FIELD_REF
      }]
    }
  }, {
    name: 'name',
    type: {
      kind: 'string'
    },
    computed: !0,
    dependencies: {
      user: {
        handle: NULL_FIELD_REF
      },
      team: {
        name: NULL_FIELD_REF
      },
      org: {
        name: NULL_FIELD_REF
      },
      entityType: NULL_FIELD_REF
    }
  }, {
    name: 'teamId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'primaryUserId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'user',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    filter: ['id', '=', createParentRef('primaryUserId')],
    nullable: !0,
    checkCanRead: {
      fieldName: 'canAdminProfileUser',
      userId: createSessionRef('userId')
    }
  }, {
    name: 'associatedUsers',
    type: {
      kind: 'objects',
      name: _$$Y.User
    },
    filter: ['profileId', '=', createParentRef('id')],
    checkCanRead: {
      fieldName: 'canAdminProfileUser',
      userId: createSessionRef('userId')
    },
    expectedMaxCount: 200
  }, {
    name: 'team',
    type: {
      kind: 'object',
      name: _$$Y.Team
    },
    filter: {
      and: [['id', '=', createParentRef('teamId')]]
    },
    nullable: !0,
    shadowCheckCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'org',
    type: {
      kind: 'object',
      name: _$$Y.OrgInfo
    },
    filter: ['id', '=', createParentRef('orgId')],
    nullable: !0,
    shadowCheckCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'imgUrl',
    type: {
      kind: 'string'
    },
    computed: !0,
    nullable: !0,
    dependencies: {
      user: {
        imgUrl: NULL_FIELD_REF
      },
      org: {
        imgUrl: NULL_FIELD_REF
      },
      team: {
        imgUrl: NULL_FIELD_REF
      }
    }
  }, {
    name: 'imgUrls',
    type: {
      kind: 'map',
      valueType: {
        kind: 'string'
      }
    },
    computed: !0,
    dependencies: {
      imgUrl: NULL_FIELD_REF,
      user: {
        profile: {
          images: NULL_FIELD_REF
        }
      },
      org: {
        imgUrlsTransformed: NULL_FIELD_REF
      },
      team: {
        imgUrlsTransformed: NULL_FIELD_REF
      }
    }
  }]
};
let uk = {
  type: {
    kind: 'object',
    name: _$$Y.ProjectRole
  },
  filter: {
    and: [['resourceId', '=', createParentRef('id')], ['resourceType', '=', 'folder'], ['level', '=', e6.OWNER]]
  },
  nullable: !0
};
let uR = {
  type: {
    kind: 'object',
    name: _$$Y.ProjectRole
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  nullable: !0,
  filter: {
    and: [['userId', '=', createFieldRef('userId')], ['resourceId', '=', createParentRef('id')], ['resourceType', '=', 'folder']]
  }
};
let uN = {
  name: _$$Y.Project,
  permissionRequired: !0,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'isAbandonedDrafts',
    type: {
      kind: 'bool'
    }
  }, {
    name: 'abandonedDraftUserName',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'abandonedDraftUserEmail',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'abandonedDraftUserRemovedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'path',
    type: {
      kind: 'string'
    }
  }, {
    name: 'description',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'deletedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'viewOnlyAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0,
    typechecked: !1
  }, {
    name: 'inviteOnlyAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'trashedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'trashedUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'teamId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'scheme',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'sharingAudienceControl',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'sharingAudienceControlComputed',
    type: {
      kind: 'enum',
      name: 'LinkAccess'
    },
    computed: !0,
    dependencies: {
      sharingAudienceControl: NULL_FIELD_REF,
      viewOnlyAt: NULL_FIELD_REF,
      inviteOnlyAt: NULL_FIELD_REF
    }
  }, {
    name: 'teamAccess',
    type: {
      kind: 'enum',
      name: 'TeamAccess'
    },
    computed: !0,
    dependencies: {
      viewOnlyAt: NULL_FIELD_REF,
      inviteOnlyAt: NULL_FIELD_REF
    }
  }, {
    name: 'parentPath',
    type: {
      kind: 'string'
    },
    computed: !0,
    dependencies: {
      path: NULL_FIELD_REF
    }
  }, {
    name: 'name',
    type: {
      kind: 'string'
    },
    computed: !0,
    dependencies: {
      path: NULL_FIELD_REF
    }
  }, {
    name: 'isInviteOnly',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      inviteOnlyAt: NULL_FIELD_REF
    }
  }, {
    name: 'isViewOnly',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      viewOnlyAt: NULL_FIELD_REF
    }
  }, {
    name: 'roles',
    type: {
      kind: 'objects',
      name: _$$Y.ProjectRole
    },
    filter: {
      and: [['resourceId', '=', createParentRef('id')], ['resourceType', '=', 'folder']]
    },
    expectedMaxCount: 1e3
  }, {
    name: 'ownerRole',
    ...uk
  }, {
    name: 'folderOwnerRole',
    ...uk
  }, {
    name: 'isOwned',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      ownerRole: {
        id: NULL_FIELD_REF
      }
    }
  }, {
    name: 'favoriteProject',
    type: {
      kind: 'object',
      name: _$$Y.FavoritedProject
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: {
      and: [['resourceId', '=', createParentRef('id')], ['resourceType', '=', 'folder'], ['userId', '=', createFieldRef('userId')], ['orgId', '=', createParentRef('orgId')]]
    },
    deprecated: {
      reason: 'This field is invalid since orgId is only defined on org draft folders, which cannot be favorited',
      date: '2025-02-24'
    }
  }, {
    name: 'isFavorited',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      favoriteProject: [{
        userId: createViewRef('userId')
      }, {
        id: NULL_FIELD_REF
      }]
    },
    deprecated: {
      reason: 'This field is invalid since it indirectly relies on orgId, which is only defined on org draft folders. Org draft folders cannot be favorited',
      date: '2025-02-24'
    }
  }, {
    name: 'pinnedFiles',
    type: {
      kind: 'objects',
      name: _$$Y.PinnedFile
    },
    filter: ['folderId', '=', createParentRef('id')],
    expectedMaxCount: 1e3
  }, {
    name: 'files',
    type: {
      kind: 'objects',
      name: _$$Y.File
    },
    filter: ['folderId', '=', createParentRef('id')],
    checkCanRead: {
      fieldName: 'canAccess',
      userId: createSessionRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId'),
      linkAccessOverrideKey: null
    },
    nullable: !0,
    expectedMaxCount: 1e3
  }, {
    name: 'fileUpdates',
    type: {
      kind: 'objects',
      name: _$$Y.File
    },
    args: [{
      name: 'updatedAtTimestamp',
      type: {
        kind: 'datetime'
      }
    }],
    checkCanRead: {
      fieldName: 'canAccess',
      userId: createSessionRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId'),
      linkAccessOverrideKey: null
    },
    filter: {
      and: [['folderId', '=', createParentRef('id')], ['deletedAt', '=', null], ['updatedAt', '>', createFieldRef('updatedAtTimestamp')]]
    },
    expectedMaxCount: 2e3
  }, {
    name: 'untrashedFiles',
    type: {
      kind: 'objects',
      name: _$$Y.File
    },
    filter: {
      and: [['folderId', '=', createParentRef('id')], ['deletedAt', '=', null], ['trashedAt', '=', null]]
    },
    nullable: !0,
    checkCanRead: {
      fieldName: 'canAccess',
      userId: createSessionRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId'),
      linkAccessOverrideKey: null
    },
    expectedMaxCount: 1e3
  }, {
    name: 'trashedWithFolderFiles',
    type: {
      kind: 'objects',
      name: _$$Y.File
    },
    filter: {
      and: [['folderId', '=', createParentRef('id')], ['deletedAt', '=', null], ['trashedAt', '<>', null], ['trashedWithParent', '=', Go1.FOLDER]]
    },
    nullable: !0,
    checkCanRead: {
      fieldName: 'canAccess',
      userId: createSessionRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId'),
      linkAccessOverrideKey: null
    },
    expectedMaxCount: 1e3
  }, {
    name: 'undeletedFiles',
    type: {
      kind: 'objects',
      name: _$$Y.File
    },
    filter: {
      and: [['folderId', '=', createParentRef('id')], ['deletedAt', '=', null]]
    },
    nullable: !0,
    checkCanRead: {
      fieldName: 'canAccess',
      userId: createSessionRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId'),
      linkAccessOverrideKey: null
    },
    expectedMaxCount: 1e3
  }, {
    name: 'undeletedFilesHighLimit',
    type: {
      kind: 'objects',
      name: _$$Y.File
    },
    filter: {
      and: [['folderId', '=', createParentRef('id')], ['deletedAt', '=', null]]
    },
    checkCanRead: {
      fieldName: 'canAccess',
      userId: createSessionRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId'),
      linkAccessOverrideKey: null
    },
    nullable: !0,
    expectedMaxCount: 1e4
  }, {
    name: 'lastModifiedAt',
    type: {
      kind: 'string'
    },
    computed: !0,
    dependencies: {
      updatedAt: NULL_FIELD_REF,
      untrashedFiles: {
        touchedAt: NULL_FIELD_REF
      }
    }
  }, {
    name: 'whiteboardFiles',
    type: {
      kind: 'objects',
      name: _$$Y.File
    },
    filter: {
      and: [['folderId', '=', createParentRef('id')], ['_editorTypeRaw', '=', 1]]
    },
    checkCanRead: {
      fieldName: 'canAccess',
      userId: createSessionRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId'),
      linkAccessOverrideKey: null
    },
    nullable: !0,
    expectedMaxCount: 1e3
  }, {
    name: 'siteFiles',
    type: {
      kind: 'objects',
      name: _$$Y.File
    },
    filter: {
      and: [['folderId', '=', createParentRef('id')], ['_editorTypeRaw', '=', 3]]
    },
    checkCanRead: {
      fieldName: 'canAccess',
      userId: createSessionRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId'),
      linkAccessOverrideKey: null
    },
    nullable: !0,
    expectedMaxCount: 1e3
  }, {
    name: 'figmakeFiles',
    type: {
      kind: 'objects',
      name: _$$Y.File
    },
    filter: {
      and: [['folderId', '=', createParentRef('id')], ['_editorTypeRaw', '=', 5]]
    },
    checkCanRead: {
      fieldName: 'canAccess',
      userId: createSessionRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId'),
      linkAccessOverrideKey: null
    },
    nullable: !0,
    expectedMaxCount: 1e3
  }, {
    name: 'hasPublishedSite',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      siteFiles: {
        isPublishedSite: NULL_FIELD_REF
      },
      figmakeFiles: {
        isPublishedSite: NULL_FIELD_REF
      }
    }
  }, {
    name: 'filesPartial',
    type: {
      kind: 'objects',
      name: _$$Y.File
    },
    args: [{
      name: 'initialPageSize',
      type: {
        kind: 'int'
      }
    }],
    filter: {
      and: [['folderId', '=', createParentRef('id')], ['deletedAt', '=', null], ['trashedAt', '=', null]]
    },
    checkCanRead: {
      fieldName: 'canAccess',
      userId: createSessionRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId'),
      linkAccessOverrideKey: null
    },
    nullable: !0,
    expectedMaxCount: 1e3
  }, {
    name: 'isEmpty',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      filesPartial: [{
        initialPageSize: 1
      }, {
        id: NULL_FIELD_REF
      }],
      repos: [{
        initialPageSize: 1
      }, {
        id: NULL_FIELD_REF
      }]
    }
  }, {
    name: 'repos',
    type: {
      kind: 'objects',
      name: _$$Y.Repo
    },
    args: [{
      name: 'initialPageSize',
      type: {
        kind: 'int'
      }
    }],
    filter: {
      and: [['folderId', '=', createParentRef('id')], ['deletedAt', '=', null], ['trashedAt', '=', null]]
    },
    nullable: !0,
    expectedMaxCount: 1e3,
    bannedFromViews: !0
  }, {
    name: 'repoUpdates',
    type: {
      kind: 'objects',
      name: _$$Y.Repo
    },
    args: [{
      name: 'updatedAtTimestamp',
      type: {
        kind: 'datetime'
      }
    }],
    checkCanRead: {
      fieldName: 'canReadV3',
      userId: createSessionRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId')
    },
    filter: {
      and: [['folderId', '=', createParentRef('id')], ['updatedAt', '>', createFieldRef('updatedAtTimestamp')]]
    },
    expectedMaxCount: 2e3
  }, {
    name: 'team',
    nullable: !0,
    type: {
      kind: 'object',
      name: _$$Y.Team
    },
    filter: {
      and: [['id', '=', createParentRef('teamId')]]
    },
    shadowCheckCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'teamV2',
    nullable: !0,
    type: {
      kind: 'object',
      name: _$$Y.Team
    },
    filter: ['id', '=', createParentRef('teamId')],
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'teamLimitedInfo',
    nullable: !0,
    type: {
      kind: 'object',
      name: _$$Y.TeamLimitedInfo
    },
    filter: ['id', '=', createParentRef('teamId')],
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'teamPublicInfo',
    nullable: !0,
    type: {
      kind: 'object',
      name: _$$Y.TeamPublicInfo
    },
    filter: ['id', '=', createParentRef('teamId')]
  }, {
    name: 'org',
    nullable: !0,
    type: {
      kind: 'object',
      name: _$$Y.Org
    },
    filter: {
      and: [['id', '=', createParentRef('orgId')]]
    },
    shadowCheckCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'orgInfoForDraftProjects',
    nullable: !0,
    type: {
      kind: 'object',
      name: _$$Y.OrgInfo
    },
    filter: ['id', '=', createParentRef('orgId')],
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'orgPublicInfoForDraftProjects',
    nullable: !0,
    type: {
      kind: 'object',
      name: _$$Y.OrgPublicInfo
    },
    filter: ['id', '=', createParentRef('orgId')]
  }, {
    name: '_team_permsV2',
    type: {
      kind: 'object',
      name: _$$Y.Team
    },
    nullable: !0,
    filter: ['id', '=', createParentRef('teamId')],
    bannedFromViews: !0
  }, {
    name: '_draftFolderOrg_permsV2',
    type: {
      kind: 'object',
      name: _$$Y.Org
    },
    nullable: !0,
    filter: ['id', '=', createParentRef('orgId')],
    bannedFromViews: !0
  }, {
    name: 'subscription',
    type: {
      kind: 'object',
      name: _$$Y.ProjectSubscription
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: {
      and: [['folderId', '=', createParentRef('id')], ['userId', '=', createFieldRef('userId')]]
    }
  }, {
    name: 'isSubscribed',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      subscription: [{
        userId: createFieldRef('userId')
      }, {
        id: NULL_FIELD_REF
      }]
    }
  }, {
    name: 'roleOnObjectForUser',
    ...uR
  }, {
    name: 'roleOnObjectProjectForUser',
    ...uR
  }, {
    name: 'roleOnObjectTeamForUser',
    type: {
      kind: 'object',
      name: _$$Y.TeamRole
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: {
      and: [['userId', '=', createFieldRef('userId')], ['resourceId', '=', createParentRef('teamId')], ['resourceType', '=', 'team']]
    }
  }, {
    name: 'currentUser',
    nullable: !0,
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    filter: ['id', '=', createFieldRef('userId')]
  }, {
    name: 'userAuthn',
    type: {
      kind: 'object',
      name: _$$Y.UserAuthn
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: ['userId', '=', createFieldRef('userId')],
    bannedFromViews: !0
  }, {
    name: 'currentOrgUser',
    type: {
      kind: 'object',
      name: _$$Y.OrgUser
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: {
      and: [['userId', '=', createFieldRef('userId')], ['orgId', '=', createParentRef('orgId')], ['permission', '<>', 'guest']]
    },
    deprecated: {
      reason: 'Use currentPrivilegedOrgUser (for org drafts folders) or team.currentPrivilegedOrgUser (for folders within teams) instead',
      date: '2025-02-24'
    }
  }, {
    name: 'currentBaseOrgUser',
    type: {
      kind: 'object',
      name: _$$Y.BaseOrgUser
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: {
      and: [['userId', '=', createFieldRef('userId')], ['orgId', '=', createParentRef('id')]]
    },
    deprecated: {
      reason: 'Use currentPrivilegedOrgUser (for org drafts folders) or team.currentBaseOrgUser (for folders within teams) instead',
      date: '2025-02-24'
    }
  }, {
    name: 'currentPrivilegedOrgUser',
    type: {
      kind: 'object',
      name: _$$Y.PrivilegedOrgUser
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: {
      and: [['userId', '=', createFieldRef('userId')], ['orgId', '=', createParentRef('orgId')], ['permission', '<>', 'guest']]
    }
  }, {
    name: 'currentTeamUser',
    type: {
      kind: 'object',
      name: _$$Y.TeamUser
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: {
      and: [['userId', '=', createFieldRef('userId')], ['teamId', '=', createParentRef('teamId')]]
    }
  }, {
    name: 'orgDraftsFolderOwner',
    nullable: !0,
    type: {
      kind: 'object',
      name: _$$Y.OrgUser
    },
    filter: ['draftsFolderId', '=', createParentRef('id')]
  }, {
    name: 'orgDraftsFolderOwnerBaseOrgUser',
    nullable: !0,
    type: {
      kind: 'object',
      name: _$$Y.BaseOrgUser
    },
    filter: ['draftsFolderId', '=', createParentRef('id')]
  }, {
    name: 'teamDraftsFolderOwnerTeamUser',
    nullable: !0,
    type: {
      kind: 'object',
      name: _$$Y.TeamUser
    },
    filter: ['draftsFolderId', '=', createParentRef('id')]
  }, {
    name: '_isAccessRestricted',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'permissionLevel',
      type: {
        kind: 'int'
      }
    }],
    computed: !0,
    dependencies: {
      orgDraftsFolderOwnerBaseOrgUser: {
        userId: NULL_FIELD_REF,
        accountType: NULL_FIELD_REF,
        whiteboardPaidStatus: NULL_FIELD_REF
      },
      currentPrivilegedOrgUser: [{
        userId: createViewRef('userId')
      }, {
        accountType: NULL_FIELD_REF,
        whiteboardPaidStatus: NULL_FIELD_REF
      }],
      currentUser: [{
        userId: createViewRef('userId')
      }, {
        id: NULL_FIELD_REF,
        externalRestrictedOrgId: NULL_FIELD_REF
      }]
    }
  }, {
    name: '_hasProjectAccess',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'permissionLevel',
      type: {
        kind: 'int'
      }
    }],
    computed: !0,
    dependencies: (e => ({
      id: NULL_FIELD_REF,
      currentUser: [{
        userId: createViewRef('userId')
      }, {
        id: NULL_FIELD_REF,
        email: NULL_FIELD_REF,
        emailDomain: NULL_FIELD_REF
      }],
      ownerRole: {
        id: NULL_FIELD_REF,
        level: NULL_FIELD_REF
      },
      deletedAt: NULL_FIELD_REF,
      inviteOnlyAt: NULL_FIELD_REF,
      viewOnlyAt: NULL_FIELD_REF,
      _isAccessRestricted: [{
        userId: createViewRef('userId'),
        permissionLevel: e
      }, NULL_FIELD_REF],
      roleOnObjectForUser: [{
        userId: createViewRef('userId')
      }, {
        id: NULL_FIELD_REF,
        level: NULL_FIELD_REF
      }],
      orgDraftsFolderOwnerBaseOrgUser: {
        userId: NULL_FIELD_REF
      },
      currentPrivilegedOrgUser: [{
        userId: createViewRef('userId')
      }, {
        userId: NULL_FIELD_REF,
        accountType: NULL_FIELD_REF,
        whiteboardPaidStatus: NULL_FIELD_REF
      }],
      team: {
        id: NULL_FIELD_REF,
        workspaceId: NULL_FIELD_REF,
        roleOnObjectForUser: [{
          userId: createViewRef('userId')
        }, {
          id: NULL_FIELD_REF,
          level: NULL_FIELD_REF
        }],
        _hasTeamAccess: [{
          userId: createViewRef('userId'),
          permissionLevel: e
        }, NULL_FIELD_REF]
      }
    }))(createViewRef('permissionLevel'))
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    permissionName: 'FOLDER::CAN_VIEW',
    dependencies: _$$cy['FOLDER::CAN_VIEW']
  }, {
    name: 'isOrphanedOrgProject',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      path: NULL_FIELD_REF,
      teamId: NULL_FIELD_REF,
      orgId: NULL_FIELD_REF
    }
  }, {
    name: 'isEditingLockedForUser',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      path: NULL_FIELD_REF,
      inviteOnlyAt: NULL_FIELD_REF,
      viewOnlyAt: NULL_FIELD_REF,
      team: {
        id: NULL_FIELD_REF,
        isLockedForUser: [{
          userId: createViewRef('userId')
        }, NULL_FIELD_REF],
        canAccessProFeature: NULL_FIELD_REF
      }
    }
  }, {
    name: 'componentUpdates',
    type: {
      kind: 'objects',
      name: _$$Y.ProjectComponentUpdate
    },
    nullable: !0,
    resolver: {
      type: 'Redis',
      keyPrefix: 'project-component-updates',
      keyPostfix: [createParentRef('id')]
    }
  }, {
    name: 'stateGroupUpdates',
    type: {
      kind: 'objects',
      name: _$$Y.ProjectStateGroupUpdate
    },
    nullable: !0,
    resolver: {
      type: 'Redis',
      keyPrefix: 'project-state-group-updates',
      keyPostfix: [createParentRef('id')]
    }
  }, {
    name: 'activeProjectResourceConnections',
    type: {
      kind: 'objects',
      name: _$$Y.ResourceConnection
    },
    nullable: !0,
    filter: {
      and: [['resourceId', '=', createParentRef('id')], ['resourceType', '=', 'folder'], ['disconnectedAt', '=', null]]
    },
    expectedMaxCount: 10,
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'disconnectedProjectResourceConnections',
    type: {
      kind: 'objects',
      name: _$$Y.ResourceConnection
    },
    nullable: !0,
    filter: {
      and: [['resourceId', '=', createParentRef('id')], ['resourceType', '=', 'folder'], ['disconnectedAt', '<>', null]]
    },
    expectedMaxCount: 50,
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'pendingAssetTransferRequest',
    type: {
      kind: 'object',
      name: _$$Y.AssetTransferRequest
    },
    nullable: !0,
    filter: {
      and: [['status', '=', 'pending'], ['sourceFolderId', '=', createParentRef('id')], ['transferType', '=', 'project']]
    },
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'pendingResourceConnectionInvite',
    type: {
      kind: 'object',
      name: _$$Y.ResourceConnectionInvite
    },
    nullable: !0,
    filter: {
      and: [['resourceId', '=', createParentRef('id')], ['resourceType', '=', 'folder'], ['status', '=', 'pending']]
    },
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: '_mostRecentResourceConnection',
    type: {
      kind: 'object',
      name: _$$Y.ResourceConnection
    },
    nullable: !0,
    filter: {
      and: [['resourceId', '=', createParentRef('id')], ['resourceType', '=', 'folder']]
    },
    orderBy: [['createdAt', 'DESC']],
    bannedFromViews: !0
  }, {
    name: '_mostRecentActiveResourceConnection',
    type: {
      kind: 'object',
      name: _$$Y.ResourceConnection
    },
    nullable: !0,
    filter: {
      and: [['resourceId', '=', createParentRef('id')], ['resourceType', '=', 'folder'], ['disconnectedAt', '=', null]]
    },
    orderBy: [['createdAt', 'DESC']],
    bannedFromViews: !0
  }, {
    name: 'mostRecentResourceConnection',
    type: {
      kind: 'object',
      name: _$$Y.ResourceConnection
    },
    nullable: !0,
    filter: {
      and: [['resourceId', '=', createParentRef('id')], ['resourceType', '=', 'folder']]
    },
    orderBy: [['createdAt', 'DESC']],
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'computedWorkspace',
    type: {
      kind: 'object',
      name: _$$Y.ComputedWorkspace
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    computed: !0,
    dependencies: {
      _team_permsV2: {
        workspace: {
          canRead: [{
            userId: createViewRef('userId')
          }, NULL_FIELD_REF],
          id: NULL_FIELD_REF
        }
      }
    }
  }, ...df, ...du, r4, r3, rA, ry, rI, rE, rb, rv, rT, rk, rx, rS, rw, rC, rf, r_, rp, rm, rR, rN, rP, rO, rG, rz, rB, rV, rF, rM, rD, rL, rj, rU, rc, r6, r7, ru, rh, rg, rH, rW, rZ, rX, r2, rK, rY, r0, r1, rQ, rJ, rq, r$, r5, lg, ...l2, lv, lI, lE, lx, lS, lw, lb, ...l7, ...l8, ...l9, ...de, ...dt, ...di, ...dn]
};
let uP = {
  name: _$$Y.ProjectLimitedInfo,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'path',
    type: {
      kind: 'string'
    }
  }, {
    name: 'name',
    type: {
      kind: 'string'
    },
    computed: !0,
    dependencies: {
      _project: {
        name: NULL_FIELD_REF
      }
    }
  }, {
    name: 'teamId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: '_project',
    type: {
      kind: 'object',
      name: _$$Y.Project
    },
    filter: ['id', '=', createParentRef('id')],
    bannedFromViews: !0
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      _project: {
        canViewLimitedInfo: [{
          userId: createFieldRef('userId')
        }, NULL_FIELD_REF],
        pendingResourceConnectionInvite: {
          canRead: [{
            userId: createFieldRef('userId')
          }, NULL_FIELD_REF]
        },
        disconnectedProjectResourceConnections: {
          canRead: [{
            userId: createFieldRef('userId')
          }, NULL_FIELD_REF]
        }
      }
    }
  }]
};
let uO = {
  name: _$$Y.ProjectRole,
  permissionRequired: !1,
  fields: [...d$, {
    name: 'isShared',
    type: {
      kind: 'bool'
    },
    nullable: !0
  }, {
    name: 'project',
    type: {
      kind: 'object',
      name: _$$Y.Project
    },
    filter: {
      and: [['id', '=', createParentRef('resourceId')], ['trashedAt', '=', null], ['deletedAt', '=', null]]
    },
    nullable: !0,
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'sharedWithYouFolder',
    type: {
      kind: 'object',
      name: _$$Y.SharedWithYouFolder
    },
    filter: {
      and: [['resourceId', '=', createParentRef('resourceId')], ['resourceType', '=', 'folder'], ['userId', '=', createParentRef('userId')]]
    },
    nullable: !0,
    shadowCheckCanRead: {
      userId: createSessionRef('userId')
    }
  }]
};
let uD = {
  name: _$$Y.ProjectSubscription,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'folderId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'project',
    type: {
      kind: 'object',
      name: _$$Y.Project
    },
    nullable: !0,
    filter: ['id', '=', createParentRef('folderId')],
    bannedFromViews: !0,
    deprecated: {
      reason: 'Use projectV2 which has the right permission checks',
      date: '2025-02-28'
    }
  }, {
    name: 'projectV2',
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    type: {
      kind: 'object',
      name: _$$Y.Project
    },
    nullable: !0,
    checkCanRead: {
      userId: createFieldRef('userId')
    },
    filter: ['id', '=', createParentRef('folderId')]
  }]
};
let uL = {
  name: _$$Y.Prototype,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'name',
    type: {
      kind: 'string'
    },
    typechecked: !1
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'pageId',
    type: {
      kind: 'string'
    }
  }, {
    name: 'thumbnailUrl',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'signedThumbnailUrl',
    type: {
      kind: 'string'
    },
    nullable: !0,
    computed: !0,
    dependencies: {
      thumbnailUrl: NULL_FIELD_REF
    }
  }, {
    name: 'thumbnailMeta',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'deleted',
    type: {
      kind: 'bool'
    },
    nullable: !0
  }, {
    name: 'file',
    type: {
      kind: 'object',
      name: _$$Y.File
    },
    filter: ['key', '=', createParentRef('fileKey')],
    checkCanRead: {
      fieldName: 'canReadV3',
      userId: createSessionRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId')
    }
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      id: NULL_FIELD_REF,
      fileKey: NULL_FIELD_REF,
      deleted: NULL_FIELD_REF,
      file: {
        id: NULL_FIELD_REF,
        canRead: [{
          userId: createViewRef('userId')
        }, NULL_FIELD_REF]
      }
    }
  }, {
    name: 'recentPrototype',
    type: {
      kind: 'object',
      name: _$$Y.RecentPrototype
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: {
      and: [['prototypeId', '=', createParentRef('id')], ['userId', '=', createFieldRef('userId')]]
    }
  }, {
    name: 'favoritePrototype',
    type: {
      kind: 'object',
      name: _$$Y.FavoritedPrototype
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'orgId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: {
      and: [['resourceId', '=', createParentRef('id')], ['resourceType', '=', 'prototype'], ['userId', '=', createFieldRef('userId')], ['orgId', '=', createFieldRef('orgId')]]
    }
  }, {
    name: 'isFavorited',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'orgId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      favoritePrototype: [{
        userId: createViewRef('userId'),
        orgId: createViewRef('orgId')
      }, {
        id: NULL_FIELD_REF
      }]
    }
  }]
};
let uF = {
  name: _$$Y.ProvisionalAccess,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'startsAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'endsAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'deactivatedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'status',
    type: {
      kind: 'enum',
      name: 'ProvisionalAccessStatus'
    },
    computed: !0,
    dependencies: {
      endsAt: NULL_FIELD_REF,
      deactivatedAt: NULL_FIELD_REF,
      periodicUpdateField: {
        refreshValue: NULL_FIELD_REF
      }
    },
    nullable: !0
  }, {
    name: 'planUserType',
    type: {
      kind: 'string'
    }
  }, {
    name: 'planUserId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'billableProductKey',
    type: {
      kind: 'enum',
      name: 'BillableProductKey'
    }
  }, {
    name: 'billableProduct',
    type: {
      kind: 'object',
      name: _$$Y.BillableProduct
    },
    filter: ['key', '=', createParentRef('billableProductKey')],
    nullable: !0
  }, {
    name: 'periodicUpdateField',
    type: {
      kind: 'object',
      name: _$$Y.PeriodicUpdate
    },
    nullable: !0,
    resolver: {
      type: 'PeriodicUpdate'
    }
  }]
};
let uM = {
  name: _$$Y.RecentFile,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    },
    typechecked: !1
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'action',
    type: {
      kind: 'string'
    }
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    },
    bannedFromViews: !0
  }, {
    name: 'actionAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'file',
    type: {
      kind: 'object',
      name: _$$Y.File
    },
    filter: ['key', '=', createParentRef('fileKey')],
    nullable: !0,
    checkCanRead: {
      fieldName: 'canAccess',
      userId: createSessionRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId'),
      linkAccessOverrideKey: null
    }
  }]
};
let uj = {
  name: _$$Y.RecentPrototype,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'prototypeId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'viewedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'prototype',
    type: {
      kind: 'object',
      name: _$$Y.Prototype
    },
    filter: ['id', '=', createParentRef('prototypeId')],
    shadowCheckCanRead: {
      userId: createSessionRef('userId')
    }
  }]
};
let uU = {
  name: _$$Y.RecentSearch,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'string'
    }
  }, {
    name: 'orgId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'searches',
    embedded: !0,
    type: {
      kind: 'objects',
      name: _$$Y.SearchInfo
    },
    nullable: !0
  }]
};
let uB = {
  name: _$$Y.RelevanceReason,
  permissionRequired: !1,
  embedded: !0,
  fields: [{
    name: 'relevant',
    type: {
      kind: 'bool'
    },
    nullable: !0
  }, {
    name: 'reason',
    type: {
      kind: 'string'
    },
    nullable: !0
  }]
};
function uV(e) {
  if (e.passwordAuthentication) {
    e = mergeFieldRefs(e);
    Array.isArray(e?.passwordAuthentication) && e.passwordAuthentication.length > 0 && (e.passwordAuthentication[0].anonymousUserId = null);
    return e;
  }
  throw new Error('Unnecessary usage of `deprecatedInjectNullAnonymousUserId`.');
}
let uG = {
  name: _$$Y.Repo,
  naturalKey: new Set(['defaultFileKey', 'id']),
  permissionRequired: !0,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'name',
    type: {
      kind: 'string'
    }
  }, {
    name: 'teamId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'defaultFileKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'deletedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'trashedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'trashedWithParent',
    type: {
      kind: 'enum',
      name: 'TrashedWithParent'
    },
    nullable: !0
  }, {
    name: 'isTrashed',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      trashedAt: NULL_FIELD_REF
    }
  }, {
    name: 'linkAccess',
    type: {
      kind: 'enum',
      name: 'LinkAccess'
    },
    nullable: !0
  }, {
    name: 'protoLinkAccess',
    type: {
      kind: 'enum',
      name: 'ProtoLinkAccess'
    },
    nullable: !0
  }, {
    name: 'orgBrowsable',
    type: {
      kind: 'bool'
    },
    nullable: !0
  }, {
    name: 'orgAudience',
    type: {
      kind: 'bool'
    },
    nullable: !0
  }, {
    name: 'parentOrgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'ownerRole',
    type: {
      kind: 'object',
      name: _$$Y.RepoRole
    },
    filter: {
      and: [['resourceId', '=', createParentRef('id')], ['resourceType', '=', 'file_repo'], ['level', '=', e6.OWNER]]
    },
    nullable: !0
  }, {
    name: 'passwordAuthentication',
    type: {
      kind: 'object',
      name: _$$Y.FigFilePasswordAuthentication
    },
    args: [{
      name: 'anonymousUserId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: {
      and: [['fileKey', '=', createParentRef('defaultFileKey')], ['anonymousUserId', '=', createFieldRef('anonymousUserId')]]
    }
  }, {
    name: 'pwdConfig',
    type: {
      kind: 'object',
      name: _$$Y.FigFilePwdConfig
    },
    filter: ['fileKey', '=', createParentRef('defaultFileKey')],
    nullable: !0
  }, {
    name: 'roles',
    type: {
      kind: 'objects',
      name: _$$Y.RepoRole
    },
    filter: {
      and: [['resourceId', '=', createParentRef('id')], ['resourceType', '=', 'file_repo']]
    },
    expectedMaxCount: 1e4
  }, {
    name: '_defaultFile',
    type: {
      kind: 'object',
      name: _$$Y.File
    },
    filter: ['key', '=', createParentRef('defaultFileKey')],
    nullable: !0,
    bannedFromViews: !0
  }, {
    name: 'sourceFile',
    type: {
      kind: 'object',
      name: _$$Y.File
    },
    filter: ['key', '=', createParentRef('defaultFileKey')],
    nullable: !0,
    checkCanRead: {
      fieldName: 'canViewV3',
      userId: createSessionRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId')
    }
  }, {
    name: '_sourceFile_permsV2',
    type: {
      kind: 'object',
      name: _$$Y.File
    },
    filter: ['key', '=', createParentRef('defaultFileKey')],
    nullable: !0,
    bannedFromViews: !0
  }, {
    name: 'orgDraftsFolderOwnerBaseOrgUser',
    nullable: !0,
    type: {
      kind: 'object',
      name: _$$Y.BaseOrgUser
    },
    filter: ['draftsFolderId', '=', createParentRef('folderId')]
  }, {
    name: 'hasFileLinkPassword',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      _defaultFile: {
        hasFileLinkPassword: NULL_FIELD_REF
      }
    }
  }, {
    name: 'currentTeamUser',
    type: {
      kind: 'object',
      name: _$$Y.TeamUser
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: {
      and: [['userId', '=', createFieldRef('userId')], ['teamId', '=', createParentRef('teamId')]]
    }
  }, {
    name: 'hasProtoLinkPassword',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      _defaultFile: {
        hasProtoLinkPassword: NULL_FIELD_REF
      }
    }
  }, {
    name: 'isFavorited',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      _defaultFile: {
        isFavorited: [{
          userId: createViewRef('userId')
        }, NULL_FIELD_REF]
      }
    }
  }, {
    name: 'isDraftRepo',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      _project_permsV2: {
        path: NULL_FIELD_REF
      }
    }
  }, {
    name: 'files',
    type: {
      kind: 'objects',
      name: _$$Y.File
    },
    filter: ['fileRepoId', '=', createParentRef('id')],
    nullable: !0,
    expectedMaxCount: 2e3,
    orderBy: [['trashedAt', 'DESC']],
    checkCanRead: {
      fieldName: 'canViewV3',
      userId: createSessionRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId')
    }
  }, {
    name: '_activeBranches',
    type: {
      kind: 'objects',
      name: _$$Y.File
    },
    filter: {
      and: [['fileRepoId', '=', createParentRef('id')], ['sourceFileKey', '<>', null], ['trashedAt', '=', null]]
    },
    nullable: !0,
    expectedMaxCount: 2e3,
    bannedFromViews: !0
  }, {
    name: 'activeBranches',
    type: {
      kind: 'objects',
      name: _$$Y.File
    },
    filter: {
      and: [['fileRepoId', '=', createParentRef('id')], ['sourceFileKey', '<>', null], ['trashedAt', '=', null]]
    },
    expectedMaxCount: 2e3
  }, {
    name: 'hasActiveBranches',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      _activeBranches: {
        id: NULL_FIELD_REF
      }
    }
  }, {
    name: 'project',
    nullable: !0,
    type: {
      kind: 'object',
      name: _$$Y.Project
    },
    filter: {
      and: [['id', '=', createParentRef('folderId')]]
    },
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: '_project_permsV2',
    type: {
      kind: 'object',
      name: _$$Y.Project
    },
    nullable: !0,
    filter: ['id', '=', createParentRef('folderId')],
    bannedFromViews: !0
  }, {
    name: 'team',
    nullable: !0,
    type: {
      kind: 'object',
      name: _$$Y.Team
    },
    filter: {
      and: [['id', '=', createParentRef('teamId')]]
    },
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: '_team_permsV2',
    type: {
      kind: 'object',
      name: _$$Y.Team
    },
    nullable: !0,
    filter: ['id', '=', createParentRef('teamId')],
    bannedFromViews: !0
  }, {
    name: 'roleOnObjectForUser',
    type: {
      kind: 'object',
      name: _$$Y.RepoRole
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: {
      and: [['userId', '=', createFieldRef('userId')], ['resourceId', '=', createParentRef('id')], ['resourceType', '=', 'file_repo']]
    }
  }, {
    name: 'roleOnObjectRepoForUser',
    type: {
      kind: 'object',
      name: _$$Y.RepoRole
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: {
      and: [['userId', '=', createFieldRef('userId')], ['resourceId', '=', createParentRef('id')], ['resourceType', '=', 'file_repo']]
    }
  }, {
    name: 'roleOnObjectProjectForUser',
    type: {
      kind: 'object',
      name: _$$Y.ProjectRole
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: {
      and: [['userId', '=', createFieldRef('userId')], ['resourceId', '=', createParentRef('folderId')], ['resourceType', '=', 'folder']]
    }
  }, {
    name: 'roleOnObjectTeamForUser',
    type: {
      kind: 'object',
      name: _$$Y.TeamRole
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: {
      and: [['userId', '=', createFieldRef('userId')], ['resourceId', '=', createParentRef('teamId')], ['resourceType', '=', 'team']]
    }
  }, {
    name: 'currentUser',
    nullable: !0,
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    filter: ['id', '=', createFieldRef('userId')]
  }, {
    name: 'userAuthn',
    type: {
      kind: 'object',
      name: _$$Y.UserAuthn
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: ['userId', '=', createFieldRef('userId')],
    bannedFromViews: !0
  }, {
    name: 'currentPrivilegedOrgUser',
    type: {
      kind: 'object',
      name: _$$Y.PrivilegedOrgUser
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: {
      and: [['userId', '=', createFieldRef('userId')], ['orgId', '=', createParentRef('parentOrgId')], ['permission', '<>', 'guest']]
    }
  }, {
    name: 'currentBaseOrgUser',
    type: {
      kind: 'object',
      name: _$$Y.BaseOrgUser
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: {
      and: [['userId', '=', createFieldRef('userId')], ['orgId', '=', createParentRef('parentOrgId')]]
    }
  }, {
    name: 'org',
    type: {
      kind: 'object',
      name: _$$Y.OrgInfo
    },
    filter: ['id', '=', createParentRef('parentOrgId')],
    nullable: !0
  }, {
    name: '_org_permsV2',
    type: {
      kind: 'object',
      name: _$$Y.Org
    },
    nullable: !0,
    filter: ['id', '=', createParentRef('parentOrgId')],
    bannedFromViews: !0
  }, {
    name: 'orgSharedSetting',
    type: {
      kind: 'object',
      name: _$$Y.SharedOrgLicenseGroupSetting
    },
    nullable: !0,
    filter: {
      and: [['resourceType', '=', 'Org'], ['resourceId', '=', createParentRef('parentOrgId')]]
    }
  }, {
    name: '_hasRepoAccess',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'permissionLevel',
      type: {
        kind: 'int'
      }
    }, {
      name: 'sessionId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {}
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: uV(_$$sG['REPO::CAN_VIEW_PROTOTYPE']),
    deprecated: {
      reason: 'Use canReadV3 instead.',
      date: '2024-04-15'
    }
  }, {
    name: 'canReadV2',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'sessionId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: uV(_$$sG['REPO::CAN_VIEW_PROTOTYPE']),
    deprecated: {
      reason: 'Use canReadV3 instead.',
      date: '2024-04-17'
    }
  }, {
    name: 'canReadV3',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'sessionId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }, {
      name: 'anonymousUserId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }],
    computed: !0,
    permissionName: 'REPO::CAN_VIEW_PROTOTYPE',
    dependencies: _$$sG['REPO::CAN_VIEW_PROTOTYPE']
  }, {
    name: 'canView',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: uV(_$$sG['REPO::CAN_VIEW']),
    deprecated: {
      reason: 'Use canViewV3 instead.',
      date: '2024-05-07'
    }
  }, {
    name: 'canViewV2',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'sessionId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: uV(_$$sG['REPO::CAN_VIEW']),
    deprecated: {
      reason: 'Use canViewV3 instead.',
      date: '2024-05-07'
    }
  }, {
    name: 'canEdit',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: uV(_$$sG['REPO::CAN_EDIT']),
    deprecated: {
      reason: 'Use canEditV3 instead.',
      date: '2024-05-07'
    }
  }, {
    name: 'canEditV2',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'sessionId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: uV(_$$sG['REPO::CAN_EDIT']),
    deprecated: {
      reason: 'Use canEditV3 instead.',
      date: '2024-05-07'
    }
  }, {
    name: 'folderId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'linkExpirationConfig',
    type: {
      kind: 'object',
      name: _$$Y.FigFileLinkExpirationConfig
    },
    filter: {
      and: [['figFileKey', '=', createParentRef('defaultFileKey')], ['accessReverted', '=', !1]]
    },
    nullable: !0,
    deprecated: {
      reason: 'Use mainFileLinkExpirationConfig',
      date: '2023-05-31'
    }
  }, {
    name: 'mainFileLinkExpirationConfig',
    type: {
      kind: 'object',
      name: _$$Y.FigFileLinkExpirationConfig
    },
    filter: ['figFileKey', '=', createParentRef('defaultFileKey')],
    nullable: !0
  }, {
    name: 'activeProjectResourceConnections',
    type: {
      kind: 'objects',
      name: _$$Y.ResourceConnection
    },
    nullable: !0,
    filter: {
      and: [['resourceId', '=', createParentRef('folderId')], ['resourceType', '=', 'folder'], ['disconnectedAt', '=', null]]
    },
    expectedMaxCount: 10,
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'teamPublicInfo',
    type: {
      kind: 'object',
      name: _$$Y.TeamPublicInfo
    },
    nullable: !0,
    filter: ['id', '=', createParentRef('teamId')]
  }, {
    name: 'orgPublicInfo',
    type: {
      kind: 'object',
      name: _$$Y.OrgPublicInfo
    },
    nullable: !0,
    filter: ['id', '=', createParentRef('parentOrgId')]
  }, ...dA, ...dp, nZ, nX, rs, ro, n6, n7, nq, n$, n0, n1, n2, n5, ri, rn, re, rt, rr, ra, n4, n3, nH, n8, n9, nW, nK, nY, nQ, nJ, rl, rd, ld, lf, ...l5]
};
let uz = {
  name: _$$Y.RepoRole,
  permissionRequired: !1,
  fields: [...d$, {
    name: 'repo',
    type: {
      kind: 'object',
      name: _$$Y.Repo
    },
    filter: ['id', '=', createParentRef('resourceId')],
    bannedFromViews: !0
  }]
};
let uH = {
  name: _$$Y.Resource,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'name',
    type: {
      kind: 'string'
    }
  }, {
    name: 'description',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'resourceType',
    type: {
      kind: 'string'
    }
  }, {
    name: 'publishingStatus',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'likeCount',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'viewCount',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'userCount',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'categoryId',
    type: {
      kind: 'uuid'
    },
    nullable: !0
  }, {
    name: 'unpublishedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'contentVerifiedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'tagline',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'remixedFromResourceId',
    type: {
      kind: 'uuid'
    },
    nullable: !0
  }]
};
let uW = {
  name: _$$Y.ResourceSave,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'hubFileId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'hubFile',
    type: {
      kind: 'object',
      name: _$$Y.HubFile
    },
    filter: ['id', '=', createParentRef('hubFileId')]
  }, {
    name: 'resourceId',
    type: {
      kind: 'uuid'
    },
    nullable: !0
  }, {
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'resource',
    type: {
      kind: 'object',
      name: _$$Y.Resource
    },
    filter: ['id', '=', createParentRef('resourceId')]
  }]
};
let uK = {
  name: _$$Y.SCIMEnterpriseFields,
  permissionRequired: !1,
  embedded: !0,
  fields: [{
    name: 'organization',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'costCenter',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'division',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'department',
    type: {
      kind: 'string'
    },
    nullable: !0
  }]
};
let uY = {
  name: _$$Y.SCIMFigmaEnterpriseFields,
  permissionRequired: !1,
  embedded: !0,
  fields: [{
    name: 'figmaPermission',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'figjamPermission',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'devModePermission',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'figmaAdmin',
    type: {
      kind: 'bool'
    },
    nullable: !0,
    typechecked: !1
  }]
};
let uq = {
  name: _$$Y.SCIMName,
  permissionRequired: !1,
  embedded: !0,
  fields: [{
    name: 'givenName',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'familyName',
    type: {
      kind: 'string'
    },
    nullable: !0
  }]
};
let u$ = {
  name: _$$Y.SearchInfo,
  permissionRequired: !1,
  embedded: !0,
  fields: [{
    name: 'query',
    type: {
      kind: 'string'
    }
  }, {
    name: 'timestamp',
    type: {
      kind: 'string'
    }
  }]
};
let uZ = {
  name: _$$Y.SearchWorkspaceFilesResult,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'string'
    },
    bannedFromViews: !0
  }, {
    name: 'file',
    type: {
      kind: 'object',
      name: _$$Y.File
    },
    filter: ['key', '=', createParentRef('id')],
    nullable: !0,
    checkCanRead: {
      fieldName: 'canAccess',
      userId: createSessionRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId'),
      linkAccessOverrideKey: null
    }
  }]
};
let uX = {
  name: _$$Y.Seat,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    },
    nullable: !0
  }, {
    name: 'planParentId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'planParentType',
    type: {
      kind: 'string'
    }
  }, {
    name: 'billableProductKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'deprovisionedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'currentPlanUserId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'currentPlanUserType',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'initialBillingPeriodStartAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'billingInterval',
    type: {
      kind: 'enum',
      name: 'BillingInterval'
    }
  }]
};
let uQ = {
  name: _$$Y.EmbeddedSeat,
  permissionRequired: !1,
  embedded: !0,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    },
    nullable: !0
  }, {
    name: 'planParentId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'planParentType',
    type: {
      kind: 'string'
    }
  }, {
    name: 'billableProductKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'deprovisionedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'currentPlanUserId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }]
};
let uJ = {
  name: _$$Y.SharedOrgLicenseGroupSetting,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'resourceType',
    type: {
      kind: 'string'
    }
  }, {
    name: 'resourceId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'publicLinkControlsSetting',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'autogenPasswordControls',
    type: {
      kind: 'bool'
    }
  }, {
    name: 'externalCollaborationControls',
    type: {
      kind: 'bool'
    }
  }, {
    name: 'teamCreationControls',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'publicLinkControlsMaxExpiration',
    type: {
      kind: 'int'
    },
    nullable: !0,
    typechecked: !1
  }, {
    name: 'configuredUpgradeRequestSetting',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'configuredUpgradeRequestMessage',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'permittedConfiguredUpgradeRequestMessage',
    type: {
      kind: 'string'
    },
    args: [{
      name: 'orgId',
      type: {
        kind: 'bigint'
      }
    }, {
      name: 'permission',
      type: {
        kind: 'string'
      }
    }],
    computed: !0,
    dependencies: {
      configuredUpgradeRequestSetting: NULL_FIELD_REF,
      configuredUpgradeRequestMessage: NULL_FIELD_REF
    }
  }, {
    name: 'fileExportSetting',
    type: {
      kind: 'enum',
      name: 'FileExportSetting'
    },
    nullable: !0
  }, {
    name: 'ipAllowlist',
    type: {
      kind: 'bool'
    },
    nullable: !0
  }, {
    name: 'aiSetting',
    type: {
      kind: 'string'
    },
    nullable: !0
  }]
};
let u0 = {
  name: _$$Y.SharedWithYouFile,
  permissionRequired: !0,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'sessionId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }, {
      name: 'anonymousUserId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      userId: NULL_FIELD_REF,
      file: {
        canAccess: [{
          userId: createFieldRef('userId'),
          sessionId: createFieldRef('sessionId'),
          anonymousUserId: createFieldRef('anonymousUserId'),
          linkAccessOverrideKey: null
        }, NULL_FIELD_REF]
      }
    }
  }, {
    name: 'resourceId',
    type: {
      kind: 'string'
    }
  }, {
    name: 'resourceType',
    type: {
      kind: 'enum',
      name: 'SharedWithYouResourceType'
    }
  }, {
    name: 'file',
    nullable: !0,
    type: {
      kind: 'object',
      name: _$$Y.File
    },
    filter: {
      and: [['key', '=', createParentRef('resourceId')], ['trashedAt', '=', null], ['deletedAt', '=', null]]
    },
    checkCanRead: {
      fieldName: 'canAccess',
      userId: createSessionRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId'),
      linkAccessOverrideKey: null
    }
  }, {
    name: 'parentTeamId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'parentTeam',
    nullable: !0,
    type: {
      kind: 'object',
      name: _$$Y.Team
    },
    filter: ['id', '=', createParentRef('parentTeamId')],
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'parentTeamLimitedInfo',
    nullable: !0,
    type: {
      kind: 'object',
      name: _$$Y.TeamLimitedInfo
    },
    filter: ['id', '=', createParentRef('parentTeamId')],
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'parentOrgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'parentOrg',
    nullable: !0,
    type: {
      kind: 'object',
      name: _$$Y.OrgInfo
    },
    filter: ['id', '=', createParentRef('parentOrgId')]
  }, {
    name: 'thumbnailUrl',
    type: {
      kind: 'string'
    },
    args: [],
    computed: !0,
    nullable: !0,
    dependencies: {
      file: {
        signedThumbnailUrl: NULL_FIELD_REF
      }
    }
  }, {
    name: 'thumbnailUrlOverride',
    type: {
      kind: 'string'
    },
    args: [],
    computed: !0,
    nullable: !0,
    dependencies: {
      file: {
        thumbnailUrlOverride: NULL_FIELD_REF
      }
    }
  }, {
    name: 'sharedBy',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sharedByUser',
    nullable: !0,
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    filter: ['id', '=', createParentRef('sharedBy')]
  }, {
    name: 'orgOrTeamName',
    type: {
      kind: 'string'
    },
    args: [],
    computed: !0,
    dependencies: {
      parentTeam: {
        name: NULL_FIELD_REF
      },
      parentOrg: {
        name: NULL_FIELD_REF
      }
    }
  }, {
    name: 'sharedByText',
    type: {
      kind: 'string'
    },
    args: [],
    computed: !0,
    dependencies: {
      sharedByUser: {
        name: NULL_FIELD_REF
      },
      orgOrTeamName: NULL_FIELD_REF
    }
  }, {
    name: 'sharedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }]
};
let u1 = {
  name: _$$Y.SharedWithYouFolder,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      userId: NULL_FIELD_REF,
      folder: {
        canRead: [{
          userId: createFieldRef('userId')
        }, NULL_FIELD_REF]
      }
    }
  }, {
    name: 'resourceId',
    type: {
      kind: 'string'
    }
  }, {
    name: 'resourceType',
    type: {
      kind: 'enum',
      name: 'SharedWithYouResourceType'
    }
  }, {
    name: 'folder',
    nullable: !0,
    type: {
      kind: 'object',
      name: _$$Y.Project
    },
    filter: {
      and: [['id', '=', createParentRef('resourceId')], ['deletedAt', '=', null], ['trashedAt', '=', null]]
    },
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'parentTeamId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'parentTeam',
    nullable: !0,
    type: {
      kind: 'object',
      name: _$$Y.Team
    },
    filter: ['id', '=', createParentRef('parentTeamId')],
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'parentTeamLimitedInfo',
    nullable: !0,
    type: {
      kind: 'object',
      name: _$$Y.TeamLimitedInfo
    },
    filter: ['id', '=', createParentRef('parentTeamId')],
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'parentOrgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'parentOrg',
    nullable: !0,
    type: {
      kind: 'object',
      name: _$$Y.OrgInfo
    },
    filter: ['id', '=', createParentRef('parentOrgId')]
  }, {
    name: 'sharedBy',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sharedByUser',
    nullable: !0,
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    filter: ['id', '=', createParentRef('sharedBy')]
  }, {
    name: 'orgOrTeamName',
    type: {
      kind: 'string'
    },
    args: [],
    computed: !0,
    dependencies: {
      parentTeam: {
        name: NULL_FIELD_REF
      },
      parentOrg: {
        name: NULL_FIELD_REF
      }
    }
  }, {
    name: 'sharedByText',
    type: {
      kind: 'string'
    },
    args: [],
    computed: !0,
    dependencies: {
      sharedByUser: {
        name: NULL_FIELD_REF
      },
      orgOrTeamName: NULL_FIELD_REF
    }
  }, {
    name: 'sharedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }]
};
let u2 = {
  name: _$$Y.SharedWithYouPrototype,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'url',
    type: {
      kind: 'string'
    }
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'sessionId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }, {
      name: 'anonymousUserId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      userId: NULL_FIELD_REF,
      prototype: {
        file: {
          canViewPrototypeV3: [{
            userId: createFieldRef('userId'),
            sessionId: createFieldRef('sessionId'),
            anonymousUserId: createFieldRef('anonymousUserId')
          }, NULL_FIELD_REF]
        }
      }
    }
  }, {
    name: 'resourceId',
    type: {
      kind: 'string'
    }
  }, {
    name: 'resourceType',
    type: {
      kind: 'enum',
      name: 'SharedWithYouResourceType'
    }
  }, {
    name: 'prototype',
    nullable: !0,
    type: {
      kind: 'object',
      name: _$$Y.Prototype
    },
    filter: {
      and: [['fileKey', '=', createParentRef('resourceId')], ['deleted', '=', !1]]
    },
    shadowCheckCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'parentTeamId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'parentTeam',
    nullable: !0,
    type: {
      kind: 'object',
      name: _$$Y.Team
    },
    filter: ['id', '=', createParentRef('parentTeamId')],
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'parentTeamLimitedInfo',
    nullable: !0,
    type: {
      kind: 'object',
      name: _$$Y.TeamLimitedInfo
    },
    filter: ['id', '=', createParentRef('parentTeamId')],
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'parentOrgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'parentOrg',
    nullable: !0,
    type: {
      kind: 'object',
      name: _$$Y.OrgInfo
    },
    filter: ['id', '=', createParentRef('parentOrgId')]
  }, {
    name: 'thumbnailUrl',
    type: {
      kind: 'string'
    },
    args: [],
    computed: !0,
    nullable: !0,
    dependencies: {
      prototype: {
        thumbnailUrl: NULL_FIELD_REF
      }
    }
  }, {
    name: 'sharedBy',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sharedByUser',
    nullable: !0,
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    filter: ['id', '=', createParentRef('sharedBy')]
  }, {
    name: 'orgOrTeamName',
    type: {
      kind: 'string'
    },
    args: [],
    computed: !0,
    dependencies: {
      parentTeam: {
        name: NULL_FIELD_REF
      },
      parentOrg: {
        name: NULL_FIELD_REF
      }
    }
  }, {
    name: 'sharedByText',
    type: {
      kind: 'string'
    },
    args: [],
    computed: !0,
    dependencies: {
      sharedByUser: {
        name: NULL_FIELD_REF
      },
      orgOrTeamName: NULL_FIELD_REF
    }
  }, {
    name: 'sharedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }]
};
let u5 = {
  name: _$$Y.SharedWithYouRepo,
  permissionRequired: !0,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'sessionId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }, {
      name: 'anonymousUserId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      userId: NULL_FIELD_REF,
      repo: {
        canViewV3: [{
          userId: createFieldRef('userId'),
          sessionId: createFieldRef('sessionId'),
          anonymousUserId: createFieldRef('anonymousUserId')
        }, NULL_FIELD_REF]
      }
    }
  }, {
    name: 'resourceId',
    type: {
      kind: 'string'
    }
  }, {
    name: 'resourceType',
    type: {
      kind: 'enum',
      name: 'SharedWithYouResourceType'
    }
  }, {
    name: 'repo',
    nullable: !0,
    type: {
      kind: 'object',
      name: _$$Y.Repo
    },
    filter: {
      and: [['id', '=', createParentRef('resourceId')], ['trashedAt', '=', null], ['deletedAt', '=', null]]
    },
    checkCanRead: {
      fieldName: 'canViewV3',
      userId: createSessionRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId')
    }
  }, {
    name: 'parentTeamId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'parentTeam',
    nullable: !0,
    type: {
      kind: 'object',
      name: _$$Y.Team
    },
    filter: ['id', '=', createParentRef('parentTeamId')],
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'parentTeamLimitedInfo',
    nullable: !0,
    type: {
      kind: 'object',
      name: _$$Y.TeamLimitedInfo
    },
    filter: ['id', '=', createParentRef('parentTeamId')],
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'parentOrgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'parentOrg',
    nullable: !0,
    type: {
      kind: 'object',
      name: _$$Y.OrgInfo
    },
    filter: ['id', '=', createParentRef('parentOrgId')]
  }, {
    name: 'sharedBy',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sharedByUser',
    nullable: !0,
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    filter: ['id', '=', createParentRef('sharedBy')]
  }, {
    name: 'orgOrTeamName',
    type: {
      kind: 'string'
    },
    args: [],
    computed: !0,
    dependencies: {
      parentTeam: {
        name: NULL_FIELD_REF
      },
      parentOrg: {
        name: NULL_FIELD_REF
      }
    }
  }, {
    name: 'sharedByText',
    type: {
      kind: 'string'
    },
    args: [],
    computed: !0,
    dependencies: {
      sharedByUser: {
        name: NULL_FIELD_REF
      },
      orgOrTeamName: NULL_FIELD_REF
    }
  }, {
    name: 'sharedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }]
};
let u4 = {
  name: _$$Y.SharedWithYouResource,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    },
    typechecked: !1
  }, {
    name: 'swyResourceId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'sharedWithYouFile',
    type: {
      kind: 'object',
      name: _$$Y.SharedWithYouFile
    },
    filter: {
      and: [['id', '=', createParentRef('swyResourceId')], ['resourceType', '=', 'file']]
    },
    nullable: !0,
    checkCanRead: {
      userId: createSessionRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId')
    }
  }, {
    name: 'sharedWithYouFolder',
    type: {
      kind: 'object',
      name: _$$Y.SharedWithYouFolder
    },
    filter: {
      and: [['id', '=', createParentRef('swyResourceId')], ['resourceType', '=', 'folder']]
    },
    nullable: !0,
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'sharedWithYouRepo',
    type: {
      kind: 'object',
      name: _$$Y.SharedWithYouRepo
    },
    filter: {
      and: [['id', '=', createParentRef('swyResourceId')], ['resourceType', '=', 'file_repo']]
    },
    nullable: !0,
    checkCanRead: {
      userId: createSessionRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId')
    }
  }, {
    name: 'sharedWithYouPrototype',
    type: {
      kind: 'object',
      name: _$$Y.SharedWithYouPrototype
    },
    filter: {
      and: [['id', '=', createParentRef('swyResourceId')], ['resourceType', '=', 'prototype']]
    },
    nullable: !0,
    checkCanRead: {
      userId: createSessionRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId')
    }
  }]
};
let u3 = {
  name: _$$Y.SharedWithYouTeam,
  permissionRequired: !0,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      userId: NULL_FIELD_REF
    }
  }, {
    name: 'resourceId',
    type: {
      kind: 'string'
    }
  }, {
    name: 'resourceType',
    type: {
      kind: 'enum',
      name: 'SharedWithYouResourceType'
    }
  }, {
    name: 'team',
    nullable: !0,
    type: {
      kind: 'object',
      name: _$$Y.Team
    },
    filter: {
      and: [['id', '=', createParentRef('resourceId')], ['deletedAt', '=', null]]
    },
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'parentOrgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'parentOrg',
    nullable: !0,
    type: {
      kind: 'object',
      name: _$$Y.OrgInfo
    },
    filter: ['id', '=', createParentRef('parentOrgId')]
  }, {
    name: 'sharedBy',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'sharedByUser',
    nullable: !0,
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    filter: ['id', '=', createParentRef('sharedBy')]
  }, {
    name: 'orgOrTeamName',
    type: {
      kind: 'string'
    },
    args: [],
    computed: !0,
    dependencies: {
      parentOrg: {
        name: NULL_FIELD_REF
      }
    }
  }, {
    name: 'sharedByText',
    type: {
      kind: 'string'
    },
    args: [],
    computed: !0,
    dependencies: {
      sharedByUser: {
        name: NULL_FIELD_REF
      },
      orgOrTeamName: NULL_FIELD_REF
    }
  }, {
    name: 'sharedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }]
};
let u6 = {
  name: _$$Y.SiteBundle,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'publishedByUserId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'completedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'status',
    type: {
      kind: 'string'
    }
  }, {
    name: 'fileVersionId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'publishedByUser',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    filter: ['id', '=', createParentRef('publishedByUserId')],
    nullable: !0
  }, {
    name: 'responsiveSetGuids',
    type: {
      kind: 'list',
      ofType: {
        kind: 'string'
      }
    },
    nullable: !0
  }, {
    name: 'file',
    type: {
      kind: 'object',
      name: _$$Y.File
    },
    filter: ['key', '=', createParentRef('fileKey')],
    nullable: !0,
    bannedFromViews: !0
  }, {
    name: 'fileVersion',
    type: {
      kind: 'object',
      name: _$$Y.FileVersion
    },
    filter: ['id', '=', createParentRef('fileVersionId')],
    nullable: !0
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'sessionId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }, {
      name: 'anonymousUserId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      file: {
        id: NULL_FIELD_REF,
        canEditV3: [{
          userId: createViewRef('userId'),
          sessionId: createViewRef('sessionId'),
          anonymousUserId: createViewRef('anonymousUserId')
        }, NULL_FIELD_REF]
      }
    }
  }, {
    name: 'canReadV2',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'sessionId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }, {
      name: 'anonymousUserId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }, {
      name: 'fileKey',
      type: {
        kind: 'string'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      file: {
        id: NULL_FIELD_REF,
        canAccess: [{
          userId: createViewRef('userId'),
          sessionId: createViewRef('sessionId'),
          anonymousUserId: createViewRef('anonymousUserId'),
          linkAccessOverrideKey: createViewRef('fileKey')
        }, NULL_FIELD_REF]
      }
    }
  }]
};
let u7 = {
  name: _$$Y.SiteDomain,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'domain',
    type: {
      kind: 'string'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'verifiedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'activationStatus',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'pairedDomainId',
    type: {
      kind: 'uuid'
    },
    nullable: !0
  }, {
    name: 'pairedDomain',
    type: {
      kind: 'object',
      name: _$$Y.SiteDomain
    },
    filter: ['id', '=', createParentRef('pairedDomainId')],
    nullable: !0
  }]
};
let u8 = {
  name: _$$Y.SiteMount,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'siteDomainId',
    type: {
      kind: 'uuid'
    },
    nullable: !0
  }, {
    name: 'siteDomain',
    type: {
      kind: 'object',
      name: _$$Y.SiteDomain
    },
    filter: ['id', '=', createParentRef('siteDomainId')],
    nullable: !0
  }, {
    name: 'customDomainId',
    type: {
      kind: 'uuid'
    },
    nullable: !0
  }, {
    name: 'customDomain',
    type: {
      kind: 'object',
      name: _$$Y.SiteDomain
    },
    filter: ['id', '=', createParentRef('customDomainId')],
    nullable: !0
  }, {
    name: 'publishEvents',
    type: {
      kind: 'objects',
      name: _$$Y.SitePublishEvent
    },
    filter: ['siteMountId', '=', createParentRef('id')],
    orderBy: [['createdAt', 'DESC']],
    expectedMaxCount: 1e3,
    initialPageSize: 20
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'file',
    type: {
      kind: 'object',
      name: _$$Y.File
    },
    filter: ['key', '=', createParentRef('fileKey')],
    nullable: !0,
    checkCanRead: {
      fieldName: 'canReadV3',
      userId: createSessionRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId')
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'unpublishedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0,
    deprecated: {
      reason: 'Use status field instead',
      date: '2025-06-25'
    }
  }, {
    name: 'globalPlaintextPassword',
    type: {
      kind: 'string'
    },
    nullable: !0,
    computed: !0,
    dependencies: {}
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'sessionId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }, {
      name: 'anonymousUserId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      file: {
        id: NULL_FIELD_REF,
        canEditV3: [{
          userId: createViewRef('userId'),
          sessionId: createViewRef('sessionId'),
          anonymousUserId: createViewRef('anonymousUserId')
        }, NULL_FIELD_REF]
      }
    }
  }, {
    name: 'canReadV2',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'sessionId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }, {
      name: 'anonymousUserId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }, {
      name: 'fileKey',
      type: {
        kind: 'string'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      file: {
        id: NULL_FIELD_REF,
        canAccess: [{
          userId: createViewRef('userId'),
          sessionId: createViewRef('sessionId'),
          anonymousUserId: createViewRef('anonymousUserId'),
          linkAccessOverrideKey: createViewRef('fileKey')
        }, NULL_FIELD_REF]
      }
    }
  }, {
    name: 'status',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'pwdConfig',
    type: {
      kind: 'object',
      name: _$$Y.SitePwdConfig
    },
    filter: ['siteMountId', '=', createParentRef('id')],
    nullable: !0,
    checkCanRead: {
      fieldName: 'canRead',
      userId: createSessionRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId')
    }
  }]
};
let u9 = {
  name: _$$Y.SitePublishEvent,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'siteMountId',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'siteBundleId',
    type: {
      kind: 'uuid'
    },
    nullable: !0
  }, {
    name: 'siteBundle',
    type: {
      kind: 'object',
      name: _$$Y.SiteBundle
    },
    filter: ['id', '=', createParentRef('siteBundleId')],
    nullable: !0
  }, {
    name: 'siteMount',
    type: {
      kind: 'object',
      name: _$$Y.SiteMount
    },
    filter: ['id', '=', createParentRef('siteMountId')]
  }, {
    name: 'autoGeneratedDomain',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'customDomain',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'actorId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'actor',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    filter: ['id', '=', createParentRef('actorId')],
    nullable: !0
  }, {
    name: 'action',
    type: {
      kind: 'string'
    }
  }]
};
let pe = {
  name: _$$Y.SlideThemeVariableInfo,
  permissionRequired: !1,
  embedded: !0,
  fields: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }, {
    name: 'version',
    type: {
      kind: 'string'
    }
  }, {
    name: 'variable',
    type: {
      kind: 'object',
      name: _$$Y.VariableLog
    },
    nullable: !0,
    filter: {
      and: [['key', '=', createParentRef('key')], ['version', '=', createParentRef('version')]]
    }
  }]
};
let pt = {
  name: _$$Y.SlideThemeStyleInfo,
  permissionRequired: !1,
  embedded: !0,
  fields: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }, {
    name: 'version',
    type: {
      kind: 'string'
    }
  }, {
    name: 'style',
    type: {
      kind: 'object',
      name: _$$Y.StyleLog
    },
    nullable: !0,
    filter: {
      and: [['key', '=', createParentRef('key')], ['contentHash', '=', createParentRef('version')]]
    }
  }]
};
let pi = {
  name: _$$Y.SlidesTheme,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'themeKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'version',
    type: {
      kind: 'string'
    }
  }, {
    name: 'varSetVersion',
    type: {
      kind: 'string'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'variableSetKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    },
    bannedFromViews: !0
  }, {
    name: 'file',
    type: {
      kind: 'object',
      name: _$$Y.File
    },
    nullable: !0,
    filter: ['id', '=', createParentRef('fileKey')],
    checkCanRead: {
      fieldName: 'canReadV3',
      userId: createSessionRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId')
    },
    expectedMaxCount: 1e3
  }, {
    name: 'variables',
    type: {
      kind: 'objects',
      name: _$$Y.SlideThemeVariableInfo
    },
    embedded: !0
  }, {
    name: 'styles',
    type: {
      kind: 'objects',
      name: _$$Y.SlideThemeStyleInfo
    },
    embedded: !0
  }, {
    name: 'variableSet',
    type: {
      kind: 'object',
      name: _$$Y.VariableSetLog
    },
    nullable: !0,
    filter: {
      and: [['key', '=', createParentRef('variableSetKey')], ['version', '=', createParentRef('varSetVersion')]]
    }
  }]
};
let pn = {
  name: _$$Y.StateGroup,
  permissionRequired: !1,
  fields: [...ep, {
    name: 'key',
    type: {
      kind: 'string'
    }
  }, {
    name: 'defaultStateKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    },
    bannedFromViews: !0
  }, {
    name: 'version',
    type: {
      kind: 'string'
    }
  }, {
    name: 'minNodeWidth',
    type: {
      kind: 'int'
    },
    nullable: !0
  }, {
    name: 'minNodeHeight',
    type: {
      kind: 'int'
    },
    nullable: !0
  }, {
    name: 'fillColor',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'checkpointId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'fileCheckpointId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'destinationKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'fullHierarchyPath',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'containingFrame',
    type: {
      kind: 'object',
      name: _$$Y.LibraryItemContainingFrame
    },
    embedded: !0,
    nullable: !0
  }, {
    name: 'libraryResourceId',
    type: {
      kind: 'string'
    },
    computed: !0,
    dependencies: {
      fileKey: NULL_FIELD_REF,
      hubFileId: NULL_FIELD_REF
    }
  }, em]
};
let pr = {
  name: _$$Y.StudentApplication,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'validatedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'roleType',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'eduPeriodEnd',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'schoolType',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'verificationType',
    type: {
      kind: 'string'
    },
    nullable: !0
  }]
};
let pa = [...ep, {
  name: 'key',
  type: {
    kind: 'string'
  }
}, {
  name: 'contentHash',
  type: {
    kind: 'string'
  }
}, {
  name: 'fileKey',
  type: {
    kind: 'string'
  },
  bannedFromViews: !0
}, {
  name: 'styleType',
  type: {
    kind: 'string'
  }
}, {
  name: 'sortPosition',
  type: {
    kind: 'string'
  },
  nullable: !0
}, {
  name: 'meta',
  type: {
    kind: 'string'
  },
  nullable: !0
}, {
  name: 'movedByFigma',
  type: {
    kind: 'string'
  },
  nullable: !0
}, {
  name: 'destinationKey',
  type: {
    kind: 'string'
  },
  nullable: !0
}];
let ps = {
  name: _$$Y.Style,
  permissionRequired: !1,
  fields: [...pa, em]
};
let po = {
  name: _$$Y.StyleLog,
  permissionRequired: !1,
  fields: [{
    name: 'description',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'description_rt',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'nodeId',
    type: {
      kind: 'string'
    }
  }, {
    name: 'checkpoint',
    type: {
      kind: 'object',
      name: _$$Y.Checkpoint
    },
    embedded: !0
  }, {
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'key',
    type: {
      kind: 'string'
    }
  }, {
    name: 'contentHash',
    type: {
      kind: 'string'
    }
  }, {
    name: 'userFacingVersion',
    type: {
      kind: 'string'
    }
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    },
    bannedFromViews: !0
  }, {
    name: 'styleType',
    type: {
      kind: 'string'
    }
  }, {
    name: 'sortPosition',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'meta',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'destinationKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'thumbnailUrl',
    type: {
      kind: 'string'
    },
    nullable: !0
  }]
};
let pl = {
  name: _$$Y.StyleWithDestinationAsset,
  permissionRequired: !0,
  fields: [...pa, {
    name: 'destinationAsset',
    type: {
      kind: 'object',
      name: _$$Y.Style
    },
    filter: ['key', '=', createParentRef('destinationKey')],
    nullable: !0
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      unpublishedAt: NULL_FIELD_REF,
      destinationAsset: {
        unpublishedAt: NULL_FIELD_REF,
        file: {
          ...ec
        }
      },
      file: {
        ...ec
      }
    }
  }],
  deprecated: {
    reason: 'This object has been deprecated and should no longer be used. Please use StyleWithDestinationAssetV2 instead.',
    date: '2022-09-19'
  }
};
let pd = {
  name: _$$Y.StyleWithDestinationAssetV2,
  permissionRequired: !0,
  fields: [...pl.fields, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'openFileKey',
      type: {
        kind: 'string'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      unpublishedAt: NULL_FIELD_REF,
      destinationAsset: {
        unpublishedAt: NULL_FIELD_REF,
        file: {
          ...ec
        }
      },
      file: {
        ...ec,
        key: NULL_FIELD_REF
      },
      hubFile: {
        id: NULL_FIELD_REF,
        unpublishedAt: NULL_FIELD_REF,
        canRead: [{
          userId: createViewRef('userId')
        }, NULL_FIELD_REF]
      }
    }
  }]
};
let pc = {
  name: _$$Y.StyleWithLegacySourceAsset,
  permissionRequired: !1,
  fields: [...pa, {
    name: 'legacySourceAsset',
    type: {
      kind: 'object',
      name: _$$Y.Style
    },
    filter: {
      and: [['destinationKey', '=', createParentRef('key')], ['movedByFigma', '<>', null]]
    },
    nullable: !0
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      legacySourceAsset: {
        id: NULL_FIELD_REF
      },
      file: {
        ...ec
      }
    }
  }]
};
let pu = {
  name: _$$Y.SupabaseOrg,
  permissionRequired: !1,
  embedded: !0,
  fields: [{
    name: 'plan',
    type: {
      kind: 'string'
    }
  }, {
    name: 'opt_in_tags',
    type: {
      kind: 'list',
      ofType: {
        kind: 'string'
      }
    }
  }, {
    name: 'allowed_release_channels',
    type: {
      kind: 'list',
      ofType: {
        kind: 'string'
      }
    }
  }, {
    name: 'id',
    type: {
      kind: 'string'
    }
  }, {
    name: 'name',
    type: {
      kind: 'string'
    }
  }]
};
let pp = {
  name: _$$Y.SupabaseAuth,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'string'
    }
  }, {
    name: 'authorized',
    type: {
      kind: 'bool'
    }
  }, {
    name: 'expired',
    type: {
      kind: 'bool'
    }
  }, {
    name: 'org',
    type: {
      kind: 'object',
      name: _$$Y.SupabaseOrg
    },
    embedded: !0,
    nullable: !0
  }]
};
let ph = {
  id: NULL_FIELD_REF,
  orgId: NULL_FIELD_REF,
  orgAccess: NULL_FIELD_REF,
  roleOnObjectForUser: [{
    userId: createViewRef('userId')
  }, {
    id: NULL_FIELD_REF,
    level: NULL_FIELD_REF
  }],
  currentPrivilegedOrgUser: [{
    userId: createViewRef('userId')
  }, {
    id: NULL_FIELD_REF,
    accountType: NULL_FIELD_REF,
    whiteboardPaidStatus: NULL_FIELD_REF,
    permission: NULL_FIELD_REF
  }]
};
let pg = {
  name: _$$Y.TaxInfo,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'string'
    }
  }, {
    name: 'regionalVatGstId',
    type: {
      kind: 'string'
    },
    typechecked: !1
  }, {
    name: 'canUpdateRegionalVatGst',
    type: {
      kind: 'bool'
    }
  }, {
    name: 'vatGstId',
    type: {
      kind: 'string'
    }
  }, {
    name: 'country',
    type: {
      kind: 'string'
    },
    typechecked: !1
  }, {
    name: 'state',
    type: {
      kind: 'string'
    },
    nullable: !0
  }]
};
let pf = [{
  name: 'id',
  type: {
    kind: 'bigint'
  }
}, {
  name: 'gracePeriodEnd',
  type: {
    kind: 'datetime'
  },
  nullable: !0
}, {
  name: 'aiFeaturesDisabledAt',
  type: {
    kind: 'datetime'
  },
  nullable: !0
}, {
  name: 'planSubscription',
  nullable: !0,
  type: {
    kind: 'object',
    name: _$$Y.PlanSubscription
  },
  orderBy: [['createdAt', 'DESC']],
  filter: {
    and: [['planParentId', '=', createParentRef('id')], ['planParentType', '=', 'Team']]
  },
  expectedMaxCount: 1
}, {
  name: 'studentTeamAt',
  type: {
    kind: 'datetime'
  },
  nullable: !0
}, {
  name: 'studentTeamState',
  type: {
    kind: 'enum',
    name: 'StudentTeamState'
  }
}, {
  name: 'orgId',
  type: {
    kind: 'bigint'
  },
  nullable: !0
}, {
  name: 'roleOnObjectTeamForUser',
  type: {
    kind: 'object',
    name: _$$Y.TeamRole
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  nullable: !0,
  filter: {
    and: [['userId', '=', createFieldRef('userId')], ['resourceId', '=', createParentRef('id')], ['resourceType', '=', 'team']]
  },
  checkCanRead: {
    userId: _$$dZ2('userId')
  }
}, {
  name: 'currentTeamUser',
  type: {
    kind: 'object',
    name: _$$Y.TeamUser
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  nullable: !0,
  filter: {
    and: [['userId', '=', createFieldRef('userId')], ['teamId', '=', createParentRef('id')]]
  }
}, {
  name: '_subscriptionRaw',
  type: {
    kind: 'enum',
    name: 'SubscriptionType'
  },
  nullable: !0
}, {
  name: 'subscription',
  type: {
    kind: 'enum',
    name: 'SubscriptionType'
  },
  computed: !0,
  nullable: !0,
  dependencies: {
    orgId: NULL_FIELD_REF,
    _subscriptionRaw: NULL_FIELD_REF,
    gracePeriodEnd: NULL_FIELD_REF
  }
}, {
  name: 'isStarterTeam',
  type: {
    kind: 'bool'
  },
  computed: !0,
  dependencies: {
    orgId: NULL_FIELD_REF,
    subscription: NULL_FIELD_REF
  }
}, {
  name: 'isStudentTeam',
  type: {
    kind: 'bool'
  },
  computed: !0,
  dependencies: {
    studentTeamState: NULL_FIELD_REF
  }
}, {
  name: 'expOneClickAskToEditTeamIdPublic',
  type: {
    kind: 'object',
    name: _$$Y.ExpOneClickAskToEditTeamId
  },
  resolver: {
    type: 'Statsig',
    statsigUser: {
      customIDs: {
        teamID: createParentRef('id')
      }
    },
    statsigResource: {
      type: 'experiment',
      experimentName: 'exp_one_click_ask_to_edit_team_id'
    }
  }
}, ...dI];
let p_ = [...pf, {
  name: 'name',
  type: {
    kind: 'string'
  }
}, {
  name: 'description',
  type: {
    kind: 'string'
  },
  nullable: !0
}, {
  name: 'imgUrl',
  type: {
    kind: 'string'
  },
  nullable: !0
}, {
  name: 'imgUrlTransformed',
  type: {
    kind: 'string'
  },
  nullable: !0,
  computed: !0,
  dependencies: {
    imgUrl: NULL_FIELD_REF
  }
}, {
  name: 'deletedAt',
  type: {
    kind: 'datetime'
  },
  nullable: !0
}, {
  name: 'stripeCustomerId',
  type: {
    kind: 'string'
  },
  nullable: !0
}, {
  name: 'vatGstId',
  type: {
    kind: 'string'
  },
  nullable: !0
}, {
  name: 'taxIdVerificationStatus',
  type: {
    kind: 'enum',
    name: 'TaxIdVerificationStatus'
  },
  nullable: !0
}, {
  name: 'figmaProvidedLibrariesDisabledAt',
  type: {
    kind: 'datetime'
  },
  nullable: !0
}, {
  name: 'designDefaultPaidStatus',
  type: {
    kind: 'string'
  },
  nullable: !0,
  computed: !0,
  dependencies: {
    teamDefaultPaidStatusDesign: {
      value: NULL_FIELD_REF
    },
    orgId: NULL_FIELD_REF
  }
}, {
  name: 'whiteboardDefaultPaidStatus',
  type: {
    kind: 'string'
  },
  nullable: !0,
  computed: !0,
  dependencies: {
    teamDefaultPaidStatusWhiteboard: {
      value: NULL_FIELD_REF
    },
    orgId: NULL_FIELD_REF
  }
}, {
  name: 'upgradeApprovalSettings',
  type: {
    kind: 'object',
    name: _$$Y.UpgradeApprovalSettings
  },
  embedded: !0,
  nullable: !0
}, {
  name: 'upgradeApprovalSettingsDeveloper',
  type: {
    kind: 'string'
  },
  computed: !0,
  dependencies: {
    upgradeApprovalSettings: {
      developer: NULL_FIELD_REF
    }
  }
}, {
  name: 'upgradeApprovalSettingsCollaborator',
  type: {
    kind: 'string'
  },
  computed: !0,
  dependencies: {
    upgradeApprovalSettings: {
      collaborator: NULL_FIELD_REF
    }
  }
}, {
  name: 'upgradeApprovalSettingsExpert',
  type: {
    kind: 'string'
  },
  computed: !0,
  dependencies: {
    upgradeApprovalSettings: {
      expert: NULL_FIELD_REF
    }
  }
}, {
  name: 'upgradeApprovalSettingsContent',
  type: {
    kind: 'string'
  },
  computed: !0,
  dependencies: {
    upgradeApprovalSettings: {
      content: NULL_FIELD_REF
    }
  }
}, {
  name: 'bundlesEnabledAt',
  type: {
    kind: 'datetime'
  },
  nullable: !0,
  bannedFromViews: !0
}, {
  name: 'prorationBillingEnabledAt',
  type: {
    kind: 'datetime'
  },
  nullable: !0
}, {
  name: 'teamDefaultPaidStatusDesign',
  type: {
    kind: 'object',
    name: _$$Y.PlanProperties
  },
  nullable: !0,
  filter: {
    and: [['planId', '=', createParentRef('id')], ['planType', '=', 'team'], ['property', '=', 'default_paid_status_design']]
  }
}, {
  name: 'teamDefaultPaidStatusWhiteboard',
  type: {
    kind: 'object',
    name: _$$Y.PlanProperties
  },
  nullable: !0,
  filter: {
    and: [['planId', '=', createParentRef('id')], ['planType', '=', 'team'], ['property', '=', 'default_paid_status_whiteboard']]
  }
}, {
  name: 'currentUser',
  nullable: !0,
  type: {
    kind: 'object',
    name: _$$Y.User
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  filter: ['id', '=', createFieldRef('userId')]
}, {
  name: '_testingOnlyUnlimitedConnectionsEnabledAtPlanProperty',
  type: {
    kind: 'object',
    name: _$$Y.PlanProperties
  },
  bannedFromViews: !0,
  filter: {
    and: [['planId', '=', createParentRef('id')], ['planType', '=', 'team'], ['property', '=', 'TESTING_ONLY_UNLIMITED_CONNECTIONS_ENABLED_AT']]
  },
  nullable: !0
}, {
  name: 'testingOnlyUnlimitedConnectionsEnabled',
  type: {
    kind: 'bool'
  },
  computed: !0,
  dependencies: {
    _testingOnlyUnlimitedConnectionsEnabledAtPlanProperty: {
      value: NULL_FIELD_REF
    }
  }
}, {
  name: 'orgSharedSetting',
  type: {
    kind: 'object',
    name: _$$Y.SharedOrgLicenseGroupSetting
  },
  nullable: !0,
  filter: {
    and: [['resourceType', '=', 'Org'], ['resourceId', '=', createParentRef('orgId')]]
  }
}, {
  name: '_hostPlanActiveResourceConnections',
  type: {
    kind: 'objects',
    name: _$$Y.ResourceConnection
  },
  nullable: !0,
  bannedFromViews: !0,
  filter: {
    and: [['hostPlanId', '=', createParentRef('id')], ['hostPlanType', '=', 'team'], ['disconnectedAt', '=', null]]
  },
  expectedMaxCount: 100
}, {
  name: '_connectedPlanActiveResourceConnections',
  type: {
    kind: 'objects',
    name: _$$Y.ResourceConnection
  },
  nullable: !0,
  bannedFromViews: !0,
  filter: {
    and: [['connectedPlanId', '=', createParentRef('id')], ['connectedPlanType', '=', 'team'], ['disconnectedAt', '=', null]]
  },
  expectedMaxCount: 100
}, {
  name: '_hostPlanPendingResourceConnectionInvites',
  type: {
    kind: 'objects',
    name: _$$Y.ResourceConnectionInvite
  },
  nullable: !0,
  bannedFromViews: !0,
  filter: {
    and: [['hostPlanId', '=', createParentRef('id')], ['hostPlanType', '=', 'team'], ['status', '=', 'pending']]
  },
  expectedMaxCount: 100
}, {
  name: 'connectionCount',
  type: {
    kind: 'int'
  },
  computed: !0,
  dependencies: {
    _hostPlanActiveResourceConnections: {
      id: NULL_FIELD_REF
    },
    _connectedPlanActiveResourceConnections: {
      id: NULL_FIELD_REF
    },
    _hostPlanPendingResourceConnectionInvites: {
      id: NULL_FIELD_REF
    }
  }
}, {
  name: 'featureFlagCampfireProvisionalAccessEnabled',
  type: {
    kind: 'object',
    name: _$$Y.StatsigFeatureGate
  },
  nullable: !0,
  resolver: {
    type: 'Statsig',
    statsigUser: {
      customIDs: {
        teamID: createParentRef('id')
      }
    },
    statsigResource: {
      type: 'flag',
      flagName: 'team_campfire_provisional_access_enabled'
    }
  }
}, {
  name: 'orgSamlConfigs',
  type: {
    kind: 'objects',
    name: _$$Y.OrgSamlConfig
  },
  filter: ['orgId', '=', createParentRef('orgId')],
  checkCanRead: {
    userId: _$$dZ2('userId')
  },
  nullable: !0,
  expectedMaxCount: 50,
  bannedFromViews: !0
}, {
  name: 'currentIDPUser',
  type: {
    kind: 'object',
    name: _$$Y.ComputedIDPUser
  },
  nullable: !0,
  computed: !0,
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  dependencies: {
    orgSamlConfigs: {
      id: NULL_FIELD_REF
    },
    currentUser: [{
      userId: createFieldRef('userId')
    }, {
      id: NULL_FIELD_REF,
      email: NULL_FIELD_REF
    }]
  }
}, ...d_, ...cO('Team'), ...dc];
let pA = {
  name: _$$Y.TeamPublicInfo,
  permissionRequired: !1,
  fields: [...pf, {
    name: 'org',
    type: {
      kind: 'object',
      name: _$$Y.OrgPublicInfo
    },
    filter: ['id', '=', createParentRef('orgId')],
    nullable: !0
  }, {
    name: 'orgPublicInfo',
    type: {
      kind: 'object',
      name: _$$Y.OrgPublicInfo
    },
    filter: ['id', '=', createParentRef('orgId')],
    nullable: !0
  }, {
    name: 'orgForGuests',
    type: {
      kind: 'object',
      name: _$$Y.OrgInfo
    },
    filter: ['id', '=', createParentRef('orgId')],
    nullable: !0,
    checkCanRead: {
      userId: _$$dZ2('userId')
    }
  }, {
    name: 'orgForMembers',
    type: {
      kind: 'object',
      name: _$$Y.Org
    },
    filter: ['id', '=', createParentRef('orgId')],
    nullable: !0,
    checkCanRead: {
      userId: _$$dZ2('userId')
    }
  }, {
    name: '_org_permsV2',
    type: {
      kind: 'object',
      name: _$$Y.Org
    },
    filter: ['id', '=', createParentRef('orgId')],
    nullable: !0,
    bannedFromViews: !0
  }, ...N, ...lz, ...la]
};
let py = {
  name: _$$Y.TeamLimitedInfo,
  permissionRequired: !0,
  fields: [...p_, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      _team: {
        canViewLimitedInfo: [{
          userId: createFieldRef('userId')
        }, NULL_FIELD_REF]
      }
    }
  }, {
    name: '_team',
    type: {
      kind: 'object',
      name: _$$Y.Team
    },
    filter: ['id', '=', createParentRef('id')],
    bannedFromViews: !0
  }, {
    name: 'org',
    type: {
      kind: 'object',
      name: _$$Y.Org
    },
    filter: ['id', '=', createParentRef('orgId')],
    nullable: !0,
    bannedFromViews: !0
  }, {
    name: '_org_permsV2',
    type: {
      kind: 'object',
      name: _$$Y.Org
    },
    filter: ['id', '=', createParentRef('orgId')],
    nullable: !0,
    bannedFromViews: !0
  }]
};
let pb = {
  name: _$$Y.Team,
  permissionRequired: !0,
  fields: [...p_, {
    name: 'imgUrls',
    type: {
      kind: 'map',
      valueType: {
        kind: 'string'
      }
    },
    nullable: !0
  }, {
    name: 'imgUrlsTransformed',
    type: {
      kind: 'map',
      valueType: {
        kind: 'string'
      }
    },
    nullable: !0,
    computed: !0,
    dependencies: {
      imgUrls: NULL_FIELD_REF
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'deletedBy',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'experimentSeed',
    type: {
      kind: 'bigint'
    },
    nullable: !0,
    deprecated: {
      reason: 'Used by legacy experiment system no longer used',
      date: '2024-09-22'
    }
  }, {
    name: 'licenseGroupId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'defaultPermission',
    type: {
      kind: 'enum',
      name: 'TeamDefaultPermission'
    },
    nullable: !0
  }, {
    name: 'licenseGroup',
    type: {
      kind: 'object',
      name: _$$Y.LicenseGroup
    },
    filter: ['id', '=', createParentRef('licenseGroupId')],
    nullable: !0
  }, {
    name: 'workspaceId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'workspace',
    type: {
      kind: 'object',
      name: _$$Y.Workspace
    },
    filter: ['id', '=', createParentRef('workspaceId')],
    nullable: !0
  }, {
    name: 'workspaceSharedSetting',
    type: {
      kind: 'object',
      name: _$$Y.SharedOrgLicenseGroupSetting
    },
    nullable: !0,
    filter: {
      and: [['resourceType', '=', 'Workspace'], ['resourceId', '=', createParentRef('workspaceId')]]
    }
  }, {
    name: 'taxInfo',
    type: {
      kind: 'object',
      name: _$$Y.TaxInfo
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    resolver: {
      type: 'HTTP',
      uri: '/api/internal/livegraph/sinatra_resolver/tax_info',
      queryParams: {
        team_id: createParentRef('id'),
        userId: createFieldRef('userId')
      },
      realtimePolicy: {
        type: 'Static'
      }
    }
  }, {
    name: 'legalName',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'migratedStripeCustomerId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'eduGracePeriod',
    type: {
      kind: 'object',
      name: _$$Y.EduGracePeriod
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: {
      and: [['userId', '=', createFieldRef('userId')], ['teamId', '=', createParentRef('id')]]
    }
  }, {
    name: 'studentAutoverifyingTeamAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'trialPeriodEnd',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'gracePeriodType',
    type: {
      kind: 'enum',
      name: 'GracePeriodType'
    },
    nullable: !0,
    typechecked: !1
  }, {
    name: 'projectsCount',
    type: {
      kind: 'int'
    },
    nullable: !0
  }, {
    name: 'editorsCount',
    type: {
      kind: 'int'
    },
    nullable: !0
  }, {
    name: 'editorsWhiteboardCount',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'editorsTotalUniqueCount',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'expSlidesStarterTeamLimitsOnTeam',
    type: {
      kind: 'object',
      name: _$$Y.ExpSlidesStarterTeamLimits
    },
    resolver: {
      type: 'Statsig',
      statsigUser: {
        customIDs: {
          teamID: createParentRef('id')
        }
      },
      statsigResource: {
        type: 'experiment',
        experimentName: 'slides_starter_team_limits_exp'
      }
    },
    nullable: !0,
    deprecated: {
      reason: 'No longer used',
      date: '2025-06-24'
    }
  }, {
    name: 'expStarterGlobalFileLimitOnTeam',
    type: {
      kind: 'object',
      name: _$$Y.ExpStarterGlobalFileLimitOnTeam
    },
    resolver: {
      type: 'Statsig',
      statsigUser: {
        customIDs: {
          teamID: createParentRef('id')
        }
      },
      statsigResource: {
        type: 'experiment',
        experimentName: 'starter_global_file_limits'
      }
    },
    nullable: !0
  }, {
    name: 'featureFlagSitesDesignStarterCombinedLimit',
    type: {
      kind: 'object',
      name: _$$Y.StatsigFeatureGate
    },
    resolver: {
      type: 'Statsig',
      statsigUser: {
        customIDs: {
          teamID: createParentRef('id'),
          planKey: createParentRef('id')
        }
      },
      statsigResource: {
        type: 'flag',
        flagName: 'sites_design_starter_combined_file_limit'
      }
    },
    nullable: !0
  }, {
    name: 'restrictionsList',
    type: {
      kind: 'list',
      ofType: {
        kind: 'enum',
        name: 'TeamRestrictionsType'
      }
    },
    computed: !0,
    dependencies: {
      subscription: NULL_FIELD_REF,
      projectsCount: NULL_FIELD_REF,
      studentTeamAt: NULL_FIELD_REF,
      createdAt: NULL_FIELD_REF,
      teamFileCounts: {
        designFileCount: NULL_FIELD_REF,
        whiteboardFileCount: NULL_FIELD_REF,
        slideFileCount: NULL_FIELD_REF,
        sitesFileCount: NULL_FIELD_REF,
        totalFileCount: NULL_FIELD_REF
      },
      expStarterGlobalFileLimitOnTeam: {
        id: NULL_FIELD_REF,
        isGlobalFileLimitOn: NULL_FIELD_REF,
        grandfatherDate: NULL_FIELD_REF
      },
      featureFlagSitesDesignStarterCombinedLimit: {
        id: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        value: NULL_FIELD_REF
      }
    }
  }, {
    name: 'hasLockedRestriction',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      id: NULL_FIELD_REF,
      restrictionsList: NULL_FIELD_REF
    }
  }, {
    name: 'roles',
    type: {
      kind: 'objects',
      name: _$$Y.TeamRole
    },
    filter: {
      and: [['resourceId', '=', createParentRef('id')], ['resourceType', '=', 'team']]
    },
    checkCanRead: {
      userId: _$$dZ2('userId')
    },
    expectedMaxCount: 5e3
  }, {
    name: 'pendingRoles',
    type: {
      kind: 'objects',
      name: _$$Y.TeamRole
    },
    filter: {
      and: [['resourceId', '=', createParentRef('id')], ['resourceType', '=', 'team'], {
        or: [['userId', '=', null], ['pendingEmail', '<>', null]]
      }]
    },
    checkCanRead: {
      userId: _$$dZ2('userId')
    },
    expectedMaxCount: 1e4
  }, {
    name: 'roleUpdates',
    type: {
      kind: 'objects',
      name: _$$Y.TeamRole
    },
    args: [{
      name: 'updatedAtTimestamp',
      type: {
        kind: 'datetime'
      }
    }],
    filter: {
      and: [['resourceId', '=', createParentRef('id')], ['resourceType', '=', 'team'], ['updatedAt', '>', createFieldRef('updatedAtTimestamp')]]
    },
    expectedMaxCount: 2e3,
    checkCanRead: {
      userId: _$$dZ2('userId')
    }
  }, {
    name: 'roleDeletionUpdates',
    type: {
      kind: 'objects',
      name: _$$Y.TeamRoleLog
    },
    args: [{
      name: 'updatedAtTimestamp',
      type: {
        kind: 'datetime'
      }
    }],
    filter: {
      and: [['triggeredAt', '>', createFieldRef('updatedAtTimestamp')], ['resourceId', '=', createParentRef('id')], ['resourceType', '=', 'team'], ['op', '=', 'delete']]
    },
    expectedMaxCount: 2e3
  }, {
    name: 'adminRoles',
    type: {
      kind: 'objects',
      name: _$$Y.TeamRole
    },
    nullable: !0,
    filter: {
      and: [['resourceId', '=', createParentRef('id')], ['resourceType', '=', 'team'], ['level', '>=', e6.ADMIN]]
    },
    checkCanRead: {
      userId: _$$dZ2('userId')
    },
    expectedMaxCount: 200
  }, {
    name: 'ownerRole',
    type: {
      kind: 'object',
      name: _$$Y.TeamRole
    },
    filter: {
      and: [['resourceId', '=', createParentRef('id')], ['resourceType', '=', 'team'], ['level', '=', e6.OWNER], ['userId', '<>', null], ['pendingEmail', '=', null]]
    },
    checkCanRead: {
      fieldName: 'canReadOwnerRole',
      userId: _$$dZ2('userId')
    },
    nullable: !0
  }, {
    name: 'roleOnObjectForUser',
    type: {
      kind: 'object',
      name: _$$Y.TeamRole
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: {
      and: [['userId', '=', createFieldRef('userId')], ['resourceId', '=', createParentRef('id')], ['resourceType', '=', 'team']]
    },
    checkCanRead: {
      userId: _$$dZ2('userId')
    }
  }, {
    name: 'projects',
    type: {
      kind: 'objects',
      name: _$$Y.Project
    },
    nullable: !0,
    filter: {
      and: [['teamId', '=', createParentRef('id')], ['inviteOnlyAt', '=', null], ['path', '<>', '']]
    },
    expectedMaxCount: 2e3,
    deprecated: {
      reason: 'This field does not perform permission-checking. Use .allProjects instead.',
      date: '2025-07-24'
    }
  }, {
    name: 'allProjects',
    type: {
      kind: 'objects',
      name: _$$Y.Project
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: {
      and: [['teamId', '=', createParentRef('id')], ['path', '<>', '']]
    },
    checkCanRead: {
      userId: createFieldRef('userId')
    },
    expectedMaxCount: 2e3
  }, {
    name: 'allActiveProjects',
    type: {
      kind: 'objects',
      name: _$$Y.Project
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: {
      and: [['teamId', '=', createParentRef('id')], ['path', '<>', ''], ['deletedAt', '=', null], ['trashedAt', '=', null]]
    },
    checkCanRead: {
      userId: createFieldRef('userId')
    },
    expectedMaxCount: 2e3
  }, {
    name: 'projectUpdates',
    type: {
      kind: 'objects',
      name: _$$Y.Project
    },
    args: [{
      name: 'updatedAtTimestamp',
      type: {
        kind: 'datetime'
      }
    }],
    nullable: !0,
    filter: {
      and: [['teamId', '=', createParentRef('id')], ['path', '<>', ''], ['deletedAt', '=', null], ['updatedAt', '>', createFieldRef('updatedAtTimestamp')]]
    },
    checkCanRead: {
      userId: _$$dZ2('userId')
    },
    expectedMaxCount: 2e3
  }, {
    name: 'hasActiveProjectConnection',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      allActiveProjects: [{
        userId: createViewRef('userId')
      }, {
        activeProjectResourceConnections: {
          id: NULL_FIELD_REF
        }
      }],
      _connectedPlanActiveResourceConnections: {
        id: NULL_FIELD_REF
      }
    }
  }, {
    name: 'orgEditProjects',
    type: {
      kind: 'objects',
      name: _$$Y.Project
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: {
      and: [['teamId', '=', createParentRef('id')], ['sharingAudienceControl', '=', 'org_edit']]
    },
    checkCanRead: {
      userId: createFieldRef('userId')
    },
    expectedMaxCount: 2e3
  }, {
    name: 'orgAccess',
    type: {
      kind: 'enum',
      name: 'OrgAccess'
    },
    nullable: !0,
    typechecked: !1
  }, {
    name: 'currentOrgUser',
    type: {
      kind: 'object',
      name: _$$Y.OrgUser
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: {
      and: [['userId', '=', createFieldRef('userId')], ['orgId', '=', createParentRef('orgId')], ['permission', '<>', 'guest']]
    }
  }, {
    name: 'currentPrivilegedOrgUser',
    type: {
      kind: 'object',
      name: _$$Y.PrivilegedOrgUser
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: {
      and: [['userId', '=', createFieldRef('userId')], ['orgId', '=', createParentRef('orgId')], ['permission', '<>', 'guest']]
    }
  }, {
    name: 'currentBaseOrgUser',
    type: {
      kind: 'object',
      name: _$$Y.BaseOrgUser
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: {
      and: [['userId', '=', createFieldRef('userId')], ['orgId', '=', createParentRef('orgId')]]
    }
  }, {
    name: 'userAuthn',
    type: {
      kind: 'object',
      name: _$$Y.UserAuthn
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: ['userId', '=', createFieldRef('userId')],
    bannedFromViews: !0
  }, {
    ...dk,
    name: 'libraryTeamSubscriptions',
    checkCanRead: {
      userId: createFieldRef('userId')
    },
    filter: {
      and: [['teamId', '=', createParentRef('id')], ['isSubscribed', '=', !0]]
    }
  }, {
    ...dk,
    name: 'libraryTeamSubscriptionsForSlides',
    checkCanRead: {
      userId: _$$dZ2('userId')
    },
    filter: {
      and: [['slidesSubscribed', '=', !0], ['teamId', '=', createParentRef('id')]]
    }
  }, {
    ...dk,
    name: 'libraryTeamSubscriptionsForBuzz',
    checkCanRead: {
      userId: _$$dZ2('userId')
    },
    filter: {
      and: [['buzzSubscribed', '=', !0], ['teamId', '=', createParentRef('id')]]
    }
  }, {
    ...dk,
    name: 'libraryTeamSubscriptionsForFigJam',
    checkCanRead: {
      userId: _$$dZ2('userId')
    },
    filter: {
      and: [['figJamSubscribed', '=', !0], ['teamId', '=', createParentRef('id')]]
    }
  }, {
    name: 'libraryTeamSubscriptionOverrides',
    type: {
      kind: 'objects',
      name: _$$Y.LibraryTeamSubscription
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    checkCanRead: {
      userId: createFieldRef('userId')
    },
    filter: ['teamId', '=', createParentRef('id')],
    expectedMaxCount: 1e3
  }, {
    name: 'libraryTeamSubscriptionOverridesV2',
    type: {
      kind: 'objects',
      name: _$$Y.LibraryTeamSubscription
    },
    args: [],
    filter: ['teamId', '=', createParentRef('id')],
    expectedMaxCount: 1e3
  }, {
    name: 'libraryTeamCommunitySubscriptions',
    type: {
      kind: 'objects',
      name: _$$Y.LibraryTeamSubscription
    },
    filter: {
      and: [['teamId', '=', createParentRef('id')], ['hubFileId', '<>', null]]
    },
    expectedMaxCount: 1e3
  }, {
    name: 'licenseGroupAdmins',
    type: {
      kind: 'objects',
      name: _$$Y.LicenseGroupAdmin
    },
    filter: {
      and: [['licenseGroupId', '<>', null], ['licenseGroupId', '=', createParentRef('licenseGroupId')]]
    },
    expectedMaxCount: 1e3
  }, {
    name: 'hasPublishedSite',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      projects: {
        hasPublishedSite: NULL_FIELD_REF
      }
    }
  }, {
    name: 'org',
    type: {
      kind: 'object',
      name: _$$Y.Org
    },
    filter: ['id', '=', createParentRef('orgId')],
    nullable: !0,
    deprecated: {
      reason: 'This field does not perform permission-checking. Use .orgPermissioned instead.',
      date: '2025-07-01'
    }
  }, {
    name: 'orgPermissioned',
    type: {
      kind: 'object',
      name: _$$Y.Org
    },
    filter: ['id', '=', createParentRef('orgId')],
    nullable: !0,
    checkCanRead: {
      userId: _$$dZ2('userId')
    }
  }, {
    name: 'orgForMembers',
    type: {
      kind: 'object',
      name: _$$Y.Org
    },
    filter: ['id', '=', createParentRef('orgId')],
    nullable: !0,
    checkCanRead: {
      userId: _$$dZ2('userId')
    }
  }, {
    name: 'orgForGuests',
    type: {
      kind: 'object',
      name: _$$Y.OrgInfo
    },
    filter: ['id', '=', createParentRef('orgId')],
    nullable: !0,
    checkCanRead: {
      userId: _$$dZ2('userId')
    }
  }, {
    name: '_org_permsV2',
    type: {
      kind: 'object',
      name: _$$Y.Org
    },
    filter: ['id', '=', createParentRef('orgId')],
    nullable: !0,
    bannedFromViews: !0
  }, {
    name: 'hasProEditLinksEditHeuristics',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {}
  }, {
    name: '_hasTeamAccess',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'permissionLevel',
      type: {
        kind: 'int'
      }
    }],
    computed: !0,
    dependencies: ph
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    permissionName: 'TEAM::CAN_VIEW',
    dependencies: zD['TEAM::CAN_VIEW']
  }, {
    name: 'hasEditRoleAccess',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    permissionName: 'TEAM::EDIT_ROLE_ACCESS',
    dependencies: zD['TEAM::EDIT_ROLE_ACCESS']
  }, {
    name: 'experimentAssignments',
    type: {
      kind: 'objects',
      name: _$$Y.ExperimentAssignment
    },
    filter: {
      and: [['resourceId', '=', createParentRef('id')], ['resourceType', '=', 'Team']]
    },
    expectedMaxCount: 200
  }, {
    name: 'teamFileCounts',
    type: {
      kind: 'object',
      name: _$$Y.TeamFileCount
    },
    nullable: !0,
    filter: ['teamId', '=', createParentRef('id')]
  }, {
    name: 'pendingTeamRoleRequests',
    type: {
      kind: 'objects',
      name: _$$Y.TeamRoleRequest
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    checkCanRead: {
      userId: createFieldRef('userId')
    },
    filter: {
      and: [['teamId', '=', createParentRef('id')], ['status', '=', 'pending']]
    },
    expectedMaxCount: 1e3
  }, {
    name: 'isLockedForUser',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      studentTeamAt: NULL_FIELD_REF,
      restrictionsList: NULL_FIELD_REF,
      eduGracePeriod: [{
        userId: createViewRef('userId')
      }, {
        id: NULL_FIELD_REF,
        isValid: NULL_FIELD_REF
      }],
      currentUser: [{
        userId: createViewRef('userId')
      }, {
        studentValidatedAt: NULL_FIELD_REF
      }]
    }
  }, {
    name: 'canAccessProFeature',
    type: {
      kind: 'bool'
    },
    computed: !0,
    deprecated: {
      reason: 'Use the Plan `.tier` property instead. This field is equivalent to checking if the Plan Tier is `PRO` or `STUDENT`. See https://go/tou/can-access-pro-feature for a guide on how to migrate your features to use this API.',
      date: '2024-11-12'
    },
    dependencies: {
      id: NULL_FIELD_REF,
      subscription: NULL_FIELD_REF,
      studentTeamAt: NULL_FIELD_REF,
      gracePeriodEnd: NULL_FIELD_REF,
      planSubscription: {
        tier: NULL_FIELD_REF,
        status: NULL_FIELD_REF
      }
    }
  }, {
    name: 'defaultColorPaletteUuid',
    type: {
      kind: 'uuid'
    },
    nullable: !0
  }, {
    name: 'fileUpdates',
    type: {
      kind: 'objects',
      name: _$$Y.File
    },
    args: [{
      name: 'updatedAtTimestamp',
      type: {
        kind: 'datetime'
      }
    }],
    checkCanRead: {
      fieldName: 'canAccess',
      userId: _$$dZ2('userId'),
      sessionId: _$$dZ2('sessionId'),
      anonymousUserId: _$$dZ2('anonymousUserId'),
      linkAccessOverrideKey: null
    },
    filter: {
      and: [['teamId', '=', createParentRef('id')], ['deletedAt', '=', null], ['updatedAt', '>', createFieldRef('updatedAtTimestamp')]]
    },
    expectedMaxCount: 2e3
  }, {
    name: 'sharingAudienceControl',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'sharingAudienceControlComputed',
    type: {
      kind: 'enum',
      name: 'LinkAccess'
    },
    computed: !0,
    dependencies: {
      sharingAudienceControl: NULL_FIELD_REF,
      orgAccess: NULL_FIELD_REF,
      defaultPermission: NULL_FIELD_REF
    }
  }, {
    name: 'orgBrowsable',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      orgId: NULL_FIELD_REF,
      orgAccess: NULL_FIELD_REF,
      sharingAudienceControl: NULL_FIELD_REF
    }
  }, {
    name: 'hidden',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      orgId: NULL_FIELD_REF,
      orgAccess: NULL_FIELD_REF,
      sharingAudienceControl: NULL_FIELD_REF
    }
  }, {
    name: 'sampledEditors',
    type: {
      kind: 'objects',
      name: _$$Y.TeamUser
    },
    nullable: !0,
    filter: {
      and: [['teamId', '=', createParentRef('id')], {
        or: [['designPaidStatus', '=', 'full'], ['whiteboardPaidStatus', '=', 'full']]
      }]
    },
    expectedMaxCount: 5
  }, {
    name: 'aiDataSharingEnabledAtPlanProperty',
    type: {
      kind: 'object',
      name: _$$Y.PlanProperties
    },
    filter: {
      and: [['planId', '=', createParentRef('id')], ['planType', '=', 'team'], ['property', '=', 'AI_DATA_SHARING_ENABLED_AT']]
    },
    nullable: !0
  }, {
    name: 'isAiDataSharingEnabled',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      studentTeamAt: NULL_FIELD_REF,
      aiDataSharingEnabledAtPlanProperty: {
        value: NULL_FIELD_REF
      }
    }
  }, {
    name: 'aiDataSharingSearchEnabledAtPlanProperty',
    type: {
      kind: 'object',
      name: _$$Y.PlanProperties
    },
    filter: {
      and: [['planId', '=', createParentRef('id')], ['planType', '=', 'team'], ['property', '=', 'AI_DATA_SHARING_SEARCH_ENABLED_AT']]
    },
    nullable: !0,
    deprecated: {
      reason: 'Use `aiDataSharingEnabledAtPlanProperty` instead.',
      date: '2024-06-07'
    }
  }, {
    name: 'isAiDataSharingSearchEnabled',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      aiDataSharingSearchEnabledAtPlanProperty: {
        value: NULL_FIELD_REF
      }
    },
    deprecated: {
      reason: 'Use `isAiDataSharingEnabled` instead.',
      date: '2024-06-07'
    }
  }, {
    name: 'aiDataSharingGenerativeEnabledAtPlanProperty',
    type: {
      kind: 'object',
      name: _$$Y.PlanProperties
    },
    filter: {
      and: [['planId', '=', createParentRef('id')], ['planType', '=', 'team'], ['property', '=', 'AI_DATA_SHARING_GENERATIVE_ENABLED_AT']]
    },
    nullable: !0,
    deprecated: {
      reason: 'Use `aiDataSharingEnabledAtPlanProperty` instead.',
      date: '2024-06-07'
    }
  }, {
    name: 'isAiDataSharingGenerativeEnabled',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      aiDataSharingGenerativeEnabledAtPlanProperty: {
        value: NULL_FIELD_REF
      }
    },
    deprecated: {
      reason: 'Use `isAiDataSharingEnabled` instead.',
      date: '2024-06-07'
    }
  }, {
    name: 'blockedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'communityBlockedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'planProperties',
    type: {
      kind: 'objects',
      name: _$$Y.PlanProperties
    },
    filter: {
      and: [['planId', '=', createParentRef('id')], ['planType', '=', 'team']]
    },
    expectedMaxCount: 200
  }, {
    name: 'communityProfile',
    type: {
      kind: 'object',
      name: _$$Y.Profile
    },
    nullable: !0,
    filter: ['teamId', '=', createParentRef('id')]
  }, {
    name: 'repoUpdates',
    type: {
      kind: 'objects',
      name: _$$Y.Repo
    },
    args: [{
      name: 'updatedAtTimestamp',
      type: {
        kind: 'datetime'
      }
    }],
    checkCanRead: {
      fieldName: 'canReadV3',
      userId: _$$dZ2('userId'),
      sessionId: _$$dZ2('sessionId'),
      anonymousUserId: _$$dZ2('anonymousUserId')
    },
    filter: {
      and: [['teamId', '=', createParentRef('id')], ['updatedAt', '>', createFieldRef('updatedAtTimestamp')]]
    },
    expectedMaxCount: 2e3
  }, {
    name: 'isOrphaned',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      ownerRole: {
        id: NULL_FIELD_REF
      },
      adminRoles: {
        id: NULL_FIELD_REF,
        pending: NULL_FIELD_REF,
        userId: NULL_FIELD_REF
      },
      orgId: NULL_FIELD_REF
    }
  }, {
    name: 'upgradeApprovalSetting',
    type: {
      kind: 'string'
    },
    nullable: !0,
    computed: !0,
    dependencies: {},
    deprecated: {
      reason: 'Used for an initial version of the billing remodel upgrade mechanics. No longer needed',
      date: '2024-08-21'
    }
  }, {
    name: 'componentUpdates',
    type: {
      kind: 'objects',
      name: _$$Y.TeamComponentUpdate
    },
    nullable: !0,
    resolver: {
      type: 'Redis',
      keyPrefix: 'team-component-updates',
      keyPostfix: [createParentRef('id')]
    }
  }, {
    name: 'stateGroupUpdates',
    type: {
      kind: 'objects',
      name: _$$Y.TeamStateGroupUpdate
    },
    nullable: !0,
    resolver: {
      type: 'Redis',
      keyPrefix: 'team-state-group-updates',
      keyPostfix: [createParentRef('id')]
    }
  }, {
    name: 'discoverableLibraries',
    type: {
      kind: 'objects',
      name: _$$Y.DiscoverableLibrary
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    resolver: {
      type: 'HTTP',
      uri: '/api/internal/livegraph/sinatra_resolver/team_discoverable_libraries',
      queryParams: {
        team_id: createParentRef('id'),
        userId: createFieldRef('userId')
      },
      realtimePolicy: {
        type: 'Static'
      }
    }
  }, {
    name: 'fontFileUpdateForTeam',
    type: {
      kind: 'objects',
      name: _$$Y.FontFile
    },
    nullable: !0,
    args: [{
      name: 'updatedAtTimestamp',
      type: {
        kind: 'datetime'
      },
      nullable: !0
    }],
    filter: {
      and: [['teamId', '=', createParentRef('id')], ['updatedAt', '>', createFieldRef('updatedAtTimestamp')]]
    },
    orderBy: [['createdAt', 'DESC']],
    expectedMaxCount: 100
  }, {
    name: 'billingRemodelEnabledExperiment',
    type: {
      kind: 'object',
      name: _$$Y.BillingRemodelEnabledExperiment
    },
    resolver: {
      type: 'Statsig',
      statsigUser: {
        customIDs: {
          teamID: createParentRef('id')
        }
      },
      statsigResource: {
        type: 'experiment',
        experimentName: 'campfire_for_team'
      }
    }
  }, {
    name: 'pendingAssetTransferRequest',
    type: {
      kind: 'object',
      name: _$$Y.AssetTransferRequest
    },
    nullable: !0,
    filter: {
      and: [['status', '=', 'pending'], ['sourceTeamId', '=', createParentRef('id')], ['transferType', '=', 'team']]
    },
    checkCanRead: {
      userId: _$$dZ2('userId')
    }
  }, {
    name: 'assignedSeatCounts',
    deprecated: {
      reason: 'Use assignedSeatCountsV2 on the Plan object',
      date: '2025-05-13'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    type: {
      kind: 'objects',
      name: _$$Y.AssignedBillableProductSeatCount
    },
    resolver: {
      type: 'HTTP',
      uri: '/api/internal/livegraph/sinatra_resolver/assigned_seat_counts',
      queryParams: {
        plan_parent_id: createParentRef('id'),
        plan_type: 'Team',
        userId: createFieldRef('userId')
      },
      realtimePolicy: {
        type: 'RedisPubsub',
        channelPrefix: 'assigned-seat-counts-',
        channelPostfix: ['team', createParentRef('id')]
      }
    }
  }, {
    name: 'availableSeatCounts',
    deprecated: {
      reason: 'Use availableSeatCountsV2 on the Plan object',
      date: '2025-05-13'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    type: {
      kind: 'objects',
      name: _$$Y.AvailableBillableProductSeatCount
    },
    resolver: {
      type: 'HTTP',
      uri: '/api/internal/livegraph/sinatra_resolver/available_seat_counts',
      queryParams: {
        plan_parent_id: createParentRef('id'),
        plan_type: 'Team',
        userId: createFieldRef('userId')
      },
      realtimePolicy: {
        type: 'RedisPubsub',
        channelPrefix: 'available-seat-counts-',
        channelPostfix: ['team', createParentRef('id')]
      }
    }
  }, {
    name: 'sanctionedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'fileViewHistoryTeamUserEvents',
    type: {
      kind: 'objects',
      name: _$$Y.TeamUserEvent
    },
    nullable: !0,
    filter: {
      and: [['teamId', '=', createParentRef('id')], ['eventType', '=', 'file_view_history_exp_team_restart']]
    },
    orderBy: [['createdAt', 'ASC']],
    expectedMaxCount: 1
  }, {
    name: 'canEnterFileViewHistoryExp',
    type: {
      kind: 'bool'
    },
    computed: !0,
    nullable: !0,
    dependencies: {
      fileViewHistoryTeamUserEvents: {
        id: NULL_FIELD_REF
      }
    }
  }, {
    name: 'expOneClickAskToEditTeamId',
    type: {
      kind: 'object',
      name: _$$Y.ExpOneClickAskToEditTeamId
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    resolver: {
      type: 'Statsig',
      statsigUser: {
        customIDs: {
          userID: createFieldRef('userId'),
          teamID: createParentRef('id')
        }
      },
      statsigResource: {
        type: 'experiment',
        experimentName: 'exp_one_click_ask_to_edit_team_id'
      }
    }
  }, {
    name: 'trackTags',
    type: {
      kind: 'object',
      name: _$$Y.TeamTrackTags
    },
    embedded: !0,
    nullable: !0
  }, {
    name: 'expSocialProofExpansionTeamId',
    type: {
      kind: 'object',
      name: _$$Y.ExpSocialProofExpansionTeamId
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    resolver: {
      type: 'Statsig',
      statsigUser: {
        customIDs: {
          userID: createFieldRef('userId'),
          teamID: createParentRef('id')
        }
      },
      statsigResource: {
        type: 'experiment',
        experimentName: 'exp_social_proof_expansion_team_id'
      }
    }
  }, ...N, a3, a6, aJ, a0, a9, se, a7, a8, aX, aQ, sa, so, sl, ss, sd, su, sp, sc, a$, st, si, sn, sr, aZ, a5, a4, sm, sh, a1, a2, s8, {
    name: 'permissionTeamFeatureFlags',
    type: {
      kind: 'list',
      ofType: {
        kind: 'string'
      }
    },
    computed: !0,
    dependencies: {
      permissionFlagPermissionsTeamTestFlag: {
        id: null,
        name: null,
        value: null
      }
    }
  }]
};
let pv = {
  name: _$$Y.TeamActivity,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'string'
    }
  }, {
    name: 'actionAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'metadata',
    type: {
      kind: 'string'
    },
    nullable: !0
  }]
};
let pI = {
  name: _$$Y.TeamFileCount,
  permissionRequired: !1,
  naturalKey: new Set(['id']),
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'designFileCount',
    type: {
      kind: 'int'
    }
  }, {
    name: 'whiteboardFileCount',
    type: {
      kind: 'int'
    }
  }, {
    name: 'slideFileCount',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'sitesFileCount',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'cooperFileCount',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'figmakeFileCount',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'totalFileCount',
    type: {
      kind: 'int'
    },
    computed: !0,
    dependencies: {
      designFileCount: NULL_FIELD_REF,
      whiteboardFileCount: NULL_FIELD_REF,
      slideFileCount: NULL_FIELD_REF,
      sitesFileCount: NULL_FIELD_REF,
      cooperFileCount: NULL_FIELD_REF,
      figmakeFileCount: NULL_FIELD_REF
    }
  }]
};
let pE = {
  name: _$$Y.TeamRole,
  permissionRequired: !1,
  fields: [...d$, {
    name: 'team',
    type: {
      kind: 'object',
      name: _$$Y.Team
    },
    filter: ['id', '=', createParentRef('resourceId')],
    nullable: !0,
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'canEdit',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      id: NULL_FIELD_REF,
      userId: NULL_FIELD_REF,
      level: NULL_FIELD_REF,
      team: {
        id: NULL_FIELD_REF,
        roleOnObjectForUser: [{
          userId: createViewRef('userId')
        }, {
          id: NULL_FIELD_REF,
          userId: NULL_FIELD_REF,
          level: NULL_FIELD_REF
        }]
      }
    }
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      team: {
        canRead: [{
          userId: createViewRef('userId')
        }, NULL_FIELD_REF]
      }
    }
  }, {
    name: 'canReadOwnerRole',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      level: NULL_FIELD_REF,
      team: {
        canRead: [{
          userId: createViewRef('userId')
        }, NULL_FIELD_REF],
        org: {
          canAdmin: [{
            userId: createViewRef('userId')
          }, NULL_FIELD_REF]
        }
      }
    }
  }, {
    name: 'eduGracePeriod',
    type: {
      kind: 'object',
      name: _$$Y.EduGracePeriod
    },
    filter: {
      and: [['teamId', '=', createParentRef('resourceId')], ['userId', '=', createParentRef('userId')]]
    },
    nullable: !0
  }]
};
let px = {
  name: _$$Y.TeamRoleRequest,
  permissionRequired: !0,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'status',
    type: {
      kind: 'string'
    }
  }, {
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'handledAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'handledBy',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'message',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'requesterUserId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'level',
    type: {
      kind: 'int'
    }
  }, {
    name: 'team',
    type: {
      kind: 'object',
      name: _$$Y.Team
    },
    filter: ['id', '=', createParentRef('teamId')],
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    checkCanRead: {
      userId: createViewRef('userId')
    }
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      requesterUserId: NULL_FIELD_REF,
      team: [{
        userId: createViewRef('userId')
      }, {
        id: NULL_FIELD_REF,
        canAdmin: [{
          userId: createViewRef('userId')
        }, NULL_FIELD_REF]
      }]
    }
  }, {
    name: 'user',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    filter: ['id', '=', createParentRef('requesterUserId')]
  }]
};
let pS = {
  name: _$$Y.TeamUserEvent,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'teamUserId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'eventType',
    type: {
      kind: 'string'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }]
};
let pw = {
  name: _$$Y.TeamUser,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'designPaidStatus',
    type: {
      kind: 'enum',
      name: 'TeamUserPaidStatus'
    }
  }, {
    name: 'whiteboardPaidStatus',
    type: {
      kind: 'enum',
      name: 'TeamUserPaidStatus'
    }
  }, {
    name: 'draftsFolderId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'team',
    type: {
      kind: 'object',
      name: _$$Y.Team
    },
    filter: {
      and: [['id', '=', createParentRef('teamId')]]
    },
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: '_team',
    type: {
      kind: 'object',
      name: _$$Y.Team
    },
    filter: ['id', '=', createParentRef('teamId')],
    nullable: !0,
    bannedFromViews: !0
  }, {
    name: 'teamInfo',
    type: {
      kind: 'object',
      name: _$$Y.TeamLimitedInfo
    },
    filter: ['id', '=', createParentRef('teamId')],
    nullable: !0,
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'user',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    filter: {
      and: [['id', '=', createParentRef('userId')]]
    }
  }, {
    name: 'designAccountTypeRequest',
    type: {
      kind: 'object',
      name: _$$Y.AccountTypeRequest
    },
    filter: {
      and: [['requestableUserId', '=', createParentRef('id')], ['requestableUserType', '=', 'TeamUser'], ['_editorTypeRaw', '=', 0]]
    },
    nullable: !0
  }, {
    name: 'whiteboardAccountTypeRequest',
    type: {
      kind: 'object',
      name: _$$Y.AccountTypeRequest
    },
    filter: {
      and: [['requestableUserId', '=', createParentRef('id')], ['requestableUserType', '=', 'TeamUser'], ['_editorTypeRaw', '=', 1]]
    },
    nullable: !0
  }, {
    name: 'devModeAccountTypeRequest',
    type: {
      kind: 'object',
      name: _$$Y.AccountTypeRequest
    },
    filter: {
      and: [['requestableUserId', '=', createParentRef('id')], ['requestableUserType', '=', 'TeamUser'], ['_editorTypeRaw', '=', 2]]
    },
    nullable: !0
  }, {
    name: 'draftsProject',
    type: {
      kind: 'object',
      name: _$$Y.Project
    },
    filter: ['id', '=', createParentRef('draftsFolderId')],
    checkCanRead: {
      userId: createSessionRef('userId')
    },
    nullable: !0
  }, {
    name: 'favoritedFiles',
    type: {
      kind: 'objects',
      name: _$$Y.FavoritedFile
    },
    nullable: !0,
    filter: {
      and: [['resourceType', '=', 'file'], ['userId', '=', createParentRef('userId')], ['teamId', '=', createParentRef('teamId')]]
    },
    expectedMaxCount: 1e3
  }, {
    name: 'favoritedPrototypes',
    type: {
      kind: 'objects',
      name: _$$Y.FavoritedPrototype
    },
    nullable: !0,
    filter: {
      and: [['resourceType', '=', 'prototype'], ['userId', '=', createParentRef('userId')], ['teamId', '=', createParentRef('teamId')]]
    },
    expectedMaxCount: 100
  }, {
    name: 'favoritedProjects',
    type: {
      kind: 'objects',
      name: _$$Y.FavoritedProject
    },
    nullable: !0,
    filter: {
      and: [['resourceType', '=', 'folder'], ['userId', '=', createParentRef('userId')], ['teamId', '=', createParentRef('teamId')]]
    },
    expectedMaxCount: 2e3
  }, {
    name: 'planlessFavoritedFiles',
    type: {
      kind: 'objects',
      name: _$$Y.FavoritedFile
    },
    nullable: !0,
    filter: {
      and: [['resourceType', '=', 'file'], ['userId', '=', createParentRef('userId')], ['orgId', '=', null], ['teamId', '=', null]]
    },
    expectedMaxCount: 100
  }, {
    name: 'planlessFavoritedPrototypes',
    type: {
      kind: 'objects',
      name: _$$Y.FavoritedPrototype
    },
    nullable: !0,
    filter: {
      and: [['resourceType', '=', 'prototype'], ['userId', '=', createParentRef('userId')], ['orgId', '=', null], ['teamId', '=', null]]
    },
    expectedMaxCount: 100
  }, {
    name: 'planlessFavoritedProjects',
    type: {
      kind: 'objects',
      name: _$$Y.FavoritedProject
    },
    nullable: !0,
    filter: {
      and: [['resourceType', '=', 'folder'], ['userId', '=', createParentRef('userId')], ['orgId', '=', null], ['teamId', '=', null]]
    },
    expectedMaxCount: 500
  }, {
    name: 'fileBrowserPreferences',
    type: {
      kind: 'object',
      name: _$$Y.FileBrowserPreferences
    },
    nullable: !0,
    filter: {
      and: [['userId', '=', createParentRef('userId')], ['teamId', '=', createParentRef('teamId')], ['orgId', '=', null]]
    }
  }, {
    name: 'teamUserEvents',
    type: {
      kind: 'objects',
      name: _$$Y.TeamUserEvent
    },
    args: [{
      name: 'eventType',
      type: {
        kind: 'string'
      }
    }],
    nullable: !0,
    filter: {
      and: [['teamUserId', '=', createParentRef('id')], ['eventType', '=', createFieldRef('eventType')]]
    },
    orderBy: [['createdAt', 'ASC']],
    expectedMaxCount: 200
  }, {
    name: 'firstTrackedDesignAccountTypeRequestCreatedAt',
    type: {
      kind: 'datetime'
    },
    computed: !0,
    nullable: !0,
    dependencies: {
      teamUserEvents: [{
        eventType: 'design_account_type_request_created'
      }, {
        createdAt: NULL_FIELD_REF
      }]
    }
  }, {
    name: 'devModeTrialStartAt',
    type: {
      kind: 'datetime'
    },
    computed: !0,
    nullable: !0,
    dependencies: {
      teamUserEvents: [{
        eventType: 'first_design_account_type_request_created_after_dev_mode_release'
      }, {
        createdAt: NULL_FIELD_REF
      }]
    }
  }, {
    name: 'activeSeatTypeUpgrade',
    type: {
      kind: 'object',
      name: _$$Y.TeamUserUpgrade
    },
    orderBy: [['createdAt', 'DESC']],
    filter: {
      and: [['teamUserId', '=', createParentRef('id')], ['downgradedAt', '=', null], {
        or: [['billableProductKey', '=', 'collaborator'], ['billableProductKey', '=', 'developer'], ['billableProductKey', '=', 'expert'], ['billableProductKey', '=', 'content']]
      }]
    },
    nullable: !0,
    expectedMaxCount: 1
  }, {
    name: 'latestProvisionalAccess',
    type: {
      kind: 'object',
      name: _$$Y.ProvisionalAccess
    },
    orderBy: [['endsAt', 'DESC']],
    filter: {
      and: [['planUserId', '=', createParentRef('id')], ['deactivatedAt', '=', null]]
    },
    nullable: !0,
    expectedMaxCount: 1
  }, {
    name: 'teamProjectRoles',
    type: {
      kind: 'objects',
      name: _$$Y.ProjectRole
    },
    nullable: !0,
    filter: {
      and: [['userId', '=', createParentRef('userId')], ['resourceType', '=', 'folder'], ['teamId', '=', createParentRef('teamId')]]
    },
    expectedMaxCount: 200
  }, {
    name: 'teamRole',
    type: {
      kind: 'object',
      name: _$$Y.TeamRole
    },
    nullable: !0,
    filter: {
      and: [['userId', '=', createParentRef('userId')], ['resourceId', '=', createParentRef('teamId')], ['resourceType', '=', 'team']]
    },
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'hasFullPlanSpace',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      teamRole: {
        id: NULL_FIELD_REF
      },
      _team: {
        orgId: NULL_FIELD_REF,
        deletedAt: NULL_FIELD_REF
      }
    }
  }, {
    name: 'hasLimitedPlanSpace',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      teamRole: {
        id: NULL_FIELD_REF
      },
      teamProjectRoles: {
        id: NULL_FIELD_REF
      },
      _team: {
        orgId: NULL_FIELD_REF,
        deletedAt: NULL_FIELD_REF
      }
    }
  }, {
    name: 'pendingAccountTypeRequests',
    type: {
      kind: 'objects',
      name: _$$Y.AccountTypeRequest
    },
    filter: {
      and: [['requestableUserId', '=', createParentRef('id')], ['requestableUserType', '=', 'TeamUser'], ['status', '=', 'pending']]
    },
    nullable: !0,
    expectedMaxCount: 100
  }, {
    name: 'currentSeat',
    type: {
      kind: 'object',
      name: _$$Y.Seat
    },
    filter: {
      and: [['currentPlanUserId', '=', createParentRef('id')], ['currentPlanUserType', '=', 'TeamUser'], ['deprovisionedAt', '=', null]]
    },
    nullable: !0
  }, {
    name: 'provisionalAccesses',
    type: {
      kind: 'objects',
      name: _$$Y.ProvisionalAccess
    },
    filter: {
      and: [['planUserId', '=', createParentRef('id')], ['planUserType', '=', 'TeamUser']]
    },
    nullable: !0,
    expectedMaxCount: 10
  }, {
    name: 'lastActive',
    type: {
      kind: 'object',
      name: _$$Y.TeamActivity
    },
    orderBy: [['actionAt', 'DESC']],
    filter: {
      and: [['teamId', '=', createParentRef('teamId')], ['userId', '=', createParentRef('userId')]]
    },
    nullable: !0
  }, {
    name: 'teamUserDowngrades',
    type: {
      kind: 'objects',
      name: _$$Y.TeamUserUpgrade
    },
    nullable: !0,
    filter: {
      and: [['teamUserId', '=', createParentRef('id')], ['downgradedAt', '<>', null]]
    },
    expectedMaxCount: 1e3
  }, {
    name: 'mostRecentDesignUserUpgrade',
    type: {
      kind: 'object',
      name: _$$Y.TeamUserUpgrade
    },
    nullable: !0,
    filter: {
      and: [['_editorTypeRaw', '=', 0], ['teamUserId', '=', createParentRef('id')]]
    },
    orderBy: [['createdAt', 'DESC']],
    expectedMaxCount: 1
  }, {
    name: 'mostRecentWhiteboardUserUpgrade',
    type: {
      kind: 'object',
      name: _$$Y.TeamUserUpgrade
    },
    nullable: !0,
    filter: {
      and: [['_editorTypeRaw', '=', 1], ['teamUserId', '=', createParentRef('id')]]
    },
    orderBy: [['createdAt', 'DESC']],
    expectedMaxCount: 1
  }, {
    name: 'activeDesignUserUpgrade',
    type: {
      kind: 'object',
      name: _$$Y.TeamUserUpgrade
    },
    nullable: !0,
    filter: {
      and: [['_editorTypeRaw', '=', 0], ['teamUserId', '=', createParentRef('id')], ['downgradedAt', '=', null]]
    },
    orderBy: [['createdAt', 'DESC']],
    expectedMaxCount: 1
  }, {
    name: 'activeWhiteboardUserUpgrade',
    type: {
      kind: 'object',
      name: _$$Y.TeamUserUpgrade
    },
    nullable: !0,
    filter: {
      and: [['_editorTypeRaw', '=', 1], ['teamUserId', '=', createParentRef('id')], ['downgradedAt', '=', null]]
    },
    orderBy: [['createdAt', 'DESC']],
    expectedMaxCount: 1
  }, T]
};
let pC = {
  name: _$$Y.TeamWithSummary,
  permissionRequired: !0,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'team',
    type: {
      kind: 'object',
      name: _$$Y.Team
    },
    filter: ['id', '=', createParentRef('id')],
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'currentUser',
    nullable: !0,
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    filter: ['id', '=', createFieldRef('userId')]
  }, {
    name: 'memberCount',
    type: {
      kind: 'int'
    },
    computed: !0,
    dependencies: {
      id: NULL_FIELD_REF,
      team: {
        id: NULL_FIELD_REF,
        projects: {
          id: NULL_FIELD_REF
        },
        orgAccess: NULL_FIELD_REF,
        roles: {
          id: NULL_FIELD_REF
        }
      }
    }
  }, {
    name: 'projectCount',
    type: {
      kind: 'int'
    },
    computed: !0,
    dependencies: {
      id: NULL_FIELD_REF,
      team: {
        projects: {
          id: NULL_FIELD_REF
        }
      }
    }
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      id: NULL_FIELD_REF,
      team: {
        canRead: [{
          userId: createViewRef('userId')
        }, NULL_FIELD_REF],
        deletedAt: NULL_FIELD_REF,
        orgAccess: NULL_FIELD_REF,
        currentPrivilegedOrgUser: [{
          userId: createViewRef('userId')
        }, {
          id: NULL_FIELD_REF,
          permission: NULL_FIELD_REF
        }],
        adminRoles: {
          id: NULL_FIELD_REF,
          pending: NULL_FIELD_REF,
          userId: NULL_FIELD_REF
        }
      }
    }
  }]
};
let pT = {
  name: _$$Y.TeamInAdmin,
  permissionRequired: !0,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'team',
    type: {
      kind: 'object',
      name: _$$Y.Team
    },
    filter: ['id', '=', createParentRef('id')],
    checkCanRead: {
      fieldName: 'canViewInAdmin',
      userId: createSessionRef('userId')
    }
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      team: {
        canViewInAdmin: [{
          userId: createViewRef('userId')
        }, NULL_FIELD_REF]
      }
    }
  }, {
    name: 'teamUsers',
    type: {
      kind: 'objects',
      name: _$$Y.TeamUser
    },
    nullable: !0,
    filter: ['teamId', '=', createParentRef('id')],
    expectedMaxCount: 2e4
  }]
};
let pk = {
  naturalKey: new Set(['fileKey']),
  name: _$$Y.Template,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'string'
    }
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'fileVersionId',
    type: {
      kind: 'string'
    }
  }, {
    name: 'name',
    type: {
      kind: 'string'
    }
  }, {
    name: 'description',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'coverImagePath',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'thumbnailUrl',
    type: {
      kind: 'string'
    },
    computed: !0,
    typechecked: !1,
    dependencies: {
      coverImagePath: NULL_FIELD_REF
    }
  }, {
    name: 'thumbnailGuid',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'publishScope',
    type: {
      kind: 'string'
    }
  }, {
    name: 'orgId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'licenseGroupId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'workspaceId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'teamId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'publishedByUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'publishedByUser',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    filter: ['id', '=', createParentRef('publishedByUserId')],
    deprecated: {
      reason: `Use publishedByUserNullable instead (likely aliasing it to publishedByUser
          see https://www.notion.so/figma/How-to-evolve-the-LiveGraph-schema-157dd4506a234e1c9097f914f514032b)`,
      date: '2023-02-25'
    }
  }, {
    name: 'publishedByUserNullable',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    filter: ['id', '=', createParentRef('publishedByUserId')],
    nullable: !0
  }, {
    name: 'unpublishedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'hasCustomThumbnail',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      coverImagePath: NULL_FIELD_REF,
      thumbnailGuid: NULL_FIELD_REF
    }
  }, {
    name: 'file',
    type: {
      kind: 'object',
      name: _$$Y.File
    },
    filter: ['key', '=', createParentRef('fileKey')],
    checkCanRead: {
      fieldName: 'canInsertTemplateV3',
      userId: createSessionRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId')
    }
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'sessionId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }, {
      name: 'anonymousUserId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      id: NULL_FIELD_REF,
      fileKey: NULL_FIELD_REF,
      file: {
        id: NULL_FIELD_REF,
        canInsertTemplateV3: [{
          userId: createViewRef('userId'),
          sessionId: createViewRef('sessionId'),
          anonymousUserId: createViewRef('anonymousUserId')
        }, NULL_FIELD_REF]
      }
    }
  }]
};
let pR = {
  name: _$$Y.SubscriptionUpdateSloData,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'key',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }]
};
let pN = {
  name: _$$Y.UnclaimedDomainUser,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'string'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'user',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    nullable: !0,
    filter: ['id', '=', createParentRef('userId')]
  }, {
    name: 'status',
    type: {
      kind: 'string'
    },
    nullable: !0
  }]
};
let pP = [{
  name: 'id',
  type: {
    kind: 'bigint'
  }
}, {
  name: 'name',
  type: {
    kind: 'string'
  },
  nullable: !0
}, {
  name: 'description',
  type: {
    kind: 'string'
  },
  nullable: !0
}, {
  name: 'rawHandle',
  type: {
    kind: 'string'
  },
  nullable: !0
}, {
  name: 'handle',
  type: {
    kind: 'string'
  },
  computed: !0,
  dependencies: {
    id: NULL_FIELD_REF,
    name: NULL_FIELD_REF,
    rawHandle: NULL_FIELD_REF
  }
}, {
  name: 'rawImgUrl',
  type: {
    kind: 'string'
  },
  nullable: !0
}, {
  name: 'userPublicImgUrl',
  type: {
    kind: 'string'
  },
  computed: !0,
  dependencies: {
    id: NULL_FIELD_REF,
    name: NULL_FIELD_REF,
    rawHandle: NULL_FIELD_REF,
    rawImgUrl: NULL_FIELD_REF
  }
}, {
  name: 'teamUsers',
  type: {
    kind: 'objects',
    name: _$$Y.TeamUser
  },
  nullable: !0,
  filter: ['userId', '=', createParentRef('id')],
  expectedMaxCount: 200
}, {
  name: 'paginatedRecentFiles',
  args: [{
    name: 'action',
    type: {
      kind: 'string'
    }
  }, {
    name: 'firstPageSize',
    type: {
      kind: 'int'
    }
  }, {
    name: 'sortOrder',
    type: {
      kind: 'string'
    }
  }],
  type: {
    kind: 'objects',
    name: _$$Y.RecentFile2
  },
  nullable: !0,
  filter: {
    and: [['userId', '=', createParentRef('id')], ['action', '=', createFieldRef('action')]]
  },
  pagination: {
    firstPageSize: createFieldRef('firstPageSize'),
    sortOrder: createFieldRef('sortOrder'),
    cursorColumnSet: {
      actionAt: ['actionAt']
    },
    selectedCursorColumn: 'actionAt'
  }
}, {
  name: 'paginatedRecentFilesByEditorType',
  args: [{
    name: 'action',
    type: {
      kind: 'string'
    }
  }, {
    name: 'firstPageSize',
    type: {
      kind: 'int'
    }
  }, {
    name: 'sortOrder',
    type: {
      kind: 'string'
    }
  }, {
    name: '_editorTypeRaw',
    type: {
      kind: 'bigint'
    }
  }],
  type: {
    kind: 'objects',
    name: _$$Y.RecentFile2
  },
  nullable: !0,
  filter: {
    and: [['userId', '=', createParentRef('id')], ['action', '=', createFieldRef('action')], ['_editorTypeRaw', '=', createFieldRef('_editorTypeRaw')]]
  },
  pagination: {
    firstPageSize: createFieldRef('firstPageSize'),
    sortOrder: createFieldRef('sortOrder'),
    cursorColumnSet: {
      actionAt: ['actionAt']
    },
    selectedCursorColumn: 'actionAt'
  }
}];
let pO = {
  name: _$$Y.User,
  permissionRequired: !1,
  fields: [...pP, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'email',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'emailValidatedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'studentValidatedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'adminAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'blockedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'restrictionLevel',
    type: {
      kind: 'int'
    },
    nullable: !0
  }, {
    name: 'draftsFolderId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'externalRestrictedOrgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'currentUser',
    nullable: !0,
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    filter: ['id', '=', createFieldRef('userId')]
  }, {
    name: 'canAdminProfileUser',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    computed: !0,
    dependencies: {
      currentUser: [{
        userId: createViewRef('userId')
      }, {
        profileId: NULL_FIELD_REF
      }],
      profileId: NULL_FIELD_REF
    }
  }, {
    name: 'testPlan',
    type: {
      kind: 'object',
      name: _$$Y.TestPlan
    },
    nullable: !0,
    computed: !0,
    dependencies: {
      id: NULL_FIELD_REF
    }
  }, {
    name: 'testPlanUser',
    type: {
      kind: 'object',
      name: _$$Y.TestPlanUser
    },
    nullable: !0,
    computed: !0,
    dependencies: {
      id: NULL_FIELD_REF,
      testPlan: {
        id: NULL_FIELD_REF,
        name: NULL_FIELD_REF
      }
    }
  }, {
    name: 'draftsProject',
    type: {
      kind: 'object',
      name: _$$Y.Project
    },
    filter: ['id', '=', createParentRef('draftsFolderId')],
    checkCanRead: {
      userId: createSessionRef('userId')
    },
    nullable: !0
  }, {
    name: 'userMonetizationMetadata',
    type: {
      kind: 'object',
      name: _$$Y.UserMonetizationMetadata
    },
    filter: ['userId', '=', createParentRef('id')],
    nullable: !0
  }, {
    name: 'accountManagerMessages',
    type: {
      kind: 'objects',
      name: _$$Y.AccountManagerMessage
    },
    filter: ['targetUserId', '=', createParentRef('id')],
    nullable: !0,
    expectedMaxCount: 10
  }, {
    name: 'onboardingSignals',
    type: {
      kind: 'object',
      name: _$$Y.OnboardingUserSignals
    },
    nullable: !0,
    filter: ['userId', '=', createParentRef('id')]
  }, {
    name: 'profile',
    type: {
      kind: 'object',
      name: _$$Y.UserProfile
    },
    embedded: !0,
    nullable: !0
  }, {
    name: 'profileId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'communityProfile',
    type: {
      kind: 'object',
      name: _$$Y.Profile
    },
    nullable: !0,
    filter: ['id', '=', createParentRef('profileId')]
  }, {
    name: 'communityProfileNotificationBell',
    type: {
      kind: 'object',
      name: _$$Y.CommunityNotificationBell
    },
    nullable: !0,
    resolver: {
      type: 'Redis',
      keyPrefix: 'persistent-community-notification-bell',
      keyPostfix: [createParentRef('profileId')]
    }
  }, {
    name: 'notificationExperimentInfo',
    type: {
      kind: 'object',
      name: _$$Y.NotificationExperimentInfo
    },
    args: [{
      name: 'cacheNonce',
      type: {
        kind: 'string'
      }
    }],
    nullable: !0,
    resolver: {
      type: 'Redis',
      keyPrefix: 'notification-experiment-info',
      keyPostfix: [createParentRef('id')]
    },
    filter: ['id', '=', createFieldRef('cacheNonce')]
  }, {
    name: 'desktopPushNotification',
    type: {
      kind: 'object',
      name: _$$Y.DesktopPushNotification
    },
    args: [{
      name: 'cacheNonce',
      type: {
        kind: 'string'
      }
    }],
    nullable: !0,
    resolver: {
      type: 'Redis',
      keyPrefix: 'desktop-push-notification',
      keyPostfix: [createParentRef('id')]
    },
    filter: ['id', '=', createFieldRef('cacheNonce')]
  }, {
    name: 'assetTransferReload',
    type: {
      kind: 'object',
      name: _$$Y.AssetTransferReload
    },
    args: [{
      name: 'cacheNonce',
      type: {
        kind: 'string'
      }
    }],
    nullable: !0,
    resolver: {
      type: 'Redis',
      keyPrefix: 'asset-transfer-reload',
      keyPostfix: [createParentRef('id')]
    },
    filter: ['id', '=', createFieldRef('cacheNonce')]
  }, {
    name: 'isSystemUser',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      email: NULL_FIELD_REF
    }
  }, {
    name: 'imgUrl',
    type: {
      kind: 'string'
    },
    computed: !0,
    dependencies: {
      id: NULL_FIELD_REF,
      email: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      rawHandle: NULL_FIELD_REF,
      rawImgUrl: NULL_FIELD_REF
    }
  }, {
    name: 'emailDomain',
    type: {
      kind: 'string'
    },
    computed: !0,
    nullable: !0,
    dependencies: {
      email: NULL_FIELD_REF
    }
  }, {
    name: 'utcOffset',
    type: {
      kind: 'int'
    },
    nullable: !0
  }, {
    name: 'phoneNumber',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'pluginPublishingBlockedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'communityCommentingBlockedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'communityBlockedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'googleSsoOnlyAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'experimentSeed',
    type: {
      kind: 'bigint'
    },
    nullable: !0,
    deprecated: {
      reason: 'Used by legacy experiment system no longer used',
      date: '2024-09-22'
    }
  }, {
    name: 'communityBetaAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'roleDeletionUpdates',
    type: {
      kind: 'objects',
      name: _$$Y.RoleLog
    },
    args: [{
      name: 'updatedAtTimestamp',
      type: {
        kind: 'datetime'
      }
    }],
    filter: {
      and: [['triggeredAt', '>', createFieldRef('updatedAtTimestamp')], ['userId', '=', createParentRef('id')], ['op', '=', 'delete']]
    },
    expectedMaxCount: 2e3
  }, {
    name: 'teamRoles',
    type: {
      kind: 'objects',
      name: _$$Y.TeamRole
    },
    nullable: !0,
    filter: {
      and: [['userId', '=', createParentRef('id')], ['resourceType', '=', 'team']]
    },
    expectedMaxCount: 2e3
  }, {
    name: 'teamRoleUpdates',
    type: {
      kind: 'objects',
      name: _$$Y.TeamRole
    },
    args: [{
      name: 'updatedAtTimestamp',
      type: {
        kind: 'datetime'
      }
    }],
    filter: {
      and: [['userId', '=', createParentRef('id')], ['resourceType', '=', 'team'], ['updatedAt', '>', createFieldRef('updatedAtTimestamp')]]
    },
    expectedMaxCount: 400
  }, {
    name: 'teamEditRoles',
    type: {
      kind: 'objects',
      name: _$$Y.TeamRole
    },
    filter: {
      and: [['userId', '=', createParentRef('id')], ['resourceType', '=', 'team'], ['level', '>=', e6.EDIT_FILE_METADATA]]
    },
    expectedMaxCount: 1e3
  }, {
    name: 'orgAwareTeamRoles',
    type: {
      kind: 'objects',
      name: _$$Y.OrgAwareTeamRole
    },
    args: [{
      name: 'orgId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    checkCanRead: {
      orgId: createFieldRef('orgId')
    },
    filter: {
      and: [['userId', '=', createParentRef('id')], ['resourceType', '=', 'team']]
    },
    expectedMaxCount: 2e3
  }, {
    name: 'teamRole',
    type: {
      kind: 'object',
      name: _$$Y.TeamRole
    },
    args: [{
      name: 'teamId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: {
      and: [['userId', '=', createParentRef('id')], ['resourceType', '=', 'team'], ['resourceId', '=', createFieldRef('teamId')]]
    }
  }, {
    name: 'teamRoleRequestUpdates',
    type: {
      kind: 'objects',
      name: _$$Y.TeamRoleRequest
    },
    args: [{
      name: 'updatedAtTimestamp',
      type: {
        kind: 'datetime'
      },
      nullable: !0
    }],
    nullable: !0,
    checkCanRead: {
      userId: createSessionRef('userId')
    },
    filter: {
      and: [['requesterUserId', '=', createParentRef('id')], ['updatedAt', '>', createFieldRef('updatedAtTimestamp')]]
    },
    orderBy: [['createdAt', 'DESC']],
    expectedMaxCount: 100
  }, {
    name: 'projectRoles',
    type: {
      kind: 'objects',
      name: _$$Y.ProjectRole
    },
    nullable: !0,
    filter: {
      and: [['userId', '=', createParentRef('id')], ['resourceType', '=', 'folder']]
    },
    expectedMaxCount: 5e3
  }, {
    name: 'projectRoleUpdates',
    type: {
      kind: 'objects',
      name: _$$Y.ProjectRole
    },
    args: [{
      name: 'updatedAtTimestamp',
      type: {
        kind: 'datetime'
      }
    }],
    filter: {
      and: [['userId', '=', createParentRef('id')], ['resourceType', '=', 'folder'], ['updatedAt', '>', createFieldRef('updatedAtTimestamp')]]
    },
    expectedMaxCount: 5e3
  }, {
    name: 'teamProjectRoles',
    type: {
      kind: 'objects',
      name: _$$Y.ProjectRole
    },
    args: [{
      name: 'teamId',
      type: {
        kind: 'bigint'
      }
    }],
    nullable: !0,
    filter: {
      and: [['userId', '=', createParentRef('id')], ['teamId', '=', createFieldRef('teamId')], ['resourceType', '=', 'folder']]
    },
    expectedMaxCount: 200
  }, {
    name: 'createdProjects',
    type: {
      kind: 'objects',
      name: _$$Y.ProjectRole
    },
    args: [{
      name: 'initialPageSize',
      type: {
        kind: 'int'
      }
    }],
    nullable: !0,
    filter: {
      and: [['userId', '=', createParentRef('id')], ['resourceType', '=', 'folder'], ['level', '=', e6.OWNER], ['pendingEmail', '=', null]]
    },
    orderBy: [['createdAt', 'DESC']],
    expectedMaxCount: 200
  }, {
    name: 'sharedProjectRolesWithoutOrgDeletedDrafts',
    type: {
      kind: 'objects',
      name: _$$Y.ProjectRole
    },
    nullable: !0,
    filter: {
      and: [['userId', '=', createParentRef('id')], ['resourceType', '=', 'folder'], ['isShared', '=', !0], ['teamId', '<>', null]]
    },
    expectedMaxCount: 1e3
  }, {
    name: 'hasSharedProjects',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'orgId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      sharedProjectRolesWithoutOrgDeletedDrafts: {
        id: NULL_FIELD_REF,
        project: {
          orgId: NULL_FIELD_REF,
          team: {
            orgId: NULL_FIELD_REF
          }
        }
      }
    }
  }, {
    name: 'projectEditRoles',
    type: {
      kind: 'objects',
      name: _$$Y.ProjectRole
    },
    filter: {
      and: [['userId', '=', createParentRef('id')], ['resourceType', '=', 'folder'], ['level', '>=', e6.EDIT_FILE_METADATA]]
    },
    expectedMaxCount: 35e3
  }, {
    name: 'projectRole',
    type: {
      kind: 'object',
      name: _$$Y.ProjectRole
    },
    args: [{
      name: 'projectId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: {
      and: [['userId', '=', createParentRef('id')], ['resourceType', '=', 'folder'], ['resourceId', '=', createFieldRef('projectId')]]
    }
  }, {
    name: 'projectSubscriptions',
    type: {
      kind: 'objects',
      name: _$$Y.ProjectSubscription
    },
    nullable: !0,
    filter: ['userId', '=', createParentRef('id')],
    expectedMaxCount: 5e3
  }, {
    name: 'fileRoles',
    type: {
      kind: 'objects',
      name: _$$Y.FileRole
    },
    nullable: !0,
    filter: {
      and: [['userId', '=', createParentRef('id')], ['resourceType', '=', 'file']]
    },
    expectedMaxCount: 200
  }, {
    name: 'fileRoleUpdates',
    type: {
      kind: 'objects',
      name: _$$Y.FileRole
    },
    args: [{
      name: 'updatedAtTimestamp',
      type: {
        kind: 'datetime'
      }
    }],
    filter: {
      and: [['userId', '=', createParentRef('id')], ['resourceType', '=', 'file'], ['updatedAt', '>', createFieldRef('updatedAtTimestamp')]]
    },
    expectedMaxCount: 200
  }, {
    name: 'pendingFileRoleRequest',
    type: {
      kind: 'object',
      name: _$$Y.FileRoleRequest
    },
    args: [{
      name: 'fileKey',
      type: {
        kind: 'string'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: {
      and: [['requesterUserId', '=', createParentRef('id')], ['status', '=', 'pending'], ['fileKey', '=', createFieldRef('fileKey')]]
    },
    shadowCheckCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'repoRoles',
    type: {
      kind: 'objects',
      name: _$$Y.RepoRole
    },
    nullable: !0,
    filter: {
      and: [['userId', '=', createParentRef('id')], ['resourceType', '=', 'file_repo']]
    },
    expectedMaxCount: 200
  }, {
    name: 'repoRoleUpdates',
    type: {
      kind: 'objects',
      name: _$$Y.RepoRole
    },
    args: [{
      name: 'updatedAtTimestamp',
      type: {
        kind: 'datetime'
      }
    }],
    filter: {
      and: [['userId', '=', createParentRef('id')], ['resourceType', '=', 'file_repo'], ['updatedAt', '>', createFieldRef('updatedAtTimestamp')]]
    },
    expectedMaxCount: 200
  }, {
    name: 'repoRole',
    type: {
      kind: 'object',
      name: _$$Y.RepoRole
    },
    args: [{
      name: 'repoId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: {
      and: [['userId', '=', createParentRef('id')], ['resourceType', '=', 'file_repo'], ['resourceId', '=', createFieldRef('repoId')]]
    }
  }, {
    name: 'guestOrgUser',
    type: {
      kind: 'object',
      name: _$$Y.GuestOrgUser
    },
    args: [{
      name: 'orgId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: {
      and: [['userId', '=', createParentRef('id')], ['orgId', '=', createFieldRef('orgId')], ['permission', '=', 'guest']]
    }
  }, {
    name: 'baseOrgUser',
    type: {
      kind: 'object',
      name: _$$Y.BaseOrgUser
    },
    args: [{
      name: 'orgId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: {
      and: [['userId', '=', createParentRef('id')], ['orgId', '=', createFieldRef('orgId')]]
    }
  }, {
    name: 'currentTeamUser',
    type: {
      kind: 'object',
      name: _$$Y.TeamUser
    },
    args: [{
      name: 'teamId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: {
      and: [['userId', '=', createParentRef('id')], ['teamId', '=', createFieldRef('teamId')]]
    }
  }, {
    name: 'planUserRecords',
    type: {
      kind: 'objects',
      name: _$$Y.PlanUserRecord
    },
    filter: ['userId', '=', createParentRef('id')],
    nullable: !0,
    checkCanRead: {
      userId: createSessionRef('userId')
    },
    expectedMaxCount: 100
  }, {
    name: 'orgUser',
    type: {
      kind: 'object',
      name: _$$Y.OrgUser
    },
    args: [{
      name: 'orgId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: {
      and: [['userId', '=', createParentRef('id')], ['orgId', '=', createFieldRef('orgId')], ['permission', '<>', 'guest']]
    }
  }, {
    name: 'privilegedOrgUser',
    type: {
      kind: 'object',
      name: _$$Y.PrivilegedOrgUser
    },
    args: [{
      name: 'orgId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: {
      and: [['userId', '=', createParentRef('id')], ['orgId', '=', createFieldRef('orgId')], ['permission', '<>', 'guest']]
    }
  }, {
    name: 'currentPartialOrgUser',
    type: {
      kind: 'object',
      name: _$$Y.GuestOrgUser
    },
    args: [{
      name: 'orgId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: {
      and: [['userId', '=', createParentRef('id')], ['orgId', '=', createFieldRef('orgId')]]
    },
    deprecated: {
      reason: 'Use currentBaseOrgUser',
      date: '2022-02-11'
    }
  }, {
    name: 'guestOrgUsers',
    type: {
      kind: 'objects',
      name: _$$Y.GuestOrgUser
    },
    nullable: !0,
    filter: {
      and: [['userId', '=', createParentRef('id')], ['permission', '=', 'guest']]
    },
    expectedMaxCount: 200,
    deprecated: {
      reason: 'Use `baseOrgUsers` instead',
      date: '2023-08-31'
    }
  }, {
    name: 'baseOrgUsers',
    type: {
      kind: 'objects',
      name: _$$Y.BaseOrgUser
    },
    nullable: !0,
    args: [{
      name: 'initialPageSize',
      type: {
        kind: 'int'
      }
    }],
    filter: {
      and: [['userId', '=', createParentRef('id')]]
    },
    expectedMaxCount: 200
  }, {
    name: 'guestBaseOrgUsers',
    type: {
      kind: 'objects',
      name: _$$Y.BaseOrgUser
    },
    nullable: !0,
    args: [{
      name: 'initialPageSize',
      type: {
        kind: 'int'
      }
    }],
    filter: {
      and: [['userId', '=', createParentRef('id')], ['permission', '=', 'guest']]
    },
    expectedMaxCount: 200
  }, {
    name: 'orgUsers',
    type: {
      kind: 'objects',
      name: _$$Y.OrgUser
    },
    nullable: !0,
    filter: {
      and: [['userId', '=', createParentRef('id')], ['permission', '<>', 'guest']]
    },
    expectedMaxCount: 200
  }, {
    name: 'privilegedOrgUsers',
    type: {
      kind: 'objects',
      name: _$$Y.PrivilegedOrgUser
    },
    nullable: !0,
    args: [{
      name: 'initialPageSize',
      type: {
        kind: 'int'
      }
    }],
    filter: {
      and: [['userId', '=', createParentRef('id')], ['permission', '<>', 'guest']]
    },
    expectedMaxCount: 200
  }, {
    name: 'allOrgUsers',
    type: {
      kind: 'objects',
      name: _$$Y.GuestOrgUser
    },
    nullable: !0,
    filter: ['userId', '=', createParentRef('id')],
    expectedMaxCount: 200
  }, {
    name: 'allBaseOrgUsers',
    type: {
      kind: 'objects',
      name: _$$Y.BaseOrgUser
    },
    nullable: !0,
    args: [{
      name: 'initialPageSize',
      type: {
        kind: 'int'
      }
    }],
    filter: ['userId', '=', createParentRef('id')],
    expectedMaxCount: 1e4
  }, {
    name: 'teamUser',
    type: {
      kind: 'object',
      name: _$$Y.TeamUser
    },
    args: [{
      name: 'teamId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: {
      and: [['userId', '=', createParentRef('id')], ['teamId', '=', createFieldRef('teamId')]]
    }
  }, {
    name: 'userFlags',
    type: {
      kind: 'objects',
      name: _$$Y.UserFlag
    },
    filter: ['userId', '=', createParentRef('id')],
    expectedMaxCount: 1e4
  }, {
    name: 'userFlagByName',
    type: {
      kind: 'object',
      name: _$$Y.UserFlag
    },
    args: [{
      name: 'name',
      type: {
        kind: 'string'
      }
    }],
    nullable: !0,
    filter: {
      and: [['userId', '=', createParentRef('id')], ['name', '=', createFieldRef('name')]]
    }
  }, {
    name: 'userTeamFlags',
    type: {
      kind: 'objects',
      name: _$$Y.UserTeamFlag
    },
    filter: ['userId', '=', createParentRef('id')],
    expectedMaxCount: 200
  }, {
    name: 'fileBrowserPreferences',
    type: {
      kind: 'object',
      name: _$$Y.FileBrowserPreferences
    },
    nullable: !0,
    filter: {
      and: [['userId', '=', createParentRef('id')], ['orgId', '=', null], ['teamId', '=', null]]
    }
  }, {
    name: 'userPreferences',
    type: {
      kind: 'object',
      name: _$$Y.UserPreferences
    },
    nullable: !0,
    filter: ['userId', '=', createParentRef('id')]
  }, {
    name: 'eduGracePeriodUpdate',
    type: {
      kind: 'object',
      name: _$$Y.EduGracePeriod
    },
    args: [{
      name: 'updatedAtTimestamp',
      type: {
        kind: 'datetime'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: {
      and: [['userId', '=', createParentRef('id')], ['updatedAt', '>', createFieldRef('updatedAtTimestamp')]]
    },
    orderBy: [['updatedAt', 'DESC']]
  }, {
    name: 'fileBrowserSectionPreferences',
    type: {
      kind: 'objects',
      name: _$$Y.FileBrowserSectionPreferences
    },
    nullable: !0,
    filter: {
      and: [['userId', '=', createParentRef('id')], ['orgId', '=', null]]
    },
    expectedMaxCount: 1e3
  }, {
    name: 'recentPrototypes',
    type: {
      kind: 'objects',
      name: _$$Y.RecentPrototype
    },
    orderBy: [['viewedAt', 'DESC']],
    filter: {
      and: [['userId', '=', createParentRef('id')]]
    },
    expectedMaxCount: 50
  }, {
    name: 'installedPlugins',
    type: {
      kind: 'objects',
      name: _$$Y.PluginInstall
    },
    args: [{
      name: 'initialPageSize',
      type: {
        kind: 'int'
      }
    }],
    filter: ['userId', '=', createParentRef('id')],
    expectedMaxCount: 1e3
  }, {
    name: 'plugins',
    type: {
      kind: 'objects',
      name: _$$Y.Plugin
    },
    args: [{
      name: 'initialPageSize',
      type: {
        kind: 'int'
      }
    }],
    filter: ['userId', '=', createParentRef('id')],
    expectedMaxCount: 1e3
  }, {
    name: 'savedPluginsExists',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      installedPlugins: {
        id: NULL_FIELD_REF
      }
    },
    bannedFromViews: !0
  }, {
    name: 'hasSavedPlugins',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      installedPlugins: {
        id: NULL_FIELD_REF
      },
      savedPluginsExists: NULL_FIELD_REF
    }
  }, {
    name: 'savedPluginsExistsMetric',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      hasSavedPlugins: NULL_FIELD_REF,
      savedPluginsExists: NULL_FIELD_REF
    },
    deprecated: {
      reason: 'Temporarily used during exists template rollout, will be removed as soon as backwards compatibility is satisfied',
      date: '2025-07-18'
    }
  }, {
    name: 'hasCreatedPlugins',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      plugins: {
        id: NULL_FIELD_REF
      }
    }
  }, {
    name: 'favoritedResources',
    args: [{
      name: 'orgId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    type: {
      kind: 'objects',
      name: _$$Y.FavoritedResource
    },
    filter: {
      and: [['userId', '=', createParentRef('id')], ['orgId', '=', createFieldRef('orgId')]]
    },
    deprecated: {
      reason: 'Use favoritedFiles, favoritedPrototypes, etc',
      date: '2022-03-18'
    },
    expectedMaxCount: 100
  }, {
    name: 'favoritedFiles',
    args: [{
      name: 'orgId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    type: {
      kind: 'objects',
      name: _$$Y.FavoritedFile
    },
    nullable: !0,
    filter: {
      and: [['resourceType', '=', 'file'], ['userId', '=', createParentRef('id')], ['orgId', '=', createFieldRef('orgId')]]
    },
    expectedMaxCount: 1e3
  }, {
    name: 'favoritedFilesV2',
    args: [{
      name: 'orgId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'teamId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    type: {
      kind: 'objects',
      name: _$$Y.FavoritedFile
    },
    nullable: !0,
    filter: {
      and: [['resourceType', '=', 'file'], ['userId', '=', createParentRef('id')], ['orgId', '=', createFieldRef('orgId')], ['teamId', '=', createFieldRef('teamId')]]
    },
    expectedMaxCount: 1e3
  }, {
    name: 'favoritedFile',
    args: [{
      name: 'resourceId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }],
    type: {
      kind: 'object',
      name: _$$Y.FavoritedFile
    },
    nullable: !0,
    filter: {
      and: [['resourceType', '=', 'file'], ['userId', '=', createParentRef('id')], ['resourceId', '=', createFieldRef('resourceId')]]
    }
  }, {
    name: 'favoritedPrototype',
    args: [{
      name: 'resourceId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }],
    type: {
      kind: 'object',
      name: _$$Y.FavoritedPrototype
    },
    nullable: !0,
    filter: {
      and: [['resourceType', '=', 'prototype'], ['userId', '=', createParentRef('id')], ['resourceId', '=', createFieldRef('resourceId')]]
    }
  }, {
    name: 'favoritedProject',
    args: [{
      name: 'resourceId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }],
    type: {
      kind: 'object',
      name: _$$Y.FavoritedProject
    },
    nullable: !0,
    filter: {
      and: [['resourceType', '=', 'folder'], ['userId', '=', createParentRef('id')], ['resourceId', '=', createFieldRef('resourceId')]]
    }
  }, {
    name: 'globalFavoritedFiles',
    args: [],
    type: {
      kind: 'objects',
      name: _$$Y.FavoritedFile
    },
    nullable: !0,
    filter: {
      and: [['resourceType', '=', 'file'], ['userId', '=', createParentRef('id')]]
    },
    expectedMaxCount: 1e3
  }, {
    name: 'favoritedPrototypes',
    args: [{
      name: 'orgId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    type: {
      kind: 'objects',
      name: _$$Y.FavoritedPrototype
    },
    nullable: !0,
    filter: {
      and: [['resourceType', '=', 'prototype'], ['userId', '=', createParentRef('id')], ['orgId', '=', createFieldRef('orgId')]]
    },
    expectedMaxCount: 100
  }, {
    name: 'favoritedPrototypesV2',
    args: [{
      name: 'orgId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'teamId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    type: {
      kind: 'objects',
      name: _$$Y.FavoritedPrototype
    },
    nullable: !0,
    filter: {
      and: [['resourceType', '=', 'prototype'], ['userId', '=', createParentRef('id')], ['orgId', '=', createFieldRef('orgId')], ['teamId', '=', createFieldRef('teamId')]]
    },
    expectedMaxCount: 100
  }, {
    name: 'favoritedProjects',
    args: [{
      name: 'orgId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    type: {
      kind: 'objects',
      name: _$$Y.FavoritedProject
    },
    nullable: !0,
    filter: {
      and: [['resourceType', '=', 'folder'], ['userId', '=', createParentRef('id')], ['orgId', '=', createFieldRef('orgId')]]
    },
    expectedMaxCount: 2e3
  }, {
    name: 'favoritedTeams',
    args: [{
      name: 'orgId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    type: {
      kind: 'objects',
      name: _$$Y.FavoritedTeam
    },
    nullable: !0,
    filter: {
      and: [['resourceType', '=', 'team'], ['userId', '=', createParentRef('id')], ['orgId', '=', createFieldRef('orgId')]]
    },
    expectedMaxCount: 2e3
  }, {
    name: 'favoritedWorkspaces',
    args: [{
      name: 'orgId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    type: {
      kind: 'objects',
      name: _$$Y.FavoritedWorkspace
    },
    nullable: !0,
    filter: {
      and: [['resourceType', '=', 'workspace'], ['userId', '=', createParentRef('id')], ['orgId', '=', createFieldRef('orgId')]]
    },
    expectedMaxCount: 1e3
  }, {
    name: 'userSidebarSections',
    args: [{
      name: 'orgId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    type: {
      kind: 'objects',
      name: _$$Y.UserSidebarSection
    },
    nullable: !0,
    filter: {
      and: [['userId', '=', createParentRef('id')], ['orgId', '=', createFieldRef('orgId')]]
    },
    expectedMaxCount: 1e3
  }, {
    name: 'userSidebarSectionsV2',
    args: [{
      name: 'orgId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'teamId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    type: {
      kind: 'objects',
      name: _$$Y.UserSidebarSection
    },
    nullable: !0,
    filter: {
      and: [['userId', '=', createParentRef('id')], ['orgId', '=', createFieldRef('orgId')], ['teamId', '=', createFieldRef('teamId')]]
    },
    expectedMaxCount: 1e3
  }, {
    name: 'fileShareBroadcasts',
    args: [],
    type: {
      kind: 'objects',
      name: _$$Y.FileShareBroadcast
    },
    nullable: !0,
    checkCanRead: {
      userId: createSessionRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId')
    },
    filter: {
      and: [['targetUserId', '=', createParentRef('id')], ['status', '=', 'active']]
    },
    expectedMaxCount: 10
  }, {
    name: 'recentSearches',
    args: [{
      name: 'orgId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    type: {
      kind: 'objects',
      name: _$$Y.RecentSearch
    },
    nullable: !0,
    filter: {
      and: [['userId', '=', createParentRef('id')], ['orgId', '=', createFieldRef('orgId')]]
    },
    expectedMaxCount: 100
  }, {
    name: 'recentFiles',
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    type: {
      kind: 'objects',
      name: _$$Y.RecentFile
    },
    nullable: !0,
    orderBy: [['actionAt', 'DESC']],
    filter: ['userId', '=', createFieldRef('userId')],
    resolver: {
      type: 'HTTP',
      uri: '/api/internal/livegraph/sinatra_resolver/recent_files',
      queryParams: {
        userId: createFieldRef('userId')
      },
      realtimePolicy: {
        type: 'RedisPubsub',
        channelPrefix: 'user-recent-files-',
        channelPostfix: [createFieldRef('userId')]
      }
    }
  }, {
    name: 'recentFiles2',
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    type: {
      kind: 'objects',
      name: _$$Y.RecentFile2
    },
    nullable: !0,
    orderBy: [['actionAt', 'DESC']],
    expectedMaxCount: 55,
    filter: {
      and: [['userId', '=', createFieldRef('userId')], ['action', '=', 'view']]
    }
  }, {
    name: 'recentFilesLimit15',
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    type: {
      kind: 'objects',
      name: _$$Y.RecentFile2
    },
    nullable: !0,
    orderBy: [['actionAt', 'DESC']],
    expectedMaxCount: 15,
    filter: {
      and: [['userId', '=', createFieldRef('userId')], ['action', '=', 'view']]
    }
  }, {
    name: 'recentFiles2ByEditorType',
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: '_editorTypeRaw',
      type: {
        kind: 'bigint'
      }
    }],
    type: {
      kind: 'objects',
      name: _$$Y.RecentFile2
    },
    nullable: !0,
    orderBy: [['actionAt', 'DESC']],
    expectedMaxCount: 55,
    filter: {
      and: [['userId', '=', createFieldRef('userId')], ['action', '=', 'view'], ['_editorTypeRaw', '=', createFieldRef('_editorTypeRaw')]]
    }
  }, {
    name: 'permissionFeatureFlags',
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    type: {
      kind: 'objects',
      name: _$$Y.PermissionFeatureFlag
    },
    nullable: !0,
    resolver: {
      type: 'HTTP',
      uri: '/api/internal/livegraph/user/perm_feature_flags',
      queryParams: {
        userId: createFieldRef('userId'),
        featureFlags: Object.values(TOI)
      },
      realtimePolicy: {
        type: 'RedisPubsub',
        channelPrefix: 'user-permission-ff-dummy',
        channelPostfix: []
      }
    }
  }, {
    name: 'permissionFeatureFlagsV2',
    type: {
      kind: 'list',
      ofType: {
        kind: 'string'
      }
    },
    computed: !0,
    dependencies: {
      permissionFlagTestFlag: {
        id: null,
        name: null,
        value: null
      },
      permissionFlagCampfire: {
        id: null,
        name: null,
        value: null
      },
      permissionFlagCanDiscoverPendingInvite: {
        id: null,
        name: null,
        value: null
      },
      permissionFlagCommunityHubAdmin: {
        id: null,
        name: null,
        value: null
      },
      permissionFlagCommunityHubAdminReviewer: {
        id: null,
        name: null,
        value: null
      },
      permissionFlagCommunityHubImageInspection: {
        id: null,
        name: null,
        value: null
      },
      permissionFlagExemptGuestsFromMfaRequirement: {
        id: null,
        name: null,
        value: null
      },
      permissionFlagFcGeneral: {
        id: null,
        name: null,
        value: null
      },
      permissionFlagPv2LoadableEditorLicenseTypeMapping: {
        id: null,
        name: null,
        value: null
      },
      permissionFlagPv2PlanRecordPerms: {
        id: null,
        name: null,
        value: null
      },
      permissionFlagPv2PlanRecordDummyPolicy: {
        id: null,
        name: null,
        value: null
      },
      permissionFlagSites: {
        id: null,
        name: null,
        value: null
      },
      permissionFlagStsK12GoogleOrgEnabled: {
        id: null,
        name: null,
        value: null
      },
      permissionFlagPermEnableDebuggerLogForUser: {
        id: null,
        name: null,
        value: null
      },
      permissionFlagProTemplatesFigjam: {
        id: null,
        name: null,
        value: null
      },
      permissionFlagOrgFileExportSetting: {
        id: null,
        name: null,
        value: null
      },
      permissionFlagFcPlanEnabled: {
        id: null,
        name: null,
        value: null
      },
      permissionFlagCooper: {
        id: null,
        name: null,
        value: null
      },
      permissionFlagDtLitmus: {
        id: null,
        name: null,
        value: null
      },
      permissionFlagMakeAiAllowlistForAtlassian: {
        id: null,
        name: null,
        value: null
      },
      permissionFlagDevModeDemoFile: {
        id: null,
        name: null,
        value: null
      },
      permissionFlagProductTrialsLg: {
        id: null,
        name: null,
        value: null
      },
      permissionFlagProductTrialsFigmake: {
        id: null,
        name: null,
        value: null
      },
      permissionFlagSlidesStarterTeamDesignToggle: {
        id: null,
        name: null,
        value: null
      },
      permissionFlagLitmusGuestAccess: {
        id: null,
        name: null,
        value: null
      },
      permissionFlagBake: {
        id: null,
        name: null,
        value: null
      },
      permissionFlagBakeCheckPlan: {
        id: null,
        name: null,
        value: null
      },
      permissionFlagBakePlanEnabled: {
        id: null,
        name: null,
        value: null
      },
      permissionFlagCmtyMakeDiscovery: {
        id: null,
        name: null,
        value: null
      },
      permissionFlagCmtyMakePublishing: {
        id: null,
        name: null,
        value: null
      },
      permissionFlagCmtyMakePublishingUpdates: {
        id: null,
        name: null,
        value: null
      },
      permissionFlagMakeTemplatePublishing: {
        id: null,
        name: null,
        value: null
      },
      permissionFlagMakeTemplateDiscovery: {
        id: null,
        name: null,
        value: null
      },
      permissionFlagBakeStarterLimit: {
        id: null,
        name: null,
        value: null
      },
      permissionFlagBakeStarterPaywall: {
        id: null,
        name: null,
        value: null
      },
      permissionFlagBakeMonetizationPlan: {
        id: null,
        name: null,
        value: null
      },
      permissionFlagCeIlRoot: {
        id: null,
        name: null,
        value: null
      },
      permissionFlagStsStarterEnabled: {
        id: null,
        name: null,
        value: null
      },
      permissionFlagDenyCollabWithoutProductsEnabled: {
        id: null,
        name: null,
        value: null
      },
      permissionFlagBuzzPluginsRunnable: {
        id: null,
        name: null,
        value: null
      },
      permissionFlagSharedContainerSettingPermV2: {
        id: null,
        name: null,
        value: null
      },
      permissionFlagUserGroups: {
        id: null,
        name: null,
        value: null
      }
    }
  }, sH, sz, sJ, sW, sX, sQ, s5, sy, sb, s0, sK, sY, sq, sv, sI, sE, sL, s2, sj, sF, sx, sS, sD, sG, sM, sZ, s$, sO, sN, sP, sB, sU, sw, sT, sC, s4, sk, sV, sR, s1, sA, s3, {
    name: 'recentSharedWithYouFiles',
    args: [],
    type: {
      kind: 'objects',
      name: _$$Y.SharedWithYouFile
    },
    filter: {
      and: [['userId', '=', createParentRef('id')], ['resourceType', '=', 'file']]
    },
    orderBy: [['sharedAt', 'DESC']],
    checkCanRead: {
      userId: createSessionRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId')
    },
    expectedMaxCount: 50
  }, {
    name: 'idpUsersInOrg',
    args: [{
      name: 'orgId',
      type: {
        kind: 'bigint'
      }
    }],
    type: {
      kind: 'objects',
      name: _$$Y.IDPUser
    },
    filter: ['userName', '=', createParentRef('email')],
    checkCanRead: {
      filterOrgId: createFieldRef('orgId'),
      userId: createSessionRef('userId')
    },
    expectedMaxCount: 200
  }, {
    name: 'studentApplications',
    type: {
      kind: 'objects',
      name: _$$Y.StudentApplication
    },
    nullable: !0,
    filter: {
      and: [['userId', '=', createParentRef('id')], ['validatedAt', '<>', null]]
    },
    orderBy: [['validatedAt', 'DESC']],
    expectedMaxCount: 200
  }, {
    name: 'schoolType',
    type: {
      kind: 'string'
    },
    computed: !0,
    nullable: !0,
    dependencies: {
      studentApplications: {
        schoolType: NULL_FIELD_REF
      }
    }
  }, {
    name: 'eduPeriodEnd',
    type: {
      kind: 'datetime'
    },
    computed: !0,
    nullable: !0,
    dependencies: {
      studentApplications: {
        validatedAt: NULL_FIELD_REF,
        eduPeriodEnd: NULL_FIELD_REF
      },
      userFlags: {
        name: NULL_FIELD_REF
      }
    }
  }, {
    name: 'roleType',
    type: {
      kind: 'string'
    },
    computed: !0,
    nullable: !0,
    dependencies: {
      studentApplications: {
        roleType: NULL_FIELD_REF
      }
    }
  }, {
    name: 'verificationType',
    type: {
      kind: 'string'
    },
    computed: !0,
    nullable: !0,
    dependencies: {
      studentApplications: {
        verificationType: NULL_FIELD_REF
      }
    }
  }, {
    name: 'feedPosts',
    args: [{
      name: 'orgId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    type: {
      kind: 'objects',
      name: _$$Y.FeedPost
    },
    filter: {
      and: [['creatorId', '=', createParentRef('id')], ['orgId', '=', createFieldRef('orgId')]]
    },
    orderBy: [['createdAt', 'DESC']],
    expectedMaxCount: 50
  }, {
    name: 'jamboardOfferEligibility',
    args: [],
    type: {
      kind: 'object',
      name: _$$Y.UserJamboardOfferEligibility
    },
    resolver: {
      type: 'HTTP',
      uri: '/api/internal/livegraph/sinatra_resolver/jamboard_offer_eligibility',
      queryParams: {
        userId: createParentRef('id')
      },
      realtimePolicy: {
        type: 'RedisPubsub',
        channelPrefix: 'user-jamboard-offer-eligibility-',
        channelPostfix: [createParentRef('id')]
      }
    }
  }, {
    name: 'feedTagFollowers',
    type: {
      kind: 'objects',
      name: _$$Y.FeedTagFollower
    },
    nullable: !0,
    filter: ['userId', '=', createParentRef('id')],
    expectedMaxCount: 100
  }, {
    name: 'libraryUserSubscriptions',
    type: {
      kind: 'objects',
      name: _$$Y.LibraryUserSubscription
    },
    filter: ['userId', '=', createParentRef('id')],
    expectedMaxCount: 1e3
  }, {
    name: 'userAuthn',
    type: {
      kind: 'object',
      name: _$$Y.UserAuthn
    },
    nullable: !0,
    filter: ['userId', '=', createParentRef('id')]
  }, {
    name: 'phoneNumberExists',
    type: {
      kind: 'bool'
    },
    nullable: !0,
    computed: !0,
    dependencies: {
      phoneNumber: NULL_FIELD_REF
    }
  }, {
    name: 'developerTokens',
    type: {
      kind: 'objects',
      name: _$$Y.DeveloperToken
    },
    nullable: !0,
    filter: ['userId', '=', createParentRef('id')],
    expectedMaxCount: 200
  }, {
    name: 'experimentAssignments',
    type: {
      kind: 'objects',
      name: _$$Y.ExperimentAssignment
    },
    nullable: !0,
    filter: {
      and: [['resourceId', '=', createParentRef('id')], ['resourceType', '=', 'User']]
    },
    expectedMaxCount: 1e3
  }, {
    name: 'twoFactorAppEnabled',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      userAuthn: {
        totpSecretEnc: NULL_FIELD_REF
      }
    }
  }, {
    name: 'twoFactorEnabled',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      phoneNumber: NULL_FIELD_REF,
      twoFactorAppEnabled: NULL_FIELD_REF
    }
  }, {
    name: 'googleSsoOnly',
    type: {
      kind: 'bool'
    },
    computed: !0,
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    dependencies: {
      adminAt: NULL_FIELD_REF,
      email: NULL_FIELD_REF,
      emailValidatedAt: NULL_FIELD_REF,
      blockedAt: NULL_FIELD_REF,
      privilegedOrgUsers: [{
        initialPageSize: 200
      }, {
        id: NULL_FIELD_REF,
        org: [{
          userId: createViewRef('userId')
        }, {
          googleSsoOnlyAt: NULL_FIELD_REF
        }]
      }],
      googleSsoOnlyAt: NULL_FIELD_REF
    }
  }, {
    name: 'samlSsoOnly',
    type: {
      kind: 'bool'
    },
    computed: !0,
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    dependencies: {
      privilegedOrgUsers: [{
        initialPageSize: 200
      }, {
        id: NULL_FIELD_REF,
        org: [{
          userId: createViewRef('userId')
        }, {
          samlSsoOnlyAt: NULL_FIELD_REF
        }]
      }]
    }
  }, {
    name: 'ssoOnly',
    type: {
      kind: 'bool'
    },
    computed: !0,
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    dependencies: {
      googleSsoOnly: [{
        userId: createViewRef('userId')
      }, NULL_FIELD_REF],
      samlSsoOnly: [{
        userId: createViewRef('userId')
      }, NULL_FIELD_REF]
    }
  }, {
    name: 'sharingRestricted',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      restrictionLevel: NULL_FIELD_REF
    }
  }, {
    name: 'canSellOnCommunity',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      userMonetizationMetadata: {
        cmtySellerAcceptedAt: NULL_FIELD_REF,
        cmtySellerTosAcceptedAt: NULL_FIELD_REF,
        stripeConnectedAccountId: NULL_FIELD_REF,
        sellerChargesEnabledAt: NULL_FIELD_REF,
        sellerPayoutsEnabledAt: NULL_FIELD_REF
      }
    }
  }, {
    name: 'hasPassedVisualCompliance',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      userMonetizationMetadata: {
        sellerPassedVisualComplianceAt: NULL_FIELD_REF
      }
    }
  }, {
    name: 'hasProTeamPaidStatusDesign',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      teamRoles: {
        team: {
          currentTeamUser: [{
            userId: createViewRef('userId')
          }, {
            designPaidStatus: NULL_FIELD_REF
          }],
          canAccessProFeature: NULL_FIELD_REF,
          org: {
            id: NULL_FIELD_REF
          }
        }
      }
    }
  }, {
    name: 'hasProTeamPaidStatusWhiteboard',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      teamRoles: {
        team: {
          currentTeamUser: [{
            userId: createViewRef('userId')
          }, {
            whiteboardPaidStatus: NULL_FIELD_REF
          }],
          canAccessProFeature: NULL_FIELD_REF,
          org: {
            id: NULL_FIELD_REF
          }
        }
      }
    }
  }, {
    name: 'fileViewHistoryDisabled',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      userFlags: {
        name: NULL_FIELD_REF
      }
    }
  }, {
    name: 'allTeamUsers',
    type: {
      kind: 'objects',
      name: _$$Y.TeamUser
    },
    nullable: !0,
    filter: ['userId', '=', createParentRef('id')],
    expectedMaxCount: 1e4
  }, {
    name: 'inStudentPlusPlan',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      allTeamUsers: {
        _team: {
          subscription: NULL_FIELD_REF,
          studentTeamAt: NULL_FIELD_REF
        }
      },
      allBaseOrgUsers: {
        id: NULL_FIELD_REF
      }
    }
  }, {
    name: 'inStudentPlan',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      allTeamUsers: {
        _team: {
          studentTeamAt: NULL_FIELD_REF
        }
      }
    }
  }, {
    name: 'isMfaRequiredByMembershipOrg',
    type: {
      kind: 'bool'
    },
    computed: !0,
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    dependencies: {
      privilegedOrgUsers: [{
        initialPageSize: 200
      }, {
        id: NULL_FIELD_REF,
        org: [{
          userId: createViewRef('userId')
        }, {
          mfaRequired: NULL_FIELD_REF
        }]
      }]
    }
  }]
};
let pD = {
  name: _$$Y.UserPublic,
  permissionRequired: !1,
  fields: [...pP]
};
let pL = {
  name: _$$Y.UserAuthn,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'totpSecretEnc',
    type: {
      kind: 'string'
    },
    nullable: !0,
    bannedFromViews: !0
  }, {
    name: 'totpSecretExists',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      totpSecretEnc: NULL_FIELD_REF
    }
  }]
};
let pF = {
  name: _$$Y.UserColorPaletteOverrideForFile,
  permissionRequired: !0,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    },
    bannedFromViews: !0
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'colorPaletteUuid',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'colorPalette',
    type: {
      kind: 'object',
      name: _$$Y.ColorPalette
    },
    filter: ['uuid', '=', createParentRef('colorPaletteUuid')],
    nullable: !0,
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      colorPaletteUuid: NULL_FIELD_REF,
      colorPalette: {
        team: {
          canRead: [{
            userId: createViewRef('userId')
          }, NULL_FIELD_REF]
        }
      }
    }
  }]
};
let pM = {
  name: _$$Y.UserColorProfilePreference,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'colorProfilePreference',
    type: {
      kind: 'enum',
      name: 'ColorProfilePreference'
    },
    typechecked: !1
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }]
};
let pj = {
  name: _$$Y.UserFlag,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'name',
    type: {
      kind: 'string'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'count',
    type: {
      kind: 'int'
    },
    nullable: !0
  }]
};
let pU = {
  name: _$$Y.UserJamboardOfferEligibility,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'isEligible',
    type: {
      kind: 'bool'
    }
  }, {
    name: 'ineligibilityReason',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'promoCodeId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'promoExpirationDate',
    type: {
      kind: 'datetime'
    }
  }]
};
let pB = {
  name: _$$Y.UserMonetizationMetadata,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'stripeCmtyCreatorStatsMeta',
    type: {
      kind: 'map',
      valueType: {
        kind: 'int'
      }
    },
    typechecked: !1
  }, {
    name: 'cmtySellerAcceptedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'cmtyBuyerTosAcceptedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'cmtySellerTosAcceptedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'sellerChargesEnabledAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'sellerPayoutsEnabledAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'sellerStripeDetailsSubmittedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'stripeConnectedAccountId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'sellerPassedVisualComplianceAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'communityPurchasingBlockedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'user',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    filter: ['id', '=', createFieldRef('userId')]
  }, {
    name: 'stripeAccountStatus',
    type: {
      kind: 'enum',
      name: 'StripeAccountStatus'
    },
    computed: !0,
    dependencies: {
      cmtySellerAcceptedAt: NULL_FIELD_REF,
      stripeConnectedAccountId: NULL_FIELD_REF,
      sellerPayoutsEnabledAt: NULL_FIELD_REF,
      sellerChargesEnabledAt: NULL_FIELD_REF,
      sellerStripeDetailsSubmittedAt: NULL_FIELD_REF
    }
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }, {
      name: 'sessionUserId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      user: [{
        userId: createViewRef('userId')
      }, {
        communityProfile: {
          associatedUsers: {
            id: NULL_FIELD_REF
          }
        }
      }]
    }
  }]
};
let pV = {
  name: _$$Y.UserNotificationBell,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'bell',
    type: {
      kind: 'bool'
    },
    nullable: !0
  }, {
    name: 'notificationSpaceId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'userId',
    type: {
      kind: 'string'
    }
  }, {
    name: 'timestamp',
    type: {
      kind: 'string'
    },
    nullable: !0
  }]
};
let pG = {
  name: _$$Y.UserNotificationBell2,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'string'
    }
  }, {
    name: 'bell',
    type: {
      kind: 'bool'
    }
  }, {
    name: 'fileKeyWithoutBadge',
    type: {
      kind: 'string'
    },
    nullable: !0,
    typechecked: !1
  }, {
    name: 'notificationSpaceId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'userId',
    type: {
      kind: 'string'
    }
  }]
};
let pz = {
  name: _$$Y.CommunityNotificationBell,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'bell',
    type: {
      kind: 'bool'
    },
    nullable: !0
  }]
};
let pH = {
  name: _$$Y.UserPreferences,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'preferences',
    type: {
      kind: 'object',
      name: _$$Y.UserPreferencesHash
    },
    embedded: !0
  }]
};
let pW = {
  name: _$$Y.UserPreferencesHash,
  permissionRequired: !1,
  embedded: !0,
  fields: [{
    name: 'auto_open_in_desktop',
    type: {
      kind: 'string'
    },
    nullable: !0
  }]
};
let pK = {
  name: _$$Y.UserProfile,
  permissionRequired: !1,
  embedded: !0,
  fields: [{
    name: 'jobTitle',
    type: {
      kind: 'string'
    }
  }, {
    name: 'usagePurpose',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'images',
    type: {
      kind: 'map',
      valueType: {
        kind: 'string'
      }
    },
    nullable: !0
  }]
};
let pY = {
  name: _$$Y.UserSidebarSection,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'teamId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'name',
    type: {
      kind: 'string'
    }
  }, {
    name: 'orderedFavoritedResourceIds',
    type: {
      kind: 'list',
      ofType: {
        kind: 'bigint'
      }
    },
    nullable: !0
  }]
};
let pq = {
  name: _$$Y.UserTeamFlag,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'name',
    type: {
      kind: 'string'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }]
};
let p$ = {
  name: _$$Y.Variable,
  permissionRequired: !1,
  fields: [...eu, {
    name: 'key',
    type: {
      kind: 'string'
    }
  }, {
    name: 'version',
    type: {
      kind: 'string'
    }
  }, {
    name: 'variableType',
    type: {
      kind: 'string'
    }
  }, {
    name: 'variableSetId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'sortPosition',
    type: {
      kind: 'string'
    }
  }, {
    name: 'scopes',
    type: {
      kind: 'list',
      ofType: {
        kind: 'string'
      }
    },
    nullable: !0
  }, {
    name: 'variableSet',
    type: {
      kind: 'object',
      name: _$$Y.VariableSet
    },
    filter: ['id', '=', createParentRef('variableSetId')],
    deprecated: {
      reason: 'Use variableCollection instead',
      date: '2023-04-27'
    }
  }, {
    name: 'variableCollection',
    type: {
      kind: 'object',
      name: _$$Y.VariableSet
    },
    filter: ['id', '=', createParentRef('variableSetId')]
  }]
};
let pZ = {
  name: _$$Y.VariableLog,
  permissionRequired: !1,
  fields: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    },
    bannedFromViews: !0
  }, {
    name: 'hubFileId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'name',
    type: {
      kind: 'string'
    }
  }, {
    name: 'description',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'nodeId',
    type: {
      kind: 'string'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'string'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'unpublishedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'checkpoint',
    type: {
      kind: 'object',
      name: _$$Y.Checkpoint
    },
    embedded: !0
  }, {
    name: 'key',
    type: {
      kind: 'string'
    }
  }, {
    name: 'version',
    type: {
      kind: 'string'
    }
  }, {
    name: 'userFacingVersion',
    type: {
      kind: 'string'
    }
  }, {
    name: 'variableType',
    type: {
      kind: 'string'
    }
  }, {
    name: 'variableSetId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'sortPosition',
    type: {
      kind: 'string'
    }
  }, {
    name: 'scopes',
    type: {
      kind: 'list',
      ofType: {
        kind: 'string'
      }
    },
    nullable: !0
  }, {
    name: 'fileCheckpointId',
    type: {
      kind: 'bigint'
    }
  }]
};
let pX = {
  name: _$$Y.VariableSet,
  permissionRequired: !1,
  fields: [...eu, {
    name: 'checkpoint',
    type: {
      kind: 'object',
      name: _$$Y.Checkpoint
    },
    embedded: !0
  }, {
    name: 'variableThumbnailsUrl',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'modes',
    type: {
      kind: 'objects',
      name: _$$Y.VariableSetMode
    },
    nullable: !0,
    embedded: !0
  }, {
    name: 'isExtendable',
    type: {
      kind: 'bool'
    },
    nullable: !0
  }, {
    name: 'rootVariableSetKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'variableSetExtensionChain',
    type: {
      kind: 'list',
      ofType: {
        kind: 'string'
      }
    },
    nullable: !0
  }, {
    name: 'key',
    type: {
      kind: 'string'
    }
  }, {
    name: 'version',
    type: {
      kind: 'string'
    }
  }, {
    name: 'sortPosition',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'variables',
    type: {
      kind: 'objects',
      name: _$$Y.Variable
    },
    filter: {
      and: [['variableSetId', '=', createParentRef('id')], ['unpublishedAt', '=', null]]
    },
    expectedMaxCount: 1e4
  }, {
    name: 'numVariables',
    type: {
      kind: 'int'
    },
    computed: !0,
    dependencies: {
      variables: {
        id: NULL_FIELD_REF
      }
    }
  }, em]
};
let pQ = {
  name: _$$Y.VariableSetLog,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'key',
    type: {
      kind: 'string'
    }
  }, {
    name: 'version',
    type: {
      kind: 'string'
    }
  }, {
    name: 'userFacingVersion',
    type: {
      kind: 'string'
    }
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    },
    bannedFromViews: !0
  }, {
    name: 'fileCheckpointId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'checkpointId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'nodeId',
    type: {
      kind: 'string'
    }
  }, {
    name: 'checkpoint',
    type: {
      kind: 'object',
      name: _$$Y.Checkpoint
    },
    embedded: !0
  }]
};
let pJ = {
  name: _$$Y.VariableSetMode,
  permissionRequired: !1,
  embedded: !0,
  fields: [{
    name: 'id',
    type: {
      kind: 'string'
    }
  }, {
    name: 'name',
    type: {
      kind: 'string'
    }
  }, {
    name: 'sortPosition',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'parentModeId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'parentVariableSetId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }]
};
let p0 = {
  name: _$$Y.Vector,
  permissionRequired: !1,
  embedded: !0,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    },
    typechecked: !1
  }, {
    name: 'x',
    type: {
      kind: 'int'
    },
    typechecked: !1
  }, {
    name: 'y',
    type: {
      kind: 'int'
    },
    typechecked: !1
  }]
};
let p1 = {
  name: _$$Y.ViewerRestrictedDraftAccessLog,
  permissionRequired: !1,
  naturalKey: new Set(['fileKey', 'id']),
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'viewerUserId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'viewerUser',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    nullable: !0,
    filter: ['id', '=', createParentRef('viewerUserId')]
  }, {
    name: 'dismissedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }]
};
let p2 = {
  name: _$$Y.VotingSession,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    },
    bannedFromViews: !0
  }, {
    name: 'inProgress',
    type: {
      kind: 'bool'
    }
  }, {
    name: 'title',
    type: {
      kind: 'string'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'userVoteLimit',
    type: {
      kind: 'int'
    }
  }, {
    name: 'pageNodeId',
    type: {
      kind: 'string'
    }
  }]
};
let p5 = {
  name: _$$Y.WorkspaceMemberCount,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'data',
    type: {
      kind: 'int'
    }
  }]
};
let p4 = {
  name: _$$Y.WorkspacePublicInfo,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'librarySubscriptions',
    type: {
      kind: 'objects',
      name: _$$Y.LibraryWorkspaceSubscription
    },
    filter: ['workspaceId', '=', createParentRef('id')],
    nullable: !0,
    expectedMaxCount: 200
  }]
};
let p3 = {
  name: _$$Y.Workspace,
  permissionRequired: !0,
  fields: [...p4.fields, {
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'org',
    type: {
      kind: 'object',
      name: _$$Y.Org
    },
    filter: ['id', '=', createParentRef('orgId')],
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'name',
    type: {
      kind: 'string'
    }
  }, {
    name: 'imgUrl',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'imgUrlTransformed',
    type: {
      kind: 'string'
    },
    nullable: !0,
    computed: !0,
    dependencies: {
      imgUrl: NULL_FIELD_REF
    }
  }, {
    name: 'colorConfig',
    type: {
      kind: 'object',
      name: _$$Y.WorkspaceColorConfig
    },
    embedded: !0,
    nullable: !0
  }, {
    name: 'description',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'orgAccess',
    type: {
      kind: 'string'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'currentUser',
    nullable: !0,
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    filter: ['id', '=', createFieldRef('userId')]
  }, {
    name: 'currentBaseOrgUser',
    type: {
      kind: 'object',
      name: _$$Y.BaseOrgUser
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    filter: {
      and: [['userId', '=', createFieldRef('userId')], ['orgId', '=', createParentRef('orgId')]]
    }
  }, {
    name: 'mirroringLicenseGroup',
    type: {
      kind: 'object',
      name: _$$Y.LicenseGroup
    },
    filter: ['mirroredWorkspaceId', '=', createParentRef('id')],
    nullable: !0
  }, {
    name: 'librarySubscriptionByLibraryKey',
    type: {
      kind: 'object',
      name: _$$Y.LibraryWorkspaceSubscription
    },
    args: [{
      name: 'fileKey',
      type: {
        kind: 'string'
      }
    }],
    filter: {
      and: [['fileKey', '=', createFieldRef('fileKey')], ['workspaceId', '=', createParentRef('id')], ['hubFileId', '=', null]]
    },
    nullable: !0
  }, {
    name: 'librarySubscriptionByLibraryHubFileId',
    type: {
      kind: 'object',
      name: _$$Y.LibraryWorkspaceSubscription
    },
    args: [{
      name: 'hubFileId',
      type: {
        kind: 'bigint'
      }
    }],
    filter: {
      and: [['hubFileId', '=', createFieldRef('hubFileId')], ['workspaceId', '=', createParentRef('id')]]
    },
    nullable: !0
  }, {
    name: 'approvedLibraries',
    type: {
      kind: 'objects',
      name: _$$Y.ApprovedLibrary
    },
    filter: {
      and: [['resourceType', '=', _$$Y.Workspace], ['resourceId', '=', createParentRef('id')]]
    },
    nullable: !0,
    expectedMaxCount: 200
  }, {
    name: 'activeTeams',
    type: {
      kind: 'objects',
      name: _$$Y.WorkspaceTeamResult
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'firstPageSize',
      type: {
        kind: 'int'
      },
      nullable: !0
    }],
    nullable: !0,
    orderBy: 'Unordered',
    pagination: {
      firstPageSize: createFieldRef('firstPageSize')
    },
    resolver: {
      type: 'HTTP',
      uri: '/api/internal/livegraph/pagination_resolver/workspace_teams',
      queryParams: {
        workspace_id: createParentRef('id'),
        userId: createFieldRef('userId')
      },
      realtimePolicy: {
        type: 'Static'
      }
    }
  }, {
    name: 'defaultTeams',
    type: {
      kind: 'objects',
      name: _$$Y.DefaultTeam
    },
    filter: {
      and: [['resourceId', '=', createParentRef('id')], ['resourceType', '=', 'Workspace']]
    },
    nullable: !0,
    expectedMaxCount: 200
  }, {
    name: 'admins',
    type: {
      kind: 'objects',
      name: _$$Y.WorkspaceUser
    },
    filter: {
      and: [['workspaceId', '=', createParentRef('id')], ['permission', '=', 'admin']]
    },
    expectedMaxCount: 1e3
  }, {
    name: 'members',
    type: {
      kind: 'objects',
      name: _$$Y.WorkspaceUser
    },
    filter: {
      and: [['workspaceId', '=', createParentRef('id')], ['isMainWorkspace', '=', !0]]
    },
    expectedMaxCount: 12e3
  }, {
    name: 'memberCount',
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    type: {
      kind: 'object',
      name: _$$Y.WorkspaceMemberCount
    },
    resolver: {
      type: 'HTTP',
      uri: '/api/internal/livegraph/sinatra_resolver/workspace_member_count',
      queryParams: {
        workspace_id: createParentRef('id'),
        userId: createFieldRef('userId')
      },
      realtimePolicy: {
        type: 'RedisPubsub',
        channelPrefix: 'workspace-member-counts-',
        channelPostfix: [createParentRef('id')]
      }
    }
  }, {
    name: 'pinnedFiles',
    type: {
      kind: 'objects',
      name: _$$Y.PinnedFileV2
    },
    nullable: !0,
    filter: {
      and: [['resourceType', '=', 'Workspace'], ['resourceId', '=', createParentRef('id')]]
    },
    checkCanRead: {
      userId: createSessionRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId')
    },
    expectedMaxCount: 20
  }, {
    name: 'orgSharedSetting',
    type: {
      kind: 'object',
      name: _$$Y.SharedOrgLicenseGroupSetting
    },
    nullable: !0,
    filter: {
      and: [['resourceType', '=', 'Org'], ['resourceId', '=', createParentRef('orgId')]]
    }
  }, {
    name: 'workspaceSharedSetting',
    type: {
      kind: 'object',
      name: _$$Y.SharedOrgLicenseGroupSetting
    },
    nullable: !0,
    filter: {
      and: [['resourceType', '=', 'Workspace'], ['resourceId', '=', createParentRef('id')]]
    }
  }, {
    name: 'publicLinkControlsSetting',
    type: {
      kind: 'string'
    },
    computed: !0,
    dependencies: {
      orgSharedSetting: {
        publicLinkControlsSetting: NULL_FIELD_REF
      },
      workspaceSharedSetting: {
        publicLinkControlsSetting: NULL_FIELD_REF
      }
    }
  }, {
    name: 'publicLinkControlsMaxExpiration',
    type: {
      kind: 'bigint'
    },
    computed: !0,
    nullable: !0,
    dependencies: {
      orgSharedSetting: {
        publicLinkControlsMaxExpiration: NULL_FIELD_REF
      },
      workspaceSharedSetting: {
        publicLinkControlsMaxExpiration: NULL_FIELD_REF
      }
    }
  }, {
    name: 'hasCustomPublicLinkControlsSetting',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      workspaceSharedSetting: {
        publicLinkControlsSetting: NULL_FIELD_REF
      }
    }
  }, {
    name: 'fileExportSetting',
    type: {
      kind: 'string'
    },
    computed: !0,
    nullable: !0,
    dependencies: {
      orgSharedSetting: {
        fileExportSetting: NULL_FIELD_REF
      },
      workspaceSharedSetting: {
        fileExportSetting: NULL_FIELD_REF
      }
    }
  }, {
    name: 'allowlistedPlugins',
    type: {
      kind: 'objects',
      name: _$$Y.AllowlistedPlugin
    },
    filter: {
      and: [['allowlistGroupId', '=', createParentRef('id')], ['allowlistGroupType', '=', 'Workspace']]
    },
    expectedMaxCount: 1e4
  }, {
    name: 'isPluginAllowlisted',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'pluginId',
      type: {
        kind: 'string'
      }
    }],
    computed: !0,
    dependencies: {
      allowlistedPlugins: {
        pluginId: NULL_FIELD_REF
      }
    }
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    permissionName: 'WORKSPACE::CAN_VIEW',
    dependencies: _$$pJ['WORKSPACE::CAN_VIEW']
  }, ..._$$oJ]
};
let p6 = {
  name: _$$Y.WorkspaceTeamResult,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    },
    bannedFromViews: !0
  }, {
    name: 'team',
    type: {
      kind: 'object',
      name: _$$Y.Team
    },
    filter: {
      and: [['id', '=', createParentRef('id')], ['deletedAt', '=', null]]
    },
    nullable: !0,
    checkCanRead: {
      userId: createSessionRef('userId'),
      fieldName: 'canDiscover'
    }
  }, {
    name: 'memberCount',
    type: {
      kind: 'int'
    }
  }]
};
let p7 = {
  name: _$$Y.WorkspaceColorConfig,
  permissionRequired: !1,
  embedded: !0,
  fields: [{
    name: 'colors',
    type: {
      kind: 'list',
      ofType: {
        kind: 'string'
      }
    }
  }]
};
let p8 = {
  name: _$$Y.WorkspaceUser,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'actorUserId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'assignedAt',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'createdAt',
    type: {
      kind: 'string'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'string'
    }
  }, {
    name: 'updateReason',
    type: {
      kind: 'enum',
      name: 'WorkspaceUpdateReason'
    },
    nullable: !0
  }, {
    name: 'uuid',
    type: {
      kind: 'string'
    }
  }, {
    name: 'orgUserId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'idpGroupUuid',
    type: {
      kind: 'uuid'
    },
    nullable: !0
  }, {
    name: 'idpGroup',
    type: {
      kind: 'object',
      name: _$$Y.IDPGroup
    },
    filter: ['id', '=', createParentRef('idpGroupUuid')],
    nullable: !0
  }, {
    name: 'workspaceId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'workspace',
    type: {
      kind: 'object',
      name: _$$Y.Workspace
    },
    filter: ['id', '=', createParentRef('workspaceId')],
    shadowCheckCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'permission',
    type: {
      kind: 'enum',
      name: 'WorkspacePermission'
    }
  }, {
    name: 'isMainWorkspace',
    type: {
      kind: 'bool'
    }
  }, {
    name: 'baseOrgUser',
    type: {
      kind: 'object',
      name: _$$Y.BaseOrgUser
    },
    nullable: !0,
    filter: ['id', '=', createParentRef('orgUserId')]
  }]
};
let me = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canAccess', [{
        linkAccessOverrideKey: null,
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, NULL_FIELD_REF])
    }])
  }
};
let mt = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canAccessDevModeEntryPointV2', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, NULL_FIELD_REF])
    }])
  }
};
let mi = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canAccessDevModeEntryPointV2WithReasons', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let mn = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canAccessFileThroughApi', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let mr = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canAccessFileThroughApiWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let ma = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canAccessFragments', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let ms = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canAccessFragmentsWithReasons', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let mo = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canAccessFullCodeConnect', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let ml = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canAccessFullCodeConnectWithReasons', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let md = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canAccessFullDevModeV2', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, NULL_FIELD_REF])
    }])
  }
};
let mc = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canAccessFullDevModeOrgPlusV2', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let mu = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canAccessFullDevModeOrgPlusV2WithReasons', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let mp = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canAccessFullDevModeV2WithReasons', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let mm = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canAccessLibrary', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let mh = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canAccessLibraryWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let mg = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canAccess', [{
        linkAccessOverrideKey: createViewRef('key'),
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, NULL_FIELD_REF])
    }])
  }
};
let mf = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canAccessWithReasons', [{
        linkAccessOverrideKey: createViewRef('key'),
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let m_ = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canAccessTextureMode', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let mA = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canAccessTextureModeWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let my = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canAccessWithReasons', [{
        linkAccessOverrideKey: null,
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let mb = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canAdmin', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let mv = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canAdminWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let mI = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canBeMentionedInComment', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let mE = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canBeMentionedInCommentWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let mx = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canBecomeEditorV2', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let mS = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canBecomeEditorV2WithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let mw = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canClickButtonToUpgradeAndEdit', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let mC = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canClickButtonToUpgradeAndEditWithReasons', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let mT = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canConsumeCodeConnect', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let mk = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canConsumeCodeConnectWithReasons', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let mR = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canCreateBranch', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let mN = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canCreateBranchWithReasons', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let mP = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canCreateCodeConnect', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let mO = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canCreateCodeConnectWithReasons', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let mD = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canDeleteV2', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let mL = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canDeleteV2WithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let mF = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canDownloadFile', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let mM = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canDownloadFileWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let mj = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canEditV3', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, NULL_FIELD_REF])
    }])
  }
};
let mU = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canEditAnnotations', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let mB = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canEditAnnotationsWithReasons', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let mV = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canEditCanvasV2', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, NULL_FIELD_REF])
    }])
  }
};
let mG = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canEditCanvasV2WithReasons', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let mz = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canEditCmsStructure', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let mH = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canEditCmsStructureWithReasons', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let mW = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canEditIgnoreEduGracePeriodV2', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, NULL_FIELD_REF])
    }])
  }
};
let mK = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canEditIgnoreEduGracePeriodV2WithReasons', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let mY = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canEditIgnorePaidStatusV2', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, NULL_FIELD_REF])
    }])
  }
};
let mq = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canEditIgnorePaidStatusV2WithReasons', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let m$ = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canEditLinkAccess', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let mZ = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canEditLinkAccessIgnorePasswords', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let mX = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canEditLinkAccessIgnorePasswordsWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let mQ = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canEditLinkAccessWithReasons', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let mJ = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canEditOrAccessFullDevMode', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let m0 = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canEditOrAccessFullDevModeWithReasons', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let m1 = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canEditV3WithReasons', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let m2 = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canExport', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let m5 = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canExportWithReasons', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let m4 = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canFavoriteV2', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, NULL_FIELD_REF])
    }])
  }
};
let m3 = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canFavoriteV2WithReasons', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let m6 = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canGainView', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let m7 = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canGainViewPrototype', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let m8 = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canGainViewPrototypeWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let m9 = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canGainViewWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let he = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canInsertTemplateV3', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let ht = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canInsertTemplateV3WithReasons', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let hi = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canManageV2', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, NULL_FIELD_REF])
    }])
  }
};
let hn = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canManageV2WithReasons', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let hr = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canModifyRoles', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let ha = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canModifyRolesWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let hs = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canMove', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let ho = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canMoveCommentsV2', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, NULL_FIELD_REF])
    }])
  }
};
let hl = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canMoveCommentsV2WithReasons', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let hd = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canMoveWithReasons', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let hc = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canOrgEditLinkAccess', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let hu = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canOrgEditLinkAccessWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let hp = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canOrgViewLinkAccess', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let hm = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canOrgViewLinkAccessWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let hh = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canOrgViewPrototypeLinkAccess', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let hg = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canOrgViewPrototypeLinkAccessWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let hf = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canPermanentlyDeleteV3', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let h_ = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canPermanentlyDeleteV3WithReasons', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let hA = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canPinToWorkspace', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let hy = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canPinToWorkspaceWithReasons', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let hb = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canPublishSite', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, NULL_FIELD_REF])
    }])
  }
};
let hv = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canPublishSiteWithReasons', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let hI = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canPublishTemplateV2', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, NULL_FIELD_REF])
    }])
  }
};
let hE = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canPublishTemplateV2WithReasons', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let hx = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canRenameV2', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, NULL_FIELD_REF])
    }])
  }
};
let hS = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canRenameV2WithReasons', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let hw = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canRestoreV3', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let hC = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canRestoreToOtherFolders', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let hT = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canRestoreToOtherFoldersWithReasons', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let hk = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canRestoreV3WithReasons', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let hR = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canRunExtensions', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let hN = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canRunExtensionsWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let hP = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canSendWebhook', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let hO = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canSendWebhookWithReasons', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let hD = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canTestPlanRecordPermission', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let hL = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canTestPlanRecordPermissionWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let hF = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canTrashV3', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let hM = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canTrashV3WithReasons', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let hj = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canUseDevModeDemoFile', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let hU = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canUseDevModeDemoFileWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let hB = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canUseFigjamAi', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let hV = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canUseFigjamAiWithReasons', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let hG = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canUseFigmaAi', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let hz = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canUseFigmaAiBase', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let hH = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canUseFigmaAiBaseWithReasons', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let hW = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canUseFigmaAiIgnoreAiToggle', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let hK = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canUseFigmaAiIgnoreAiToggleWithReasons', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let hY = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canUseFigmaAiWithReasons', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let hq = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canUseFigmakeAi', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let h$ = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canUseFigmakeAiBase', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let hZ = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canUseFigmakeAiBaseWithReasons', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let hX = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canUseFigmakeAiWithReasons', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let hQ = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canUseFragmentSearchAi', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let hJ = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canUseFragmentSearchAiWithReasons', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let h0 = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canUseSlidesAi', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let h1 = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canUseSlidesAiWithReasons', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let h2 = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canUseSlidesDesignToggle', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let h5 = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canUseSlidesDesignToggleWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let h4 = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canViewV3', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, NULL_FIELD_REF])
    }])
  }
};
let h3 = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canViewAndCreateCommentsV2', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, NULL_FIELD_REF])
    }])
  }
};
let h6 = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canViewAndCreateCommentsV2WithReasons', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let h7 = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canViewAnnotations', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let h8 = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canViewAnnotationsMegadot', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let h9 = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canViewAnnotationsMegadotWithReasons', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let ge = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canViewAnnotationsWithReasons', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let gt = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canViewComponentBrowser', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let gi = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canViewComponentBrowserWithReasons', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let gn = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canViewLinkAccess', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let gr = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canViewLinkAccessWithReasons', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let ga = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canViewMetadata', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let gs = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canViewMetadataLinkAccess', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let go = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canViewMetadataLinkAccessWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let gl = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canViewMetadataWithReasons', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let gd = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canViewPrototypeV3', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, NULL_FIELD_REF])
    }])
  }
};
let gc = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canViewPrototypeLinkAccess', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let gu = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canViewPrototypeLinkAccessWithReasons', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let gp = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canViewPrototypeV3WithReasons', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let gm = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canViewV3WithReasons', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let gh = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canViewWorkspacePin', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let gg = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('canViewWorkspacePinWithReasons', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let gf = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('cannotPublishToCommunity', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let g_ = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('cannotPublishToCommunityWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let gA = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('devModeRequestDenied', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let gy = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('devModeRequestDeniedWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let gb = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('devModeRequestPending', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let gv = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('devModeRequestPendingWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let gI = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('devModeTrialRequestPending', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let gE = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('devModeTrialRequestPendingWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let gx = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('hasRoleAccess', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let gS = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('hasRoleAccessWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let gw = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('isEligibleForDevModeTrialV2', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let gC = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('isEligibleForDevModeTrialV2WithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let gT = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('isInDevModeTrialV2', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let gk = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('isInDevModeTrialV2WithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let gR = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('isOwner', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let gN = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('isOwnerWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let gP = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('isWorkspaceVisible', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let gO = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('isWorkspaceVisibleWithReasons', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let gD = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('mustRequestAccountUpgradeToEdit', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let gL = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('mustRequestAccountUpgradeToEditWithReasons', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let gF = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('mustRequestEditorRoleToEdit', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let gM = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('mustRequestEditorRoleToEditWithReasons', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let gj = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('mustRequestUpgradeToEditDeveloperLinks', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let gU = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('mustRequestUpgradeToEditDeveloperLinksWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let gB = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('mustUpgradeToShareDraft', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let gV = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('mustUpgradeToShareDraftWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let gG = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('seatTypePaidStatusTestPermission', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let gz = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('seatTypePaidStatusTestPermissionWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let gH = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('shouldUseConnectedPlanUser', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let gW = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('shouldUseConnectedPlanUserDevMode', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }]))
  }
};
let gK = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('shouldUseConnectedPlanUserDevModeWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let gY = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('key')
    }, {
      hasPermission: createAliasedFieldRef('shouldUseConnectedPlanUserWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }]))
  }
};
let gq = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    repo: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canAdmin', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let g$ = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    repo: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canAdminWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let gZ = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    repo: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canDiscover', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, NULL_FIELD_REF])
    }])
  }
};
let gX = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    repo: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canDiscoverWithReasons', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let gQ = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    repo: [{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canEditV3', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, NULL_FIELD_REF])
    }]
  }
};
let gJ = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    repo: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canEditLinkAccess', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, NULL_FIELD_REF])
    }])
  }
};
let g0 = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    repo: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canEditLinkAccessWithReasons', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let g1 = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    repo: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canEditV3WithReasons', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let g2 = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    repo: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canManage', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let g5 = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    repo: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canManageWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let g4 = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    repo: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canMove', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let g3 = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    repo: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canMoveWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let g6 = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    repo: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canOrgEditLinkAccess', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let g7 = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    repo: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canOrgEditLinkAccessWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let g8 = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    repo: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canOrgViewLinkAccess', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let g9 = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    repo: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canOrgViewLinkAccessWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let fe = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    repo: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canOrgViewPrototypeLinkAccess', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let ft = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    repo: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canOrgViewPrototypeLinkAccessWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let fi = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    repo: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canViewV3', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, NULL_FIELD_REF])
    }])
  }
};
let fn = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    repo: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canViewLinkAccess', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, NULL_FIELD_REF])
    }])
  }
};
let fr = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    repo: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canViewLinkAccessWithReasons', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let fa = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    repo: [{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canViewPrototype', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, NULL_FIELD_REF])
    }]
  }
};
let fs = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    repo: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canViewPrototypeLinkAccess', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, NULL_FIELD_REF])
    }])
  }
};
let fo = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    repo: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canViewPrototypeLinkAccessWithReasons', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let fl = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    repo: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canViewPrototypeWithReasons', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let fd = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    repo: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canViewV3WithReasons', [{
        userId: createSessionRef('userId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        sessionId: createSessionRef('sessionId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let fc = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    repo: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('isOwner', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let fu = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    repo: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('isOwnerWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let fp = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    repo: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('shouldUseConnectedPlanUser', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let fm = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    repo: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('shouldUseConnectedPlanUserWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let fh = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canConnect', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let fg = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canConnectWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let ff = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canCreateCooperFile', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let f_ = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canCreateCooperFileWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let fA = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canCreateDesignFile', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let fy = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canCreateDesignFileWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let fb = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canCreateFigjamFile', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let fv = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canCreateFigjamFileWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let fI = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canCreateFigmakeFile', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let fE = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canCreateFigmakeFileWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let fx = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canCreateSitesFile', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let fS = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canCreateSitesFileWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let fw = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canCreateSlidesFile', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let fC = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canCreateSlidesFileWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let fT = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canDiscover', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let fk = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canDiscoverWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let fR = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: [{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canEdit', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }]
  }
};
let fN = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canEditWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let fP = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canModifyRoles', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let fO = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canModifyRolesWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let fD = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canMove', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let fL = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canMoveWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let fF = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canPermanentlyDelete', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let fM = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canPermanentlyDeleteWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let fj = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canRestore', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let fU = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canRestoreWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let fB = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canTransferCopy', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let fV = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canTransferCopyWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let fG = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canTransferExternally', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let fz = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canTransferExternallyWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let fH = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canTrash', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let fW = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canTrashWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let fK = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: [{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canRead', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }]
  }
};
let fY = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canViewLimitedInfo', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let fq = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canViewLimitedInfoWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let f$ = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canViewWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let fZ = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: [{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('isOwner', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }]
  }
};
let fX = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('isOwnerWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let fQ = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'permissionArguments',
    type: {
      kind: 'map',
      valueType: {
        kind: 'string'
      }
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('shouldUseConnectedPlanUser', [{
        permissionArguments: createViewRef('permissionArguments'),
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let fJ = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('shouldUseConnectedPlanUserDesign', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let f0 = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('shouldUseConnectedPlanUserDesignWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let f1 = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('shouldUseConnectedPlanUserDevMode', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let f2 = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('shouldUseConnectedPlanUserDevModeWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let f5 = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('shouldUseConnectedPlanUserFigjam', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let f4 = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('shouldUseConnectedPlanUserFigjamWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let f3 = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('shouldUseConnectedPlanUserFigmake', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let f6 = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('shouldUseConnectedPlanUserFigmakeWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let f7 = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('shouldUseConnectedPlanUserSites', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let f8 = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('shouldUseConnectedPlanUserSitesWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let f9 = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('shouldUseConnectedPlanUserSlides', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let _e = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('shouldUseConnectedPlanUserSlidesWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let _t = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'permissionArguments',
    type: {
      kind: 'map',
      valueType: {
        kind: 'string'
      }
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('shouldUseConnectedPlanUserWithReasons', [{
        permissionArguments: createViewRef('permissionArguments'),
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let _i = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    hubFile: [{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canView', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }]
  }
};
let _n = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    hubFile: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canViewWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let _r = {
  args: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    litmusProject: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canView', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let _a = {
  args: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    litmusProject: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canViewWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let _s = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    org: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canUseFigmaAi', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let _o = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    org: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canUseFigmaAiIgnoreAiToggle', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let _l = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    org: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canUseFigmaAiIgnoreAiToggleWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let _d = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    org: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canUseFigmaAiWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let _c = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    org: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canUseFigmaCollabAi', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let _u = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    org: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canUseFigmaCollabAiIgnoreAiToggle', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let _p = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    org: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canUseFigmaCollabAiIgnoreAiToggleWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let _m = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    org: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canUseFigmaCollabAiWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let _h = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    org: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('cannotJoinOrgGuestsBanned', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let _g = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    org: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('cannotJoinOrgGuestsBannedWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let _f = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    org: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('cannotJoinOrgUserExternalContentRestricted', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let __ = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    org: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('cannotJoinOrgUserExternalContentRestrictedWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let _A = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    org: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('hostPlanHasFigmaAiEnabled', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let _y = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    org: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('hostPlanHasFigmaAiEnabledWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let _b = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    org: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('isAdmin', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let _v = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    org: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('isAdminWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let _I = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    org: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('isGuest', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let _E = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    org: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('isGuestWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let _x = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    org: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('isMember', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let _S = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    org: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('isMemberWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let _w = {
  args: [{
    name: 'planParentId',
    type: {
      kind: 'bigint'
    },
    nullable: !1
  }, {
    name: 'planType',
    type: {
      kind: 'enum',
      name: 'PlanType'
    },
    nullable: !1
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    planPermissions: makeFieldRefOptional([{
      planParentId: createViewRef('planParentId'),
      planType: createViewRef('planType'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canConnect', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let _C = {
  args: [{
    name: 'planParentId',
    type: {
      kind: 'bigint'
    },
    nullable: !1
  }, {
    name: 'planType',
    type: {
      kind: 'enum',
      name: 'PlanType'
    },
    nullable: !1
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    planPermissions: makeFieldRefOptional([{
      planParentId: createViewRef('planParentId'),
      planType: createViewRef('planType'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canConsumeGithubApp', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let _T = {
  args: [{
    name: 'planParentId',
    type: {
      kind: 'bigint'
    },
    nullable: !1
  }, {
    name: 'planType',
    type: {
      kind: 'enum',
      name: 'PlanType'
    },
    nullable: !1
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    planPermissions: makeFieldRefOptional([{
      planParentId: createViewRef('planParentId'),
      planType: createViewRef('planType'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canSetupGithubApp', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let _k = {
  args: [{
    name: 'planParentId',
    type: {
      kind: 'bigint'
    },
    nullable: !1
  }, {
    name: 'planType',
    type: {
      kind: 'enum',
      name: 'PlanType'
    },
    nullable: !1
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    planPermissions: makeFieldRefOptional([{
      planParentId: createViewRef('planParentId'),
      planType: createViewRef('planType'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canUpgradeAutoPathwayCollaborator', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let _R = {
  args: [{
    name: 'planParentId',
    type: {
      kind: 'bigint'
    },
    nullable: !1
  }, {
    name: 'planType',
    type: {
      kind: 'enum',
      name: 'PlanType'
    },
    nullable: !1
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    planPermissions: makeFieldRefOptional([{
      planParentId: createViewRef('planParentId'),
      planType: createViewRef('planType'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canUpgradeAutoPathwayContent', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let _N = {
  args: [{
    name: 'planParentId',
    type: {
      kind: 'bigint'
    },
    nullable: !1
  }, {
    name: 'planType',
    type: {
      kind: 'enum',
      name: 'PlanType'
    },
    nullable: !1
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    planPermissions: makeFieldRefOptional([{
      planParentId: createViewRef('planParentId'),
      planType: createViewRef('planType'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canUpgradeAutoPathwayDeveloper', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let _P = {
  args: [{
    name: 'planParentId',
    type: {
      kind: 'bigint'
    },
    nullable: !1
  }, {
    name: 'planType',
    type: {
      kind: 'enum',
      name: 'PlanType'
    },
    nullable: !1
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    planPermissions: makeFieldRefOptional([{
      planParentId: createViewRef('planParentId'),
      planType: createViewRef('planType'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canUpgradeAutoPathwayExpert', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let _O = {
  args: [{
    name: 'planParentId',
    type: {
      kind: 'bigint'
    },
    nullable: !1
  }, {
    name: 'planType',
    type: {
      kind: 'enum',
      name: 'PlanType'
    },
    nullable: !1
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    planPermissions: makeFieldRefOptional([{
      planParentId: createViewRef('planParentId'),
      planType: createViewRef('planType'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canUpgradeCollaborator', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let _D = {
  args: [{
    name: 'planParentId',
    type: {
      kind: 'bigint'
    },
    nullable: !1
  }, {
    name: 'planType',
    type: {
      kind: 'enum',
      name: 'PlanType'
    },
    nullable: !1
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    planPermissions: makeFieldRefOptional([{
      planParentId: createViewRef('planParentId'),
      planType: createViewRef('planType'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canUpgradeContent', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let _L = {
  args: [{
    name: 'planParentId',
    type: {
      kind: 'bigint'
    },
    nullable: !1
  }, {
    name: 'planType',
    type: {
      kind: 'enum',
      name: 'PlanType'
    },
    nullable: !1
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    planPermissions: makeFieldRefOptional([{
      planParentId: createViewRef('planParentId'),
      planType: createViewRef('planType'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canUpgradeDeveloper', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let _F = {
  args: [{
    name: 'planParentId',
    type: {
      kind: 'bigint'
    },
    nullable: !1
  }, {
    name: 'planType',
    type: {
      kind: 'enum',
      name: 'PlanType'
    },
    nullable: !1
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    planPermissions: makeFieldRefOptional([{
      planParentId: createViewRef('planParentId'),
      planType: createViewRef('planType'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canUpgradeExpert', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let _M = {
  args: [{
    name: 'planParentId',
    type: {
      kind: 'bigint'
    },
    nullable: !1
  }, {
    name: 'planType',
    type: {
      kind: 'enum',
      name: 'PlanType'
    },
    nullable: !1
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    planPermissions: makeFieldRefOptional([{
      planParentId: createViewRef('planParentId'),
      planType: createViewRef('planType'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canUseFileViewHistory', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let _j = {
  args: [{
    name: 'planParentId',
    type: {
      kind: 'bigint'
    },
    nullable: !1
  }, {
    name: 'planType',
    type: {
      kind: 'enum',
      name: 'PlanType'
    },
    nullable: !1
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    planPermissions: makeFieldRefOptional([{
      planParentId: createViewRef('planParentId'),
      planType: createViewRef('planType'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canViewInvoices', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let _U = {
  args: [{
    name: 'planParentId',
    type: {
      kind: 'bigint'
    },
    nullable: !1
  }, {
    name: 'planType',
    type: {
      kind: 'enum',
      name: 'PlanType'
    },
    nullable: !1
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    planPermissions: makeFieldRefOptional([{
      planParentId: createViewRef('planParentId'),
      planType: createViewRef('planType'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('isAdmin', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let _B = {
  args: [{
    name: 'planParentId',
    type: {
      kind: 'bigint'
    },
    nullable: !1
  }, {
    name: 'planType',
    type: {
      kind: 'enum',
      name: 'PlanType'
    },
    nullable: !1
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    planPermissions: makeFieldRefOptional([{
      planParentId: createViewRef('planParentId'),
      planType: createViewRef('planType'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('isEligibleProvisionalAccessCollaborator', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let _V = {
  args: [{
    name: 'planParentId',
    type: {
      kind: 'bigint'
    },
    nullable: !1
  }, {
    name: 'planType',
    type: {
      kind: 'enum',
      name: 'PlanType'
    },
    nullable: !1
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    planPermissions: makeFieldRefOptional([{
      planParentId: createViewRef('planParentId'),
      planType: createViewRef('planType'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('isEligibleProvisionalAccessContent', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let _G = {
  args: [{
    name: 'planParentId',
    type: {
      kind: 'bigint'
    },
    nullable: !1
  }, {
    name: 'planType',
    type: {
      kind: 'enum',
      name: 'PlanType'
    },
    nullable: !1
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    planPermissions: makeFieldRefOptional([{
      planParentId: createViewRef('planParentId'),
      planType: createViewRef('planType'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('isEligibleProvisionalAccessDeveloper', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let _z = {
  args: [{
    name: 'planParentId',
    type: {
      kind: 'bigint'
    },
    nullable: !1
  }, {
    name: 'planType',
    type: {
      kind: 'enum',
      name: 'PlanType'
    },
    nullable: !1
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    planPermissions: makeFieldRefOptional([{
      planParentId: createViewRef('planParentId'),
      planType: createViewRef('planType'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('isEligibleProvisionalAccessExpert', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let _H = {
  args: [{
    name: 'planParentId',
    type: {
      kind: 'bigint'
    },
    nullable: !1
  }, {
    name: 'planType',
    type: {
      kind: 'enum',
      name: 'PlanType'
    },
    nullable: !1
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    planPermissions: makeFieldRefOptional([{
      planParentId: createViewRef('planParentId'),
      planType: createViewRef('planType'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('isGuest', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let _W = {
  args: [{
    name: 'planParentId',
    type: {
      kind: 'bigint'
    },
    nullable: !1
  }, {
    name: 'planType',
    type: {
      kind: 'enum',
      name: 'PlanType'
    },
    nullable: !1
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    planPermissions: makeFieldRefOptional([{
      planParentId: createViewRef('planParentId'),
      planType: createViewRef('planType'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('isMember', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let _K = {
  args: [{
    name: 'planParentId',
    type: {
      kind: 'bigint'
    },
    nullable: !1
  }, {
    name: 'planType',
    type: {
      kind: 'enum',
      name: 'PlanType'
    },
    nullable: !1
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    planPermissions: makeFieldRefOptional([{
      planParentId: createViewRef('planParentId'),
      planType: createViewRef('planType'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('needUpgradeCollaborator', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let _Y = {
  args: [{
    name: 'planParentId',
    type: {
      kind: 'bigint'
    },
    nullable: !1
  }, {
    name: 'planType',
    type: {
      kind: 'enum',
      name: 'PlanType'
    },
    nullable: !1
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    planPermissions: makeFieldRefOptional([{
      planParentId: createViewRef('planParentId'),
      planType: createViewRef('planType'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('needUpgradeContent', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let _q = {
  args: [{
    name: 'planParentId',
    type: {
      kind: 'bigint'
    },
    nullable: !1
  }, {
    name: 'planType',
    type: {
      kind: 'enum',
      name: 'PlanType'
    },
    nullable: !1
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    planPermissions: makeFieldRefOptional([{
      planParentId: createViewRef('planParentId'),
      planType: createViewRef('planType'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('needUpgradeDeveloper', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let _$ = {
  args: [{
    name: 'planParentId',
    type: {
      kind: 'bigint'
    },
    nullable: !1
  }, {
    name: 'planType',
    type: {
      kind: 'enum',
      name: 'PlanType'
    },
    nullable: !1
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    planPermissions: makeFieldRefOptional([{
      planParentId: createViewRef('planParentId'),
      planType: createViewRef('planType'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('needUpgradeExpert', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let _Z = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    team: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('adminRoleAccess', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let _X = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    team: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('adminRoleAccessWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let _Q = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    team: [{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canAdmin', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }]
  }
};
let _J = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    team: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canAdminWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let _0 = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    team: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canDelete', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let _1 = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    team: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canDeleteWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let _2 = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    team: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canDiscover', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let _5 = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    team: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canDiscoverWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let _4 = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    team: [{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canEdit', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }]
  }
};
let _3 = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    team: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canEditWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let _6 = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    team: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canUseFigmaAi', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let _7 = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    team: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canUseFigmaAiIgnoreAiToggle', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let _8 = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    team: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canUseFigmaAiIgnoreAiToggleWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let _9 = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    team: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canUseFigmaAiWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let Ae = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    team: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canUseFigmaCollabAi', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let At = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    team: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canUseFigmaCollabAiIgnoreAiToggle', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let Ai = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    team: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canUseFigmaCollabAiIgnoreAiToggleWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let An = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    team: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canUseFigmaCollabAiWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let Ar = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    team: [{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canRead', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }]
  }
};
let Aa = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    team: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canViewInAdmin', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let As = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    team: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canViewInAdminWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let Ao = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    team: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canViewLimitedInfo', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let Al = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    team: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canViewLimitedInfoWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let Ad = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    team: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canViewWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let Ac = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    team: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('editRoleAccess', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let Au = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    team: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('editRoleAccessWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let Ap = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    team: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('hostPlanHasFigmaAiEnabled', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let Am = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    team: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('hostPlanHasFigmaAiEnabledWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let Ah = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    team: [{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('isOwner', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }]
  }
};
let Ag = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    team: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('isOwnerWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let Af = {
  args: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    userGroup: makeFieldRefOptional([{
      id: createViewRef('id')
    }, {
      hasPermission: createAliasedFieldRef('canView', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }])
  }
};
let A_ = {
  args: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    userGroup: makeFieldRefOptional([{
      id: createViewRef('id')
    }, {
      hasPermission: createAliasedFieldRef('canViewWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let AA = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    workspace: [{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canAdmin', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }]
  }
};
let Ay = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    workspace: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canAdminWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let Ab = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    workspace: [{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canCreateTeam', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }]
  }
};
let Av = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    workspace: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canCreateTeamWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let AI = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    workspace: [{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canView', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }]
  }
};
let AE = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    workspace: makeFieldRefOptional([{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      hasPermission: createAliasedFieldRef('canViewWithReasons', [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let Ax = {
  type: _$$Y.AccountTypeRequest,
  fields: {
    id: NULL_FIELD_REF,
    status: NULL_FIELD_REF,
    lastNudgedAt: NULL_FIELD_REF,
    createdAt: NULL_FIELD_REF,
    requesterDismissedNudgeBadgeAt: NULL_FIELD_REF
  }
};
let AS = {
  type: _$$Y.File,
  fields: {
    hasFileLinkPassword: NULL_FIELD_REF,
    linkAccess: NULL_FIELD_REF
  }
};
let Aw = {
  type: _$$Y.File,
  fields: mergeFieldRefs(AS.fields, {
    clientMeta: createAliasedFieldRef('checkpointClientMeta', NULL_FIELD_REF),
    thumbnailGuid: NULL_FIELD_REF,
    editorType: NULL_FIELD_REF,
    thumbnailUrl: createAliasedFieldRef('signedThumbnailUrl', NULL_FIELD_REF),
    thumbnailUrlOverride: NULL_FIELD_REF,
    touchedAt: NULL_FIELD_REF,
    canView: createAliasedFieldRef('canViewV3', [{
      userId: createSessionRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId')
    }, NULL_FIELD_REF])
  })
};
let AC = {
  type: _$$Y.File,
  fields: {
    fileRepoId: NULL_FIELD_REF,
    editorType: NULL_FIELD_REF,
    isTeamTemplate: NULL_FIELD_REF,
    lastPublishedAt: NULL_FIELD_REF
  }
};
let AT = {
  type: _$$Y.File,
  fields: {
    key: NULL_FIELD_REF,
    name: NULL_FIELD_REF
  }
};
let Ak = {
  type: _$$Y.File,
  fields: {
    key: NULL_FIELD_REF,
    workspaceId: NULL_FIELD_REF,
    isWorkspaceVisible: [{
      userId: createSessionRef('userId'),
      anonymousUserId: createSessionRef('anonymousUserId'),
      sessionId: createSessionRef('sessionId')
    }, NULL_FIELD_REF],
    canPinToWorkspace: [{
      userId: createSessionRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId')
    }, NULL_FIELD_REF]
  }
};
let AR = {
  type: _$$Y.File,
  fields: mergeFieldRefs(Aw.fields, AC.fields, AT.fields, Ak.fields, {
    key: NULL_FIELD_REF,
    name: NULL_FIELD_REF,
    project: [{
      userId: createSessionRef('userId')
    }, {
      name: NULL_FIELD_REF
    }]
  })
};
let AN = {
  type: _$$Y.EmbeddedSCIMInfo,
  fields: {
    enterpriseFields: {
      costCenter: NULL_FIELD_REF,
      department: NULL_FIELD_REF,
      division: NULL_FIELD_REF,
      organization: NULL_FIELD_REF
    },
    figmaEnterpriseFields: {
      figmaPermission: NULL_FIELD_REF,
      figjamPermission: NULL_FIELD_REF,
      devModePermission: NULL_FIELD_REF,
      figmaAdmin: NULL_FIELD_REF
    },
    figmaPermission: NULL_FIELD_REF,
    figjamPermission: NULL_FIELD_REF,
    devModePermission: NULL_FIELD_REF,
    displayName: NULL_FIELD_REF,
    userName: NULL_FIELD_REF,
    name: {
      givenName: NULL_FIELD_REF,
      familyName: NULL_FIELD_REF
    }
  }
};
let AP = {
  id: NULL_FIELD_REF,
  orgUserId: NULL_FIELD_REF,
  reason: NULL_FIELD_REF,
  createdAt: NULL_FIELD_REF,
  actorId: NULL_FIELD_REF,
  actor: {
    id: NULL_FIELD_REF,
    handle: NULL_FIELD_REF
  },
  resourceType: NULL_FIELD_REF,
  resourceId: NULL_FIELD_REF,
  resourceFile: {
    file: {
      id: NULL_FIELD_REF,
      name: NULL_FIELD_REF
    }
  },
  resourceTeam: {
    team: createAliasedFieldRef('teamLimitedInfo', {
      name: NULL_FIELD_REF
    })
  },
  resourceRepo: {
    repo: {
      name: NULL_FIELD_REF
    }
  },
  resourceProject: {
    project: {
      name: NULL_FIELD_REF
    }
  },
  resourceOrg: {
    org: createAliasedFieldRef('orgInfo', {
      name: NULL_FIELD_REF
    })
  },
  licenseType: NULL_FIELD_REF
};
let AO = {
  type: _$$Y.BaseOrgUser,
  fields: {
    id: NULL_FIELD_REF,
    user: {
      id: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      handle: NULL_FIELD_REF,
      imgUrl: NULL_FIELD_REF,
      email: NULL_FIELD_REF,
      description: NULL_FIELD_REF,
      emailValidatedAt: NULL_FIELD_REF,
      externalRestrictedOrgId: NULL_FIELD_REF,
      idpUsersInOrg: [{
        orgId: createViewRef('orgId')
      }, {
        scim: AN.fields,
        seatType: NULL_FIELD_REF
      }],
      profile: {
        jobTitle: NULL_FIELD_REF
      }
    },
    orgId: NULL_FIELD_REF,
    draftsFolderId: NULL_FIELD_REF,
    createdAt: NULL_FIELD_REF,
    updatedAt: NULL_FIELD_REF,
    disabledAt: NULL_FIELD_REF,
    whiteboardPaidStatus: NULL_FIELD_REF,
    devModePaidStatus: NULL_FIELD_REF,
    showFigjamUserOnboarding: NULL_FIELD_REF,
    hasShownFigjamAdminOnboarding: NULL_FIELD_REF,
    hasShownFigjamAdminLaunchOnboarding: NULL_FIELD_REF,
    accountType: NULL_FIELD_REF,
    accountTypeChangedAt: NULL_FIELD_REF,
    description: NULL_FIELD_REF,
    permission: NULL_FIELD_REF,
    userStateChangedAt: NULL_FIELD_REF,
    agreedToCommunityTosAt: NULL_FIELD_REF,
    mostRecentDesignUserUpgrade: [{
      userId: createSessionRef('userId')
    }, {
      ...AP
    }],
    mostRecentWhiteboardUserUpgrade: [{
      userId: createSessionRef('userId')
    }, {
      ...AP
    }],
    mostRecentDevModeUserUpgrade: [{
      userId: createSessionRef('userId')
    }, {
      ...AP
    }],
    licenseGroupMember: {
      id: NULL_FIELD_REF,
      licenseGroupId: NULL_FIELD_REF,
      assignedAt: NULL_FIELD_REF,
      createdAt: NULL_FIELD_REF,
      actorUserId: NULL_FIELD_REF,
      updateReason: NULL_FIELD_REF,
      updatedAt: NULL_FIELD_REF,
      orgUserId: NULL_FIELD_REF,
      idpGroup: makeFieldRefOptional({
        id: NULL_FIELD_REF,
        name: NULL_FIELD_REF
      })
    },
    licenseGroupAdmins: {
      id: NULL_FIELD_REF
    },
    workspaceUsers: {
      actorUserId: NULL_FIELD_REF,
      assignedAt: NULL_FIELD_REF,
      createdAt: NULL_FIELD_REF,
      id: NULL_FIELD_REF,
      isMainWorkspace: NULL_FIELD_REF,
      orgUserId: NULL_FIELD_REF,
      permission: NULL_FIELD_REF,
      updateReason: NULL_FIELD_REF,
      updatedAt: NULL_FIELD_REF,
      uuid: NULL_FIELD_REF,
      workspaceId: NULL_FIELD_REF,
      idpGroup: makeFieldRefOptional({
        id: NULL_FIELD_REF,
        name: NULL_FIELD_REF
      })
    },
    devModeBetaUsedEvent: {
      id: NULL_FIELD_REF
    },
    isMfaRestricted: [{
      userId: createSessionRef('userId')
    }, NULL_FIELD_REF],
    activeSeatTypeUpgrade: {
      billableProduct: {
        key: NULL_FIELD_REF,
        licenseTypes: NULL_FIELD_REF
      },
      upgradeMethod: NULL_FIELD_REF,
      ...AP
    }
  }
};
let AD = {
  type: _$$Y.LibraryItemContainingFrame,
  fields: {
    backgroundColor: NULL_FIELD_REF,
    name: NULL_FIELD_REF,
    nodeId: NULL_FIELD_REF,
    pageId: NULL_FIELD_REF,
    pageName: NULL_FIELD_REF,
    sortPosition: NULL_FIELD_REF
  }
};
let AL = {
  type: _$$Y.Component,
  fields: {
    componentKey: NULL_FIELD_REF,
    containingFrame: mergeFieldRefs(AD.fields, {
      containingStateGroup: {
        nodeId: NULL_FIELD_REF,
        name: NULL_FIELD_REF
      }
    }),
    contentHash: NULL_FIELD_REF,
    userFacingVersion: NULL_FIELD_REF,
    description: NULL_FIELD_REF,
    description_rt: NULL_FIELD_REF,
    id: NULL_FIELD_REF,
    minNodeHeight: NULL_FIELD_REF,
    minNodeWidth: NULL_FIELD_REF,
    sortPosition: NULL_FIELD_REF,
    hasVideo: makeFieldRefOptional(),
    name: NULL_FIELD_REF,
    nodeId: NULL_FIELD_REF,
    thumbnailUrl: NULL_FIELD_REF,
    unpublishedAt: NULL_FIELD_REF,
    updatedAt: NULL_FIELD_REF
  }
};
let AF = {
  type: _$$Y.DeveloperRelatedLink,
  fields: {
    id: NULL_FIELD_REF,
    nodeId: NULL_FIELD_REF,
    fileKey: NULL_FIELD_REF,
    linkName: NULL_FIELD_REF,
    linkUrl: NULL_FIELD_REF,
    linkPreviewJson: NULL_FIELD_REF,
    isUserOverride: NULL_FIELD_REF
  }
};
let AM = {
  type: _$$Y.FavoritedFile,
  fields: {
    id: NULL_FIELD_REF,
    orgId: NULL_FIELD_REF,
    teamId: NULL_FIELD_REF,
    createdAt: NULL_FIELD_REF,
    updatedAt: NULL_FIELD_REF,
    resourceId: NULL_FIELD_REF,
    sidebarSectionId: NULL_FIELD_REF,
    file: createAliasedFieldRef('readableFile', [{
      userId: createSessionRef('userId')
    }, mergeFieldRefs(Aw.fields, {
      id: NULL_FIELD_REF,
      key: NULL_FIELD_REF,
      libraryKey: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      fileRepoId: NULL_FIELD_REF,
      editorType: NULL_FIELD_REF,
      folderId: NULL_FIELD_REF,
      teamId: NULL_FIELD_REF,
      lastPublishedAt: NULL_FIELD_REF,
      canView: createAliasedFieldRef('canViewV3', [{
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      }, NULL_FIELD_REF]),
      repo: {
        id: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        createdAt: NULL_FIELD_REF,
        deletedAt: NULL_FIELD_REF,
        trashedAt: NULL_FIELD_REF,
        updatedAt: NULL_FIELD_REF,
        linkAccess: NULL_FIELD_REF,
        protoLinkAccess: NULL_FIELD_REF,
        hasFileLinkPassword: NULL_FIELD_REF,
        hasProtoLinkPassword: NULL_FIELD_REF,
        orgAudience: NULL_FIELD_REF,
        orgBrowsable: NULL_FIELD_REF,
        hasActiveBranches: NULL_FIELD_REF
      },
      isTeamTemplate: NULL_FIELD_REF,
      project: [{
        userId: createSessionRef('userId')
      }, {
        canView: [{
          userId: createSessionRef('userId')
        }, NULL_FIELD_REF],
        path: NULL_FIELD_REF
      }]
    })])
  }
};
let Aj = {
  type: _$$Y.FavoritedProject,
  fields: {
    id: NULL_FIELD_REF,
    orgId: NULL_FIELD_REF,
    teamId: NULL_FIELD_REF,
    createdAt: NULL_FIELD_REF,
    updatedAt: NULL_FIELD_REF,
    resourceId: NULL_FIELD_REF,
    sidebarSectionId: NULL_FIELD_REF,
    project: createAliasedFieldRef('readableProject', [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      path: NULL_FIELD_REF,
      orgId: NULL_FIELD_REF,
      teamId: NULL_FIELD_REF,
      updatedAt: NULL_FIELD_REF,
      createdAt: NULL_FIELD_REF,
      deletedAt: NULL_FIELD_REF,
      trashedAt: NULL_FIELD_REF,
      viewOnlyAt: NULL_FIELD_REF,
      inviteOnlyAt: NULL_FIELD_REF,
      canEdit: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF],
      description: NULL_FIELD_REF,
      activeProjectResourceConnections: {
        id: NULL_FIELD_REF,
        hostPlanName: NULL_FIELD_REF,
        connectedPlanName: NULL_FIELD_REF
      },
      isEditingLockedForUser: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF],
      teamPermissioned: createAliasedFieldRef('teamV2', {
        name: NULL_FIELD_REF
      }),
      team: createAliasedFieldRef('teamLimitedInfo', {
        id: NULL_FIELD_REF,
        name: NULL_FIELD_REF
      })
    }])
  }
};
let AU = {
  type: _$$Y.FavoritedPrototype,
  fields: {
    id: NULL_FIELD_REF,
    orgId: NULL_FIELD_REF,
    teamId: NULL_FIELD_REF,
    createdAt: NULL_FIELD_REF,
    updatedAt: NULL_FIELD_REF,
    resourceId: NULL_FIELD_REF,
    sidebarSectionId: NULL_FIELD_REF,
    prototype: createAliasedFieldRef('readablePrototype', [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      fileKey: NULL_FIELD_REF,
      pageId: NULL_FIELD_REF,
      thumbnailUrl: createAliasedFieldRef('signedThumbnailUrl', NULL_FIELD_REF),
      file: {
        parentOrgId: NULL_FIELD_REF,
        key: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        editorType: NULL_FIELD_REF,
        folderId: NULL_FIELD_REF,
        teamId: NULL_FIELD_REF,
        fileRepoId: NULL_FIELD_REF,
        hasProtoLinkPassword: NULL_FIELD_REF,
        protoLinkAccess: NULL_FIELD_REF,
        createdAt: NULL_FIELD_REF,
        trashedAt: NULL_FIELD_REF,
        prototypeUrl: makeFieldRefOptional()
      }
    }])
  }
};
let AB = {
  type: _$$Y.FavoritedTeam,
  fields: {
    id: NULL_FIELD_REF,
    orgId: NULL_FIELD_REF,
    createdAt: NULL_FIELD_REF,
    updatedAt: NULL_FIELD_REF,
    resourceId: NULL_FIELD_REF,
    sidebarSectionId: NULL_FIELD_REF,
    team: [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      orgId: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      deletedAt: NULL_FIELD_REF,
      imgUrl: createAliasedFieldRef('imgUrlTransformed', NULL_FIELD_REF),
      licenseGroup: {
        name: NULL_FIELD_REF
      },
      canAdmin: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF]
    }]
  }
};
let AV = {
  type: _$$Y.FavoritedWorkspace,
  fields: {
    id: NULL_FIELD_REF,
    orgId: NULL_FIELD_REF,
    createdAt: NULL_FIELD_REF,
    updatedAt: NULL_FIELD_REF,
    resourceId: NULL_FIELD_REF,
    sidebarSectionId: NULL_FIELD_REF,
    workspace: {
      id: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      imgUrl: createAliasedFieldRef('imgUrlTransformed', NULL_FIELD_REF)
    }
  }
};
let AG = {
  type: _$$Y.User,
  fields: {
    id: NULL_FIELD_REF,
    handle: NULL_FIELD_REF,
    imgUrl: NULL_FIELD_REF,
    name: NULL_FIELD_REF,
    allBaseOrgUsers: {
      orgId: NULL_FIELD_REF,
      org: {
        id: NULL_FIELD_REF
      }
    },
    profile: {
      jobTitle: NULL_FIELD_REF
    }
  }
};
let Az = {
  type: _$$Y.File,
  fields: {
    branchCheckpointId: NULL_FIELD_REF,
    checkpointId: NULL_FIELD_REF,
    checkpointKey: NULL_FIELD_REF,
    clientMeta: createAliasedFieldRef('checkpointClientMeta', NULL_FIELD_REF),
    createdAt: NULL_FIELD_REF,
    creatorId: NULL_FIELD_REF,
    deletedAt: NULL_FIELD_REF,
    description: NULL_FIELD_REF,
    editUrl: NULL_FIELD_REF,
    editorType: NULL_FIELD_REF,
    fileRepoId: NULL_FIELD_REF,
    folderId: NULL_FIELD_REF,
    handoffUrl: NULL_FIELD_REF,
    hasFileLinkPassword: NULL_FIELD_REF,
    hasProtoLinkPassword: NULL_FIELD_REF,
    isTryFile: NULL_FIELD_REF,
    isPublishedSite: NULL_FIELD_REF,
    key: NULL_FIELD_REF,
    lastPublishedAt: NULL_FIELD_REF,
    libraryKey: NULL_FIELD_REF,
    license: NULL_FIELD_REF,
    linkAccess: NULL_FIELD_REF,
    name: NULL_FIELD_REF,
    orgAudience: NULL_FIELD_REF,
    orgBrowsable: NULL_FIELD_REF,
    parentOrgId: NULL_FIELD_REF,
    protoLinkAccess: NULL_FIELD_REF,
    prototypeUrl: NULL_FIELD_REF,
    scheme: NULL_FIELD_REF,
    sourceCheckpointId: NULL_FIELD_REF,
    sourceFileKey: NULL_FIELD_REF,
    teamId: NULL_FIELD_REF,
    thumbnailGuid: NULL_FIELD_REF,
    thumbnailUrl: createAliasedFieldRef('signedThumbnailUrlV2', [{
      userId: createSessionRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId')
    }, NULL_FIELD_REF]),
    thumbnailUrlOverride: NULL_FIELD_REF,
    touchedAt: NULL_FIELD_REF,
    trackTags: {
      isTemplate: NULL_FIELD_REF,
      starterLibrarySrcFileKey: NULL_FIELD_REF,
      figmaBasicsExperiment: NULL_FIELD_REF,
      source: NULL_FIELD_REF
    },
    trashedAt: NULL_FIELD_REF,
    trashedUserId: NULL_FIELD_REF,
    updatedAt: NULL_FIELD_REF,
    url: NULL_FIELD_REF,
    viewerExportRestricted: NULL_FIELD_REF
  }
};
let AH = {
  type: _$$Y.FileRoleRequest,
  fields: {
    id: NULL_FIELD_REF,
    requesterUserId: NULL_FIELD_REF,
    status: NULL_FIELD_REF,
    level: NULL_FIELD_REF,
    requesterUser: {
      id: NULL_FIELD_REF,
      handle: NULL_FIELD_REF,
      imgUrl: NULL_FIELD_REF,
      email: NULL_FIELD_REF
    }
  }
};
let AW = {
  type: _$$Y.FileSeenState,
  fields: {
    id: NULL_FIELD_REF,
    updatedAt: NULL_FIELD_REF,
    viewedOn: NULL_FIELD_REF,
    createdAt: NULL_FIELD_REF,
    fileKey: NULL_FIELD_REF,
    user: {
      id: NULL_FIELD_REF,
      handle: NULL_FIELD_REF,
      imgUrl: NULL_FIELD_REF,
      name: NULL_FIELD_REF
    }
  }
};
let AK = {
  type: _$$Y.File,
  fields: {
    branchCheckpointId: NULL_FIELD_REF,
    clientMeta: createAliasedFieldRef('checkpointClientMeta', NULL_FIELD_REF),
    createdAt: NULL_FIELD_REF,
    creatorId: NULL_FIELD_REF,
    deletedAt: NULL_FIELD_REF,
    description: NULL_FIELD_REF,
    editUrl: NULL_FIELD_REF,
    editorType: NULL_FIELD_REF,
    fileRepoId: NULL_FIELD_REF,
    folderAccessEnabled: NULL_FIELD_REF,
    folderId: NULL_FIELD_REF,
    handoffUrl: NULL_FIELD_REF,
    hasFileLinkPassword: NULL_FIELD_REF,
    hasProtoLinkPassword: NULL_FIELD_REF,
    isFavorited: [{
      userId: createSessionRef('userId')
    }, NULL_FIELD_REF],
    isPublishedSite: NULL_FIELD_REF,
    isTeamTemplate: NULL_FIELD_REF,
    isTryFile: NULL_FIELD_REF,
    key: NULL_FIELD_REF,
    lastPublishedAt: NULL_FIELD_REF,
    libraryKey: NULL_FIELD_REF,
    license: NULL_FIELD_REF,
    linkAccess: NULL_FIELD_REF,
    name: NULL_FIELD_REF,
    _name: NULL_FIELD_REF,
    newUserPlaygroundLibrary: NULL_FIELD_REF,
    orgAudience: NULL_FIELD_REF,
    orgBrowsable: NULL_FIELD_REF,
    parentOrgId: NULL_FIELD_REF,
    protoLinkAccess: NULL_FIELD_REF,
    prototypeUrl: NULL_FIELD_REF,
    repo: {
      createdAt: NULL_FIELD_REF,
      defaultFileKey: NULL_FIELD_REF,
      deletedAt: NULL_FIELD_REF,
      folderId: NULL_FIELD_REF,
      hasActiveBranches: NULL_FIELD_REF,
      hasFileLinkPassword: NULL_FIELD_REF,
      hasProtoLinkPassword: NULL_FIELD_REF,
      id: NULL_FIELD_REF,
      isFavorited: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF],
      linkAccess: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      orgAudience: NULL_FIELD_REF,
      orgBrowsable: NULL_FIELD_REF,
      parentOrgId: NULL_FIELD_REF,
      protoLinkAccess: NULL_FIELD_REF,
      teamId: NULL_FIELD_REF,
      trashedAt: NULL_FIELD_REF,
      updatedAt: NULL_FIELD_REF
    },
    scheme: NULL_FIELD_REF,
    sourceCheckpointId: NULL_FIELD_REF,
    sourceFileKey: NULL_FIELD_REF,
    teamId: NULL_FIELD_REF,
    thumbnailGuid: NULL_FIELD_REF,
    thumbnailUrl: createAliasedFieldRef('signedThumbnailUrl', NULL_FIELD_REF),
    thumbnailUrlOverride: NULL_FIELD_REF,
    touchedAt: NULL_FIELD_REF,
    trackTags: {
      defaultLibraryFileTreatmentId: NULL_FIELD_REF,
      figmaBasicsExperiment: NULL_FIELD_REF,
      isTemplate: NULL_FIELD_REF,
      migratedFromDraftsFolderId: NULL_FIELD_REF,
      source: NULL_FIELD_REF,
      isDuplicatedFromDevModeDemoFile: NULL_FIELD_REF,
      isDuplicatedFromSupabaseConnectedFile: NULL_FIELD_REF,
      starterLibrarySrcFileKey: NULL_FIELD_REF
    },
    trashedAt: NULL_FIELD_REF,
    trashedUserId: NULL_FIELD_REF,
    updatedAt: NULL_FIELD_REF,
    url: NULL_FIELD_REF,
    viewerExportRestricted: NULL_FIELD_REF
  }
};
let AY = {
  type: _$$Y.RecentFile2,
  fields: {
    id: NULL_FIELD_REF,
    actionAt: NULL_FIELD_REF,
    file: AK.fields
  }
};
let Aq = {
  type: _$$Y.Repo,
  fields: {
    id: NULL_FIELD_REF,
    folderId: NULL_FIELD_REF,
    teamId: NULL_FIELD_REF,
    name: NULL_FIELD_REF,
    defaultFileKey: NULL_FIELD_REF,
    updatedAt: NULL_FIELD_REF,
    createdAt: NULL_FIELD_REF,
    deletedAt: NULL_FIELD_REF,
    trashedAt: NULL_FIELD_REF,
    linkAccess: NULL_FIELD_REF,
    protoLinkAccess: NULL_FIELD_REF,
    hasFileLinkPassword: NULL_FIELD_REF,
    hasProtoLinkPassword: NULL_FIELD_REF,
    hasActiveBranches: NULL_FIELD_REF,
    orgAudience: NULL_FIELD_REF,
    orgBrowsable: NULL_FIELD_REF,
    parentOrgId: NULL_FIELD_REF,
    isFavorited: [{
      userId: createSessionRef('userId')
    }, NULL_FIELD_REF]
  }
};
let A$ = {
  type: _$$Y.Team,
  fields: {
    id: NULL_FIELD_REF,
    createdAt: NULL_FIELD_REF,
    deletedAt: NULL_FIELD_REF,
    updatedAt: NULL_FIELD_REF,
    imgUrl: createAliasedFieldRef('imgUrlTransformed', NULL_FIELD_REF),
    orgId: NULL_FIELD_REF,
    name: NULL_FIELD_REF,
    description: NULL_FIELD_REF,
    hidden: NULL_FIELD_REF,
    orgBrowsable: NULL_FIELD_REF,
    orgAccess: NULL_FIELD_REF,
    workspaceId: NULL_FIELD_REF,
    projectsCount: NULL_FIELD_REF,
    editorsCount: NULL_FIELD_REF,
    isOrphaned: NULL_FIELD_REF,
    restrictionsList: NULL_FIELD_REF,
    subscription: NULL_FIELD_REF,
    stripeCustomerId: NULL_FIELD_REF,
    studentTeamAt: NULL_FIELD_REF,
    studentTeamState: NULL_FIELD_REF,
    isStarterTeam: NULL_FIELD_REF,
    isStudentTeam: NULL_FIELD_REF,
    gracePeriodEnd: NULL_FIELD_REF,
    gracePeriodType: NULL_FIELD_REF,
    defaultPermission: NULL_FIELD_REF,
    aiFeaturesDisabledAt: NULL_FIELD_REF,
    sharingAudienceControlComputed: NULL_FIELD_REF
  }
};
let AZ = {
  type: _$$Y.LibraryAsset,
  fields: {
    assetType: NULL_FIELD_REF,
    version: NULL_FIELD_REF,
    userFacingVersion: NULL_FIELD_REF,
    containingFrame: AD.fields,
    description: NULL_FIELD_REF,
    mainNodeHeight: NULL_FIELD_REF,
    mainNodeWidth: NULL_FIELD_REF,
    key: NULL_FIELD_REF,
    name: NULL_FIELD_REF,
    nodeId: NULL_FIELD_REF,
    unpublishedAt: NULL_FIELD_REF,
    updatedAt: NULL_FIELD_REF
  }
};
let AX = {
  type: _$$Y.CodePresetMetadata,
  fields: {
    presetName: NULL_FIELD_REF,
    presetIcon: NULL_FIELD_REF,
    applicableNodeTypes: NULL_FIELD_REF,
    category: NULL_FIELD_REF
  }
};
let AQ = {
  numComponents: NULL_FIELD_REF,
  numStateGroups: NULL_FIELD_REF,
  numStyles: NULL_FIELD_REF,
  numStylesFill: NULL_FIELD_REF,
  numStylesText: NULL_FIELD_REF,
  numStylesEffect: NULL_FIELD_REF,
  numStylesGrid: NULL_FIELD_REF,
  numVariableSets: NULL_FIELD_REF,
  numVariables: NULL_FIELD_REF,
  numVariablesBoolean: NULL_FIELD_REF,
  numVariablesColor: NULL_FIELD_REF,
  numVariablesFloat: NULL_FIELD_REF,
  numVariablesString: NULL_FIELD_REF,
  numModuleAssets: NULL_FIELD_REF
};
let AJ = {
  type: _$$Y.Library,
  fields: mergeFieldRefs(AQ, {
    file: {
      name: NULL_FIELD_REF,
      libraryKey: NULL_FIELD_REF,
      parentOrgId: NULL_FIELD_REF,
      thumbnailUrl: createAliasedFieldRef('signedThumbnailUrl', NULL_FIELD_REF),
      thumbnailUrlOverride: NULL_FIELD_REF,
      thumbnailGuid: NULL_FIELD_REF
    }
  })
};
let A0 = {
  type: _$$Y.Library,
  fields: mergeFieldRefs(AQ, AJ.fields, {
    file: {
      key: NULL_FIELD_REF
    }
  })
};
let A1 = {
  type: _$$Y.CommunityLibrary,
  fields: mergeFieldRefs(AQ, {
    name: NULL_FIELD_REF,
    hubFileId: NULL_FIELD_REF,
    hubFile: {
      libraryKey: NULL_FIELD_REF,
      thumbnailUrl: NULL_FIELD_REF
    }
  })
};
let A2 = {
  version: NULL_FIELD_REF,
  userFacingVersion: NULL_FIELD_REF,
  description: NULL_FIELD_REF,
  id: NULL_FIELD_REF,
  key: NULL_FIELD_REF,
  name: NULL_FIELD_REF,
  nodeId: NULL_FIELD_REF,
  unpublishedAt: NULL_FIELD_REF,
  updatedAt: NULL_FIELD_REF,
  variableType: NULL_FIELD_REF,
  sortPosition: NULL_FIELD_REF,
  scopes: NULL_FIELD_REF
};
let A5 = {
  type: _$$Y.VariableLog,
  fields: A2
};
let A4 = {
  type: _$$Y.Variable,
  fields: mergeFieldRefs(A2, {
    variableCollection: {
      key: NULL_FIELD_REF,
      version: NULL_FIELD_REF,
      nodeId: NULL_FIELD_REF,
      checkpoint: {
        key: NULL_FIELD_REF
      }
    }
  })
};
let A3 = {
  type: _$$Y.VariableSetMode,
  fields: {
    id: NULL_FIELD_REF,
    name: NULL_FIELD_REF,
    sortPosition: NULL_FIELD_REF,
    parentModeId: makeFieldRefOptional(),
    parentVariableSetId: makeFieldRefOptional()
  }
};
let A6 = {
  type: _$$Y.VariableSet,
  fields: {
    checkpoint: {
      key: NULL_FIELD_REF
    },
    variableThumbnailsUrl: NULL_FIELD_REF,
    modes: A3.fields,
    isExtendable: NULL_FIELD_REF,
    rootVariableSetKey: makeFieldRefOptional(),
    variableSetExtensionChain: NULL_FIELD_REF,
    version: NULL_FIELD_REF,
    userFacingVersion: NULL_FIELD_REF,
    description: NULL_FIELD_REF,
    id: NULL_FIELD_REF,
    key: NULL_FIELD_REF,
    name: NULL_FIELD_REF,
    nodeId: NULL_FIELD_REF,
    unpublishedAt: NULL_FIELD_REF,
    updatedAt: NULL_FIELD_REF,
    sortPosition: NULL_FIELD_REF
  }
};
let A7 = {
  type: _$$Y.VariableSet,
  fields: mergeFieldRefs(A6.fields, {
    variables: A4.fields
  })
};
let A8 = {
  type: _$$Y.VariableSet,
  fields: mergeFieldRefs(A6.fields, {
    numVariables: NULL_FIELD_REF
  })
};
let A9 = {
  type: _$$Y.CommentMessageMeta,
  fields: {
    t: NULL_FIELD_REF,
    user: {
      id: NULL_FIELD_REF,
      handle: NULL_FIELD_REF,
      imgUrl: NULL_FIELD_REF
    },
    link: NULL_FIELD_REF,
    styles: NULL_FIELD_REF,
    children: {
      children: {
        t: NULL_FIELD_REF,
        user: {
          id: NULL_FIELD_REF,
          handle: NULL_FIELD_REF,
          imgUrl: NULL_FIELD_REF
        },
        link: NULL_FIELD_REF,
        styles: NULL_FIELD_REF
      }
    }
  }
};
let ye = {
  type: _$$Y.CommentMessageMeta,
  fields: {
    t: NULL_FIELD_REF,
    user: {
      id: NULL_FIELD_REF,
      handle: NULL_FIELD_REF
    },
    link: NULL_FIELD_REF,
    styles: NULL_FIELD_REF,
    children: {
      children: {
        t: NULL_FIELD_REF,
        user: {
          id: NULL_FIELD_REF,
          handle: NULL_FIELD_REF
        },
        link: NULL_FIELD_REF,
        styles: NULL_FIELD_REF
      }
    }
  }
};
let yt = {
  type: _$$Y.CommentMessageMeta,
  fields: {
    t: NULL_FIELD_REF,
    user: {
      id: NULL_FIELD_REF,
      handle: NULL_FIELD_REF
    }
  }
};
let yi = {
  type: _$$Y.Comment,
  fields: {
    id: NULL_FIELD_REF,
    orderId: NULL_FIELD_REF,
    createdAt: NULL_FIELD_REF,
    deletedAt: NULL_FIELD_REF,
    resolvedAt: NULL_FIELD_REF,
    clientMeta: {
      pageId: NULL_FIELD_REF,
      nodeId: NULL_FIELD_REF,
      x: NULL_FIELD_REF,
      y: NULL_FIELD_REF,
      selectionBoxAnchor: {
        x: NULL_FIELD_REF,
        y: NULL_FIELD_REF
      },
      stablePath: NULL_FIELD_REF
    },
    parentId: NULL_FIELD_REF,
    user: {
      id: NULL_FIELD_REF,
      handle: NULL_FIELD_REF,
      imgUrl: NULL_FIELD_REF
    },
    messageMetaStylized: ye.fields,
    messageMeta: yt.fields,
    thumbnailUrl: NULL_FIELD_REF
  }
};
let yn = {
  type: _$$Y.Comment,
  fields: mergeFieldRefs(yi.fields, {
    reactions: {
      id: NULL_FIELD_REF,
      emoji: NULL_FIELD_REF,
      createdAt: NULL_FIELD_REF,
      sortTimestamp: NULL_FIELD_REF,
      user: {
        id: NULL_FIELD_REF,
        handle: NULL_FIELD_REF,
        imgUrl: NULL_FIELD_REF
      }
    },
    attachments: {
      id: NULL_FIELD_REF,
      type: NULL_FIELD_REF,
      mediaType: NULL_FIELD_REF,
      altText: NULL_FIELD_REF,
      thumbnailUrl: NULL_FIELD_REF,
      imageUrl: NULL_FIELD_REF,
      createdAt: NULL_FIELD_REF,
      metadata: {
        file_name: NULL_FIELD_REF,
        dimensions: {
          width: NULL_FIELD_REF,
          height: NULL_FIELD_REF
        },
        thumbnail_dimensions: {
          width: NULL_FIELD_REF,
          height: NULL_FIELD_REF
        }
      }
    }
  })
};
let yr = {
  type: _$$Y.File,
  fields: {
    key: NULL_FIELD_REF,
    name: NULL_FIELD_REF,
    updatedAt: NULL_FIELD_REF,
    trashedAt: NULL_FIELD_REF,
    deletedAt: NULL_FIELD_REF,
    touchedAt: NULL_FIELD_REF,
    parentOrgId: NULL_FIELD_REF,
    teamId: NULL_FIELD_REF,
    folderId: NULL_FIELD_REF,
    thumbnailUrl: createAliasedFieldRef('signedThumbnailUrl', NULL_FIELD_REF),
    editorType: NULL_FIELD_REF,
    clientMeta: NULL_FIELD_REF,
    sourceFileKey: NULL_FIELD_REF,
    libraryKey: NULL_FIELD_REF,
    projectPath: [{
      userId: createSessionRef('userId')
    }, NULL_FIELD_REF],
    isFavorited: [{
      userId: createSessionRef('userId')
    }, NULL_FIELD_REF],
    canRename: createAliasedFieldRef('canRenameV2', [{
      userId: createSessionRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId')
    }, NULL_FIELD_REF]),
    canDelete: createAliasedFieldRef('canDeleteV2', [{
      userId: createSessionRef('userId')
    }, NULL_FIELD_REF]),
    canFavorite: createAliasedFieldRef('canFavoriteV2', [{
      userId: createSessionRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId')
    }, NULL_FIELD_REF])
  }
};
let ya = {
  type: _$$Y.Project,
  fields: {
    id: NULL_FIELD_REF,
    path: NULL_FIELD_REF,
    deletedAt: NULL_FIELD_REF,
    description: NULL_FIELD_REF,
    subscription: [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF
    }],
    teamId: NULL_FIELD_REF,
    orgId: NULL_FIELD_REF,
    team: {
      orgId: NULL_FIELD_REF
    },
    canCreateFigjamFile: [{
      userId: createSessionRef('userId')
    }, NULL_FIELD_REF],
    filesPartial: yr.fields
  }
};
let ys = {
  type: _$$Y.Module,
  fields: {
    key: NULL_FIELD_REF,
    version: NULL_FIELD_REF,
    userFacingVersion: NULL_FIELD_REF,
    description: NULL_FIELD_REF,
    description_rt: NULL_FIELD_REF,
    id: NULL_FIELD_REF,
    width: NULL_FIELD_REF,
    height: NULL_FIELD_REF,
    name: NULL_FIELD_REF,
    nodeId: NULL_FIELD_REF,
    thumbnailUrl: NULL_FIELD_REF,
    unpublishedAt: NULL_FIELD_REF,
    updatedAt: NULL_FIELD_REF,
    checkpoint: {
      key: NULL_FIELD_REF
    },
    moduleSource: NULL_FIELD_REF,
    containingFrame: AD.fields
  }
};
let yo = {
  type: _$$Y.Org,
  fields: {
    bigmaEnabledAt: NULL_FIELD_REF,
    workspaces: {
      id: NULL_FIELD_REF
    }
  }
};
let yl = {
  type: _$$Y.Plan,
  fields: {
    id: NULL_FIELD_REF,
    type: NULL_FIELD_REF,
    tier: NULL_FIELD_REF,
    stripeCustomerId: NULL_FIELD_REF,
    vatGstId: NULL_FIELD_REF,
    taxIdVerificationStatus: NULL_FIELD_REF,
    aiFeaturesEnabled: NULL_FIELD_REF,
    voiceEnabled: NULL_FIELD_REF,
    figjamDisabledAt: NULL_FIELD_REF,
    workshopEnabled: NULL_FIELD_REF,
    pluginRequestsAllowed: NULL_FIELD_REF,
    widgetRequestsAllowed: NULL_FIELD_REF,
    cmtyPublishAsUserEnabled: NULL_FIELD_REF,
    figmaProvidedLibrariesEnabled: NULL_FIELD_REF,
    pluginsWhitelistEnforced: NULL_FIELD_REF,
    widgetsWhitelistEnforced: NULL_FIELD_REF,
    templatePickerEnabled: NULL_FIELD_REF,
    customTemplatesAllowed: NULL_FIELD_REF,
    cursorChatEnabled: NULL_FIELD_REF,
    designDefaultPaidStatus: NULL_FIELD_REF,
    whiteboardDefaultPaidStatus: NULL_FIELD_REF,
    isBillingRemodelEnabled: NULL_FIELD_REF,
    activeTrialLicenseTypes: NULL_FIELD_REF,
    campfireModelEnabledAt: NULL_FIELD_REF,
    prorationBillingEnabledAt: NULL_FIELD_REF,
    upgradeApprovalSettingsExpert: NULL_FIELD_REF,
    upgradeApprovalSettingsDeveloper: NULL_FIELD_REF,
    upgradeApprovalSettingsCollaborator: NULL_FIELD_REF,
    upgradeApprovalSettingsContent: makeFieldRefOptional(NULL_FIELD_REF),
    name: NULL_FIELD_REF,
    imgUrl: NULL_FIELD_REF,
    studentTeamState: NULL_FIELD_REF,
    planSubscription: {
      status: NULL_FIELD_REF
    },
    key: {
      parentId: NULL_FIELD_REF,
      type: NULL_FIELD_REF
    },
    connectionCount: NULL_FIELD_REF,
    unlimitedConnectionsEnabled: NULL_FIELD_REF,
    testingOnlyUnlimitedConnectionsEnabled: NULL_FIELD_REF,
    isResourceHubCmtyTabDisabled: NULL_FIELD_REF,
    campfireProvisionalAccessEnabled: NULL_FIELD_REF,
    planRecordId: makeFieldRefOptional(NULL_FIELD_REF)
  }
};
let yd = {
  type: _$$Y.LicenseGroupMember,
  fields: {
    id: NULL_FIELD_REF,
    licenseGroupId: NULL_FIELD_REF
  }
};
let yc = {
  type: _$$Y.WorkspaceUser,
  fields: {
    id: NULL_FIELD_REF,
    orgUserId: NULL_FIELD_REF,
    workspaceId: NULL_FIELD_REF,
    isMainWorkspace: NULL_FIELD_REF,
    permission: NULL_FIELD_REF,
    updateReason: NULL_FIELD_REF
  }
};
let yu = {
  type: _$$Y.PrivilegedOrgUser,
  fields: {
    workspaceUsers: yc.fields,
    licenseGroupMember: yd.fields,
    isLicenseGroupAdmin: NULL_FIELD_REF
  }
};
let yp = {
  type: _$$Y.PlanUser,
  fields: {
    key: {
      type: NULL_FIELD_REF,
      parentId: NULL_FIELD_REF
    },
    planKey: {
      type: NULL_FIELD_REF,
      parentId: NULL_FIELD_REF
    },
    type: NULL_FIELD_REF,
    id: NULL_FIELD_REF,
    userId: NULL_FIELD_REF,
    designPaidStatus: NULL_FIELD_REF,
    devModePaidStatus: NULL_FIELD_REF,
    whiteboardPaidStatus: NULL_FIELD_REF,
    hasShownFigjamAdminOnboarding: NULL_FIELD_REF,
    showFigjamUserOnboarding: NULL_FIELD_REF,
    draftsFolderId: NULL_FIELD_REF,
    permission: NULL_FIELD_REF,
    licenseTypes: NULL_FIELD_REF,
    seatTypeLicenseTypes: NULL_FIELD_REF,
    activeSeatTypeUpgrade: {
      resourceType: NULL_FIELD_REF,
      resourceId: NULL_FIELD_REF,
      actorId: NULL_FIELD_REF,
      reason: NULL_FIELD_REF,
      _editorTypeRaw: NULL_FIELD_REF,
      downgradedAt: NULL_FIELD_REF,
      billableProduct: {
        licenseTypes: NULL_FIELD_REF
      }
    },
    currentSeat: {
      initialBillingPeriodStartAt: NULL_FIELD_REF
    },
    fromOrgUser: yu.fields
  }
};
let ym = {
  type: _$$Y.PlanUser,
  fields: {
    id: NULL_FIELD_REF,
    userId: NULL_FIELD_REF,
    permission: NULL_FIELD_REF,
    seatTypeLicenseTypes: NULL_FIELD_REF,
    provisionalLicenseTypes: NULL_FIELD_REF,
    provisionalBillableProductKey: makeFieldRefOptional(NULL_FIELD_REF),
    pendingAccountTypeRequest: {
      id: NULL_FIELD_REF,
      billableProductKey: NULL_FIELD_REF,
      billableProduct: {
        id: NULL_FIELD_REF,
        key: NULL_FIELD_REF,
        licenseTypes: NULL_FIELD_REF
      },
      status: NULL_FIELD_REF,
      createdAt: NULL_FIELD_REF,
      lastNudgedAt: NULL_FIELD_REF,
      requesterDismissedNudgeBadgeAt: NULL_FIELD_REF,
      entryPoint: NULL_FIELD_REF
    },
    fromOrgUser: {
      licenseGroupMember: yd.fields
    }
  }
};
let yh = {
  type: _$$Y.PlanPermissions,
  fields: {
    id: NULL_FIELD_REF,
    name: NULL_FIELD_REF,
    key: {
      type: NULL_FIELD_REF,
      parentId: NULL_FIELD_REF
    },
    tier: NULL_FIELD_REF,
    canUpgradeAutoPathwayCollaborator: NULL_FIELD_REF,
    canUpgradeAutoPathwayDeveloper: NULL_FIELD_REF,
    canUpgradeAutoPathwayExpert: NULL_FIELD_REF,
    canUpgradeAutoPathwayContent: NULL_FIELD_REF,
    canUpgradeCollaborator: NULL_FIELD_REF,
    canUpgradeDeveloper: NULL_FIELD_REF,
    canUpgradeExpert: NULL_FIELD_REF,
    canUpgradeContent: NULL_FIELD_REF,
    needUpgradeCollaborator: NULL_FIELD_REF,
    needUpgradeDeveloper: NULL_FIELD_REF,
    needUpgradeExpert: NULL_FIELD_REF,
    needUpgradeContent: NULL_FIELD_REF,
    activeTrialLicenseTypes: NULL_FIELD_REF,
    campfireProvisionalAccessEnabled: NULL_FIELD_REF,
    isEligibleProvisionalAccessCollaborator: NULL_FIELD_REF,
    isEligibleProvisionalAccessDeveloper: NULL_FIELD_REF,
    isEligibleProvisionalAccessExpert: NULL_FIELD_REF,
    isEligibleProvisionalAccessContent: NULL_FIELD_REF,
    type: NULL_FIELD_REF,
    upgradeApprovalSettingsDeveloper: NULL_FIELD_REF,
    upgradeApprovalSettingsCollaborator: NULL_FIELD_REF,
    upgradeApprovalSettingsExpert: NULL_FIELD_REF,
    upgradeApprovalSettingsContent: makeFieldRefOptional(NULL_FIELD_REF)
  }
};
let yg = {
  type: _$$Y.Plugin,
  fields: {
    id: NULL_FIELD_REF,
    currentPluginVersionId: NULL_FIELD_REF,
    publishingStatus: NULL_FIELD_REF,
    isWidget: NULL_FIELD_REF,
    orgId: NULL_FIELD_REF,
    communityPublishers: {
      isPending: NULL_FIELD_REF,
      profile: {
        id: NULL_FIELD_REF,
        profileHandle: NULL_FIELD_REF,
        user: {
          id: NULL_FIELD_REF,
          name: NULL_FIELD_REF
        },
        team: {
          id: NULL_FIELD_REF,
          name: NULL_FIELD_REF
        },
        org: {
          id: NULL_FIELD_REF,
          name: NULL_FIELD_REF
        }
      },
      role: NULL_FIELD_REF
    },
    currentPluginVersion: {
      id: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      version: NULL_FIELD_REF,
      releaseNotes: NULL_FIELD_REF,
      description: NULL_FIELD_REF,
      tagline: NULL_FIELD_REF,
      creatorPolicy: NULL_FIELD_REF,
      manifest: NULL_FIELD_REF,
      createdAt: NULL_FIELD_REF,
      iconPath: NULL_FIELD_REF,
      coverImagePath: NULL_FIELD_REF,
      codePath: NULL_FIELD_REF,
      plugin: {
        currentPluginVersionId: NULL_FIELD_REF
      },
      iconUrl: NULL_FIELD_REF,
      coverImageUrl: NULL_FIELD_REF
    }
  }
};
let yf = {
  type: _$$Y.Team,
  fields: {
    subscription: NULL_FIELD_REF,
    studentTeamAt: NULL_FIELD_REF,
    gracePeriodEnd: NULL_FIELD_REF,
    plan: [{
      userId: createSessionRef('userId')
    }, {
      tier: NULL_FIELD_REF
    }],
    currentPlanUser: [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      designPaidStatus: NULL_FIELD_REF,
      whiteboardPaidStatus: NULL_FIELD_REF,
      draftsFolderId: NULL_FIELD_REF,
      seatTypeLicenseTypes: NULL_FIELD_REF
    }],
    currentTeamUser: [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      designPaidStatus: NULL_FIELD_REF,
      whiteboardPaidStatus: NULL_FIELD_REF,
      draftsFolderId: NULL_FIELD_REF
    }]
  }
};
let y_ = {
  type: _$$Y.PermissionEvaluationResult,
  fields: {
    result: NULL_FIELD_REF,
    publicDenyReasons: NULL_FIELD_REF
  }
};
let yA = {
  type: _$$Y.Project,
  fields: {
    canCreateCooperFileWithReasons: [{
      userId: createSessionRef('userId')
    }, y_.fields],
    canCreateDesignFileWithReasons: [{
      userId: createSessionRef('userId')
    }, y_.fields],
    canCreateFigjamFileWithReasons: [{
      userId: createSessionRef('userId')
    }, y_.fields],
    canCreateSlidesFileWithReasons: [{
      userId: createSessionRef('userId')
    }, y_.fields],
    canCreateSitesFileWithReasons: [{
      userId: createSessionRef('userId')
    }, y_.fields],
    canCreateFigmakeFileWithReasons: [{
      userId: createSessionRef('userId')
    }, y_.fields]
  }
};
let yy = {
  type: _$$Y.Project,
  fields: {
    id: NULL_FIELD_REF,
    updatedAt: NULL_FIELD_REF,
    createdAt: NULL_FIELD_REF,
    path: NULL_FIELD_REF,
    description: NULL_FIELD_REF,
    trashedAt: NULL_FIELD_REF,
    deletedAt: NULL_FIELD_REF,
    viewOnlyAt: NULL_FIELD_REF,
    orgId: NULL_FIELD_REF,
    teamId: NULL_FIELD_REF,
    parentPath: NULL_FIELD_REF,
    name: NULL_FIELD_REF,
    isInviteOnly: NULL_FIELD_REF,
    isViewOnly: NULL_FIELD_REF,
    isSubscribed: [{
      userId: createSessionRef('userId')
    }, NULL_FIELD_REF],
    activeProjectResourceConnections: {
      id: NULL_FIELD_REF
    },
    pendingResourceConnectionInvite: {
      id: NULL_FIELD_REF
    }
  }
};
let yb = {
  type: _$$Y.Project,
  fields: mergeFieldRefs(yA.fields, {
    canRead: [{
      userId: createSessionRef('userId')
    }, NULL_FIELD_REF],
    canEdit: [{
      userId: createSessionRef('userId')
    }, NULL_FIELD_REF],
    isOwner: [{
      userId: createSessionRef('userId')
    }, NULL_FIELD_REF],
    canTrash: [{
      userId: createSessionRef('userId')
    }, NULL_FIELD_REF],
    canTrashWithReasons: [{
      userId: createSessionRef('userId')
    }, {
      result: NULL_FIELD_REF,
      publicDenyReasons: NULL_FIELD_REF
    }],
    canCreateFigmakeFile: [{
      userId: createSessionRef('userId')
    }, NULL_FIELD_REF],
    canRestore: [{
      userId: createSessionRef('userId')
    }, NULL_FIELD_REF],
    canPermanentlyDelete: [{
      userId: createSessionRef('userId')
    }, NULL_FIELD_REF],
    canTransferExternally: [{
      userId: createSessionRef('userId')
    }, NULL_FIELD_REF],
    canTransferCopy: [{
      userId: createSessionRef('userId')
    }, NULL_FIELD_REF],
    canMove: [{
      userId: createSessionRef('userId')
    }, NULL_FIELD_REF],
    canConnect: [{
      userId: createSessionRef('userId')
    }, NULL_FIELD_REF],
    isEditingLockedForUser: [{
      userId: createSessionRef('userId')
    }, NULL_FIELD_REF],
    isEmpty: NULL_FIELD_REF,
    isOwned: NULL_FIELD_REF,
    inviteOnlyAt: NULL_FIELD_REF,
    viewOnlyAt: NULL_FIELD_REF,
    isOrphanedOrgProject: NULL_FIELD_REF,
    planPermissions: [{
      userId: createSessionRef('userId')
    }, {
      isAdmin: NULL_FIELD_REF,
      isMember: NULL_FIELD_REF,
      canConnect: NULL_FIELD_REF,
      canConnectWithReasons: [{
        userId: createSessionRef('userId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }]
    }]
  })
};
let yv = {
  type: _$$Y.Prototype,
  fields: {
    isFavorited: [{
      userId: createSessionRef('userId'),
      orgId: null
    }, NULL_FIELD_REF],
    canRead: [{
      userId: createSessionRef('userId')
    }, NULL_FIELD_REF]
  }
};
let yI = {
  type: _$$Y.Repo,
  fields: {
    id: NULL_FIELD_REF,
    name: NULL_FIELD_REF,
    folderId: NULL_FIELD_REF,
    defaultFileKey: NULL_FIELD_REF,
    deletedAt: NULL_FIELD_REF,
    trashedAt: NULL_FIELD_REF,
    createdAt: NULL_FIELD_REF,
    updatedAt: NULL_FIELD_REF,
    teamId: NULL_FIELD_REF,
    linkAccess: NULL_FIELD_REF,
    protoLinkAccess: NULL_FIELD_REF,
    orgAudience: NULL_FIELD_REF,
    orgBrowsable: NULL_FIELD_REF,
    parentOrgId: NULL_FIELD_REF,
    hasFileLinkPassword: NULL_FIELD_REF,
    hasProtoLinkPassword: NULL_FIELD_REF,
    hasActiveBranches: NULL_FIELD_REF
  }
};
let yE = {
  type: _$$Y.File,
  fields: {
    key: NULL_FIELD_REF,
    canView: createAliasedFieldRef('canViewV3', [{
      userId: createSessionRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId')
    }, NULL_FIELD_REF]),
    canEdit: createAliasedFieldRef('canEditV3', [{
      userId: createSessionRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId')
    }, NULL_FIELD_REF]),
    canRestore: createAliasedFieldRef('canRestoreV3', [{
      userId: createSessionRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId')
    }, NULL_FIELD_REF]),
    canRestoreToOtherFolders: [{
      userId: createSessionRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId')
    }, NULL_FIELD_REF],
    isFavorited: [{
      userId: createSessionRef('userId')
    }, NULL_FIELD_REF],
    viewerExportRestricted: NULL_FIELD_REF,
    parentOrgId: NULL_FIELD_REF
  }
};
let yx = {
  type: _$$Y.Repo,
  fields: {
    parentOrgId: NULL_FIELD_REF,
    teamId: NULL_FIELD_REF,
    canRead: createAliasedFieldRef('canReadV3', [{
      userId: createSessionRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId')
    }, NULL_FIELD_REF]),
    canEdit: createAliasedFieldRef('canEditV3', [{
      userId: createSessionRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId')
    }, NULL_FIELD_REF]),
    project: {
      canView: createAliasedFieldRef('canRead', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    },
    isDraftRepo: NULL_FIELD_REF,
    sourceFile: yE.fields,
    branches: createAliasedFieldRef('files', yE.fields),
    isTrashed: NULL_FIELD_REF,
    canMove: [{
      userId: createSessionRef('userId')
    }, NULL_FIELD_REF],
    canMoveWithReasons: makeFieldRefOptional([{
      userId: createSessionRef('userId')
    }, {
      result: NULL_FIELD_REF,
      publicDenyReasons: NULL_FIELD_REF
    }]),
    currentPlanUser: [{
      userId: createSessionRef('userId')
    }, yp.fields]
  }
};
let yS = {
  type: _$$Y.SharedWithYouFile,
  fields: {
    id: NULL_FIELD_REF,
    sharedAt: NULL_FIELD_REF,
    sharedBy: NULL_FIELD_REF,
    sharedByUser: {
      id: NULL_FIELD_REF,
      name: NULL_FIELD_REF
    },
    sharedByText: NULL_FIELD_REF,
    orgOrTeamName: NULL_FIELD_REF,
    resourceId: NULL_FIELD_REF,
    resourceType: NULL_FIELD_REF,
    file: {
      createdAt: NULL_FIELD_REF,
      creatorId: NULL_FIELD_REF,
      deletedAt: NULL_FIELD_REF,
      description: NULL_FIELD_REF,
      editorType: NULL_FIELD_REF,
      fileRepoId: NULL_FIELD_REF,
      folderId: NULL_FIELD_REF,
      teamId: NULL_FIELD_REF,
      parentOrgId: NULL_FIELD_REF,
      hasFileLinkPassword: NULL_FIELD_REF,
      hasProtoLinkPassword: NULL_FIELD_REF,
      id: NULL_FIELD_REF,
      isTeamTemplate: NULL_FIELD_REF,
      isPublishedSite: NULL_FIELD_REF,
      isTryFile: NULL_FIELD_REF,
      key: NULL_FIELD_REF,
      license: NULL_FIELD_REF,
      linkAccess: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      thumbnailGuid: NULL_FIELD_REF,
      checkpointClientMeta: NULL_FIELD_REF,
      currentPlanUser: [{
        userId: createSessionRef('userId')
      }, yp.fields],
      url: NULL_FIELD_REF,
      updatedAt: NULL_FIELD_REF,
      touchedAt: NULL_FIELD_REF,
      trashedAt: NULL_FIELD_REF,
      trashedUserId: NULL_FIELD_REF,
      clientMeta: NULL_FIELD_REF,
      editUrl: NULL_FIELD_REF,
      protoLinkAccess: NULL_FIELD_REF,
      sourceFileKey: NULL_FIELD_REF,
      prototypeUrl: NULL_FIELD_REF,
      lastPublishedAt: NULL_FIELD_REF,
      libraryKey: NULL_FIELD_REF,
      newUserPlaygroundLibrary: NULL_FIELD_REF,
      orgAudience: NULL_FIELD_REF,
      orgBrowsable: NULL_FIELD_REF,
      sourceCheckpointId: NULL_FIELD_REF,
      isFavorited: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF],
      viewerExportRestricted: NULL_FIELD_REF
    },
    parentTeam: createAliasedFieldRef('parentTeamLimitedInfo', {
      id: NULL_FIELD_REF,
      imgUrl: createAliasedFieldRef('imgUrlTransformed', NULL_FIELD_REF),
      name: NULL_FIELD_REF
    }),
    parentOrg: {
      id: NULL_FIELD_REF,
      imgUrl: createAliasedFieldRef('imgUrlTransformed', NULL_FIELD_REF),
      name: NULL_FIELD_REF
    },
    thumbnailUrl: NULL_FIELD_REF,
    thumbnailUrlOverride: NULL_FIELD_REF
  }
};
let yw = {
  type: _$$Y.SharedWithYouFolder,
  fields: {
    sharedAt: NULL_FIELD_REF,
    sharedBy: NULL_FIELD_REF,
    sharedByText: NULL_FIELD_REF,
    sharedByUser: {
      id: NULL_FIELD_REF,
      name: NULL_FIELD_REF
    },
    orgOrTeamName: NULL_FIELD_REF,
    resourceId: NULL_FIELD_REF,
    resourceType: NULL_FIELD_REF,
    folder: mergeFieldRefs(yb.fields, {
      id: NULL_FIELD_REF,
      createdAt: NULL_FIELD_REF,
      updatedAt: NULL_FIELD_REF,
      path: NULL_FIELD_REF,
      description: NULL_FIELD_REF,
      teamId: NULL_FIELD_REF,
      viewOnlyAt: NULL_FIELD_REF,
      orgId: NULL_FIELD_REF,
      deletedAt: NULL_FIELD_REF,
      activeProjectResourceConnections: {
        hostPlanName: NULL_FIELD_REF,
        connectedPlanName: NULL_FIELD_REF
      }
    }),
    parentTeam: createAliasedFieldRef('parentTeamLimitedInfo', {
      id: NULL_FIELD_REF,
      imgUrl: createAliasedFieldRef('imgUrlTransformed', NULL_FIELD_REF),
      name: NULL_FIELD_REF
    }),
    parentOrg: {
      id: NULL_FIELD_REF,
      imgUrl: createAliasedFieldRef('imgUrlTransformed', NULL_FIELD_REF),
      name: NULL_FIELD_REF
    }
  }
};
let yC = {
  type: _$$Y.SharedWithYouRepo,
  fields: {
    sharedAt: NULL_FIELD_REF,
    sharedBy: NULL_FIELD_REF,
    sharedByUser: {
      id: NULL_FIELD_REF,
      name: NULL_FIELD_REF
    },
    sharedByText: NULL_FIELD_REF,
    orgOrTeamName: NULL_FIELD_REF,
    resourceId: NULL_FIELD_REF,
    resourceType: NULL_FIELD_REF,
    repo: mergeFieldRefs(yx.fields, {
      id: NULL_FIELD_REF,
      folderId: NULL_FIELD_REF,
      teamId: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      defaultFileKey: NULL_FIELD_REF,
      updatedAt: NULL_FIELD_REF,
      createdAt: NULL_FIELD_REF,
      deletedAt: NULL_FIELD_REF,
      trashedAt: NULL_FIELD_REF,
      linkAccess: NULL_FIELD_REF,
      protoLinkAccess: NULL_FIELD_REF,
      hasFileLinkPassword: NULL_FIELD_REF,
      hasProtoLinkPassword: NULL_FIELD_REF,
      hasActiveBranches: NULL_FIELD_REF,
      orgAudience: NULL_FIELD_REF,
      orgBrowsable: NULL_FIELD_REF,
      branches: createAliasedFieldRef('files', mergeFieldRefs(yE.fields, {
        createdAt: NULL_FIELD_REF,
        creatorId: NULL_FIELD_REF,
        deletedAt: NULL_FIELD_REF,
        description: NULL_FIELD_REF,
        editorType: NULL_FIELD_REF,
        fileRepoId: NULL_FIELD_REF,
        folderId: NULL_FIELD_REF,
        hasFileLinkPassword: NULL_FIELD_REF,
        hasProtoLinkPassword: NULL_FIELD_REF,
        id: NULL_FIELD_REF,
        isTeamTemplate: NULL_FIELD_REF,
        isTryFile: NULL_FIELD_REF,
        key: NULL_FIELD_REF,
        license: NULL_FIELD_REF,
        linkAccess: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        thumbnailUrl: createAliasedFieldRef('signedThumbnailUrl', NULL_FIELD_REF),
        thumbnailGuid: NULL_FIELD_REF,
        thumbnailUrlOverride: NULL_FIELD_REF,
        checkpointClientMeta: NULL_FIELD_REF
      }))
    }),
    parentTeam: createAliasedFieldRef('parentTeamLimitedInfo', {
      id: NULL_FIELD_REF,
      imgUrl: createAliasedFieldRef('imgUrlTransformed', NULL_FIELD_REF),
      name: NULL_FIELD_REF
    }),
    parentOrg: {
      id: NULL_FIELD_REF,
      imgUrl: createAliasedFieldRef('imgUrlTransformed', NULL_FIELD_REF),
      name: NULL_FIELD_REF
    }
  }
};
let yT = {
  type: _$$Y.SharedWithYouPrototype,
  fields: {
    sharedAt: NULL_FIELD_REF,
    sharedBy: NULL_FIELD_REF,
    sharedByUser: {
      id: NULL_FIELD_REF,
      name: NULL_FIELD_REF
    },
    sharedByText: NULL_FIELD_REF,
    orgOrTeamName: NULL_FIELD_REF,
    resourceId: NULL_FIELD_REF,
    resourceType: NULL_FIELD_REF,
    prototype: mergeFieldRefs(yv.fields, {
      id: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      fileKey: NULL_FIELD_REF,
      pageId: NULL_FIELD_REF,
      thumbnailUrl: createAliasedFieldRef('signedThumbnailUrl', NULL_FIELD_REF),
      thumbnailMeta: NULL_FIELD_REF,
      deleted: NULL_FIELD_REF,
      recentPrototype: makeFieldRefOptional([{
        userId: createSessionRef('userId')
      }, {
        viewedAt: makeFieldRefOptional()
      }]),
      fig_file: createAliasedFieldRef('file', {
        createdAt: NULL_FIELD_REF,
        creatorId: NULL_FIELD_REF,
        deletedAt: NULL_FIELD_REF,
        description: NULL_FIELD_REF,
        editorType: NULL_FIELD_REF,
        fileRepoId: NULL_FIELD_REF,
        folderId: NULL_FIELD_REF,
        hasFileLinkPassword: NULL_FIELD_REF,
        hasProtoLinkPassword: NULL_FIELD_REF,
        id: NULL_FIELD_REF,
        isTeamTemplate: NULL_FIELD_REF,
        isTryFile: NULL_FIELD_REF,
        key: NULL_FIELD_REF,
        license: NULL_FIELD_REF,
        linkAccess: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        trashedAt: NULL_FIELD_REF,
        protoLinkAccess: NULL_FIELD_REF,
        teamId: NULL_FIELD_REF,
        prototypeUrl: NULL_FIELD_REF,
        sourceFileKey: NULL_FIELD_REF
      })
    }),
    parentTeam: createAliasedFieldRef('parentTeamLimitedInfo', {
      id: NULL_FIELD_REF,
      imgUrl: createAliasedFieldRef('imgUrlTransformed', NULL_FIELD_REF),
      name: NULL_FIELD_REF
    }),
    parentOrg: {
      id: NULL_FIELD_REF,
      imgUrl: createAliasedFieldRef('imgUrlTransformed', NULL_FIELD_REF),
      name: NULL_FIELD_REF
    },
    thumbnailUrl: NULL_FIELD_REF,
    url: makeFieldRefOptional()
  }
};
let yk = {
  type: _$$Y.Project,
  fields: mergeFieldRefs(yA.fields, {
    id: NULL_FIELD_REF,
    path: NULL_FIELD_REF,
    orgId: NULL_FIELD_REF,
    teamId: NULL_FIELD_REF,
    updatedAt: NULL_FIELD_REF,
    createdAt: NULL_FIELD_REF,
    deletedAt: NULL_FIELD_REF,
    trashedAt: NULL_FIELD_REF,
    viewOnlyAt: NULL_FIELD_REF,
    inviteOnlyAt: NULL_FIELD_REF,
    canEdit: [{
      userId: createSessionRef('userId')
    }, NULL_FIELD_REF],
    canView: [{
      userId: createSessionRef('userId')
    }, NULL_FIELD_REF],
    description: NULL_FIELD_REF,
    isEditingLockedForUser: [{
      userId: createSessionRef('userId')
    }, NULL_FIELD_REF]
  })
};
let yR = {
  type: _$$Y.StateGroup,
  fields: {
    containingFrame: AD.fields,
    defaultStateKey: NULL_FIELD_REF,
    description: NULL_FIELD_REF,
    description_rt: NULL_FIELD_REF,
    fillColor: NULL_FIELD_REF,
    id: NULL_FIELD_REF,
    key: NULL_FIELD_REF,
    minNodeHeight: NULL_FIELD_REF,
    minNodeWidth: NULL_FIELD_REF,
    name: NULL_FIELD_REF,
    nodeId: NULL_FIELD_REF,
    thumbnailUrl: NULL_FIELD_REF,
    version: NULL_FIELD_REF,
    userFacingVersion: NULL_FIELD_REF,
    unpublishedAt: NULL_FIELD_REF,
    updatedAt: NULL_FIELD_REF
  }
};
let yN = {
  checkpoint: {
    key: NULL_FIELD_REF
  },
  contentHash: NULL_FIELD_REF,
  userFacingVersion: NULL_FIELD_REF,
  description: NULL_FIELD_REF,
  description_rt: NULL_FIELD_REF,
  id: NULL_FIELD_REF,
  key: NULL_FIELD_REF,
  meta: NULL_FIELD_REF,
  nodeId: NULL_FIELD_REF,
  sortPosition: NULL_FIELD_REF,
  styleType: NULL_FIELD_REF,
  thumbnailUrl: NULL_FIELD_REF
};
let yP = {
  type: _$$Y.StyleLog,
  fields: yN
};
let yO = {
  type: _$$Y.Style,
  fields: mergeFieldRefs(yN, {
    name: NULL_FIELD_REF,
    unpublishedAt: NULL_FIELD_REF,
    updatedAt: NULL_FIELD_REF,
    movedByFigma: NULL_FIELD_REF,
    hubFile: {
      id: NULL_FIELD_REF,
      currentHubFileVersion: {
        name: NULL_FIELD_REF
      },
      libraryKey: NULL_FIELD_REF
    }
  })
};
let yD = {
  type: _$$Y.Style,
  fields: mergeFieldRefs(yN, {
    name: NULL_FIELD_REF,
    unpublishedAt: NULL_FIELD_REF,
    updatedAt: NULL_FIELD_REF,
    movedByFigma: NULL_FIELD_REF
  })
};
let yL = {
  type: _$$Y.Team,
  fields: {
    aiFeaturesDisabledAt: NULL_FIELD_REF,
    communityBlockedAt: NULL_FIELD_REF,
    createdAt: NULL_FIELD_REF,
    defaultColorPaletteUuid: NULL_FIELD_REF,
    defaultPermission: NULL_FIELD_REF,
    deletedAt: NULL_FIELD_REF,
    deletedBy: NULL_FIELD_REF,
    description: NULL_FIELD_REF,
    editorsCount: NULL_FIELD_REF,
    projectsCount: NULL_FIELD_REF,
    experimentAssignments: {
      experimentId: NULL_FIELD_REF,
      treatmentId: NULL_FIELD_REF
    },
    hidden: NULL_FIELD_REF,
    id: NULL_FIELD_REF,
    imgUrl: createAliasedFieldRef('imgUrlTransformed', NULL_FIELD_REF),
    isStudentTeam: NULL_FIELD_REF,
    licenseGroupId: NULL_FIELD_REF,
    stripeCustomerId: NULL_FIELD_REF,
    name: NULL_FIELD_REF,
    orgAccess: NULL_FIELD_REF,
    orgBrowsable: NULL_FIELD_REF,
    orgId: NULL_FIELD_REF,
    restrictionsList: NULL_FIELD_REF,
    studentAutoverifyingTeamAt: NULL_FIELD_REF,
    studentTeamAt: NULL_FIELD_REF,
    studentTeamState: NULL_FIELD_REF,
    _subscriptionRaw: NULL_FIELD_REF,
    subscription: NULL_FIELD_REF,
    taxIdVerificationStatus: NULL_FIELD_REF,
    legalName: NULL_FIELD_REF,
    vatGstId: NULL_FIELD_REF,
    workspaceId: NULL_FIELD_REF,
    sharingAudienceControlComputed: NULL_FIELD_REF,
    isStarterTeam: NULL_FIELD_REF,
    whiteboardDefaultPaidStatus: NULL_FIELD_REF,
    designDefaultPaidStatus: NULL_FIELD_REF
  }
};
let yF = {
  type: _$$Y.Team,
  fields: {
    canAdmin: [{
      userId: createSessionRef('userId')
    }, NULL_FIELD_REF],
    canRead: [{
      userId: createSessionRef('userId')
    }, NULL_FIELD_REF],
    canDelete: [{
      userId: createSessionRef('userId')
    }, NULL_FIELD_REF],
    roleOnObjectForUser: [{
      userId: createSessionRef('userId')
    }, {
      level: NULL_FIELD_REF
    }],
    currentPlanUser: [{
      userId: createSessionRef('userId')
    }, {
      key: NULL_FIELD_REF,
      permission: NULL_FIELD_REF
    }],
    currentPrivilegedOrgUser: [{
      userId: createSessionRef('userId')
    }, {
      permission: NULL_FIELD_REF
    }]
  }
};
let yM = {
  type: _$$Y.Workspace,
  fields: {
    id: NULL_FIELD_REF,
    description: NULL_FIELD_REF
  }
};
let yj = {
  type: _$$Y.User,
  fields: {
    baseOrgUser: [{
      orgId: createViewRef('orgId')
    }, {
      workspaceUsers: {
        isMainWorkspace: NULL_FIELD_REF,
        workspaceId: NULL_FIELD_REF
      }
    }]
  }
};
let yU = {
  type: _$$Y.User,
  fields: {
    id: NULL_FIELD_REF,
    name: NULL_FIELD_REF,
    handle: NULL_FIELD_REF,
    imgUrl: NULL_FIELD_REF,
    email: NULL_FIELD_REF
  }
};
let yB = {
  type: _$$Y.Workspace,
  fields: {
    id: NULL_FIELD_REF,
    colorConfig: {
      colors: NULL_FIELD_REF
    }
  }
};
let yV = {
  type: _$$Y.Workspace,
  fields: mergeFieldRefs(yB.fields, {
    id: NULL_FIELD_REF,
    name: NULL_FIELD_REF,
    orgId: NULL_FIELD_REF
  })
};
let yG = {
  type: _$$Y.Workspace,
  fields: mergeFieldRefs(yM.fields, {
    id: NULL_FIELD_REF,
    canAdmin: [{
      userId: createSessionRef('userId')
    }, NULL_FIELD_REF],
    imgUrl: createAliasedFieldRef('imgUrlTransformed', NULL_FIELD_REF),
    admins: {
      id: NULL_FIELD_REF,
      baseOrgUser: {
        user: {
          id: NULL_FIELD_REF
        }
      }
    }
  })
};
let yz = {
  type: _$$Y.WorkspaceUser,
  fields: {
    baseOrgUser: {
      user: {
        id: NULL_FIELD_REF,
        handle: NULL_FIELD_REF,
        imgUrl: NULL_FIELD_REF,
        email: NULL_FIELD_REF
      }
    }
  }
};
let yH = {
  type: _$$Y.Workspace,
  fields: {
    name: NULL_FIELD_REF,
    admins: yz.fields
  }
};
let yW = {
  type: _$$Y.Workspace,
  fields: mergeFieldRefs(yB.fields, yG.fields, yH.fields, {
    id: NULL_FIELD_REF,
    name: NULL_FIELD_REF,
    imgUrl: createAliasedFieldRef('imgUrlTransformed', NULL_FIELD_REF),
    canAdmin: [{
      userId: createSessionRef('userId')
    }, NULL_FIELD_REF],
    orgAccess: NULL_FIELD_REF
  })
};
let yK = {
  type: _$$Y.CommentMessageMeta,
  fields: {
    t: NULL_FIELD_REF
  }
};
let yY = {
  type: _$$Y.Workspace,
  fields: {
    id: NULL_FIELD_REF,
    canAdmin: [{
      userId: createSessionRef('userId')
    }, NULL_FIELD_REF],
    pinnedFiles: {
      id: NULL_FIELD_REF,
      createdAt: NULL_FIELD_REF,
      updatedAt: NULL_FIELD_REF,
      description: yK.fields,
      file: mergeFieldRefs(AK.fields, Aw.fields, {
        id: NULL_FIELD_REF,
        newUserPlaygroundLibrary: NULL_FIELD_REF
      }),
      creator: yU.fields
    }
  }
};
let yq = {
  type: _$$Y.WorkspaceUser,
  fields: {
    workspaceId: NULL_FIELD_REF,
    isMainWorkspace: NULL_FIELD_REF,
    workspace: {
      id: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      imgUrl: createAliasedFieldRef('imgUrlTransformed', NULL_FIELD_REF)
    }
  }
};
let y$ = {
  fileBrowserPreferences: {
    id: NULL_FIELD_REF,
    orderedTeamIds: NULL_FIELD_REF,
    orderedFavoritedResourceIds: NULL_FIELD_REF,
    orderedLicenseGroupIds: NULL_FIELD_REF,
    orderedSidebarSections: NULL_FIELD_REF
  },
  fileBrowserSectionPreferences: {
    id: NULL_FIELD_REF,
    sectionType: NULL_FIELD_REF,
    teamId: NULL_FIELD_REF,
    orderedFolderIds: NULL_FIELD_REF
  },
  orgUsers: {
    orgId: NULL_FIELD_REF,
    fileBrowserPreferences: {
      id: NULL_FIELD_REF,
      orgId: NULL_FIELD_REF,
      orderedTeamIds: NULL_FIELD_REF,
      orderedFavoritedResourceIds: NULL_FIELD_REF,
      orderedLicenseGroupIds: NULL_FIELD_REF,
      orderedSidebarSections: NULL_FIELD_REF
    },
    fileBrowserSectionPreferences: {
      id: NULL_FIELD_REF,
      orgId: NULL_FIELD_REF,
      sectionType: NULL_FIELD_REF,
      teamId: NULL_FIELD_REF,
      orderedFolderIds: NULL_FIELD_REF
    }
  }
};
let yZ = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    org: [{
      id: createViewRef('orgId'),
      userId: createSessionRef('userId')
    }, {
      teams: [{
        userId: createSessionRef('userId')
      }, {
        id: NULL_FIELD_REF,
        createdAt: NULL_FIELD_REF,
        deletedAt: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        imgUrl: createAliasedFieldRef('imgUrlTransformed', NULL_FIELD_REF),
        restrictionsList: NULL_FIELD_REF,
        subscription: NULL_FIELD_REF,
        studentTeamAt: NULL_FIELD_REF,
        studentTeamState: NULL_FIELD_REF,
        gracePeriodEnd: NULL_FIELD_REF,
        workspaceId: NULL_FIELD_REF,
        currentPlanUser: [{
          userId: createSessionRef('userId')
        }, {
          key: {
            parentId: NULL_FIELD_REF,
            type: NULL_FIELD_REF
          },
          draftsFolderId: NULL_FIELD_REF,
          designPaidStatus: NULL_FIELD_REF,
          whiteboardPaidStatus: NULL_FIELD_REF
        }],
        currentTeamUser: [{
          userId: createSessionRef('userId')
        }, {
          id: NULL_FIELD_REF,
          draftsFolderId: NULL_FIELD_REF,
          designPaidStatus: NULL_FIELD_REF,
          whiteboardPaidStatus: NULL_FIELD_REF
        }],
        orgId: NULL_FIELD_REF,
        licenseGroupId: NULL_FIELD_REF,
        trialPeriodEnd: NULL_FIELD_REF,
        orgAccess: NULL_FIELD_REF,
        eduGracePeriod: [{
          userId: createSessionRef('userId')
        }, {
          id: NULL_FIELD_REF,
          isValid: NULL_FIELD_REF
        }],
        canAdmin: [{
          userId: createSessionRef('userId')
        }, NULL_FIELD_REF],
        canEdit: [{
          userId: createSessionRef('userId')
        }, NULL_FIELD_REF],
        sharingAudienceControlComputed: NULL_FIELD_REF,
        orgEditProjects: makeFieldRefOptional([{
          userId: createSessionRef('userId')
        }, mergeFieldRefs({
          id: NULL_FIELD_REF,
          orgId: NULL_FIELD_REF,
          teamId: NULL_FIELD_REF,
          path: NULL_FIELD_REF,
          viewOnlyAt: NULL_FIELD_REF,
          inviteOnlyAt: NULL_FIELD_REF,
          subscription: [{
            userId: createSessionRef('userId')
          }, {
            id: NULL_FIELD_REF
          }],
          createdAt: NULL_FIELD_REF,
          updatedAt: NULL_FIELD_REF,
          deletedAt: NULL_FIELD_REF,
          trashedAt: NULL_FIELD_REF,
          description: NULL_FIELD_REF,
          isEditingLockedForUser: [{
            userId: createSessionRef('userId')
          }, NULL_FIELD_REF]
        }, yA.fields)]),
        licenseGroup: {
          id: NULL_FIELD_REF,
          name: NULL_FIELD_REF
        }
      }],
      k12GoogleOrg: NULL_FIELD_REF
    }],
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      ...y$,
      handle: NULL_FIELD_REF,
      email: NULL_FIELD_REF,
      imgUrl: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      studentValidatedAt: NULL_FIELD_REF,
      draftsProject: mergeFieldRefs({
        id: NULL_FIELD_REF,
        path: NULL_FIELD_REF,
        orgId: NULL_FIELD_REF,
        teamId: NULL_FIELD_REF,
        subscription: [{
          userId: createSessionRef('userId')
        }, {
          id: NULL_FIELD_REF
        }],
        isEditingLockedForUser: [{
          userId: createSessionRef('userId')
        }, NULL_FIELD_REF],
        updatedAt: NULL_FIELD_REF,
        createdAt: NULL_FIELD_REF,
        deletedAt: NULL_FIELD_REF,
        trashedAt: NULL_FIELD_REF,
        viewOnlyAt: NULL_FIELD_REF,
        inviteOnlyAt: NULL_FIELD_REF,
        description: NULL_FIELD_REF,
        ownerRole: {
          id: NULL_FIELD_REF,
          pending: NULL_FIELD_REF,
          pendingEmail: NULL_FIELD_REF,
          level: NULL_FIELD_REF,
          updatedAt: NULL_FIELD_REF,
          createdAt: NULL_FIELD_REF,
          resourceId: NULL_FIELD_REF,
          resourceType: NULL_FIELD_REF
        }
      }, yA.fields),
      projectEditRoles: {
        id: NULL_FIELD_REF,
        pending: NULL_FIELD_REF,
        pendingEmail: NULL_FIELD_REF,
        level: NULL_FIELD_REF,
        updatedAt: NULL_FIELD_REF,
        createdAt: NULL_FIELD_REF,
        resourceId: NULL_FIELD_REF,
        resourceType: NULL_FIELD_REF,
        project: mergeFieldRefs({
          id: NULL_FIELD_REF,
          path: NULL_FIELD_REF,
          orgId: NULL_FIELD_REF,
          teamId: NULL_FIELD_REF,
          subscription: [{
            userId: createSessionRef('userId')
          }, {
            id: NULL_FIELD_REF
          }],
          updatedAt: NULL_FIELD_REF,
          createdAt: NULL_FIELD_REF,
          deletedAt: NULL_FIELD_REF,
          trashedAt: NULL_FIELD_REF,
          viewOnlyAt: NULL_FIELD_REF,
          inviteOnlyAt: NULL_FIELD_REF,
          description: NULL_FIELD_REF,
          isEditingLockedForUser: [{
            userId: createSessionRef('userId')
          }, NULL_FIELD_REF]
        }, yA.fields)
      },
      teamRoles: {
        id: NULL_FIELD_REF,
        pending: NULL_FIELD_REF,
        pendingEmail: NULL_FIELD_REF,
        level: NULL_FIELD_REF,
        updatedAt: NULL_FIELD_REF,
        createdAt: NULL_FIELD_REF,
        resourceId: NULL_FIELD_REF,
        resourceType: NULL_FIELD_REF,
        team: mergeFieldRefs({
          id: NULL_FIELD_REF,
          createdAt: NULL_FIELD_REF,
          deletedAt: NULL_FIELD_REF,
          name: NULL_FIELD_REF,
          imgUrl: createAliasedFieldRef('imgUrlTransformed', NULL_FIELD_REF),
          restrictionsList: NULL_FIELD_REF,
          studentTeamState: NULL_FIELD_REF,
          workspaceId: NULL_FIELD_REF,
          orgId: NULL_FIELD_REF,
          licenseGroupId: NULL_FIELD_REF,
          trialPeriodEnd: NULL_FIELD_REF,
          orgAccess: NULL_FIELD_REF,
          eduGracePeriod: [{
            userId: createSessionRef('userId')
          }, {
            id: NULL_FIELD_REF,
            isValid: NULL_FIELD_REF
          }]
        }, yf.fields)
      },
      teamEditRoles: {
        id: NULL_FIELD_REF,
        pending: NULL_FIELD_REF,
        pendingEmail: NULL_FIELD_REF,
        level: NULL_FIELD_REF,
        updatedAt: NULL_FIELD_REF,
        createdAt: NULL_FIELD_REF,
        resourceId: NULL_FIELD_REF,
        resourceType: NULL_FIELD_REF,
        team: {
          id: NULL_FIELD_REF,
          createdAt: NULL_FIELD_REF,
          deletedAt: NULL_FIELD_REF,
          orgId: NULL_FIELD_REF,
          name: NULL_FIELD_REF,
          imgUrl: createAliasedFieldRef('imgUrlTransformed', NULL_FIELD_REF),
          studentTeamAt: NULL_FIELD_REF,
          studentTeamState: NULL_FIELD_REF,
          studentAutoverifyingTeamAt: NULL_FIELD_REF,
          licenseGroupId: NULL_FIELD_REF,
          workspaceId: NULL_FIELD_REF,
          gracePeriodEnd: NULL_FIELD_REF,
          trialPeriodEnd: NULL_FIELD_REF,
          eduGracePeriod: [{
            userId: createSessionRef('userId')
          }, {
            id: NULL_FIELD_REF,
            isValid: NULL_FIELD_REF
          }],
          projectsCount: NULL_FIELD_REF,
          editorsCount: NULL_FIELD_REF,
          subscription: NULL_FIELD_REF,
          restrictionsList: NULL_FIELD_REF,
          orgAccess: NULL_FIELD_REF,
          projects: mergeFieldRefs({
            id: NULL_FIELD_REF,
            path: NULL_FIELD_REF,
            orgId: NULL_FIELD_REF,
            teamId: NULL_FIELD_REF,
            subscription: [{
              userId: createSessionRef('userId')
            }, {
              id: NULL_FIELD_REF
            }],
            updatedAt: NULL_FIELD_REF,
            createdAt: NULL_FIELD_REF,
            deletedAt: NULL_FIELD_REF,
            trashedAt: NULL_FIELD_REF,
            viewOnlyAt: NULL_FIELD_REF,
            inviteOnlyAt: NULL_FIELD_REF,
            description: NULL_FIELD_REF,
            isEditingLockedForUser: [{
              userId: createSessionRef('userId')
            }, NULL_FIELD_REF]
          }, yA.fields),
          currentPlanUser: [{
            userId: createSessionRef('userId')
          }, {
            key: {
              parentId: NULL_FIELD_REF,
              type: NULL_FIELD_REF
            },
            draftsFolderId: NULL_FIELD_REF,
            designPaidStatus: NULL_FIELD_REF,
            whiteboardPaidStatus: NULL_FIELD_REF
          }],
          currentTeamUser: [{
            userId: createSessionRef('userId')
          }, {
            id: NULL_FIELD_REF,
            designPaidStatus: NULL_FIELD_REF,
            whiteboardPaidStatus: NULL_FIELD_REF,
            draftsFolderId: NULL_FIELD_REF
          }],
          experimentAssignments: {
            experimentId: NULL_FIELD_REF,
            treatmentId: NULL_FIELD_REF
          }
        }
      },
      allOrgUsers: {
        id: NULL_FIELD_REF,
        orgId: NULL_FIELD_REF,
        userId: NULL_FIELD_REF,
        accountType: NULL_FIELD_REF,
        whiteboardPaidStatus: NULL_FIELD_REF,
        devModePaidStatus: NULL_FIELD_REF,
        activeSeatTypeUpgrade: {
          billableProduct: {
            key: NULL_FIELD_REF,
            licenseTypes: NULL_FIELD_REF
          }
        },
        permission: NULL_FIELD_REF,
        draftsFolderId: NULL_FIELD_REF,
        org: {
          id: NULL_FIELD_REF,
          name: NULL_FIELD_REF,
          imgUrl: createAliasedFieldRef('imgUrlTransformed', NULL_FIELD_REF)
        },
        draftsProject: mergeFieldRefs({
          id: NULL_FIELD_REF,
          path: NULL_FIELD_REF,
          orgId: NULL_FIELD_REF,
          teamId: NULL_FIELD_REF,
          subscription: [{
            userId: createSessionRef('userId')
          }, {
            id: NULL_FIELD_REF
          }],
          updatedAt: NULL_FIELD_REF,
          createdAt: NULL_FIELD_REF,
          deletedAt: NULL_FIELD_REF,
          trashedAt: NULL_FIELD_REF,
          viewOnlyAt: NULL_FIELD_REF,
          inviteOnlyAt: NULL_FIELD_REF,
          description: NULL_FIELD_REF,
          ownerRole: {
            id: NULL_FIELD_REF,
            pending: NULL_FIELD_REF,
            pendingEmail: NULL_FIELD_REF,
            level: NULL_FIELD_REF,
            updatedAt: NULL_FIELD_REF,
            createdAt: NULL_FIELD_REF,
            resourceId: NULL_FIELD_REF,
            resourceType: NULL_FIELD_REF
          },
          isEditingLockedForUser: [{
            userId: createSessionRef('userId')
          }, NULL_FIELD_REF]
        }, yA.fields),
        updatedAt: NULL_FIELD_REF,
        disabledAt: NULL_FIELD_REF,
        createdAt: NULL_FIELD_REF,
        user: {
          id: NULL_FIELD_REF,
          name: NULL_FIELD_REF,
          email: NULL_FIELD_REF,
          imgUrl: NULL_FIELD_REF,
          handle: NULL_FIELD_REF
        }
      }
    }]
  }
};
let yX = {
  args: [{
    name: 'requestId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    accountTypeRequest: makeFieldRefOptional([{
      id: createViewRef('requestId')
    }, {
      id: NULL_FIELD_REF,
      billableProductKey: NULL_FIELD_REF,
      requestableUserId: NULL_FIELD_REF,
      requestableUserType: NULL_FIELD_REF,
      status: NULL_FIELD_REF,
      licenseType: NULL_FIELD_REF,
      createdAt: NULL_FIELD_REF,
      planType: NULL_FIELD_REF,
      planId: NULL_FIELD_REF,
      requestableOrgUser: {
        user: {
          name: NULL_FIELD_REF
        }
      },
      requestableTeamUser: {
        user: {
          name: NULL_FIELD_REF
        }
      }
    }])
  }
};
var yQ = (e => (e.Wayfinding = 'Wayfinding', e.Desktop = 'Desktop', e.Workflow = 'Workflow', e.Extensibility = 'Extensibility', e.Billing = 'Billing', e.Monetization = 'Monetization', e.Growth = 'Growth', e.Mobile = 'Mobile', e.Community = 'Community', e.DesignSystem = 'DesignSystem', e.Scale = 'Scale', e.WebPlatform = 'WebPlatform', e.FigJam = 'FigJam', e.Slide = 'Slide', e.Prototyping = 'Prototyping', e.DevTools = 'DevTools', e.Site = 'Site', e.AI = 'AI', e.Search = 'Search', e))(yQ || {});
let yJ = {
  args: [{
    name: 'planType',
    type: {
      kind: 'string'
    }
  }, {
    name: 'planId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'sortOrder',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'filterParams',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'firstPageSize',
    type: {
      kind: 'int'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Billing
  },
  fields: {
    accountTypeRequestsFromPlan: makeFieldRefOptional([{
      userId: createSessionRef('userId'),
      planType: createViewRef('planType'),
      planId: createViewRef('planId'),
      sortOrder: createViewRef('sortOrder'),
      filterParams: createViewRef('filterParams'),
      firstPageSize: createViewRef('firstPageSize')
    }, {
      id: NULL_FIELD_REF,
      userId: NULL_FIELD_REF,
      request: {
        message: NULL_FIELD_REF,
        createdAt: NULL_FIELD_REF,
        updatedAt: NULL_FIELD_REF,
        licenseType: NULL_FIELD_REF,
        status: NULL_FIELD_REF,
        lastNudgedAt: NULL_FIELD_REF,
        billableProductKey: NULL_FIELD_REF
      }
    }])
  }
};
let y0 = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.Wayfinding
  },
  fields: {
    file: createAliasedFieldRef('_fileViewableByPrototypeViewers', [{
      key: createViewRef('fileKey'),
      userId: createSessionRef('userId')
    }, {
      key: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      activeFileUsers: [{}, {
        id: NULL_FIELD_REF,
        handle: NULL_FIELD_REF,
        imageUrl: NULL_FIELD_REF
      }]
    }])
  }
};
let y1 = {
  args: [{
    name: 'workspaceId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Scale
  },
  fields: {
    workspace: makeFieldRefOptional([{
      id: createViewRef('workspaceId'),
      userId: createSessionRef('userId')
    }, {
      name: NULL_FIELD_REF
    }])
  }
};
let y2 = {
  args: [{
    name: 'query',
    type: {
      kind: 'string'
    }
  }, {
    name: 'workspaceId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'sort',
    type: {
      kind: 'string'
    }
  }, {
    name: 'desc',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    searchWorkspaceFiles: [{
      query: createViewRef('query'),
      workspaceId: createViewRef('workspaceId'),
      orgId: createViewRef('orgId'),
      sort: createViewRef('sort'),
      desc: createViewRef('desc'),
      userId: createSessionRef('userId')
    }, {
      file: AR.fields
    }]
  }
};
let y5 = {
  args: [],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      email: NULL_FIELD_REF,
      recentFiles2: [{
        userId: createSessionRef('userId')
      }, {
        actionAt: NULL_FIELD_REF,
        file: AR.fields
      }]
    }]
  }
};
let y4 = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, mergeFieldRefs(AK.fields, {
      id: NULL_FIELD_REF,
      computedWorkspace: [{
        userId: createSessionRef('userId')
      }, {
        workspace: {
          id: NULL_FIELD_REF,
          name: NULL_FIELD_REF
        }
      }],
      isWorkspaceVisible: [{
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      }, NULL_FIELD_REF],
      canPinToWorkspace: [{
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      }, NULL_FIELD_REF],
      canEdit: createAliasedFieldRef('canEditV3', [{
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      }, NULL_FIELD_REF]),
      newUserPlaygroundLibrary: NULL_FIELD_REF
    })]),
    currentUser: [{
      userId: createSessionRef('userId')
    }, AG.fields]
  }
};
let y3 = {
  args: [{
    name: 'planType',
    type: {
      kind: 'string'
    }
  }, {
    name: 'planId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'filterParams',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Scale
  },
  fields: {
    adminDashboardRequestsTotalCount: makeFieldRefOptional([{
      userId: createSessionRef('userId'),
      planType: createViewRef('planType'),
      planId: createViewRef('planId'),
      filterParams: createViewRef('filterParams')
    }, {
      rowCount: NULL_FIELD_REF
    }])
  }
};
let y6 = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    org: [{
      id: createViewRef('orgId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      bigmaEnabledAt: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      sharedOrgLicenseGroupSetting: {
        configuredUpgradeRequestSetting: NULL_FIELD_REF
      },
      orgSharedSetting: {
        configuredUpgradeRequestSetting: NULL_FIELD_REF
      }
    }]
  }
};
let y7 = {
  args: [{
    name: 'planType',
    type: {
      kind: 'string'
    }
  }, {
    name: 'planId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'filterParams',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    adminDashboardRequestIds: makeFieldRefOptional([{
      userId: createSessionRef('userId'),
      planType: createViewRef('planType'),
      planId: createViewRef('planId'),
      filterParams: createViewRef('filterParams')
    }, {
      id: NULL_FIELD_REF
    }])
  }
};
let y8 = {
  args: [{
    name: 'planType',
    type: {
      kind: 'string'
    }
  }, {
    name: 'planId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'sortOrder',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'filterParams',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'firstPageSize',
    type: {
      kind: 'int'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    adminDashboardRequests: [{
      userId: createSessionRef('userId'),
      planType: createViewRef('planType'),
      planId: createViewRef('planId'),
      sortOrder: createViewRef('sortOrder'),
      filterParams: createViewRef('filterParams'),
      firstPageSize: createViewRef('firstPageSize')
    }, {
      id: NULL_FIELD_REF,
      userId: NULL_FIELD_REF,
      request: makeFieldRefOptional(createAliasedFieldRef('requestNullable', {
        message: NULL_FIELD_REF,
        createdAt: NULL_FIELD_REF,
        updatedAt: NULL_FIELD_REF,
        licenseType: NULL_FIELD_REF,
        status: NULL_FIELD_REF,
        lastNudgedAt: NULL_FIELD_REF,
        billableProductKey: NULL_FIELD_REF,
        requestableTeamUser: {
          id: NULL_FIELD_REF,
          currentSeat: {
            billableProductKey: NULL_FIELD_REF,
            billingInterval: NULL_FIELD_REF
          }
        },
        requestableOrgUser: {
          id: NULL_FIELD_REF,
          permission: NULL_FIELD_REF
        }
      })),
      user: makeFieldRefOptional(createAliasedFieldRef('userNullable', {
        name: NULL_FIELD_REF,
        handle: NULL_FIELD_REF,
        imgUrl: NULL_FIELD_REF,
        email: NULL_FIELD_REF,
        profile: {
          jobTitle: NULL_FIELD_REF
        }
      }))
    }],
    adminDashboardRequestsCount: makeFieldRefOptional([{
      userId: createSessionRef('userId'),
      planType: createViewRef('planType'),
      planId: createViewRef('planId'),
      filterParams: createViewRef('filterParams')
    }, {
      rowCount: NULL_FIELD_REF
    }])
  }
};
let y9 = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.Scale
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      baseOrgUser: [{
        orgId: createViewRef('orgId')
      }, {
        workspaceUsers: {
          id: NULL_FIELD_REF,
          permission: NULL_FIELD_REF,
          workspace: {
            id: NULL_FIELD_REF,
            name: NULL_FIELD_REF,
            imgUrl: createAliasedFieldRef('imgUrlTransformed', NULL_FIELD_REF)
          }
        }
      }]
    }]
  }
};
let be = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    aiMeterUsage: makeFieldRefOptional([{
      userId: createSessionRef('userId'),
      fileKey: createViewRef('fileKey')
    }, {
      id: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      remaining: NULL_FIELD_REF,
      total: NULL_FIELD_REF,
      resetsAt: NULL_FIELD_REF,
      userActions: NULL_FIELD_REF,
      meteringWindow: NULL_FIELD_REF
    }])
  }
};
let bt = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Extensibility
  },
  fields: {
    org: [{
      userId: createSessionRef('userId'),
      id: createViewRef('orgId')
    }, {
      widgetsWhitelistEnforced: NULL_FIELD_REF,
      pluginsWhitelistEnforced: NULL_FIELD_REF,
      publicPluginsAllowed: NULL_FIELD_REF,
      allowlistedPlugins: createAliasedFieldRef('whitelistedPlugins', {
        id: NULL_FIELD_REF,
        pluginId: NULL_FIELD_REF,
        plugin: makeFieldRefOptional(createAliasedFieldRef('pluginV2', [{
          orgId: createViewRef('orgId')
        }, {
          id: NULL_FIELD_REF,
          publishingStatus: NULL_FIELD_REF,
          currentPluginVersion: {
            iconUrl: NULL_FIELD_REF,
            name: NULL_FIELD_REF,
            description: NULL_FIELD_REF,
            tagline: NULL_FIELD_REF
          },
          isWidget: NULL_FIELD_REF
        }])),
        createdAt: NULL_FIELD_REF,
        allowlistGroupType: NULL_FIELD_REF,
        allowlistedOrg: createAliasedFieldRef('allowlistedOrgV2', {
          id: NULL_FIELD_REF,
          name: NULL_FIELD_REF
        }),
        allowlistedWorkspace: {
          id: NULL_FIELD_REF,
          name: NULL_FIELD_REF
        }
      })
    }]
  }
};
let bi = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    org: [{
      userId: createSessionRef('userId'),
      id: createViewRef('orgId')
    }, {
      widgetsWhitelistEnforced: NULL_FIELD_REF,
      pluginsWhitelistEnforced: NULL_FIELD_REF,
      publicPluginsAllowed: NULL_FIELD_REF,
      widgetRequestsAllowed: NULL_FIELD_REF,
      pluginRequestsAllowed: NULL_FIELD_REF
    }]
  }
};
let bn = {
  args: [{
    name: 'pluginId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'orgIds',
    type: {
      kind: 'list',
      ofType: {
        kind: 'bigint'
      }
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Extensibility
  },
  fields: {
    orgAllowlistedPlugins: makeFieldRefOptional([{
      pluginId: createViewRef('pluginId'),
      orgIds: createViewRef('orgIds')
    }, {
      orgId: NULL_FIELD_REF
    }])
  }
};
let br = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, {
      defaultColorPaletteData: {
        colorPaletteUuid: NULL_FIELD_REF,
        colorPalette: {
          id: NULL_FIELD_REF,
          name: NULL_FIELD_REF,
          baseColors: NULL_FIELD_REF,
          creatorId: NULL_FIELD_REF,
          teamId: NULL_FIELD_REF,
          uuid: NULL_FIELD_REF,
          isTeamDefault: NULL_FIELD_REF
        }
      },
      userColorPaletteOverrideData: [{
        userId: createSessionRef('userId')
      }, {
        colorPaletteUuid: NULL_FIELD_REF,
        colorPalette: {
          id: NULL_FIELD_REF,
          name: NULL_FIELD_REF,
          baseColors: NULL_FIELD_REF,
          creatorId: NULL_FIELD_REF,
          teamId: NULL_FIELD_REF,
          uuid: NULL_FIELD_REF,
          isTeamDefault: NULL_FIELD_REF
        }
      }]
    }])
  }
};
let ba = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.DesignSystem
  },
  fields: {
    org: [{
      id: createViewRef('orgId'),
      userId: createSessionRef('userId')
    }, {
      name: NULL_FIELD_REF,
      approvedLibraries: {
        libraryKey: NULL_FIELD_REF
      }
    }]
  }
};
let bs = {
  args: [{
    name: 'workspaceId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    workspace: [{
      id: createViewRef('workspaceId'),
      userId: createSessionRef('userId')
    }, {
      name: NULL_FIELD_REF,
      approvedLibraries: {
        libraryKey: NULL_FIELD_REF
      }
    }]
  }
};
let bo = {
  args: [{
    name: 'cacheNonce',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.DesignSystem
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      assetTransferReload: makeFieldRefOptional([{
        cacheNonce: createViewRef('cacheNonce')
      }, {
        id: NULL_FIELD_REF,
        userId: NULL_FIELD_REF,
        destOrgId: NULL_FIELD_REF,
        teamId: NULL_FIELD_REF,
        folderId: NULL_FIELD_REF
      }])
    }]
  }
};
let bl = {
  args: [{
    name: 'targetOrgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'targetUserId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    pluginPreferences: [{
      currentUserId: createSessionRef('userId'),
      targetOrgId: createViewRef('targetOrgId'),
      targetUserId: createViewRef('targetUserId')
    }, {
      autoRunPluginId: NULL_FIELD_REF,
      autoRunBehavior: NULL_FIELD_REF,
      orgId: NULL_FIELD_REF,
      autoRunPlugin: {
        id: NULL_FIELD_REF,
        currentPluginVersionId: NULL_FIELD_REF,
        publishingStatus: NULL_FIELD_REF,
        isWidget: NULL_FIELD_REF,
        orgId: NULL_FIELD_REF,
        communityPublishers: {
          isPending: NULL_FIELD_REF,
          profile: {
            id: NULL_FIELD_REF,
            profileHandle: NULL_FIELD_REF,
            user: {
              id: NULL_FIELD_REF,
              name: NULL_FIELD_REF
            },
            team: {
              id: NULL_FIELD_REF,
              name: NULL_FIELD_REF
            },
            org: {
              id: NULL_FIELD_REF,
              name: NULL_FIELD_REF
            }
          },
          role: NULL_FIELD_REF
        },
        currentPluginVersion: {
          id: NULL_FIELD_REF,
          name: NULL_FIELD_REF,
          version: NULL_FIELD_REF,
          releaseNotes: NULL_FIELD_REF,
          description: NULL_FIELD_REF,
          tagline: NULL_FIELD_REF,
          creatorPolicy: NULL_FIELD_REF,
          manifest: NULL_FIELD_REF,
          createdAt: NULL_FIELD_REF,
          iconPath: NULL_FIELD_REF,
          coverImagePath: NULL_FIELD_REF,
          codePath: NULL_FIELD_REF,
          plugin: {
            currentPluginVersionId: NULL_FIELD_REF
          },
          iconUrl: NULL_FIELD_REF,
          coverImageUrl: NULL_FIELD_REF
        }
      },
      autoRunEnabled: NULL_FIELD_REF
    }]
  }
};
let bd = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Billing
  },
  fields: {
    testFeatureGateFromRoot: makeFieldRefOptional({
      id: NULL_FIELD_REF,
      value: NULL_FIELD_REF
    }),
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      permissionFeatureFlagsV2: NULL_FIELD_REF
    }],
    org: makeFieldRefOptional([{
      id: createViewRef('orgId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      billingRemodelEnabledExperiment: {
        id: NULL_FIELD_REF,
        campfireEnabled: NULL_FIELD_REF
      }
    }]),
    team: makeFieldRefOptional([{
      id: createViewRef('teamId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      billingRemodelEnabledExperiment: {
        id: NULL_FIELD_REF,
        campfireEnabled: NULL_FIELD_REF
      }
    }])
  }
};
let bc = {
  args: [{
    name: 'resourceId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'resourceType',
    type: {
      kind: 'enum',
      name: 'BillingTrialResourceType'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    billingTrialForResource: [{
      resourceId: createViewRef('resourceId'),
      resourceType: createViewRef('resourceType')
    }, {
      id: NULL_FIELD_REF,
      createdAt: NULL_FIELD_REF,
      updatedAt: NULL_FIELD_REF,
      deactivatedAt: NULL_FIELD_REF,
      trialPeriodStart: NULL_FIELD_REF,
      trialPeriodEnd: NULL_FIELD_REF,
      resourceType: NULL_FIELD_REF,
      resourceId: NULL_FIELD_REF,
      planType: NULL_FIELD_REF,
      metadata: NULL_FIELD_REF
    }]
  }
};
let bu = {
  args: [{
    name: 'resourceId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'resourceType',
    type: {
      kind: 'enum',
      name: 'BillingTrialResourceType'
    }
  }, {
    name: 'planType',
    type: {
      kind: 'enum',
      name: 'BillingTrialPlanType'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    billingTrialForResourceAndPlanType: [{
      resourceId: createViewRef('resourceId'),
      resourceType: createViewRef('resourceType'),
      planType: createViewRef('planType')
    }, {
      id: NULL_FIELD_REF,
      createdAt: NULL_FIELD_REF,
      updatedAt: NULL_FIELD_REF,
      deactivatedAt: NULL_FIELD_REF,
      trialPeriodStart: NULL_FIELD_REF,
      trialPeriodEnd: NULL_FIELD_REF,
      resourceType: NULL_FIELD_REF,
      resourceId: NULL_FIELD_REF,
      planType: NULL_FIELD_REF,
      metadata: NULL_FIELD_REF
    }]
  }
};
let bp = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, {
      project: [{
        userId: createSessionRef('userId')
      }, {
        name: NULL_FIELD_REF
      }],
      plan: [{
        userId: createSessionRef('userId')
      }, {
        name: NULL_FIELD_REF
      }]
    }])
  }
};
let bm = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.Prototyping
  },
  fields: {
    file: createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('fileKey')
    }, {
      id: NULL_FIELD_REF,
      key: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      updatedAt: NULL_FIELD_REF,
      teamId: NULL_FIELD_REF,
      folderId: NULL_FIELD_REF,
      editorType: NULL_FIELD_REF,
      canEdit: createAliasedFieldRef('canEditV3', [{
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      }, NULL_FIELD_REF]),
      canView: createAliasedFieldRef('canViewV3', [{
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      }, NULL_FIELD_REF]),
      canViewPrototype: createAliasedFieldRef('canViewPrototypeV3', [{
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      }, NULL_FIELD_REF]),
      hasViewPrototypeRole: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF],
      linkAccess: NULL_FIELD_REF,
      protoLinkAccess: NULL_FIELD_REF
    }])
  }
};
let bh = {
  args: [],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.Growth
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      userFlags: {
        id: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        userId: NULL_FIELD_REF,
        createdAt: NULL_FIELD_REF,
        updatedAt: NULL_FIELD_REF
      }
    }]
  }
};
let bg = {
  id: NULL_FIELD_REF,
  key: NULL_FIELD_REF,
  fileRepoId: NULL_FIELD_REF,
  branchFileKey: NULL_FIELD_REF,
  reviewNumber: NULL_FIELD_REF,
  title: NULL_FIELD_REF,
  description: NULL_FIELD_REF,
  fileMergeId: NULL_FIELD_REF,
  closedAt: NULL_FIELD_REF,
  requestedAt: NULL_FIELD_REF,
  createdAt: NULL_FIELD_REF,
  owner: {
    id: NULL_FIELD_REF,
    handle: NULL_FIELD_REF,
    imgUrl: NULL_FIELD_REF
  },
  reviewers: {
    id: NULL_FIELD_REF,
    approvedAt: NULL_FIELD_REF,
    changesRequestedAt: NULL_FIELD_REF,
    notes: NULL_FIELD_REF,
    userId: NULL_FIELD_REF,
    user: {
      id: NULL_FIELD_REF,
      handle: NULL_FIELD_REF,
      imgUrl: NULL_FIELD_REF
    }
  }
};
let bf = {
  args: [{
    name: 'branchFileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('branchFileKey')
    }, {
      name: NULL_FIELD_REF,
      trashedAt: NULL_FIELD_REF,
      sourceFile: {
        name: NULL_FIELD_REF
      },
      fileMerges: {
        direction: NULL_FIELD_REF,
        mergeResultCheckpointId: NULL_FIELD_REF,
        updatedAt: NULL_FIELD_REF,
        mergeRequest: bg
      },
      openMergeRequest: {
        id: NULL_FIELD_REF,
        mergeRequest: bg
      }
    }])
  }
};
let b_ = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.Workflow
  },
  fields: {
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, {
      editorType: NULL_FIELD_REF,
      canCreateBranch: [{
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      }, NULL_FIELD_REF],
      canEdit: createAliasedFieldRef('canEditV3', [{
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      }, NULL_FIELD_REF]),
      viewerExportRestricted: NULL_FIELD_REF,
      canExport: [{
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      }, NULL_FIELD_REF],
      plan: [{
        userId: createSessionRef('userId')
      }, {
        tier: NULL_FIELD_REF
      }],
      currentPlanUser: [{
        userId: createSessionRef('userId')
      }, {
        id: NULL_FIELD_REF,
        designPaidStatus: NULL_FIELD_REF,
        seatTypeLicenseTypes: NULL_FIELD_REF
      }]
    }])
  }
};
let bA = {
  args: [{
    name: 'branchKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('branchKey')
    }, {
      key: NULL_FIELD_REF,
      trashedAt: NULL_FIELD_REF,
      repo: {
        id: NULL_FIELD_REF,
        name: NULL_FIELD_REF
      }
    }])
  }
};
let by = {
  args: [{
    name: 'currentOrgId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.Slide
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      privilegedOrgUser: [{
        orgId: createViewRef('currentOrgId')
      }, {
        licenseGroupMember: {
          licenseGroup: {
            id: NULL_FIELD_REF
          }
        },
        workspaceUsers: {
          workspaceId: NULL_FIELD_REF,
          isMainWorkspace: NULL_FIELD_REF
        }
      }],
      orgAwareTeamRoles: [{
        orgId: createViewRef('currentOrgId')
      }, {
        team: {
          id: NULL_FIELD_REF
        }
      }]
    }]
  }
};
let bb = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.Scale
  },
  fields: {
    org: [{
      id: createViewRef('orgId'),
      userId: createSessionRef('userId')
    }, {
      workspaces: {
        id: NULL_FIELD_REF,
        canCreateTeam: [{
          userId: createSessionRef('userId')
        }, NULL_FIELD_REF]
      },
      sharedOrgLicenseGroupSetting: {
        teamCreationControls: NULL_FIELD_REF
      },
      orgSharedSetting: {
        teamCreationControls: NULL_FIELD_REF
      }
    }],
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      baseOrgUser: [{
        orgId: createViewRef('orgId')
      }, {
        workspaceUsers: {
          workspaceId: NULL_FIELD_REF,
          isMainWorkspace: NULL_FIELD_REF
        },
        permission: NULL_FIELD_REF
      }]
    }]
  }
};
let bv = {
  args: [{
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Billing
  },
  fields: {
    team: [{
      id: createViewRef('teamId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      editorsCount: NULL_FIELD_REF,
      projectsCount: NULL_FIELD_REF,
      editorsWhiteboardCount: NULL_FIELD_REF,
      editorsTotalUniqueCount: NULL_FIELD_REF,
      teamFileCounts: {
        designFileCount: NULL_FIELD_REF,
        whiteboardFileCount: NULL_FIELD_REF,
        totalFileCount: makeFieldRefOptional()
      },
      sampledEditors: {
        user: {
          id: NULL_FIELD_REF,
          name: NULL_FIELD_REF,
          imgUrl: NULL_FIELD_REF,
          handle: NULL_FIELD_REF
        }
      }
    }]
  }
};
let bI = {
  args: [{
    name: 'cacheNonce',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.WebPlatform
  },
  fields: {
    clientReload: [{
      userId: createSessionRef('userId'),
      cacheNonce: createViewRef('cacheNonce')
    }, {
      id: NULL_FIELD_REF,
      targetUserId: NULL_FIELD_REF,
      clientId: NULL_FIELD_REF,
      updatedAt: NULL_FIELD_REF,
      reason: makeFieldRefOptional()
    }]
  }
};
let bE = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: _$$aG.P1
  },
  fields: {
    fileV2: makeFieldRefOptional([{
      key: createViewRef('fileKey')
    }, {
      fileHasCmsCollections: NULL_FIELD_REF
    }]),
    fileCmsCollections: [{
      fileKey: createViewRef('fileKey')
    }, {
      id: NULL_FIELD_REF,
      collectionId: NULL_FIELD_REF
    }]
  }
};
let bx = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: _$$aG.P1
  },
  fields: {
    fileCmsCollections: [{
      fileKey: createViewRef('fileKey')
    }, {
      collectionV2: {
        id: NULL_FIELD_REF,
        stableId: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        description: NULL_FIELD_REF
      }
    }]
  }
};
let bS = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'collectionId',
    type: {
      kind: 'uuid'
    }
  }],
  props: {
    priority: _$$aG.P1
  },
  fields: {
    oneFileCmsCollection: [{
      fileKey: createViewRef('fileKey'),
      collectionId: createViewRef('collectionId')
    }, {
      collectionV2: {
        items: {
          id: NULL_FIELD_REF,
          stableId: NULL_FIELD_REF,
          createdAt: NULL_FIELD_REF,
          updatedAt: NULL_FIELD_REF,
          collectionId: NULL_FIELD_REF,
          status: NULL_FIELD_REF,
          lastPublishedAt: NULL_FIELD_REF,
          statusUpdatedAt: NULL_FIELD_REF,
          position: NULL_FIELD_REF,
          allFields: {
            id: NULL_FIELD_REF,
            value: NULL_FIELD_REF,
            assetsForPublish: makeFieldRefOptional({
              type: NULL_FIELD_REF,
              hash: NULL_FIELD_REF,
              height: NULL_FIELD_REF,
              width: NULL_FIELD_REF
            }),
            version: NULL_FIELD_REF,
            itemId: NULL_FIELD_REF,
            createdAt: NULL_FIELD_REF,
            updatedAt: NULL_FIELD_REF,
            fieldSchema: {
              id: NULL_FIELD_REF,
              stableId: NULL_FIELD_REF
            }
          }
        }
      }
    }]
  }
};
let bw = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'collectionId',
    type: {
      kind: 'uuid'
    }
  }],
  props: {
    priority: _$$aG.P1
  },
  fields: {
    oneFileCmsCollection: [{
      fileKey: createViewRef('fileKey'),
      collectionId: createViewRef('collectionId')
    }, {
      collectionV2: {
        id: NULL_FIELD_REF,
        stableId: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        description: NULL_FIELD_REF,
        fieldSchemas: {
          id: NULL_FIELD_REF,
          stableId: NULL_FIELD_REF,
          name: NULL_FIELD_REF,
          fieldType: NULL_FIELD_REF,
          position: NULL_FIELD_REF,
          required: NULL_FIELD_REF,
          properties: NULL_FIELD_REF,
          version: NULL_FIELD_REF
        }
      }
    }]
  }
};
let bC = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'collectionId',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'itemStableId',
    type: {
      kind: 'uuid'
    }
  }],
  props: {
    priority: _$$aG.P1
  },
  fields: {
    oneFileCmsCollection: [{
      fileKey: createViewRef('fileKey'),
      collectionId: createViewRef('collectionId')
    }, {
      collectionV2: {
        oneItem: [{
          itemStableId: createViewRef('itemStableId')
        }, {
          id: NULL_FIELD_REF,
          stableId: NULL_FIELD_REF,
          createdAt: NULL_FIELD_REF,
          updatedAt: NULL_FIELD_REF,
          collectionId: NULL_FIELD_REF,
          status: NULL_FIELD_REF,
          lastPublishedAt: NULL_FIELD_REF,
          statusUpdatedAt: NULL_FIELD_REF,
          position: NULL_FIELD_REF,
          allFields: {
            id: NULL_FIELD_REF,
            value: NULL_FIELD_REF,
            assetsForPublish: makeFieldRefOptional({
              type: NULL_FIELD_REF,
              hash: NULL_FIELD_REF,
              height: NULL_FIELD_REF,
              width: NULL_FIELD_REF
            }),
            version: NULL_FIELD_REF,
            itemId: NULL_FIELD_REF,
            createdAt: NULL_FIELD_REF,
            updatedAt: NULL_FIELD_REF,
            fieldSchema: {
              id: NULL_FIELD_REF,
              stableId: NULL_FIELD_REF
            }
          }
        }]
      }
    }]
  }
};
let bT = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }, {
    name: 'libraryKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    libraryAsset: [{
      key: createViewRef('key'),
      libraryKey: createViewRef('libraryKey')
    }, {
      ...AZ.fields,
      codePresetMetadata: AX.fields
    }]
  }
};
let bk = {
  args: [{
    name: 'libraryKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    libraryKeyToFile: [{
      libraryKey: createViewRef('libraryKey')
    }, {
      file: {
        name: NULL_FIELD_REF,
        libraryKey: NULL_FIELD_REF,
        thumbnailUrl: createAliasedFieldRef('signedThumbnailUrl', NULL_FIELD_REF),
        template: {
          name: NULL_FIELD_REF,
          publishedByUserNullable: {
            name: NULL_FIELD_REF
          }
        },
        libraryAssets: createAliasedFieldRef('codeComponentLibraryAssets', [{
          libraryKey: createViewRef('libraryKey')
        }, {
          ...AZ.fields,
          codePresetMetadata: AX.fields
        }])
      },
      hubFile: {
        id: NULL_FIELD_REF,
        currentHubFileVersion: {
          name: NULL_FIELD_REF
        },
        libraryKey: NULL_FIELD_REF,
        thumbnailUrl: NULL_FIELD_REF,
        communityPublishers: {
          profile: {
            name: NULL_FIELD_REF
          }
        },
        libraryAssets: createAliasedFieldRef('codeComponentLibraryAssets', [{
          libraryKey: createViewRef('libraryKey')
        }, {
          ...AZ.fields,
          codePresetMetadata: AX.fields
        }])
      }
    }]
  }
};
let bR = {
  args: [{
    name: 'libraryKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'nodeId',
    type: {
      kind: 'string'
    }
  }, {
    name: 'instances',
    type: {
      kind: 'list',
      ofType: {
        kind: 'string'
      }
    }
  }, {
    name: 'openFileKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'isCommunityLibrary',
    type: {
      kind: 'bool'
    }
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('fileV2', [{
      key: createViewRef('openFileKey')
    }, {
      code_connect_for_node_lk: [{
        nodeId: createViewRef('nodeId'),
        instances: createViewRef('instances'),
        userId: createSessionRef('userId'),
        libraryKey: createViewRef('libraryKey'),
        isCommunityLibrary: createViewRef('isCommunityLibrary')
      }, {
        id: NULL_FIELD_REF,
        nodeId: NULL_FIELD_REF,
        figmadoc: NULL_FIELD_REF,
        instanceFigmadocs: NULL_FIELD_REF,
        createdAt: NULL_FIELD_REF,
        updatedAt: NULL_FIELD_REF,
        label: NULL_FIELD_REF,
        type: NULL_FIELD_REF
      }]
    }]))
  }
};
let bN = {
  args: [{
    name: 'uuid',
    type: {
      kind: 'uuid'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.FigJam
  },
  fields: {
    colorPaletteForUuid: [{
      uuid: createViewRef('uuid')
    }, {
      id: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      baseColors: NULL_FIELD_REF,
      creatorId: NULL_FIELD_REF,
      teamId: NULL_FIELD_REF,
      uuid: NULL_FIELD_REF,
      isTeamDefault: NULL_FIELD_REF
    }]
  }
};
let bP = {
  args: [{
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.FigJam
  },
  fields: {
    colorPalettesForTeam: [{
      teamId: createViewRef('teamId')
    }, {
      id: NULL_FIELD_REF,
      teamId: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      baseColors: NULL_FIELD_REF,
      creatorId: NULL_FIELD_REF,
      uuid: NULL_FIELD_REF,
      isTeamDefault: NULL_FIELD_REF
    }]
  }
};
let bO = {
  args: [{
    name: 'profileId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'hubFileId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'pluginId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    communityHubLike: [{
      profileId: createViewRef('profileId'),
      hubFileId: createViewRef('hubFileId'),
      pluginId: createViewRef('pluginId')
    }, {
      id: NULL_FIELD_REF
    }]
  }
};
let bD = {
  args: [{
    name: 'profileId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'resourceId',
    type: {
      kind: 'uuid'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    communityHubLikeForResource: makeFieldRefOptional([{
      profileId: createViewRef('profileId'),
      resourceId: createViewRef('resourceId')
    }, {
      id: NULL_FIELD_REF
    }])
  }
};
let bL = {
  args: [{
    name: 'hubFileId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Community
  },
  fields: {
    file: createAliasedFieldRef('communityLibraryByHubFileId', [{
      hubFileId: createViewRef('hubFileId')
    }, {
      hubFileId: NULL_FIELD_REF,
      libraryKey: NULL_FIELD_REF,
      components: AL.fields,
      stateGroups: yR.fields
    }])
  }
};
let bF = {
  args: [{
    name: 'hubFileId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    communityLibraryByHubFileId: makeFieldRefOptional([{
      hubFileId: createViewRef('hubFileId')
    }, {
      id: NULL_FIELD_REF,
      hubFileId: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      numComponents: NULL_FIELD_REF,
      numStateGroups: NULL_FIELD_REF,
      numStyles: NULL_FIELD_REF,
      numStylesFill: NULL_FIELD_REF,
      numStylesText: NULL_FIELD_REF,
      numStylesEffect: NULL_FIELD_REF,
      numStylesGrid: NULL_FIELD_REF,
      numVariableSets: NULL_FIELD_REF,
      numVariables: NULL_FIELD_REF,
      numVariablesBoolean: NULL_FIELD_REF,
      numVariablesColor: NULL_FIELD_REF,
      numVariablesFloat: NULL_FIELD_REF,
      numVariablesString: NULL_FIELD_REF,
      numModuleAssets: NULL_FIELD_REF,
      variableCollections: A7.fields,
      libraryHierarchyPaths: {
        pageName: NULL_FIELD_REF,
        containingFrameName: NULL_FIELD_REF,
        nameHierarchyPath: NULL_FIELD_REF,
        components: AL.fields,
        stateGroups: yR.fields,
        styles: yO.fields
      },
      hubFile: {
        id: NULL_FIELD_REF,
        currentHubFileVersion: {
          name: NULL_FIELD_REF
        },
        libraryKey: NULL_FIELD_REF
      }
    }])
  }
};
let bM = {
  args: [{
    name: 'hubFileId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    communityLibraryByHubFileId: makeFieldRefOptional([{
      hubFileId: createViewRef('hubFileId')
    }, {
      numVariables: NULL_FIELD_REF,
      variableCollections: A8.fields
    }])
  }
};
let bj = {
  args: [{
    name: 'hubFileId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    communityLibraryByHubFileId: [{
      hubFileId: createViewRef('hubFileId')
    }, {
      hubFileId: NULL_FIELD_REF,
      variableCollections: A8.fields
    }]
  }
};
let bU = {
  args: [{
    name: 'hubFileId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    communityLibraryByHubFileId: [{
      hubFileId: createViewRef('hubFileId')
    }, {
      hubFileId: NULL_FIELD_REF,
      libraryKey: NULL_FIELD_REF,
      modules: makeFieldRefOptional(ys.fields)
    }]
  }
};
let bB = {
  args: [{
    name: 'hubFileId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    communityLibraryByHubFileId: makeFieldRefOptional([{
      hubFileId: createViewRef('hubFileId')
    }, {
      hubFileId: NULL_FIELD_REF,
      libraryKey: NULL_FIELD_REF,
      variableCollections: A7.fields,
      numVariableSets: NULL_FIELD_REF,
      numVariables: NULL_FIELD_REF,
      numVariablesBoolean: NULL_FIELD_REF,
      numVariablesColor: NULL_FIELD_REF,
      numVariablesFloat: NULL_FIELD_REF,
      numVariablesString: NULL_FIELD_REF
    }])
  }
};
let bV = {
  args: [],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.Community
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      communityProfileNotificationBell: makeFieldRefOptional({
        id: NULL_FIELD_REF,
        bell: NULL_FIELD_REF
      })
    }]
  }
};
let bG = {
  args: [{
    name: 'monetizedResourceMetadataId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    communityResourcePayment: createAliasedFieldRef('communityResourcePaymentV2', [{
      userId: createSessionRef('userId'),
      monetizedResourceMetadataId: createViewRef('monetizedResourceMetadataId')
    }, {
      status: NULL_FIELD_REF,
      subscriptionExpiresAt: NULL_FIELD_REF,
      subscriptionCanceledAt: NULL_FIELD_REF,
      purchasedAt: NULL_FIELD_REF,
      refundReason: NULL_FIELD_REF,
      monetizedResourceMetadataId: NULL_FIELD_REF,
      subscriptionInterval: NULL_FIELD_REF
    }])
  }
};
let bz = {
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    communityResourcePaymentsForUser: [{
      userId: createSessionRef('userId')
    }, {
      statusEnum: NULL_FIELD_REF,
      updatedAt: NULL_FIELD_REF,
      subscriptionExpiresAt: NULL_FIELD_REF,
      subscriptionCanceledAt: NULL_FIELD_REF,
      purchasedAt: NULL_FIELD_REF,
      refundReason: NULL_FIELD_REF,
      monetizedResourceMetadataId: NULL_FIELD_REF,
      subscriptionInterval: NULL_FIELD_REF
    }]
  }
};
let bH = {
  args: [{
    name: 'pluginId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Community
  },
  fields: {
    plugin: makeFieldRefOptional([{
      pluginId: createViewRef('pluginId'),
      userId: createSessionRef('userId'),
      orgId: createViewRef('orgId')
    }, {
      id: NULL_FIELD_REF,
      thirdPartyM10nStatus: NULL_FIELD_REF,
      monetizationStatus: NULL_FIELD_REF,
      monetizedResourceMetadata: {
        id: NULL_FIELD_REF,
        isSubscription: NULL_FIELD_REF,
        price: NULL_FIELD_REF,
        trialLengthInDays: NULL_FIELD_REF,
        hasFreemiumCode: NULL_FIELD_REF,
        annualDiscountPercentage: NULL_FIELD_REF,
        annualDiscountActiveAt: NULL_FIELD_REF
      },
      communityPublishers: {
        id: NULL_FIELD_REF,
        profileId: NULL_FIELD_REF
      },
      communityResourcePayment: [{
        userId: createSessionRef('userId')
      }, {
        status: NULL_FIELD_REF,
        subscriptionExpiresAt: NULL_FIELD_REF,
        subscriptionCanceledAt: NULL_FIELD_REF,
        purchasedAt: NULL_FIELD_REF,
        refundReason: NULL_FIELD_REF,
        monetizedResourceMetadataId: NULL_FIELD_REF,
        subscriptionInterval: NULL_FIELD_REF
      }]
    }])
  }
};
let bW = {
  args: [],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      email: NULL_FIELD_REF,
      recentFiles2: [{
        userId: createSessionRef('userId')
      }, AY.fields]
    }]
  }
};
let bK = {
  args: [{
    name: 'profileId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Community
  },
  fields: {
    communityProfile: [{
      profileId: createViewRef('profileId')
    }, {
      id: NULL_FIELD_REF,
      createdAt: NULL_FIELD_REF,
      updatedAt: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      profileHandle: NULL_FIELD_REF,
      publicAt: NULL_FIELD_REF,
      website: NULL_FIELD_REF,
      description: NULL_FIELD_REF,
      location: NULL_FIELD_REF,
      coverImagePath: NULL_FIELD_REF,
      twitter: NULL_FIELD_REF,
      instagram: NULL_FIELD_REF,
      followerCount: NULL_FIELD_REF,
      followingCount: NULL_FIELD_REF,
      primaryUserId: NULL_FIELD_REF,
      teamId: NULL_FIELD_REF,
      orgId: NULL_FIELD_REF,
      pronouns: NULL_FIELD_REF,
      entityType: NULL_FIELD_REF,
      currentUser: [{
        userId: createSessionRef('userId')
      }, {
        id: NULL_FIELD_REF
      }],
      associatedUsers: {
        id: NULL_FIELD_REF,
        email: NULL_FIELD_REF
      },
      currentUserIsFollowing: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF],
      currentUserIsFollowed: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF],
      badges: {
        badgeType: NULL_FIELD_REF
      }
    }]
  }
};
let bY = {
  id: NULL_FIELD_REF,
  oneStars: NULL_FIELD_REF,
  twoStars: NULL_FIELD_REF,
  threeStars: NULL_FIELD_REF,
  fourStars: NULL_FIELD_REF,
  fiveStars: NULL_FIELD_REF,
  totalRatings: NULL_FIELD_REF,
  avgRating: NULL_FIELD_REF,
  createdAt: NULL_FIELD_REF,
  updatedAt: NULL_FIELD_REF
};
let bq = {
  args: [{
    name: 'hubFileId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'pluginId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'widgetId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    communityRatingStatsForHubFile: [{
      hubFileId: createViewRef('hubFileId')
    }, {
      ...bY,
      hubFileId: NULL_FIELD_REF
    }],
    communityRatingStatsForWidget: [{
      widgetId: createViewRef('widgetId')
    }, {
      ...bY,
      widgetId: NULL_FIELD_REF
    }],
    communityRatingStatsForPlugin: [{
      pluginId: createViewRef('pluginId')
    }, {
      ...bY,
      pluginId: NULL_FIELD_REF
    }]
  }
};
let b$ = {
  args: [{
    name: 'monetizedResourceMetadataId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    communityM10nResourceStat: [{
      sessionUserId: createSessionRef('userId'),
      monetizedResourceMetadataId: createViewRef('monetizedResourceMetadataId')
    }, {
      id: NULL_FIELD_REF,
      monetizedResourceMetadataId: NULL_FIELD_REF,
      allTimeTotalEarned: NULL_FIELD_REF,
      monthlyTotalEarned: NULL_FIELD_REF,
      numPurchases: NULL_FIELD_REF
    }]
  }
};
let bZ = {
  args: [],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Community
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      email: NULL_FIELD_REF,
      recentFiles2: [{
        userId: createSessionRef('userId')
      }, {
        file: {
          key: NULL_FIELD_REF
        }
      }]
    }]
  }
};
let bX = {
  assetAttribution: makeFieldRefOptional({
    id: NULL_FIELD_REF,
    name: NULL_FIELD_REF,
    handle: NULL_FIELD_REF,
    imgUrl: NULL_FIELD_REF,
    type: NULL_FIELD_REF
  })
};
let bQ = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    component: [{
      componentKey: createViewRef('key'),
      userId: createSessionRef('userId')
    }, bX]
  }
};
let bJ = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    component: [{
      componentKey: createViewRef('key'),
      userId: createSessionRef('userId')
    }, mergeFieldRefs(AL.fields, {
      file: {
        key: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        teamId: NULL_FIELD_REF,
        libraryKey: NULL_FIELD_REF
      }
    })]
  }
};
let b0 = {
  id: NULL_FIELD_REF,
  updateType: NULL_FIELD_REF,
  updatedAt: NULL_FIELD_REF,
  destinationKey: NULL_FIELD_REF,
  fileKey: NULL_FIELD_REF,
  libraryKey: NULL_FIELD_REF,
  nodeId: NULL_FIELD_REF,
  componentKey: NULL_FIELD_REF,
  component: {
    file: {
      teamId: NULL_FIELD_REF,
      libraryKey: NULL_FIELD_REF
    },
    libraryKey: NULL_FIELD_REF,
    libraryResourceId: NULL_FIELD_REF,
    checkpointId: NULL_FIELD_REF,
    unpublishedAt: NULL_FIELD_REF,
    name: NULL_FIELD_REF,
    nodeId: NULL_FIELD_REF,
    contentHash: NULL_FIELD_REF,
    userFacingVersion: NULL_FIELD_REF,
    description: NULL_FIELD_REF,
    description_rt: NULL_FIELD_REF,
    componentKey: NULL_FIELD_REF,
    destinationKey: NULL_FIELD_REF,
    minNodeWidth: NULL_FIELD_REF,
    minNodeHeight: NULL_FIELD_REF,
    containingFrame: {
      name: NULL_FIELD_REF,
      nodeId: NULL_FIELD_REF,
      backgroundColor: NULL_FIELD_REF,
      pageId: NULL_FIELD_REF,
      pageName: NULL_FIELD_REF,
      sortPosition: NULL_FIELD_REF,
      containingStateGroup: {
        nodeId: NULL_FIELD_REF,
        name: NULL_FIELD_REF
      }
    },
    sortPosition: NULL_FIELD_REF,
    hasVideo: makeFieldRefOptional(),
    id: NULL_FIELD_REF,
    updatedAt: NULL_FIELD_REF,
    hubFileId: NULL_FIELD_REF
  }
};
let b1 = {
  args: [{
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.DesignSystem
  },
  fields: {
    team: [{
      id: createViewRef('teamId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      componentUpdates: b0
    }]
  }
};
let b2 = {
  args: [{
    name: 'projectId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.DesignSystem
  },
  fields: {
    project: [{
      id: createViewRef('projectId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      componentUpdates: b0
    }]
  }
};
let b5 = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.DesignSystem
  },
  fields: {
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, {
      id: NULL_FIELD_REF,
      key: NULL_FIELD_REF,
      componentUpdates: b0
    }])
  }
};
let b4 = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'permission',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      baseOrgUser: [{
        orgId: createViewRef('orgId')
      }, {
        org: {
          name: NULL_FIELD_REF,
          imgUrl: createAliasedFieldRef('imgUrlTransformed', NULL_FIELD_REF),
          sharedOrgLicenseGroupSetting: {
            id: NULL_FIELD_REF,
            configuredUpgradeRequestSetting: NULL_FIELD_REF,
            permittedConfiguredUpgradeRequestMessage: [{
              orgId: createViewRef('orgId'),
              permission: createViewRef('permission')
            }, NULL_FIELD_REF]
          },
          orgSharedSetting: {
            id: NULL_FIELD_REF,
            configuredUpgradeRequestSetting: NULL_FIELD_REF,
            permittedConfiguredUpgradeRequestMessage: [{
              orgId: createViewRef('orgId'),
              permission: createViewRef('permission')
            }, NULL_FIELD_REF]
          }
        }
      }]
    }]
  }
};
let b3 = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    org: [{
      id: createViewRef('orgId'),
      userId: createSessionRef('userId')
    }, {
      activeOrgBillingPeriod: [{
        orgId: createViewRef('orgId')
      }, {
        id: NULL_FIELD_REF,
        orgId: NULL_FIELD_REF,
        startAt: NULL_FIELD_REF,
        effectiveEndAt: NULL_FIELD_REF,
        isEla: NULL_FIELD_REF
      }]
    }]
  }
};
let b6 = {
  args: [{
    name: 'teamId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      teamUser: [{
        teamId: createViewRef('teamId')
      }, {
        designPaidStatus: NULL_FIELD_REF
      }]
    }]
  }
};
let b7 = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, yj.fields]
  }
};
let b8 = {
  args: [],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.Wayfinding
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      email: NULL_FIELD_REF,
      recentFiles: createAliasedFieldRef('recentFiles2', [{
        userId: createSessionRef('userId')
      }, {
        id: NULL_FIELD_REF,
        userId: NULL_FIELD_REF,
        action: NULL_FIELD_REF,
        actionAt: NULL_FIELD_REF,
        file: {
          id: NULL_FIELD_REF,
          name: NULL_FIELD_REF,
          key: NULL_FIELD_REF,
          editorType: NULL_FIELD_REF,
          parentOrgId: NULL_FIELD_REF,
          deletedAt: NULL_FIELD_REF,
          trashedAt: NULL_FIELD_REF,
          createdAt: NULL_FIELD_REF,
          repo: {
            id: NULL_FIELD_REF,
            name: NULL_FIELD_REF,
            defaultFileKey: NULL_FIELD_REF
          }
        }
      }])
    }]
  }
};
let b9 = {
  args: [],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Workflow
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      inStudentPlan: NULL_FIELD_REF
    }]
  }
};
let ve = {
  args: [],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      inStudentPlusPlan: makeFieldRefOptional()
    }]
  }
};
let vt = {
  args: [],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Scale
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      isMfaRequiredByMembershipOrg: makeFieldRefOptional([{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }]
  }
};
let vi = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Wayfinding
  },
  fields: {
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, {
      key: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      workspaceId: NULL_FIELD_REF,
      computedWorkspace: [{
        userId: createSessionRef('userId')
      }, {
        workspace: {
          name: NULL_FIELD_REF
        }
      }]
    }])
  }
};
let vn = {
  args: [{
    name: 'pinnedFileId',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Wayfinding
  },
  fields: {
    pinnedFile: [{
      id: createViewRef('pinnedFileId'),
      userId: createSessionRef('userId')
    }, {
      resourceId: NULL_FIELD_REF,
      resourceType: NULL_FIELD_REF,
      creator: {
        id: NULL_FIELD_REF
      },
      description: yK.fields,
      file: {
        key: NULL_FIELD_REF,
        parentOrgId: NULL_FIELD_REF,
        teamId: NULL_FIELD_REF,
        folderId: NULL_FIELD_REF,
        fileRepoId: NULL_FIELD_REF,
        editorType: NULL_FIELD_REF
      }
    }]
  }
};
let vr = {
  args: [{
    name: 'currentOrgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      favoritedFiles: [{
        orgId: createViewRef('currentOrgId')
      }, {
        id: NULL_FIELD_REF,
        file: createAliasedFieldRef('readableFile', [{
          userId: createSessionRef('userId')
        }, {
          id: NULL_FIELD_REF,
          key: NULL_FIELD_REF
        }])
      }],
      favoritedPrototypes: [{
        orgId: createViewRef('currentOrgId')
      }, {
        id: NULL_FIELD_REF,
        prototype: createAliasedFieldRef('readablePrototype', [{
          userId: createSessionRef('userId')
        }, {
          id: NULL_FIELD_REF
        }])
      }]
    }]
  }
};
let va = {
  args: [],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Desktop
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      email: NULL_FIELD_REF,
      recentFiles: createAliasedFieldRef('recentFilesLimit15', [{
        userId: createSessionRef('userId')
      }, AY.fields])
    }]
  }
};
let vs = {
  type: _$$Y.CommentMessageMeta,
  fields: {
    t: NULL_FIELD_REF,
    user: {
      id: NULL_FIELD_REF,
      handle: NULL_FIELD_REF,
      imgUrl: NULL_FIELD_REF
    },
    link: NULL_FIELD_REF,
    styles: NULL_FIELD_REF,
    children: {
      children: {
        t: NULL_FIELD_REF,
        user: {
          id: NULL_FIELD_REF,
          handle: NULL_FIELD_REF,
          imgUrl: NULL_FIELD_REF
        },
        link: NULL_FIELD_REF,
        styles: NULL_FIELD_REF
      }
    }
  }
};
let vo = {
  id: NULL_FIELD_REF,
  uuid: NULL_FIELD_REF,
  key: NULL_FIELD_REF,
  orderId: NULL_FIELD_REF,
  parentId: NULL_FIELD_REF,
  createdAt: NULL_FIELD_REF,
  resolvedAt: NULL_FIELD_REF,
  user: {
    id: NULL_FIELD_REF,
    handle: NULL_FIELD_REF,
    imgUrl: NULL_FIELD_REF
  },
  clientMeta: {
    x: NULL_FIELD_REF,
    y: NULL_FIELD_REF,
    nodeId: NULL_FIELD_REF,
    pageId: NULL_FIELD_REF,
    nodeOffset: {
      x: NULL_FIELD_REF,
      y: NULL_FIELD_REF
    },
    inFrame: NULL_FIELD_REF,
    selectionBoxAnchor: {
      x: NULL_FIELD_REF,
      y: NULL_FIELD_REF
    },
    stablePath: NULL_FIELD_REF
  },
  messageMetaStylized: vs.fields,
  commentPin: {
    id: NULL_FIELD_REF
  },
  messageMeta: {
    t: NULL_FIELD_REF,
    user: {
      id: NULL_FIELD_REF,
      handle: NULL_FIELD_REF,
      imgUrl: NULL_FIELD_REF
    }
  }
};
let vl = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('fileKey')
    }, {
      id: NULL_FIELD_REF,
      comments: createAliasedFieldRef('unresolvedComments', vo),
      presenter: {
        id: NULL_FIELD_REF,
        fileKey: NULL_FIELD_REF,
        presenterExists: NULL_FIELD_REF,
        userId: NULL_FIELD_REF,
        handle: NULL_FIELD_REF,
        imageURL: NULL_FIELD_REF,
        color: NULL_FIELD_REF
      }
    }])
  }
};
let vd = {
  args: [{
    name: 'cacheNonce',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      desktopPushNotification: makeFieldRefOptional([{
        cacheNonce: createViewRef('cacheNonce')
      }, {
        id: NULL_FIELD_REF,
        notificationSpaceId: NULL_FIELD_REF,
        openUrl: NULL_FIELD_REF,
        userId: NULL_FIELD_REF,
        notificationId: NULL_FIELD_REF,
        message: {
          title: NULL_FIELD_REF,
          body: NULL_FIELD_REF,
          subtitle: NULL_FIELD_REF,
          thumbnailUrl: NULL_FIELD_REF
        }
      }])
    }]
  }
};
let vc = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Desktop
  },
  fields: {
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, {
      id: NULL_FIELD_REF,
      key: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      signedThumbnailUrl: NULL_FIELD_REF,
      touchedAt: NULL_FIELD_REF,
      checkpointClientMeta: NULL_FIELD_REF,
      thumbnailGuid: NULL_FIELD_REF,
      activeFileUsers: [{}, {
        id: NULL_FIELD_REF,
        handle: NULL_FIELD_REF,
        imageUrl: NULL_FIELD_REF
      }]
    }])
  }
};
let vu = {
  args: [],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    persistentUserNotificationBells: [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      bell: NULL_FIELD_REF,
      fileKeyWithoutBadge: NULL_FIELD_REF,
      notificationSpaceId: NULL_FIELD_REF,
      userId: NULL_FIELD_REF
    }]
  }
};
let vp = {
  args: [{
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Workflow
  },
  fields: {
    team: [{
      id: createViewRef('teamId'),
      userId: createSessionRef('userId')
    }, mergeFieldRefs(yL.fields, {
      gracePeriodEnd: NULL_FIELD_REF,
      canEdit: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF],
      canAdmin: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF],
      allProjects: [{
        userId: createSessionRef('userId')
      }, mergeFieldRefs(yy.fields, {
        canEdit: [{
          userId: createSessionRef('userId')
        }, NULL_FIELD_REF]
      })],
      allActiveProjects: makeFieldRefOptional([{
        userId: createSessionRef('userId')
      }, mergeFieldRefs(yy.fields, {
        canEdit: [{
          userId: createSessionRef('userId')
        }, NULL_FIELD_REF]
      })]),
      currentPlanUser: [{
        userId: createSessionRef('userId')
      }, {
        draftsFolderId: NULL_FIELD_REF
      }],
      currentTeamUser: [{
        userId: createSessionRef('userId')
      }, {
        draftsProject: {
          id: NULL_FIELD_REF,
          canEdit: [{
            userId: createSessionRef('userId')
          }, NULL_FIELD_REF]
        }
      }]
    })]
  }
};
let vm = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'nodeId',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, {
      devModeActivity: [{
        nodeId: createViewRef('nodeId')
      }, {
        id: NULL_FIELD_REF,
        user: {
          id: NULL_FIELD_REF,
          name: NULL_FIELD_REF,
          imgUrl: NULL_FIELD_REF
        },
        activityType: NULL_FIELD_REF,
        timestamp: NULL_FIELD_REF,
        metadata: {
          status: NULL_FIELD_REF,
          description: NULL_FIELD_REF
        },
        version: {
          id: NULL_FIELD_REF,
          description: NULL_FIELD_REF
        }
      }]
    }]))
  }
};
let vh = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    org: [{
      id: createViewRef('orgId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      devModeOptInPlanProperty: {
        id: NULL_FIELD_REF,
        value: NULL_FIELD_REF
      }
    }]
  }
};
let vg = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    org: [{
      id: createViewRef('orgId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      devModeOptInPlanProperty: {
        id: NULL_FIELD_REF,
        value: NULL_FIELD_REF
      },
      devModeAccountTypeRequests: {
        id: NULL_FIELD_REF
      }
    }]
  }
};
let vf = {
  args: [{
    name: 'planId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    devModeSuggestedUpgrades: makeFieldRefOptional([{
      userId: createSessionRef('userId'),
      planType: 'Org',
      planId: createViewRef('planId'),
      limit: null
    }, {
      id: NULL_FIELD_REF,
      lastUsedAt: NULL_FIELD_REF,
      orgUser: createAliasedFieldRef('privilegedOrgUser', {
        user: {
          id: NULL_FIELD_REF,
          name: NULL_FIELD_REF,
          imgUrl: NULL_FIELD_REF,
          profile: {
            jobTitle: NULL_FIELD_REF
          }
        },
        designPaidStatus: NULL_FIELD_REF,
        devModePaidStatus: NULL_FIELD_REF
      })
    }])
  }
};
let v_ = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    currentUser: makeFieldRefOptional([{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      privilegedOrgUser: [{
        orgId: createViewRef('orgId')
      }, {
        id: NULL_FIELD_REF,
        orgUserFlag: [{
          eventType: 'dev_mode_suggested_upgrade_dismissed'
        }, {
          id: NULL_FIELD_REF
        }]
      }]
    }])
  }
};
let vA = {
  args: [{
    name: 'planId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'planType',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.DevTools
  },
  fields: {
    devModeSuggestedUpgrades: makeFieldRefOptional([{
      userId: createSessionRef('userId'),
      planType: createViewRef('planType'),
      planId: createViewRef('planId'),
      limit: 1
    }, {
      id: NULL_FIELD_REF
    }])
  }
};
let vy = {
  args: [{
    name: 'planId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Growth
  },
  fields: {
    devModeSuggestedUpgrades: makeFieldRefOptional([{
      userId: createSessionRef('userId'),
      planType: 'Team',
      planId: createViewRef('planId'),
      limit: null
    }, {
      id: NULL_FIELD_REF,
      lastUsedAt: NULL_FIELD_REF,
      teamUser: {
        user: {
          id: NULL_FIELD_REF,
          name: NULL_FIELD_REF,
          imgUrl: NULL_FIELD_REF,
          profile: {
            jobTitle: NULL_FIELD_REF
          }
        },
        designPaidStatus: NULL_FIELD_REF
      }
    }])
  }
};
let vb = {
  args: [{
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    currentUser: makeFieldRefOptional([{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      teamUser: [{
        teamId: createViewRef('teamId')
      }, {
        id: NULL_FIELD_REF,
        teamUserEvents: [{
          eventType: 'dev_mode_suggested_upgrade_dismissed'
        }, {
          id: NULL_FIELD_REF
        }]
      }]
    }])
  }
};
let vv = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    developerLinks: [{
      key: createViewRef('key')
    }, {
      id: NULL_FIELD_REF,
      key: NULL_FIELD_REF,
      linkName: NULL_FIELD_REF,
      linkUrl: NULL_FIELD_REF
    }]
  }
};
let vI = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, {
      developerRelatedLinks: AF.fields
    }])
  }
};
let vE = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'nodeId',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, {
      developerRelatedLinksForNode: [{
        nodeId: createViewRef('nodeId')
      }, AF.fields]
    }])
  }
};
let vx = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.FigJam
  },
  fields: {
    deviceTryFile: makeFieldRefOptional([{
      fileKey: createViewRef('fileKey')
    }, {
      id: NULL_FIELD_REF,
      fileKey: NULL_FIELD_REF,
      claimedByUserId: NULL_FIELD_REF,
      claimedAt: NULL_FIELD_REF
    }])
  }
};
let vS = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'domainIds',
    type: {
      kind: 'list',
      ofType: {
        kind: 'bigint'
      }
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Scale
  },
  fields: {
    domainOrgAdminsToRemove: makeFieldRefOptional([{
      userId: createSessionRef('userId'),
      orgId: createViewRef('orgId'),
      domainIds: createViewRef('domainIds')
    }, {
      id: NULL_FIELD_REF,
      user: {
        id: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        email: NULL_FIELD_REF
      }
    }])
  }
};
let vw = {
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      draftsFolderId: NULL_FIELD_REF,
      guestBaseOrgUsers: {
        id: NULL_FIELD_REF,
        orgId: NULL_FIELD_REF,
        draftsFolderId: NULL_FIELD_REF
      }
    }]
  }
};
let vC = {
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Workflow
  },
  fields: {
    personalDraftToPlanDraftLocation: makeFieldRefOptional([{
      userId: createSessionRef('userId')
    }, {
      planParentId: NULL_FIELD_REF,
      planParentType: NULL_FIELD_REF,
      status: NULL_FIELD_REF,
      toDraftsFolder: {
        id: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        team: {
          id: NULL_FIELD_REF,
          trackTags: makeFieldRefOptional({
            is_auto_created_for_dtm_migration: NULL_FIELD_REF
          })
        },
        plan: [{
          userId: createSessionRef('userId')
        }, {
          name: NULL_FIELD_REF
        }]
      }
    }])
  }
};
let vT = {
  id: NULL_FIELD_REF,
  createdAt: NULL_FIELD_REF,
  updatedAt: NULL_FIELD_REF,
  level: NULL_FIELD_REF,
  userId: NULL_FIELD_REF,
  teamId: NULL_FIELD_REF,
  pending: NULL_FIELD_REF,
  pendingEmail: NULL_FIELD_REF,
  resourceType: NULL_FIELD_REF,
  resourceId: NULL_FIELD_REF,
  user: {
    id: NULL_FIELD_REF,
    handle: NULL_FIELD_REF,
    imgUrl: NULL_FIELD_REF
  }
};
let vk = {
  args: [{
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    teamUserDescendedRoles: [{
      team_id: createViewRef('teamId'),
      user_id_in_team: createViewRef('userId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      teamId: NULL_FIELD_REF,
      teamUser: {
        id: NULL_FIELD_REF,
        user: {
          id: NULL_FIELD_REF,
          name: NULL_FIELD_REF,
          email: NULL_FIELD_REF,
          handle: NULL_FIELD_REF,
          imgUrl: NULL_FIELD_REF,
          description: NULL_FIELD_REF,
          externalRestrictedOrgId: NULL_FIELD_REF
        },
        teamRole: {
          ...vT
        },
        activeSeatTypeUpgrade: {
          billableProduct: {
            key: NULL_FIELD_REF,
            licenseTypes: NULL_FIELD_REF
          },
          upgradeMethod: NULL_FIELD_REF,
          reason: NULL_FIELD_REF,
          actor: {
            name: NULL_FIELD_REF
          },
          createdAt: NULL_FIELD_REF
        }
      },
      projectEditRoles: {
        ...vT
      },
      fileEditRolesCount: NULL_FIELD_REF
    }]
  }
};
let vR = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Workflow
  },
  fields: {
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, {
      id: NULL_FIELD_REF,
      canEditCanvas: createAliasedFieldRef('canEditCanvasV2', [{
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      }, NULL_FIELD_REF]),
      mustRequestEditorRoleToEdit: [{
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      }, NULL_FIELD_REF],
      fileRoleRequests: {
        id: NULL_FIELD_REF,
        requesterUserId: NULL_FIELD_REF
      },
      currentPlanUser: [{
        userId: createSessionRef('userId')
      }, {
        id: NULL_FIELD_REF,
        permission: NULL_FIELD_REF,
        planKey: {
          type: NULL_FIELD_REF,
          parentId: NULL_FIELD_REF
        },
        userId: NULL_FIELD_REF,
        fromOrgUser: {
          licenseGroupMember: {
            licenseGroupId: NULL_FIELD_REF
          }
        },
        designPaidStatus: NULL_FIELD_REF,
        whiteboardPaidStatus: NULL_FIELD_REF
      }]
    }]),
    orgJoinRequest: [{
      userId: createSessionRef('userId'),
      orgId: createViewRef('orgId')
    }, {
      id: NULL_FIELD_REF
    }]
  }
};
let vN = {
  args: [{
    name: 'pinnedFileId',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Wayfinding
  },
  fields: {
    pinnedFile: [{
      id: createViewRef('pinnedFileId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      resourceId: NULL_FIELD_REF,
      resourceType: NULL_FIELD_REF,
      description: yK.fields,
      file: mergeFieldRefs(AK.fields, {
        id: NULL_FIELD_REF,
        newUserPlaygroundLibrary: NULL_FIELD_REF
      })
    }]
  }
};
let vP = {
  args: [{
    name: '_editorTypeRaw',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Slide
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      email: NULL_FIELD_REF,
      recentFiles2ByEditorType: [{
        userId: createSessionRef('userId'),
        _editorTypeRaw: createViewRef('_editorTypeRaw')
      }, AY.fields]
    }]
  }
};
let vO = {
  args: [{
    name: 'updatedAtTimestamp',
    type: {
      kind: 'datetime'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      eduGracePeriodUpdate: makeFieldRefOptional([{
        updatedAtTimestamp: createViewRef('updatedAtTimestamp')
      }, {
        userId: NULL_FIELD_REF,
        teamId: NULL_FIELD_REF,
        createdAt: NULL_FIELD_REF,
        updatedAt: NULL_FIELD_REF
      }])
    }]
  }
};
let vD = {
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      eduPeriodEnd: NULL_FIELD_REF,
      schoolType: makeFieldRefOptional(NULL_FIELD_REF)
    }]
  }
};
let vL = {
  args: [{
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    team: [{
      id: createViewRef('teamId'),
      userId: createSessionRef('userId')
    }, {
      name: NULL_FIELD_REF,
      studentTeamState: NULL_FIELD_REF,
      canView: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF],
      canEdit: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF],
      isOwner: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF]
    }]
  }
};
let vF = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Scale
  },
  fields: {
    org: [{
      id: createViewRef('orgId'),
      userId: createSessionRef('userId')
    }, {
      workspaces: {
        createdAt: NULL_FIELD_REF
      },
      licenseGroups: {
        id: NULL_FIELD_REF
      }
    }]
  }
};
let vM = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'queryParams',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Scale
  },
  fields: {
    esOrgUsersInfo: makeFieldRefOptional([{
      orgId: createViewRef('orgId'),
      queryParams: createViewRef('queryParams'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF
    }])
  }
};
let vj = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: _$$aG.P2
  },
  fields: {
    orgPublicInfo: [{
      id: createViewRef('orgId')
    }, {
      id: NULL_FIELD_REF,
      expOneClickAskToEditOrgId: makeFieldRefOptional([{}, {
        id: NULL_FIELD_REF,
        treatment: NULL_FIELD_REF
      }])
    }]
  }
};
let vU = {
  args: [{
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: _$$aG.P2,
    team: yQ.Growth
  },
  fields: {
    teamPublicInfo: [{
      id: createViewRef('teamId')
    }, {
      id: NULL_FIELD_REF,
      expOneClickAskToEditTeamIdPublic: makeFieldRefOptional([{}, {
        id: NULL_FIELD_REF,
        treatment: NULL_FIELD_REF
      }])
    }]
  }
};
let vB = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: _$$aG.P2,
    team: yQ.Growth
  },
  fields: {
    org: [{
      id: createViewRef('orgId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      expSocialProofExpansionOrgId: makeFieldRefOptional([{
        userId: createSessionRef('userId')
      }, {
        id: NULL_FIELD_REF,
        enabled: NULL_FIELD_REF
      }])
    }]
  }
};
let vV = {
  args: [{
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: _$$aG.P2
  },
  fields: {
    team: [{
      id: createViewRef('teamId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      expSocialProofExpansionTeamId: makeFieldRefOptional([{
        userId: createSessionRef('userId')
      }, {
        id: NULL_FIELD_REF,
        enabled: NULL_FIELD_REF
      }])
    }]
  }
};
let vG = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'actedOnIdOrKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    org: [{
      id: createViewRef('orgId'),
      userId: createSessionRef('userId')
    }, {
      activityLogByActedOnId: [{
        actedOnIdOrKey: createViewRef('actedOnIdOrKey'),
        userId: createSessionRef('userId')
      }, {
        id: NULL_FIELD_REF,
        actorId: NULL_FIELD_REF,
        actor: {
          name: NULL_FIELD_REF,
          imgUrl: NULL_FIELD_REF,
          email: NULL_FIELD_REF
        },
        teamId: NULL_FIELD_REF,
        createdAt: NULL_FIELD_REF,
        eventName: NULL_FIELD_REF,
        orgId: NULL_FIELD_REF,
        metadata: NULL_FIELD_REF,
        actedOnType: NULL_FIELD_REF,
        actedOnIdOrKey: NULL_FIELD_REF
      }]
    }]
  }
};
let vz = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    org: makeFieldRefOptional([{
      userId: createSessionRef('userId'),
      id: createViewRef('orgId')
    }, {
      pendingPluginRequests: {
        id: NULL_FIELD_REF,
        orgUser: {
          id: NULL_FIELD_REF,
          user: {
            id: NULL_FIELD_REF,
            name: NULL_FIELD_REF,
            handle: NULL_FIELD_REF,
            imgUrl: NULL_FIELD_REF,
            email: NULL_FIELD_REF
          }
        },
        pluginId: NULL_FIELD_REF,
        plugin: {
          id: NULL_FIELD_REF,
          currentPluginVersion: {
            name: NULL_FIELD_REF,
            iconUrl: NULL_FIELD_REF,
            description: NULL_FIELD_REF,
            tagline: NULL_FIELD_REF
          },
          isWidget: NULL_FIELD_REF,
          publishingStatus: NULL_FIELD_REF
        },
        workspaceAllowlistedPlugins: {
          id: NULL_FIELD_REF
        },
        createdAt: NULL_FIELD_REF,
        updatedAt: NULL_FIELD_REF,
        status: NULL_FIELD_REF,
        declineNote: NULL_FIELD_REF,
        requesterNote: NULL_FIELD_REF,
        workspaceId: NULL_FIELD_REF
      }
    }])
  }
};
let vH = {
  args: [],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Search
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      recentFiles: createAliasedFieldRef('recentFilesLimit15', [{
        userId: createSessionRef('userId')
      }, AY.fields])
    }]
  }
};
let vW = {
  args: [{
    name: 'resourceId',
    type: {
      kind: 'string'
    }
  }, {
    name: 'resourceType',
    type: {
      kind: 'enum',
      name: 'FavoritedResourceType'
    }
  }, {
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'teamId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    favoritedResource: [{
      userId: createSessionRef('userId'),
      resourceId: createViewRef('resourceId'),
      resourceType: createViewRef('resourceType')
    }, {
      id: NULL_FIELD_REF,
      favoritedFile: AM.fields,
      favoritedPrototype: AU.fields,
      favoritedProject: Aj.fields,
      favoritedTeam: AB.fields,
      favoritedWorkspace: AV.fields
    }],
    favoritedResources: [{
      userId: createSessionRef('userId'),
      orgId: createViewRef('orgId'),
      teamId: createViewRef('teamId')
    }, {
      numFavorites: NULL_FIELD_REF
    }],
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      baseOrgUser: [{
        orgId: createViewRef('orgId')
      }, {
        fileBrowserPreferences: {
          orderedSidebarSections: NULL_FIELD_REF
        }
      }],
      userSidebarSections: makeFieldRefOptional(createAliasedFieldRef('userSidebarSectionsV2', [{
        orgId: createViewRef('orgId'),
        teamId: createViewRef('teamId')
      }, {
        id: NULL_FIELD_REF,
        createdAt: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        orderedFavoritedResourceIds: NULL_FIELD_REF
      }]))
    }]
  }
};
let vK = {
  type: _$$Y.FeedCommentAttachment,
  fields: {
    id: NULL_FIELD_REF,
    feedCommentId: NULL_FIELD_REF,
    type: NULL_FIELD_REF,
    mediaType: NULL_FIELD_REF,
    altText: NULL_FIELD_REF,
    thumbnailUrl: NULL_FIELD_REF,
    imageUrl: NULL_FIELD_REF,
    createdAt: NULL_FIELD_REF,
    uploadedAt: NULL_FIELD_REF,
    metadata: {
      dimensions: {
        width: NULL_FIELD_REF,
        height: NULL_FIELD_REF
      },
      thumbnail_dimensions: {
        width: NULL_FIELD_REF,
        height: NULL_FIELD_REF
      },
      file_name: NULL_FIELD_REF
    }
  }
};
let vY = {
  type: _$$Y.FeedPost,
  fields: {
    id: NULL_FIELD_REF,
    publicUuid: NULL_FIELD_REF,
    backgroundColor: NULL_FIELD_REF,
    comments: {
      id: NULL_FIELD_REF,
      uuid: NULL_FIELD_REF,
      user: {
        id: NULL_FIELD_REF,
        handle: NULL_FIELD_REF,
        imgUrl: NULL_FIELD_REF
      },
      messageMeta: A9.fields,
      createdAt: NULL_FIELD_REF,
      reactions: {
        id: NULL_FIELD_REF,
        feedResourceType: NULL_FIELD_REF,
        feedResourceId: NULL_FIELD_REF,
        emoji: NULL_FIELD_REF,
        user: {
          id: NULL_FIELD_REF,
          handle: NULL_FIELD_REF,
          imgUrl: NULL_FIELD_REF
        },
        createdAt: NULL_FIELD_REF
      },
      attachments: vK.fields
    },
    content: createAliasedFieldRef('processedContentV2', NULL_FIELD_REF),
    createdAt: NULL_FIELD_REF,
    creator: {
      id: NULL_FIELD_REF,
      handle: NULL_FIELD_REF,
      imgUrl: NULL_FIELD_REF
    },
    descriptionMeta: A9.fields,
    fileKey: NULL_FIELD_REF,
    reactions: {
      id: NULL_FIELD_REF,
      feedResourceType: NULL_FIELD_REF,
      feedResourceId: NULL_FIELD_REF,
      emoji: NULL_FIELD_REF,
      user: {
        id: NULL_FIELD_REF,
        handle: NULL_FIELD_REF,
        imgUrl: NULL_FIELD_REF
      },
      createdAt: NULL_FIELD_REF
    },
    title: NULL_FIELD_REF,
    org: {
      id: NULL_FIELD_REF
    }
  }
};
let vq = {
  args: [{
    name: 'publicUuid',
    type: {
      kind: 'uuid'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Wayfinding
  },
  fields: {
    feedPost: [{
      publicUuid: createViewRef('publicUuid')
    }, mergeFieldRefs(vY.fields, {
      numComments: NULL_FIELD_REF,
      viewCount: NULL_FIELD_REF,
      views: {
        createdAt: NULL_FIELD_REF,
        user: {
          handle: NULL_FIELD_REF,
          id: NULL_FIELD_REF,
          imgUrl: NULL_FIELD_REF
        }
      }
    })]
  }
};
let v$ = {
  args: [{
    name: 'publicUuid',
    type: {
      kind: 'uuid'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    feedPost: [{
      publicUuid: createViewRef('publicUuid')
    }, {
      id: NULL_FIELD_REF,
      publicUuid: NULL_FIELD_REF,
      creatorId: NULL_FIELD_REF,
      orgId: NULL_FIELD_REF,
      content: NULL_FIELD_REF
    }]
  }
};
let vZ = {
  args: [{
    name: 'publicUuid',
    type: {
      kind: 'uuid'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    feedPost: [{
      publicUuid: createViewRef('publicUuid')
    }, mergeFieldRefs(vY.fields, {
      viewCount: NULL_FIELD_REF,
      views: {
        createdAt: NULL_FIELD_REF,
        user: {
          id: NULL_FIELD_REF,
          handle: NULL_FIELD_REF,
          imgUrl: NULL_FIELD_REF
        }
      }
    })]
  }
};
let vX = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, {
      feedPosts: vY.fields
    }])
  }
};
let vQ = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Workflow
  },
  fields: {
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('key')
    }, {
      id: NULL_FIELD_REF,
      key: NULL_FIELD_REF,
      currentPlanUser: [{
        userId: createSessionRef('userId')
      }, {
        type: NULL_FIELD_REF,
        devModeAccountTypeRequest: {
          id: NULL_FIELD_REF,
          status: NULL_FIELD_REF,
          createdAt: NULL_FIELD_REF,
          gracePeriodExpireAt: NULL_FIELD_REF,
          lastNudgedAt: NULL_FIELD_REF,
          requesterDismissedNudgeBadgeAt: NULL_FIELD_REF,
          entryPoint: NULL_FIELD_REF
        },
        designAccountTypeRequest: {
          id: NULL_FIELD_REF,
          status: NULL_FIELD_REF,
          createdAt: NULL_FIELD_REF,
          gracePeriodExpireAt: NULL_FIELD_REF,
          lastNudgedAt: NULL_FIELD_REF,
          requesterDismissedNudgeBadgeAt: NULL_FIELD_REF,
          entryPoint: NULL_FIELD_REF
        }
      }],
      currentBaseOrgUser: [{
        userId: createSessionRef('userId')
      }, {
        devModeAccountTypeRequest: {
          id: NULL_FIELD_REF,
          status: NULL_FIELD_REF,
          createdAt: NULL_FIELD_REF,
          gracePeriodExpireAt: NULL_FIELD_REF,
          lastNudgedAt: NULL_FIELD_REF,
          requesterDismissedNudgeBadgeAt: NULL_FIELD_REF,
          entryPoint: NULL_FIELD_REF
        }
      }],
      currentTeamUser: [{
        userId: createSessionRef('userId')
      }, {
        designAccountTypeRequest: {
          id: NULL_FIELD_REF,
          status: NULL_FIELD_REF,
          createdAt: NULL_FIELD_REF,
          gracePeriodExpireAt: NULL_FIELD_REF,
          lastNudgedAt: NULL_FIELD_REF,
          requesterDismissedNudgeBadgeAt: NULL_FIELD_REF,
          entryPoint: NULL_FIELD_REF
        },
        devModeAccountTypeRequest: {
          createdAt: NULL_FIELD_REF
        }
      }]
    }])
  }
};
let vJ = {
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Workflow
  },
  fields: {
    currentUser: makeFieldRefOptional([{
      userId: createSessionRef('userId')
    }, {
      fileShareBroadcasts: {
        fromUser: {
          id: NULL_FIELD_REF,
          name: NULL_FIELD_REF
        },
        status: NULL_FIELD_REF,
        broadcastedAt: NULL_FIELD_REF,
        fileKey: NULL_FIELD_REF,
        broadcastType: NULL_FIELD_REF,
        metadata: NULL_FIELD_REF,
        file: {
          name: NULL_FIELD_REF,
          key: NULL_FIELD_REF,
          editorType: NULL_FIELD_REF,
          checkpointClientMeta: NULL_FIELD_REF,
          signedThumbnailUrl: NULL_FIELD_REF,
          thumbnailUrlOverride: NULL_FIELD_REF,
          thumbnailGuid: NULL_FIELD_REF,
          hasFileLinkPassword: NULL_FIELD_REF,
          linkAccess: NULL_FIELD_REF
        }
      }
    }])
  }
};
let v0 = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, {
      name: NULL_FIELD_REF,
      key: NULL_FIELD_REF,
      editorType: NULL_FIELD_REF,
      checkpointClientMeta: NULL_FIELD_REF,
      signedThumbnailUrl: NULL_FIELD_REF,
      thumbnailUrlOverride: NULL_FIELD_REF,
      thumbnailGuid: NULL_FIELD_REF,
      hasFileLinkPassword: NULL_FIELD_REF,
      linkAccess: NULL_FIELD_REF
    }])
  }
};
let v1 = {
  args: [{
    name: 'currentOrgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'currentTeamId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      baseOrgUser: [{
        orgId: createViewRef('currentOrgId')
      }, {
        draftsProject: {
          id: NULL_FIELD_REF
        }
      }],
      currentTeamUser: [{
        teamId: createViewRef('currentTeamId')
      }, {
        draftsProject: {
          id: NULL_FIELD_REF
        }
      }]
    }]
  }
};
let v2 = {
  args: [{
    name: 'currentOrgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      baseOrgUser: [{
        orgId: createViewRef('currentOrgId')
      }, {
        fileBrowserPreferences: {
          migratedToSections: NULL_FIELD_REF,
          sidebarMigrationStatus: NULL_FIELD_REF
        }
      }]
    }]
  }
};
let v5 = {
  args: [{
    name: 'projectId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Wayfinding
  },
  fields: {
    project: [{
      id: createViewRef('projectId'),
      userId: createSessionRef('userId')
    }, {
      name: NULL_FIELD_REF
    }]
  }
};
let v4 = {
  args: [{
    name: '_editorTypeRaw',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.Wayfinding
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      email: NULL_FIELD_REF,
      recentFiles2ByEditorType: [{
        userId: createSessionRef('userId'),
        _editorTypeRaw: createViewRef('_editorTypeRaw')
      }, AY.fields]
    }]
  }
};
let v3 = {
  args: [],
  props: {
    priority: PriorityLevels.P0,
    cuf: FileOperationTypes.FileBrowser,
    team: yQ.Wayfinding
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      email: NULL_FIELD_REF,
      recentFiles2: [{
        userId: createSessionRef('userId')
      }, AY.fields]
    }]
  }
};
let v6 = {
  args: [{
    name: 'currentOrgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      recentSearches: [{
        orgId: createViewRef('currentOrgId')
      }, {
        searches: {
          query: NULL_FIELD_REF,
          timestamp: NULL_FIELD_REF
        }
      }]
    }]
  }
};
let v7 = {
  args: [{
    name: 'currentOrgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'currentTeamId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.Wayfinding
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      fileBrowserPreferences: {
        id: NULL_FIELD_REF,
        migratedToSections: NULL_FIELD_REF,
        orderedTeamIds: NULL_FIELD_REF,
        orderedFavoritedResourceIds: NULL_FIELD_REF,
        orderedLicenseGroupIds: NULL_FIELD_REF,
        orderedSidebarSections: NULL_FIELD_REF
      },
      fileBrowserSectionPreferences: {
        id: NULL_FIELD_REF,
        sectionType: NULL_FIELD_REF,
        teamId: NULL_FIELD_REF,
        orderedFolderIds: NULL_FIELD_REF
      },
      baseOrgUser: [{
        orgId: createViewRef('currentOrgId')
      }, {
        draftsProject: yk.fields,
        fileBrowserPreferences: {
          id: NULL_FIELD_REF,
          orgId: NULL_FIELD_REF,
          migratedToSections: NULL_FIELD_REF,
          sidebarMigrationStatus: NULL_FIELD_REF,
          orderedTeamIds: NULL_FIELD_REF,
          orderedFavoritedResourceIds: NULL_FIELD_REF,
          orderedLicenseGroupIds: NULL_FIELD_REF,
          orderedSidebarSections: NULL_FIELD_REF
        },
        fileBrowserSectionPreferences: {
          id: NULL_FIELD_REF,
          orgId: NULL_FIELD_REF,
          sectionType: NULL_FIELD_REF,
          teamId: NULL_FIELD_REF,
          orderedFolderIds: NULL_FIELD_REF
        },
        workspaceUsers: yq.fields,
        permission: NULL_FIELD_REF
      }],
      currentTeamUser: [{
        teamId: createViewRef('currentTeamId')
      }, {
        draftsProject: yk.fields,
        favoritedFiles: AM.fields,
        favoritedPrototypes: AU.fields,
        favoritedProjects: Aj.fields,
        planlessFavoritedFiles: AM.fields,
        planlessFavoritedPrototypes: AU.fields,
        planlessFavoritedProjects: Aj.fields,
        fileBrowserPreferences: {
          id: NULL_FIELD_REF,
          teamId: NULL_FIELD_REF,
          migratedToSections: NULL_FIELD_REF,
          sidebarMigrationStatus: NULL_FIELD_REF,
          orderedFavoritedResourceIds: NULL_FIELD_REF,
          orderedSidebarSections: NULL_FIELD_REF,
          orderedLicenseGroupIds: NULL_FIELD_REF,
          orderedTeamIds: NULL_FIELD_REF
        }
      }],
      favoritedFiles: [{
        orgId: createViewRef('currentOrgId')
      }, AM.fields],
      favoritedPrototypes: [{
        orgId: createViewRef('currentOrgId')
      }, AU.fields],
      favoritedProjects: [{
        orgId: createViewRef('currentOrgId')
      }, Aj.fields],
      favoritedTeams: [{
        orgId: createViewRef('currentOrgId')
      }, AB.fields],
      favoritedWorkspaces: [{
        orgId: createViewRef('currentOrgId')
      }, AV.fields],
      userSidebarSections: makeFieldRefOptional(createAliasedFieldRef('userSidebarSectionsV2', [{
        orgId: createViewRef('currentOrgId'),
        teamId: createViewRef('currentTeamId')
      }, {
        id: NULL_FIELD_REF,
        createdAt: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        orderedFavoritedResourceIds: NULL_FIELD_REF
      }]))
    }],
    org: [{
      id: createViewRef('currentOrgId'),
      userId: createSessionRef('userId')
    }, {
      workspaces: {
        id: NULL_FIELD_REF
      },
      hasWorkspaces: makeFieldRefOptional(),
      bigmaEnabledAt: NULL_FIELD_REF
    }]
  }
};
let v8 = {
  args: [{
    name: 'workspaceId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'firstPageSize',
    type: {
      kind: 'int'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    workspace: [{
      id: createViewRef('workspaceId'),
      userId: createSessionRef('userId')
    }, {
      activeTeams: [{
        userId: createSessionRef('userId'),
        firstPageSize: createViewRef('firstPageSize')
      }, {
        memberCount: NULL_FIELD_REF,
        team: A$.fields
      }]
    }]
  }
};
let v9 = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, {
      id: NULL_FIELD_REF,
      key: NULL_FIELD_REF,
      libraryKey: NULL_FIELD_REF,
      canEdit: createAliasedFieldRef('canEditV3', [{
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      }, NULL_FIELD_REF]),
      canRead: createAliasedFieldRef('canReadV3', [{
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      }, NULL_FIELD_REF]),
      canViewPrototype: createAliasedFieldRef('canViewPrototypeV3', [{
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      }, NULL_FIELD_REF]),
      hasViewPrototypeRole: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF],
      hasEditRole: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF],
      project: [{
        userId: createSessionRef('userId')
      }, {
        id: NULL_FIELD_REF,
        path: NULL_FIELD_REF
      }],
      teamId: NULL_FIELD_REF,
      sourceFileKey: NULL_FIELD_REF,
      editorType: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      isTeamTemplate: NULL_FIELD_REF,
      folderId: NULL_FIELD_REF,
      parentOrgId: NULL_FIELD_REF,
      thumbnailGuid: NULL_FIELD_REF,
      thumbnailUrl: createAliasedFieldRef('signedThumbnailUrl', NULL_FIELD_REF),
      thumbnailUrlOverride: NULL_FIELD_REF
    }])
  }
};
let Ie = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: createAliasedFieldRef('_fileViewableByPrototypeViewers', [{
      key: createViewRef('fileKey'),
      userId: createSessionRef('userId')
    }, Az.fields])
  }
};
let It = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, {
      thumbnailUrl: createAliasedFieldRef('signedThumbnailUrl', NULL_FIELD_REF)
    }])
  }
};
let Ii = {
  id: NULL_FIELD_REF,
  userId: NULL_FIELD_REF,
  fileKey: NULL_FIELD_REF,
  createdAt: NULL_FIELD_REF,
  allReadAt: NULL_FIELD_REF,
  readCanvasMentions: NULL_FIELD_REF,
  unreadCanvasMentions: NULL_FIELD_REF
};
let In = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.FigJam
  },
  fields: {
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, {
      fileCanvasMentions: [{
        userId: createSessionRef('userId')
      }, {
        id: NULL_FIELD_REF,
        fileKey: NULL_FIELD_REF,
        mentionedByUser: {
          id: NULL_FIELD_REF,
          handle: NULL_FIELD_REF,
          imgUrl: NULL_FIELD_REF
        },
        lastEditedByUser: {
          id: NULL_FIELD_REF,
          handle: NULL_FIELD_REF,
          imgUrl: NULL_FIELD_REF
        },
        messageMeta: A9.fields,
        createdAt: NULL_FIELD_REF,
        editedAt: NULL_FIELD_REF,
        thumbnailUrl: NULL_FIELD_REF,
        nodeIdPath: NULL_FIELD_REF,
        pageId: makeFieldRefOptional(NULL_FIELD_REF)
      }],
      currentUserFileCanvasMentionReadStatus: [{
        userId: createSessionRef('userId')
      }, Ii]
    }])
  }
};
let Ir = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Monetization
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      teamEditRoles: {
        id: NULL_FIELD_REF,
        pending: NULL_FIELD_REF,
        team: {
          id: NULL_FIELD_REF,
          orgId: NULL_FIELD_REF,
          name: NULL_FIELD_REF,
          updatedAt: NULL_FIELD_REF,
          restrictionsList: NULL_FIELD_REF,
          subscription: NULL_FIELD_REF,
          isStarterTeam: NULL_FIELD_REF,
          gracePeriodEnd: NULL_FIELD_REF,
          projects: mergeFieldRefs({
            id: NULL_FIELD_REF,
            path: NULL_FIELD_REF,
            teamId: NULL_FIELD_REF,
            inviteOnlyAt: NULL_FIELD_REF,
            viewOnlyAt: NULL_FIELD_REF,
            updatedAt: NULL_FIELD_REF
          }, yA.fields),
          studentTeamAt: NULL_FIELD_REF,
          deletedAt: NULL_FIELD_REF
        }
      }
    }]
  }
};
let Ia = {
  args: [{
    name: 'projectId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P0,
    cuf: FileOperationTypes.CreateFile
  },
  fields: {
    project: [{
      id: createViewRef('projectId'),
      userId: createSessionRef('userId')
    }, yA.fields]
  }
};
let Is = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.Workflow
  },
  fields: {
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, {
      id: NULL_FIELD_REF,
      key: NULL_FIELD_REF,
      fileRoleRequests: {
        id: NULL_FIELD_REF
      }
    }])
  }
};
let Io = {
  args: [{
    name: 'figFileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    figFileLinkExpirationConfig: [{
      figFileKey: createViewRef('figFileKey')
    }, {
      id: NULL_FIELD_REF,
      expiresAt: NULL_FIELD_REF,
      accessReverted: NULL_FIELD_REF
    }],
    file: createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('figFileKey')
    }, {
      id: NULL_FIELD_REF,
      key: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      hasViewPrototypeRole: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF]
    }])
  }
};
let Il = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, {
      orgPublicInfo: {
        cursorChatDisabledAt: NULL_FIELD_REF
      }
    }])
  }
};
let Id = {
  args: [{
    name: 'projectId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: [{
      id: createViewRef('projectId'),
      userId: createSessionRef('userId')
    }, mergeFieldRefs({
      id: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      path: NULL_FIELD_REF,
      teamId: NULL_FIELD_REF,
      team: {
        id: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        restrictionsList: NULL_FIELD_REF,
        studentTeamAt: NULL_FIELD_REF,
        gracePeriodEnd: NULL_FIELD_REF,
        subscription: NULL_FIELD_REF
      },
      org: {
        isFigJamDisabled: NULL_FIELD_REF,
        isOrgUserExternallyRestricted: [{
          userId: createSessionRef('userId')
        }, NULL_FIELD_REF]
      }
    }, yA.fields)]
  }
};
let Ic = {
  args: [{
    name: 'projectId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Wayfinding
  },
  fields: {
    project: makeFieldRefOptional([{
      id: createViewRef('projectId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      undeletedFiles: {
        id: NULL_FIELD_REF,
        key: NULL_FIELD_REF,
        fileRepoId: NULL_FIELD_REF,
        trackTags: {
          isTemplate: NULL_FIELD_REF
        }
      }
    }])
  }
};
let Iu = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Wayfinding
  },
  fields: {
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, {
      lastPublishedAt: NULL_FIELD_REF
    }])
  }
};
let Ip = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, {
      canDelete: createAliasedFieldRef('canDeleteV2', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF]),
      canTrash: createAliasedFieldRef('canTrashV3', [{
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      }, NULL_FIELD_REF]),
      canMove: [{
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      }, NULL_FIELD_REF],
      canMoveWithReasons: [{
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }],
      editorType: NULL_FIELD_REF,
      currentPlanUser: [{
        userId: createSessionRef('userId')
      }, yp.fields],
      isDraftFile: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF]
    }])
  }
};
let Im = {
  id: NULL_FIELD_REF,
  key: NULL_FIELD_REF,
  fileRepoId: NULL_FIELD_REF,
  branchFileKey: NULL_FIELD_REF,
  reviewNumber: NULL_FIELD_REF,
  title: NULL_FIELD_REF,
  description: NULL_FIELD_REF,
  fileMergeId: NULL_FIELD_REF,
  closedAt: NULL_FIELD_REF,
  requestedAt: NULL_FIELD_REF,
  createdAt: NULL_FIELD_REF,
  owner: {
    id: NULL_FIELD_REF,
    handle: NULL_FIELD_REF,
    imgUrl: NULL_FIELD_REF
  },
  reviewers: {
    id: NULL_FIELD_REF,
    approvedAt: NULL_FIELD_REF,
    changesRequestedAt: NULL_FIELD_REF,
    notes: NULL_FIELD_REF,
    userId: NULL_FIELD_REF,
    user: {
      id: NULL_FIELD_REF,
      handle: NULL_FIELD_REF,
      imgUrl: NULL_FIELD_REF
    }
  }
};
let Ih = {
  args: [{
    name: 'branchFileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('branchFileKey')
    }, {
      name: NULL_FIELD_REF,
      trashedAt: NULL_FIELD_REF,
      sourceFile: {
        name: NULL_FIELD_REF
      },
      fileMerges: {
        direction: NULL_FIELD_REF,
        mergeResultCheckpointId: NULL_FIELD_REF,
        updatedAt: NULL_FIELD_REF,
        mergeRequest: Im
      },
      openMergeRequest: {
        id: NULL_FIELD_REF,
        mergeRequest: Im
      },
      project: [{
        userId: createSessionRef('userId')
      }, yA.fields]
    }])
  }
};
let Ig = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, {
      key: NULL_FIELD_REF,
      id: NULL_FIELD_REF,
      teamId: NULL_FIELD_REF,
      parentOrgId: NULL_FIELD_REF,
      editorType: NULL_FIELD_REF,
      project: [{
        userId: createSessionRef('userId')
      }, mergeFieldRefs({
        id: NULL_FIELD_REF,
        canRead: [{
          userId: createSessionRef('userId')
        }, NULL_FIELD_REF],
        canEdit: [{
          userId: createSessionRef('userId')
        }, NULL_FIELD_REF]
      }, yA.fields)]
    }])
  }
};
let If = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Extensibility
  },
  fields: {
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, {
      id: NULL_FIELD_REF,
      key: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      workspaceId: NULL_FIELD_REF,
      org: createAliasedFieldRef('_orgForLegacyViews', {
        id: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        widgetsWhitelistEnforced: NULL_FIELD_REF,
        pluginsWhitelistEnforced: NULL_FIELD_REF,
        publicPluginsAllowed: NULL_FIELD_REF,
        allowlistedPlugins: createAliasedFieldRef('whitelistedPlugins', {
          id: NULL_FIELD_REF,
          pluginId: NULL_FIELD_REF,
          plugin: {
            id: NULL_FIELD_REF,
            currentPluginVersion: {
              iconUrl: NULL_FIELD_REF,
              name: NULL_FIELD_REF,
              description: NULL_FIELD_REF,
              tagline: NULL_FIELD_REF
            },
            isWidget: NULL_FIELD_REF
          },
          createdAt: NULL_FIELD_REF,
          allowlistGroupType: NULL_FIELD_REF,
          allowlistedOrg: createAliasedFieldRef('allowlistedOrgV2', {
            id: NULL_FIELD_REF,
            name: NULL_FIELD_REF
          }),
          allowlistedWorkspace: createAliasedFieldRef('allowlistedWorkspacePublicInfo', {
            id: NULL_FIELD_REF
          })
        })
      })
    }])
  }
};
let I_ = {
  userId: NULL_FIELD_REF,
  level: NULL_FIELD_REF,
  pending: NULL_FIELD_REF,
  pendingEmail: NULL_FIELD_REF,
  invite: {
    id: NULL_FIELD_REF,
    redeemedBy: NULL_FIELD_REF,
    billableProductKey: NULL_FIELD_REF,
    inviteeUserId: NULL_FIELD_REF
  },
  user: {
    id: NULL_FIELD_REF,
    imgUrl: NULL_FIELD_REF,
    name: NULL_FIELD_REF,
    email: NULL_FIELD_REF,
    handle: NULL_FIELD_REF
  }
};
let IA = {
  id: NULL_FIELD_REF,
  pending: NULL_FIELD_REF,
  pendingEmail: NULL_FIELD_REF,
  level: NULL_FIELD_REF,
  updatedAt: NULL_FIELD_REF,
  createdAt: NULL_FIELD_REF,
  resourceId: NULL_FIELD_REF,
  resourceType: NULL_FIELD_REF,
  userId: NULL_FIELD_REF,
  invite: {
    id: NULL_FIELD_REF,
    redeemedBy: NULL_FIELD_REF,
    billableProductKey: NULL_FIELD_REF,
    inviteeUserId: NULL_FIELD_REF
  },
  user: {
    id: NULL_FIELD_REF,
    handle: NULL_FIELD_REF,
    imgUrl: NULL_FIELD_REF,
    name: NULL_FIELD_REF,
    orgUser: [{
      orgId: createViewRef('currentOrgId')
    }, {
      id: NULL_FIELD_REF,
      userId: NULL_FIELD_REF,
      accountType: NULL_FIELD_REF,
      permission: NULL_FIELD_REF,
      whiteboardPaidStatus: NULL_FIELD_REF,
      updatedAt: NULL_FIELD_REF
    }],
    guestOrgUser: [{
      orgId: createViewRef('currentOrgId')
    }, {
      id: NULL_FIELD_REF,
      userId: NULL_FIELD_REF,
      accountType: NULL_FIELD_REF,
      permission: NULL_FIELD_REF,
      whiteboardPaidStatus: NULL_FIELD_REF,
      updatedAt: NULL_FIELD_REF
    }],
    teamUser: [{
      teamId: createViewRef('teamId')
    }, {
      id: NULL_FIELD_REF,
      userId: NULL_FIELD_REF,
      teamId: NULL_FIELD_REF,
      designPaidStatus: NULL_FIELD_REF,
      whiteboardPaidStatus: NULL_FIELD_REF
    }]
  }
};
let Iy = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'projectId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'teamId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'repoId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'currentOrgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.Workflow
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      allOrgUsers: {
        orgId: NULL_FIELD_REF,
        org: {
          id: NULL_FIELD_REF
        }
      }
    }],
    org: [{
      userId: createSessionRef('userId'),
      id: createViewRef('currentOrgId')
    }, {
      id: NULL_FIELD_REF,
      domainCapture: NULL_FIELD_REF,
      inviteWhitelist: {
        guestInviteSetting: NULL_FIELD_REF
      }
    }],
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, {
      canEdit: createAliasedFieldRef('canEditV3', [{
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      }, NULL_FIELD_REF]),
      canRead: createAliasedFieldRef('canReadV3', [{
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      }, NULL_FIELD_REF]),
      canView: createAliasedFieldRef('canViewV3', [{
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      }, NULL_FIELD_REF]),
      canViewPrototype: createAliasedFieldRef('canViewPrototypeV3', [{
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      }, NULL_FIELD_REF]),
      hasViewPrototypeRole: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF],
      hasEditRole: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF],
      clientMeta: NULL_FIELD_REF,
      createdAt: NULL_FIELD_REF,
      creator: {
        id: NULL_FIELD_REF
      },
      deletedAt: NULL_FIELD_REF,
      description: NULL_FIELD_REF,
      editorType: NULL_FIELD_REF,
      fileRepoId: NULL_FIELD_REF,
      folderId: NULL_FIELD_REF,
      key: NULL_FIELD_REF,
      license: NULL_FIELD_REF,
      linkAccess: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      org: createAliasedFieldRef('_orgForLegacyViews', {
        id: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        domainCapture: NULL_FIELD_REF,
        workshopDisabledAt: NULL_FIELD_REF,
        inviteWhitelist: {
          guestInviteSetting: NULL_FIELD_REF
        },
        currentPlanUser: [{
          userId: createSessionRef('userId')
        }, {
          id: NULL_FIELD_REF,
          permission: NULL_FIELD_REF,
          fromOrgUser: {
            licenseGroupMember: {
              licenseGroupId: NULL_FIELD_REF
            }
          }
        }],
        currentOrgUser: [{
          userId: createSessionRef('userId')
        }, {
          id: NULL_FIELD_REF,
          permission: NULL_FIELD_REF,
          licenseGroupMember: {
            licenseGroupId: NULL_FIELD_REF
          }
        }],
        sharedOrgLicenseGroupSetting: {
          externalCollaborationControls: NULL_FIELD_REF,
          publicLinkControlsSetting: NULL_FIELD_REF,
          publicLinkControlsMaxExpiration: NULL_FIELD_REF
        },
        orgSharedSetting: {
          externalCollaborationControls: NULL_FIELD_REF,
          publicLinkControlsSetting: NULL_FIELD_REF,
          publicLinkControlsMaxExpiration: NULL_FIELD_REF
        }
      }),
      orgAudience: NULL_FIELD_REF,
      orgBrowsable: NULL_FIELD_REF,
      parentOrgId: NULL_FIELD_REF,
      project: [{
        userId: createSessionRef('userId')
      }, {
        id: NULL_FIELD_REF,
        path: NULL_FIELD_REF,
        teamId: NULL_FIELD_REF,
        viewOnlyAt: NULL_FIELD_REF,
        inviteOnlyAt: NULL_FIELD_REF,
        orgDraftsFolderOwner: {
          id: NULL_FIELD_REF,
          accountType: NULL_FIELD_REF,
          whiteboardPaidStatus: NULL_FIELD_REF,
          userId: NULL_FIELD_REF,
          user: {
            id: NULL_FIELD_REF,
            handle: NULL_FIELD_REF,
            imgUrl: NULL_FIELD_REF,
            name: NULL_FIELD_REF
          }
        }
      }],
      repo: {
        id: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        teamId: NULL_FIELD_REF,
        folderId: NULL_FIELD_REF,
        defaultFileKey: NULL_FIELD_REF,
        updatedAt: NULL_FIELD_REF,
        createdAt: NULL_FIELD_REF,
        deletedAt: NULL_FIELD_REF,
        trashedAt: NULL_FIELD_REF,
        linkAccess: NULL_FIELD_REF,
        roles: IA,
        protoLinkAccess: NULL_FIELD_REF,
        orgBrowsable: NULL_FIELD_REF,
        orgAudience: NULL_FIELD_REF,
        parentOrgId: NULL_FIELD_REF,
        canEdit: createAliasedFieldRef('canEditV3', [{
          userId: createSessionRef('userId'),
          sessionId: createSessionRef('sessionId'),
          anonymousUserId: createSessionRef('anonymousUserId')
        }, NULL_FIELD_REF]),
        roleOnObjectForUser: [{
          userId: createSessionRef('userId')
        }, {
          id: NULL_FIELD_REF,
          isOwnerOfResource: NULL_FIELD_REF
        }]
      },
      roles: IA,
      fileRoleRequests: AH.fields,
      fileSeenStates: AW.fields,
      protoLinkAccess: NULL_FIELD_REF,
      roleOnObjectForUser: [{
        userId: createSessionRef('userId')
      }, {
        id: NULL_FIELD_REF,
        isOwnerOfResource: NULL_FIELD_REF
      }],
      sourceFileKey: NULL_FIELD_REF,
      teamId: NULL_FIELD_REF,
      team: createAliasedFieldRef('_teamForLegacyViews', {
        id: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        studentTeamAt: NULL_FIELD_REF,
        subscription: NULL_FIELD_REF,
        trialPeriodEnd: NULL_FIELD_REF,
        gracePeriodEnd: NULL_FIELD_REF,
        canRead: [{
          userId: createSessionRef('userId')
        }, NULL_FIELD_REF]
      }),
      thumbnailGuid: NULL_FIELD_REF,
      thumbnailUrl: createAliasedFieldRef('signedThumbnailUrl', NULL_FIELD_REF),
      thumbnailUrlOverride: NULL_FIELD_REF,
      trashedAt: NULL_FIELD_REF,
      trashedUser: {
        id: NULL_FIELD_REF,
        handle: NULL_FIELD_REF
      },
      trackTags: {
        isTemplate: NULL_FIELD_REF,
        starterLibrarySrcFileKey: NULL_FIELD_REF
      },
      updatedAt: NULL_FIELD_REF,
      viewerExportRestrictedAt: NULL_FIELD_REF
    }])
  }
};
let Ib = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'linkAccessOverrideKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P3,
    team: yQ.Workflow
  },
  fields: {
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, {
      canEditFromPolicies: createAliasedFieldRef('canEditV3FromPolicies', [{
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        linkAccessOverrideKey: createViewRef('linkAccessOverrideKey')
      }, NULL_FIELD_REF]),
      canAccessFromPolicies: createAliasedFieldRef('canAccessFromPolicies', [{
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        linkAccessOverrideKey: createViewRef('linkAccessOverrideKey')
      }, NULL_FIELD_REF])
    }])
  }
};
let Iv = {
  id: NULL_FIELD_REF,
  setByUser: {
    id: NULL_FIELD_REF,
    handle: NULL_FIELD_REF,
    imgUrl: NULL_FIELD_REF,
    name: NULL_FIELD_REF
  },
  expiresAt: NULL_FIELD_REF,
  prevPrivateLinkAccess: NULL_FIELD_REF,
  prevPrivateProtoLinkAccess: NULL_FIELD_REF,
  prevOrgBrowsable: NULL_FIELD_REF,
  accessReverted: NULL_FIELD_REF
};
let II = {
  id: NULL_FIELD_REF,
  domainCapture: NULL_FIELD_REF,
  inviteWhitelist: {
    guestInviteSetting: NULL_FIELD_REF
  },
  figjamDisabledAt: NULL_FIELD_REF,
  sharedOrgLicenseGroupSetting: {
    externalCollaborationControls: NULL_FIELD_REF,
    autogenPasswordControls: NULL_FIELD_REF,
    publicLinkControlsSetting: NULL_FIELD_REF,
    publicLinkControlsMaxExpiration: NULL_FIELD_REF,
    fileExportSetting: NULL_FIELD_REF
  },
  orgSharedSetting: {
    externalCollaborationControls: NULL_FIELD_REF,
    autogenPasswordControls: NULL_FIELD_REF,
    publicLinkControlsSetting: NULL_FIELD_REF,
    publicLinkControlsMaxExpiration: NULL_FIELD_REF,
    fileExportSetting: NULL_FIELD_REF
  },
  bigmaEnabledAt: NULL_FIELD_REF,
  k12GoogleOrg: NULL_FIELD_REF
};
let IE = {
  mustUpgradeToShareDraft: [{
    userId: createSessionRef('userId')
  }, NULL_FIELD_REF],
  clientMeta: NULL_FIELD_REF,
  createdAt: NULL_FIELD_REF,
  creator: {
    id: NULL_FIELD_REF
  },
  deletedAt: NULL_FIELD_REF,
  description: NULL_FIELD_REF,
  editorType: NULL_FIELD_REF,
  fileRepoId: NULL_FIELD_REF,
  folderId: NULL_FIELD_REF,
  folderAccessEnabled: NULL_FIELD_REF,
  publishedHubFile: {
    id: NULL_FIELD_REF,
    unpublishedAt: NULL_FIELD_REF
  },
  isTryFile: NULL_FIELD_REF,
  key: NULL_FIELD_REF,
  license: NULL_FIELD_REF,
  linkAccess: NULL_FIELD_REF,
  name: NULL_FIELD_REF,
  activeProjectResourceConnections: {
    hostPlanName: NULL_FIELD_REF,
    connectedPlanName: NULL_FIELD_REF
  },
  isDraftFile: [{
    userId: createSessionRef('userId')
  }, NULL_FIELD_REF],
  isAbandonedDraftFile: [{
    userId: createSessionRef('userId')
  }, NULL_FIELD_REF],
  org: createAliasedFieldRef('_orgForLegacyViews', {
    id: NULL_FIELD_REF,
    name: NULL_FIELD_REF,
    imgUrl: createAliasedFieldRef('imgUrlTransformed', NULL_FIELD_REF),
    domainCapture: NULL_FIELD_REF,
    workshopDisabledAt: NULL_FIELD_REF,
    figjamDisabledAt: NULL_FIELD_REF,
    inviteWhitelist: {
      guestInviteSetting: NULL_FIELD_REF
    },
    sharedOrgLicenseGroupSetting: {
      externalCollaborationControls: NULL_FIELD_REF,
      autogenPasswordControls: NULL_FIELD_REF,
      publicLinkControlsSetting: NULL_FIELD_REF,
      publicLinkControlsMaxExpiration: NULL_FIELD_REF,
      fileExportSetting: NULL_FIELD_REF
    },
    orgSharedSetting: {
      externalCollaborationControls: NULL_FIELD_REF,
      autogenPasswordControls: NULL_FIELD_REF,
      publicLinkControlsSetting: NULL_FIELD_REF,
      publicLinkControlsMaxExpiration: NULL_FIELD_REF,
      fileExportSetting: NULL_FIELD_REF
    },
    currentPlanUser: [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      permission: NULL_FIELD_REF,
      fromOrgUser: {
        licenseGroupMember: {
          licenseGroupId: NULL_FIELD_REF
        }
      },
      designPaidStatus: NULL_FIELD_REF,
      whiteboardPaidStatus: NULL_FIELD_REF
    }],
    currentPrivilegedOrgUser: [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      permission: NULL_FIELD_REF,
      licenseGroupMember: {
        licenseGroupId: NULL_FIELD_REF
      }
    }],
    currentBaseOrgUser: [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      permission: NULL_FIELD_REF,
      licenseGroupMember: {
        licenseGroupId: NULL_FIELD_REF
      },
      designPaidStatus: NULL_FIELD_REF,
      whiteboardPaidStatus: NULL_FIELD_REF,
      updatedAt: NULL_FIELD_REF
    }],
    orgDomains: {
      id: NULL_FIELD_REF,
      domain: NULL_FIELD_REF,
      orgId: NULL_FIELD_REF,
      createdAt: NULL_FIELD_REF,
      googleSsoOnlyAt: NULL_FIELD_REF,
      samlSsoOnlyAt: NULL_FIELD_REF
    },
    bigmaEnabledAt: NULL_FIELD_REF,
    k12GoogleOrg: NULL_FIELD_REF
  }),
  orgAudience: NULL_FIELD_REF,
  orgBrowsable: NULL_FIELD_REF,
  parentOrgId: NULL_FIELD_REF,
  project: [{
    userId: createSessionRef('userId')
  }, {
    id: NULL_FIELD_REF,
    path: NULL_FIELD_REF,
    teamId: NULL_FIELD_REF,
    viewOnlyAt: NULL_FIELD_REF,
    inviteOnlyAt: NULL_FIELD_REF,
    orgDraftsFolderOwnerBaseOrgUser: {
      id: NULL_FIELD_REF,
      accountType: NULL_FIELD_REF,
      whiteboardPaidStatus: NULL_FIELD_REF,
      devModePaidStatus: NULL_FIELD_REF,
      userId: NULL_FIELD_REF,
      user: {
        id: NULL_FIELD_REF,
        handle: NULL_FIELD_REF,
        imgUrl: NULL_FIELD_REF,
        name: NULL_FIELD_REF
      }
    },
    roles: I_,
    teamAccess: NULL_FIELD_REF,
    canRead: [{
      userId: createSessionRef('userId')
    }, NULL_FIELD_REF]
  }],
  repo: {
    id: NULL_FIELD_REF,
    name: NULL_FIELD_REF,
    teamId: NULL_FIELD_REF,
    folderId: NULL_FIELD_REF,
    defaultFileKey: NULL_FIELD_REF,
    updatedAt: NULL_FIELD_REF,
    createdAt: NULL_FIELD_REF,
    deletedAt: NULL_FIELD_REF,
    trashedAt: NULL_FIELD_REF,
    linkAccess: NULL_FIELD_REF,
    roles: IA,
    protoLinkAccess: NULL_FIELD_REF,
    orgBrowsable: NULL_FIELD_REF,
    orgAudience: NULL_FIELD_REF,
    parentOrgId: NULL_FIELD_REF,
    canEdit: createAliasedFieldRef('canEditV3', [{
      userId: createSessionRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId')
    }, NULL_FIELD_REF]),
    roleOnObjectForUser: [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      isOwnerOfResource: NULL_FIELD_REF
    }],
    hasFileLinkPassword: NULL_FIELD_REF,
    hasProtoLinkPassword: NULL_FIELD_REF,
    hasActiveBranches: NULL_FIELD_REF
  },
  roles: createAliasedFieldRef('readableRoles', [{
    userId: createSessionRef('userId')
  }, IA]),
  fileRoleRequests: AH.fields,
  fileSeenStates: AW.fields,
  protoLinkAccess: NULL_FIELD_REF,
  roleOnObjectForUser: [{
    userId: createSessionRef('userId')
  }, {
    id: NULL_FIELD_REF,
    isOwnerOfResource: NULL_FIELD_REF
  }],
  sourceFileKey: NULL_FIELD_REF,
  teamId: NULL_FIELD_REF,
  planPublicInfo: {
    tier: NULL_FIELD_REF
  },
  team: createAliasedFieldRef('_teamForLegacyViews', {
    id: NULL_FIELD_REF,
    name: NULL_FIELD_REF,
    imgUrl: createAliasedFieldRef('imgUrlTransformed', NULL_FIELD_REF),
    studentTeamAt: NULL_FIELD_REF,
    subscription: NULL_FIELD_REF,
    trialPeriodEnd: NULL_FIELD_REF,
    gracePeriodEnd: NULL_FIELD_REF,
    canRead: [{
      userId: createSessionRef('userId')
    }, NULL_FIELD_REF],
    orgAccess: NULL_FIELD_REF,
    roles: I_,
    workspace: {
      canView: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF],
      name: NULL_FIELD_REF
    },
    workspaceSharedSetting: {
      autogenPasswordControls: NULL_FIELD_REF,
      publicLinkControlsSetting: NULL_FIELD_REF,
      publicLinkControlsMaxExpiration: NULL_FIELD_REF,
      externalCollaborationControls: NULL_FIELD_REF,
      fileExportSetting: NULL_FIELD_REF
    }
  }),
  thumbnailGuid: NULL_FIELD_REF,
  thumbnailUrl: createAliasedFieldRef('signedThumbnailUrl', NULL_FIELD_REF),
  thumbnailUrlOverride: NULL_FIELD_REF,
  trashedAt: NULL_FIELD_REF,
  trashedUser: {
    id: NULL_FIELD_REF,
    handle: NULL_FIELD_REF
  },
  trackTags: {
    isTemplate: NULL_FIELD_REF,
    starterLibrarySrcFileKey: NULL_FIELD_REF
  },
  updatedAt: NULL_FIELD_REF,
  viewerExportRestrictedAt: NULL_FIELD_REF,
  viewerExportRestricted: NULL_FIELD_REF,
  hasFileLinkPassword: NULL_FIELD_REF,
  hasProtoLinkPassword: NULL_FIELD_REF,
  pwdConfig: createAliasedFieldRef('pwdConfigV2', {
    id: NULL_FIELD_REF,
    setByUser: {
      id: NULL_FIELD_REF,
      handle: NULL_FIELD_REF,
      imgUrl: NULL_FIELD_REF,
      name: NULL_FIELD_REF
    },
    updatedAt: NULL_FIELD_REF
  }),
  fileLinkExpirationConfig: Iv,
  sourceFileLinkExpirationConfig: Iv,
  libraryKey: NULL_FIELD_REF,
  lastPublishedAt: NULL_FIELD_REF,
  libraryKeyToFile: {
    libraryPublishScope: {
      publishScopeType: NULL_FIELD_REF
    }
  },
  planRecordId: makeFieldRefOptional(NULL_FIELD_REF)
};
let Ix = {
  canEdit: createAliasedFieldRef('canEditV3', [{
    userId: createSessionRef('userId'),
    sessionId: createSessionRef('sessionId'),
    anonymousUserId: createSessionRef('anonymousUserId')
  }, NULL_FIELD_REF]),
  canEditCanvas: createAliasedFieldRef('canEditCanvasV2', [{
    userId: createSessionRef('userId'),
    sessionId: createSessionRef('sessionId'),
    anonymousUserId: createSessionRef('anonymousUserId')
  }, NULL_FIELD_REF]),
  canRead: createAliasedFieldRef('canReadV3', [{
    userId: createSessionRef('userId'),
    sessionId: createSessionRef('sessionId'),
    anonymousUserId: createSessionRef('anonymousUserId')
  }, NULL_FIELD_REF]),
  canView: createAliasedFieldRef('canViewV3', [{
    userId: createSessionRef('userId'),
    sessionId: createSessionRef('sessionId'),
    anonymousUserId: createSessionRef('anonymousUserId')
  }, NULL_FIELD_REF]),
  canViewPrototype: createAliasedFieldRef('canViewPrototypeV3', [{
    userId: createSessionRef('userId'),
    sessionId: createSessionRef('sessionId'),
    anonymousUserId: createSessionRef('anonymousUserId')
  }, NULL_FIELD_REF]),
  canMove: [{
    userId: createSessionRef('userId'),
    sessionId: createSessionRef('sessionId'),
    anonymousUserId: createSessionRef('anonymousUserId')
  }, NULL_FIELD_REF],
  hasViewPrototypeRole: [{
    userId: createSessionRef('userId')
  }, NULL_FIELD_REF],
  hasEditRole: [{
    userId: createSessionRef('userId')
  }, NULL_FIELD_REF],
  hasViewRole: [{
    userId: createSessionRef('userId')
  }, NULL_FIELD_REF],
  mustUpgradeToShareDraft: [{
    userId: createSessionRef('userId')
  }, NULL_FIELD_REF]
};
let IS = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'projectId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'teamId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'repoId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'currentOrgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.Workflow
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, AG.fields],
    org: [{
      userId: createSessionRef('userId'),
      id: createViewRef('currentOrgId')
    }, II],
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, {
      ...Ix,
      ...IE
    }])
  }
};
let Iw = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'projectId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'teamId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'repoId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'currentOrgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.Workflow
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, AG.fields],
    org: [{
      userId: createSessionRef('userId'),
      id: createViewRef('currentOrgId')
    }, II],
    file: createAliasedFieldRef('_fileViewableByPrototypeViewers', [{
      key: createViewRef('fileKey'),
      userId: createSessionRef('userId')
    }, IE])
  }
};
let IC = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.Workflow
  },
  fields: {
    file: createAliasedFieldRef('_fileViewableByPrototypeViewers', [{
      key: createViewRef('fileKey'),
      userId: createSessionRef('userId')
    }, Ix])
  }
};
let IT = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.Desktop
  },
  fields: {
    file: createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('fileKey')
    }, {
      id: NULL_FIELD_REF,
      key: NULL_FIELD_REF,
      presenter: {
        id: NULL_FIELD_REF,
        fileKey: NULL_FIELD_REF,
        presenterExists: NULL_FIELD_REF,
        userId: NULL_FIELD_REF,
        handle: NULL_FIELD_REF,
        imageURL: NULL_FIELD_REF,
        color: NULL_FIELD_REF
      }
    }])
  }
};
let Ik = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, {
      canPublishSiteWithReasons: makeFieldRefOptional([{
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }])
    }])
  }
};
let IR = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Workflow
  },
  fields: {
    file: createAliasedFieldRef('_fileViewableByPrototypeViewers', [{
      key: createViewRef('fileKey'),
      userId: createSessionRef('userId')
    }, {
      fileViewHistory: makeFieldRefOptional({
        user: {
          id: NULL_FIELD_REF,
          imgUrl: NULL_FIELD_REF,
          name: NULL_FIELD_REF,
          handle: NULL_FIELD_REF
        },
        viewedAt: NULL_FIELD_REF
      })
    }])
  }
};
let IN = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'firstPageSize',
    type: {
      kind: 'int'
    }
  }, {
    name: 'sortOrder',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, {
      paginatedFileViewHistory: makeFieldRefOptional([{
        firstPageSize: createViewRef('firstPageSize'),
        sortOrder: createViewRef('sortOrder')
      }, {
        user: {
          id: NULL_FIELD_REF,
          imgUrl: NULL_FIELD_REF,
          name: NULL_FIELD_REF,
          handle: NULL_FIELD_REF
        },
        viewedAt: NULL_FIELD_REF
      }])
    }])
  }
};
let IP = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      pendingFileRoleRequest: makeFieldRefOptional([{
        fileKey: createViewRef('fileKey')
      }, {
        id: NULL_FIELD_REF,
        status: NULL_FIELD_REF
      }])
    }],
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, {
      id: NULL_FIELD_REF,
      key: NULL_FIELD_REF,
      canRead: createAliasedFieldRef('canAccess', [{
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        linkAccessOverrideKey: createViewRef('fileKey')
      }, NULL_FIELD_REF])
    }])
  }
};
let IO = {
  args: [{
    name: 'projectId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    project: [{
      id: createViewRef('projectId'),
      userId: createSessionRef('userId')
    }, {
      path: NULL_FIELD_REF
    }]
  }
};
let ID = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Workflow
  },
  fields: {
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, {
      template: {
        id: NULL_FIELD_REF,
        fileKey: NULL_FIELD_REF,
        fileVersionId: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        description: NULL_FIELD_REF,
        publishScope: NULL_FIELD_REF,
        orgId: NULL_FIELD_REF,
        licenseGroupId: NULL_FIELD_REF,
        workspaceId: NULL_FIELD_REF,
        teamId: NULL_FIELD_REF,
        publishedByUserId: NULL_FIELD_REF,
        unpublishedAt: NULL_FIELD_REF,
        createdAt: NULL_FIELD_REF,
        updatedAt: NULL_FIELD_REF,
        publishedByUser: createAliasedFieldRef('publishedByUserNullable', {
          handle: NULL_FIELD_REF,
          imgUrl: NULL_FIELD_REF,
          name: NULL_FIELD_REF
        })
      }
    }])
  }
};
let IL = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, Aw.fields])
  }
};
let IF = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Wayfinding
  },
  fields: {
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, {
      id: NULL_FIELD_REF,
      currentPlanUser: [{
        userId: createSessionRef('userId')
      }, yp.fields],
      canEdit: createAliasedFieldRef('canEditV3', [{
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      }, NULL_FIELD_REF]),
      canExport: [{
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      }, NULL_FIELD_REF],
      canRename: createAliasedFieldRef('canRenameV2', [{
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      }, NULL_FIELD_REF]),
      canTrash: createAliasedFieldRef('canTrashV3', [{
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      }, NULL_FIELD_REF]),
      canRestore: createAliasedFieldRef('canRestoreV3', [{
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      }, NULL_FIELD_REF]),
      canRestoreToOtherFolders: [{
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      }, NULL_FIELD_REF],
      canPermanentlyDelete: createAliasedFieldRef('canPermanentlyDeleteV3', [{
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      }, NULL_FIELD_REF]),
      canFavorite: createAliasedFieldRef('canFavoriteV2', [{
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      }, NULL_FIELD_REF]),
      isFavorited: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF],
      viewerExportRestricted: NULL_FIELD_REF,
      isTeamTemplate: NULL_FIELD_REF,
      project: [{
        userId: createSessionRef('userId')
      }, {
        canView: createAliasedFieldRef('canRead', [{
          userId: createSessionRef('userId')
        }, NULL_FIELD_REF]),
        canEdit: [{
          userId: createSessionRef('userId')
        }, NULL_FIELD_REF]
      }],
      canMove: [{
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      }, NULL_FIELD_REF],
      canMoveWithReasons: [{
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      }, {
        result: NULL_FIELD_REF,
        publicDenyReasons: NULL_FIELD_REF
      }],
      editorType: NULL_FIELD_REF,
      org: createAliasedFieldRef('_orgForLegacyViews', {
        isFigJamDisabled: NULL_FIELD_REF,
        isSlidesDisabled: NULL_FIELD_REF,
        isSitesDisabled: NULL_FIELD_REF,
        isCooperDisabled: NULL_FIELD_REF
      }),
      parentOrgId: NULL_FIELD_REF,
      teamId: NULL_FIELD_REF,
      isDraftFile: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF]
    }])
  }
};
let IM = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Workflow
  },
  fields: {
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, {
      recentFileVersions: makeFieldRefOptional({
        id: NULL_FIELD_REF,
        label: NULL_FIELD_REF,
        description: NULL_FIELD_REF,
        view: NULL_FIELD_REF,
        updatedAt: NULL_FIELD_REF,
        user: {
          id: NULL_FIELD_REF,
          imgUrl: NULL_FIELD_REF,
          name: NULL_FIELD_REF,
          handle: NULL_FIELD_REF
        },
        checkpoint: {
          key: NULL_FIELD_REF,
          createdAt: NULL_FIELD_REF
        }
      })
    }])
  }
};
let Ij = {
  args: [{
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Workflow
  },
  fields: {
    team: [{
      id: createViewRef('teamId'),
      userId: createSessionRef('userId')
    }, {
      canEnterFileViewHistoryExp: makeFieldRefOptional(NULL_FIELD_REF)
    }]
  }
};
let IU = {
  id: NULL_FIELD_REF,
  uuid: NULL_FIELD_REF,
  key: NULL_FIELD_REF,
  orderId: NULL_FIELD_REF,
  parentId: NULL_FIELD_REF,
  createdAt: NULL_FIELD_REF,
  resolvedAt: NULL_FIELD_REF,
  user: {
    id: NULL_FIELD_REF,
    handle: NULL_FIELD_REF,
    imgUrl: NULL_FIELD_REF
  },
  clientMeta: {
    x: NULL_FIELD_REF,
    y: NULL_FIELD_REF,
    nodeId: NULL_FIELD_REF,
    pageId: NULL_FIELD_REF,
    nodeOffset: {
      x: NULL_FIELD_REF,
      y: NULL_FIELD_REF
    },
    inFrame: NULL_FIELD_REF,
    selectionBoxAnchor: {
      x: NULL_FIELD_REF,
      y: NULL_FIELD_REF
    },
    stablePath: NULL_FIELD_REF
  },
  messageMetaStylized: A9.fields,
  commentPin: {
    id: NULL_FIELD_REF
  },
  messageMeta: {
    t: NULL_FIELD_REF,
    user: {
      id: NULL_FIELD_REF,
      handle: NULL_FIELD_REF,
      imgUrl: NULL_FIELD_REF
    }
  }
};
let IB = {
  id: NULL_FIELD_REF,
  fileKey: NULL_FIELD_REF,
  fileCommentId: NULL_FIELD_REF,
  type: NULL_FIELD_REF,
  mediaType: NULL_FIELD_REF,
  altText: NULL_FIELD_REF,
  thumbnailUrl: NULL_FIELD_REF,
  imageUrl: NULL_FIELD_REF,
  createdAt: NULL_FIELD_REF,
  uploadedAt: NULL_FIELD_REF,
  metadata: {
    file_name: NULL_FIELD_REF,
    dimensions: {
      width: NULL_FIELD_REF,
      height: NULL_FIELD_REF
    },
    thumbnail_dimensions: {
      width: NULL_FIELD_REF,
      height: NULL_FIELD_REF
    }
  }
};
let IV = {
  id: NULL_FIELD_REF,
  fileKey: NULL_FIELD_REF,
  fileCommentId: NULL_FIELD_REF,
  emoji: NULL_FIELD_REF,
  userId: NULL_FIELD_REF,
  user: {
    id: NULL_FIELD_REF,
    handle: NULL_FIELD_REF,
    imgUrl: NULL_FIELD_REF
  },
  createdAt: NULL_FIELD_REF,
  sortTimestamp: NULL_FIELD_REF
};
let IG = {
  id: NULL_FIELD_REF,
  unreadComments: NULL_FIELD_REF,
  key: NULL_FIELD_REF,
  notificationPreference: NULL_FIELD_REF,
  statusChangeNotifs: NULL_FIELD_REF
};
let Iz = {
  id: NULL_FIELD_REF,
  userId: NULL_FIELD_REF,
  fileKey: NULL_FIELD_REF,
  createdAt: NULL_FIELD_REF,
  allReadAt: NULL_FIELD_REF,
  readComments: NULL_FIELD_REF,
  unreadComments: NULL_FIELD_REF
};
let IH = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.Wayfinding
  },
  fields: {
    file: createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('fileKey')
    }, {
      id: NULL_FIELD_REF,
      comments: createAliasedFieldRef('unresolvedComments', IU),
      commentAttachments: IB,
      reactions: IV,
      currentUserFileFollower: [{
        userId: createSessionRef('userId')
      }, IG],
      currentUserCommentReadStatus: [{
        userId: createSessionRef('userId')
      }, Iz]
    }])
  }
};
let IW = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'rootId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Wayfinding
  },
  fields: {
    file: createAliasedFieldRef('_fileViewableByPrototypeViewers', [{
      key: createViewRef('fileKey'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      mobileCommentThread: [{
        rootId: createViewRef('rootId')
      }, mergeFieldRefs(IU, {
        reactions: IV,
        attachments: IB,
        thumbnailUrl: NULL_FIELD_REF
      })],
      currentUserCommentReadStatus: [{
        userId: createSessionRef('userId')
      }, Iz],
      currentUserFileFollower: [{
        userId: createSessionRef('userId')
      }, IG],
      parentOrgId: NULL_FIELD_REF,
      teamId: NULL_FIELD_REF,
      checkpointClientMeta: NULL_FIELD_REF
    }])
  }
};
let IK = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, {
      id: NULL_FIELD_REF,
      key: NULL_FIELD_REF,
      prototypeLibCppConfig: {
        id: NULL_FIELD_REF,
        shouldLoad: NULL_FIELD_REF
      }
    }])
  }
};
let IY = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, {
      id: NULL_FIELD_REF,
      key: NULL_FIELD_REF,
      fileRoleRequest: makeFieldRefOptional([{
        id: createViewRef('id')
      }, AH.fields])
    }])
  }
};
let Iq = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.Workflow
  },
  fields: {
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, {
      id: NULL_FIELD_REF,
      key: NULL_FIELD_REF,
      fileRoleRequests: AH.fields
    }])
  }
};
let I$ = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    figFileWorkshopMode: [{
      fileKey: createViewRef('fileKey')
    }, {
      id: NULL_FIELD_REF,
      expiresAt: NULL_FIELD_REF
    }]
  }
};
let IZ = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, {
      isWorkspaceVisible: [{
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      }, NULL_FIELD_REF],
      canPinToWorkspace: [{
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      }, NULL_FIELD_REF],
      canEdit: createAliasedFieldRef('canEditV3', [{
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      }, NULL_FIELD_REF]),
      computedWorkspace: [{
        userId: createSessionRef('userId')
      }, {
        workspace: {
          id: NULL_FIELD_REF,
          name: NULL_FIELD_REF,
          pinnedFiles: {
            id: NULL_FIELD_REF,
            file: {
              key: NULL_FIELD_REF
            },
            creator: {
              id: NULL_FIELD_REF
            }
          },
          canAdmin: [{
            userId: createSessionRef('userId')
          }, NULL_FIELD_REF]
        }
      }]
    }])
  }
};
let IX = {
  id: NULL_FIELD_REF,
  key: NULL_FIELD_REF,
  reviewNumber: NULL_FIELD_REF,
  title: NULL_FIELD_REF,
  description: NULL_FIELD_REF,
  owner: {
    id: NULL_FIELD_REF,
    handle: NULL_FIELD_REF,
    imgUrl: NULL_FIELD_REF
  },
  closer: {
    id: NULL_FIELD_REF,
    handle: NULL_FIELD_REF,
    imgUrl: NULL_FIELD_REF
  },
  closedAt: NULL_FIELD_REF,
  fileMergeId: NULL_FIELD_REF,
  reviewers: {
    user: {
      id: NULL_FIELD_REF,
      handle: NULL_FIELD_REF,
      imgUrl: NULL_FIELD_REF
    },
    notes: NULL_FIELD_REF,
    changesRequestedAt: NULL_FIELD_REF,
    approvedAt: NULL_FIELD_REF
  },
  mergeSummaryNotes: NULL_FIELD_REF,
  requestedAt: NULL_FIELD_REF,
  updatedAt: NULL_FIELD_REF,
  createdAt: NULL_FIELD_REF
};
let IQ = {
  args: [{
    name: 'repoId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Workflow
  },
  fields: {
    repo: [{
      id: createViewRef('repoId'),
      userId: createSessionRef('userId')
    }, {
      files: {
        trashedAt: NULL_FIELD_REF,
        openMergeRequest: {
          id: NULL_FIELD_REF,
          mergeRequestKey: NULL_FIELD_REF,
          mergeRequest: IX,
          branchFileKey: NULL_FIELD_REF
        },
        fileMerges: {
          id: NULL_FIELD_REF,
          userId: NULL_FIELD_REF,
          user: {
            id: NULL_FIELD_REF,
            name: NULL_FIELD_REF,
            handle: NULL_FIELD_REF
          },
          direction: NULL_FIELD_REF,
          checkpointDiffId: NULL_FIELD_REF,
          mergeResultCheckpointId: NULL_FIELD_REF,
          mergeResultFileversionId: NULL_FIELD_REF,
          updatedAt: NULL_FIELD_REF,
          createdAt: NULL_FIELD_REF,
          mergeRequest: IX
        }
      }
    }]
  }
};
let IJ = {
  args: [{
    name: 'projectId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'updatedAtTimestamp',
    type: {
      kind: 'datetime'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Wayfinding
  },
  fields: {
    project: [{
      id: createViewRef('projectId'),
      userId: createSessionRef('userId')
    }, {
      fileUpdates: [{
        updatedAtTimestamp: createViewRef('updatedAtTimestamp')
      }, Az.fields]
    }]
  }
};
let I0 = {
  args: [{
    name: 'repoId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    repo: [{
      id: createViewRef('repoId'),
      userId: createSessionRef('userId')
    }, {
      files: Az.fields
    }]
  }
};
let I1 = {
  args: [{
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'updatedAtTimestamp',
    type: {
      kind: 'datetime'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Wayfinding
  },
  fields: {
    team: [{
      id: createViewRef('teamId'),
      userId: createSessionRef('userId')
    }, {
      fileUpdates: [{
        updatedAtTimestamp: createViewRef('updatedAtTimestamp')
      }, Az.fields]
    }]
  }
};
let I2 = {
  args: [{
    name: 'projectId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: makeFieldRefOptional([{
      id: createViewRef('projectId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      undeletedFilesHighLimit: {
        id: NULL_FIELD_REF,
        key: NULL_FIELD_REF,
        fileRepoId: NULL_FIELD_REF
      }
    }])
  }
};
let I5 = {
  args: [{
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    team: [{
      id: createViewRef('teamId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      canAdmin: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF]
    }]
  }
};
let I4 = {
  args: [{
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    team: [{
      id: createViewRef('teamId'),
      userId: createSessionRef('userId')
    }, {
      name: NULL_FIELD_REF,
      imgUrl: createAliasedFieldRef('imgUrlTransformed', NULL_FIELD_REF),
      studentTeamAt: NULL_FIELD_REF,
      gracePeriodEnd: NULL_FIELD_REF,
      subscription: NULL_FIELD_REF,
      restrictionsList: NULL_FIELD_REF,
      canAdmin: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF],
      canEdit: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF],
      sharingAudienceControl: NULL_FIELD_REF,
      plan: [{
        userId: createSessionRef('userId')
      }, {
        tier: NULL_FIELD_REF,
        key: {
          parentId: NULL_FIELD_REF,
          type: NULL_FIELD_REF
        }
      }],
      org: createAliasedFieldRef('orgForGuests', {
        id: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        domainCapture: NULL_FIELD_REF,
        inviteWhitelist: {
          guestInviteSetting: NULL_FIELD_REF
        },
        currentPlanUser: [{
          userId: createSessionRef('userId')
        }, {
          id: NULL_FIELD_REF,
          permission: NULL_FIELD_REF
        }],
        orgDomains: {
          id: NULL_FIELD_REF,
          domain: NULL_FIELD_REF,
          orgId: NULL_FIELD_REF,
          createdAt: NULL_FIELD_REF,
          googleSsoOnlyAt: NULL_FIELD_REF,
          samlSsoOnlyAt: NULL_FIELD_REF
        },
        imgUrl: createAliasedFieldRef('imgUrlTransformed', NULL_FIELD_REF)
      }),
      workspace: makeFieldRefOptional({
        id: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        imgUrl: createAliasedFieldRef('imgUrlTransformed', NULL_FIELD_REF)
      })
    }]
  }
};
let I3 = {
  args: [{
    name: 'currentOrgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'currentTeamId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'folderId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.Workflow
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      baseOrgUser: [{
        orgId: createViewRef('currentOrgId')
      }, {
        workspaceUsers: yq.fields
      }],
      teamRoles: {
        id: NULL_FIELD_REF,
        pending: NULL_FIELD_REF,
        pendingEmail: NULL_FIELD_REF,
        level: NULL_FIELD_REF,
        updatedAt: NULL_FIELD_REF,
        createdAt: NULL_FIELD_REF,
        resourceId: NULL_FIELD_REF,
        resourceType: NULL_FIELD_REF,
        team: {
          id: NULL_FIELD_REF,
          createdAt: NULL_FIELD_REF,
          deletedAt: NULL_FIELD_REF,
          orgId: NULL_FIELD_REF,
          name: NULL_FIELD_REF,
          imgUrl: NULL_FIELD_REF,
          studentTeamAt: NULL_FIELD_REF,
          studentTeamState: NULL_FIELD_REF,
          licenseGroupId: NULL_FIELD_REF,
          licenseGroup: {
            id: NULL_FIELD_REF,
            name: NULL_FIELD_REF,
            createdAt: NULL_FIELD_REF
          },
          studentAutoverifyingTeamAt: NULL_FIELD_REF,
          gracePeriodEnd: NULL_FIELD_REF,
          trialPeriodEnd: NULL_FIELD_REF,
          projectsCount: NULL_FIELD_REF,
          editorsCount: NULL_FIELD_REF,
          subscription: NULL_FIELD_REF,
          restrictionsList: NULL_FIELD_REF,
          orgAccess: NULL_FIELD_REF,
          canEdit: [{
            userId: createSessionRef('userId')
          }, NULL_FIELD_REF],
          canAdmin: [{
            userId: createSessionRef('userId')
          }, NULL_FIELD_REF],
          eduGracePeriod: [{
            userId: createSessionRef('userId')
          }, {
            id: NULL_FIELD_REF,
            isValid: NULL_FIELD_REF
          }],
          workspaceId: NULL_FIELD_REF,
          workspace: {
            id: NULL_FIELD_REF,
            name: NULL_FIELD_REF
          }
        }
      }
    }],
    project: [{
      id: createViewRef('folderId'),
      userId: createSessionRef('userId')
    }, {
      hasPublishedSite: makeFieldRefOptional()
    }]
  }
};
let I6 = {
  type: _$$Y.Project,
  fields: {
    team: {
      id: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      canRead: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF],
      imgUrl: createAliasedFieldRef('imgUrlTransformed', NULL_FIELD_REF),
      workspace: {
        id: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        canRead: [{
          userId: createSessionRef('userId')
        }, NULL_FIELD_REF]
      },
      org: mergeFieldRefs({
        id: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        imgUrl: createAliasedFieldRef('imgUrlTransformed', NULL_FIELD_REF)
      }, yo.fields)
    }
  }
};
let I7 = {
  args: [{
    name: 'projectId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    project: [{
      id: createViewRef('projectId'),
      userId: createSessionRef('userId')
    }, mergeFieldRefs({
      id: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      description: NULL_FIELD_REF,
      path: NULL_FIELD_REF,
      teamId: NULL_FIELD_REF,
      canConnect: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF],
      isOwner: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF],
      ownerRole: {
        id: NULL_FIELD_REF
      },
      team: {
        id: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        licenseGroupId: NULL_FIELD_REF,
        canAdmin: [{
          userId: createSessionRef('userId')
        }, NULL_FIELD_REF],
        isStarterTeam: NULL_FIELD_REF,
        isStudentTeam: NULL_FIELD_REF,
        pendingAssetTransferRequest: {
          id: NULL_FIELD_REF
        },
        org: {
          id: NULL_FIELD_REF,
          k12GoogleOrg: NULL_FIELD_REF,
          name: NULL_FIELD_REF,
          isOrgUserExternallyRestricted: [{
            userId: createSessionRef('userId')
          }, NULL_FIELD_REF],
          isFigJamDisabled: NULL_FIELD_REF,
          currentBaseOrgUser: [{
            userId: createSessionRef('userId')
          }, {
            id: NULL_FIELD_REF,
            userId: NULL_FIELD_REF,
            draftsFolderId: NULL_FIELD_REF,
            accountType: NULL_FIELD_REF,
            permission: NULL_FIELD_REF,
            designPaidStatus: NULL_FIELD_REF,
            whiteboardPaidStatus: NULL_FIELD_REF,
            designAccountTypeRequest: Ax.fields,
            whiteboardAccountTypeRequest: Ax.fields,
            activeSeatTypeUpgrade: {
              id: NULL_FIELD_REF,
              billableProduct: {
                id: NULL_FIELD_REF,
                key: NULL_FIELD_REF,
                licenseTypes: NULL_FIELD_REF
              }
            }
          }]
        },
        currentPlanUser: [{
          userId: createSessionRef('userId')
        }, {
          key: NULL_FIELD_REF,
          planKey: NULL_FIELD_REF,
          userId: NULL_FIELD_REF,
          permission: NULL_FIELD_REF,
          designPaidStatus: NULL_FIELD_REF,
          whiteboardPaidStatus: NULL_FIELD_REF,
          designAccountTypeRequest: Ax.fields,
          whiteboardAccountTypeRequest: Ax.fields,
          activeSeatTypeUpgrade: {
            id: NULL_FIELD_REF,
            billableProduct: {
              id: NULL_FIELD_REF,
              key: NULL_FIELD_REF,
              licenseTypes: NULL_FIELD_REF
            }
          }
        }],
        currentTeamUser: [{
          userId: createSessionRef('userId')
        }, {
          id: NULL_FIELD_REF,
          userId: NULL_FIELD_REF,
          teamId: NULL_FIELD_REF,
          designPaidStatus: NULL_FIELD_REF,
          whiteboardPaidStatus: NULL_FIELD_REF,
          designAccountTypeRequest: Ax.fields,
          whiteboardAccountTypeRequest: Ax.fields,
          activeSeatTypeUpgrade: {
            id: NULL_FIELD_REF,
            billableProduct: {
              id: NULL_FIELD_REF,
              key: NULL_FIELD_REF,
              licenseTypes: NULL_FIELD_REF
            }
          }
        }]
      },
      currentTeamUser: [{
        userId: createSessionRef('userId')
      }, {
        designPaidStatus: NULL_FIELD_REF,
        whiteboardPaidStatus: NULL_FIELD_REF
      }],
      currentPlanUser: [{
        userId: createSessionRef('userId')
      }, {
        permission: NULL_FIELD_REF,
        draftsFolderId: NULL_FIELD_REF,
        designPaidStatus: NULL_FIELD_REF,
        whiteboardPaidStatus: NULL_FIELD_REF
      }],
      plan: [{
        userId: createSessionRef('userId')
      }, {
        key: {
          parentId: NULL_FIELD_REF,
          type: NULL_FIELD_REF
        },
        name: NULL_FIELD_REF,
        isMember: NULL_FIELD_REF,
        tier: NULL_FIELD_REF
      }],
      trashedAt: NULL_FIELD_REF,
      canEdit: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF],
      canRead: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF],
      isEditingLockedForUser: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF],
      isSubscribed: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF],
      isAbandonedDrafts: NULL_FIELD_REF,
      inviteOnlyAt: NULL_FIELD_REF,
      viewOnlyAt: NULL_FIELD_REF,
      activeProjectResourceConnections: {
        id: NULL_FIELD_REF,
        hostPlanName: NULL_FIELD_REF,
        connectedPlanName: NULL_FIELD_REF
      },
      mostRecentResourceConnection: makeFieldRefOptional({
        id: NULL_FIELD_REF,
        disconnectedAt: NULL_FIELD_REF,
        assetTransferRequestId: NULL_FIELD_REF,
        hostPlanName: NULL_FIELD_REF,
        connectedPlanName: NULL_FIELD_REF
      }),
      canTransferCopy: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF],
      pendingAssetTransferRequest: {
        id: NULL_FIELD_REF
      }
    }, yA.fields, I6.fields)]
  }
};
let I8 = {
  id: NULL_FIELD_REF,
  name: NULL_FIELD_REF,
  domainCapture: NULL_FIELD_REF,
  figjamDisabledAt: NULL_FIELD_REF,
  inviteWhitelist: {
    guestInviteSetting: NULL_FIELD_REF
  },
  orgDomains: {
    id: NULL_FIELD_REF,
    domain: NULL_FIELD_REF,
    orgId: NULL_FIELD_REF,
    createdAt: NULL_FIELD_REF,
    googleSsoOnlyAt: NULL_FIELD_REF,
    samlSsoOnlyAt: NULL_FIELD_REF
  },
  imgUrl: createAliasedFieldRef('imgUrlTransformed', NULL_FIELD_REF)
};
let I9 = {
  id: NULL_FIELD_REF,
  createdAt: NULL_FIELD_REF,
  updatedAt: NULL_FIELD_REF,
  level: NULL_FIELD_REF,
  resourceType: NULL_FIELD_REF,
  resourceId: NULL_FIELD_REF,
  pending: NULL_FIELD_REF,
  pendingEmail: NULL_FIELD_REF,
  userId: NULL_FIELD_REF,
  user: {
    id: NULL_FIELD_REF,
    name: NULL_FIELD_REF,
    handle: NULL_FIELD_REF,
    email: NULL_FIELD_REF,
    imgUrl: NULL_FIELD_REF,
    orgUser: [{
      orgId: createViewRef('currentOrgId')
    }, {
      id: NULL_FIELD_REF,
      userId: NULL_FIELD_REF,
      accountType: NULL_FIELD_REF,
      permission: NULL_FIELD_REF,
      whiteboardPaidStatus: NULL_FIELD_REF
    }],
    guestOrgUser: [{
      orgId: createViewRef('currentOrgId')
    }, {
      id: NULL_FIELD_REF,
      userId: NULL_FIELD_REF,
      accountType: NULL_FIELD_REF,
      permission: NULL_FIELD_REF,
      whiteboardPaidStatus: NULL_FIELD_REF
    }]
  }
};
let Ee = {
  args: [{
    name: 'projectId',
    type: {
      kind: 'string'
    }
  }, {
    name: 'currentOrgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    project: [{
      id: createViewRef('projectId'),
      userId: createSessionRef('userId')
    }, mergeFieldRefs({
      orgInfoForDraftProjects: I8,
      teamPublicInfo: {
        orgForGuests: I8
      },
      teamPermissioned: createAliasedFieldRef('teamV2', {
        id: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        roles: I9,
        canAdmin: [{
          userId: createSessionRef('userId')
        }, NULL_FIELD_REF],
        canEdit: [{
          userId: createSessionRef('userId')
        }, NULL_FIELD_REF]
      }),
      computedWorkspace: [{
        userId: createSessionRef('userId')
      }, {
        workspace: {
          id: NULL_FIELD_REF,
          name: NULL_FIELD_REF,
          imgUrl: createAliasedFieldRef('imgUrlTransformed', NULL_FIELD_REF)
        }
      }],
      roles: I9,
      sharingAudienceControl: createAliasedFieldRef('sharingAudienceControlComputed', NULL_FIELD_REF),
      teamAccess: NULL_FIELD_REF,
      canEdit: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF],
      isOwner: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF],
      canRead: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF],
      canModifyRoles: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF],
      activeProjectResourceConnections: {
        id: NULL_FIELD_REF,
        hostPlanName: NULL_FIELD_REF,
        connectedPlanName: NULL_FIELD_REF
      },
      currentPlanUser: [{
        userId: createSessionRef('userId')
      }, {
        id: NULL_FIELD_REF,
        userId: NULL_FIELD_REF,
        type: NULL_FIELD_REF,
        permission: NULL_FIELD_REF
      }],
      planPublicInfo: {
        tier: NULL_FIELD_REF
      }
    }, yA.fields)]
  }
};
let Et = {
  args: [{
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    team: [{
      id: createViewRef('teamId'),
      userId: createSessionRef('userId')
    }, {
      name: NULL_FIELD_REF
    }]
  }
};
let Ei = {
  args: [{
    name: 'projectId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: [{
      id: createViewRef('projectId'),
      userId: createSessionRef('userId')
    }, {
      untrashedFiles: {
        fileRepoId: NULL_FIELD_REF,
        siteMount: {
          status: NULL_FIELD_REF
        }
      }
    }]
  }
};
let En = {
  args: [{
    name: 'teamId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'updatedAtTimestamp',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    team: [{
      id: createViewRef('teamId'),
      userId: createSessionRef('userId')
    }, {
      fontFileUpdateForTeam: makeFieldRefOptional([{
        updatedAtTimestamp: createViewRef('updatedAtTimestamp')
      }, {
        id: NULL_FIELD_REF,
        createdAt: NULL_FIELD_REF,
        updatedAt: NULL_FIELD_REF,
        deletedAt: NULL_FIELD_REF,
        orgId: NULL_FIELD_REF,
        teamId: NULL_FIELD_REF,
        userId: NULL_FIELD_REF,
        sha1: NULL_FIELD_REF,
        s3Key: NULL_FIELD_REF,
        postscriptName: NULL_FIELD_REF,
        family: NULL_FIELD_REF,
        style: NULL_FIELD_REF,
        weight: NULL_FIELD_REF,
        italic: NULL_FIELD_REF,
        stretch: NULL_FIELD_REF,
        version: NULL_FIELD_REF,
        samplePath: NULL_FIELD_REF,
        sampleUrl: NULL_FIELD_REF,
        previewUrl: NULL_FIELD_REF,
        variationAxes: {
          tag: NULL_FIELD_REF,
          name: NULL_FIELD_REF,
          min: NULL_FIELD_REF,
          max: NULL_FIELD_REF,
          default: NULL_FIELD_REF
        },
        variationInstances: {
          name: NULL_FIELD_REF,
          postscriptName: NULL_FIELD_REF,
          axes: NULL_FIELD_REF
        }
      }])
    }]
  }
};
let Er = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'updatedAtTimestamp',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    org: [{
      id: createViewRef('orgId'),
      userId: createSessionRef('userId')
    }, {
      fontFileUpdateForOrg: makeFieldRefOptional([{
        updatedAtTimestamp: createViewRef('updatedAtTimestamp')
      }, {
        id: NULL_FIELD_REF,
        createdAt: NULL_FIELD_REF,
        updatedAt: NULL_FIELD_REF,
        deletedAt: NULL_FIELD_REF,
        orgId: NULL_FIELD_REF,
        teamId: NULL_FIELD_REF,
        userId: NULL_FIELD_REF,
        sha1: NULL_FIELD_REF,
        s3Key: NULL_FIELD_REF,
        postscriptName: NULL_FIELD_REF,
        family: NULL_FIELD_REF,
        style: NULL_FIELD_REF,
        weight: NULL_FIELD_REF,
        italic: NULL_FIELD_REF,
        stretch: NULL_FIELD_REF,
        version: NULL_FIELD_REF,
        samplePath: NULL_FIELD_REF,
        sampleUrl: NULL_FIELD_REF,
        previewUrl: NULL_FIELD_REF,
        variationAxes: {
          tag: NULL_FIELD_REF,
          name: NULL_FIELD_REF,
          min: NULL_FIELD_REF,
          max: NULL_FIELD_REF,
          default: NULL_FIELD_REF
        },
        variationInstances: {
          name: NULL_FIELD_REF,
          postscriptName: NULL_FIELD_REF,
          axes: NULL_FIELD_REF
        }
      }])
    }]
  }
};
let Ea = {
  args: [],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.AI
  },
  fields: {
    actionsHistory: makeFieldRefOptional([{
      userId: createSessionRef('userId')
    }, {
      frecencyHistory: NULL_FIELD_REF
    }])
  }
};
let Es = {
  args: [{
    name: 'currentOrgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Growth
  },
  fields: {
    org: [{
      userId: createSessionRef('userId'),
      id: createViewRef('currentOrgId')
    }, {
      k12GoogleOrg: NULL_FIELD_REF
    }],
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      profile: {
        jobTitle: NULL_FIELD_REF
      }
    }]
  }
};
let Eo = {
  args: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    graftingUpdateSloData: makeFieldRefOptional([{
      id: createViewRef('id')
    }, {
      id: NULL_FIELD_REF,
      key: NULL_FIELD_REF,
      updatedAt: NULL_FIELD_REF,
      createdAt: NULL_FIELD_REF
    }])
  }
};
let El = {
  args: [{
    name: 'org_id',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'license_type',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    hasConnectedPlanUserInOrgFolder: makeFieldRefOptional([{
      org_id: createViewRef('org_id'),
      userId: createSessionRef('userId'),
      license_type: createViewRef('license_type')
    }, {
      hasConnectedPlanUserInOrg: NULL_FIELD_REF
    }])
  }
};
let Ed = {
  args: [{
    name: 'hubFileId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Community
  },
  fields: {
    hubFile: [{
      id: createViewRef('hubFileId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      createdAt: NULL_FIELD_REF,
      unpublishedAt: NULL_FIELD_REF,
      publishingStatusUpdatedAt: NULL_FIELD_REF,
      contentVerifiedAt: NULL_FIELD_REF,
      contentBlockedAt: NULL_FIELD_REF,
      profileId: NULL_FIELD_REF,
      currentHubFileVersionId: NULL_FIELD_REF,
      publishingStatus: NULL_FIELD_REF,
      currentHubFileVersion: {
        id: NULL_FIELD_REF,
        name: NULL_FIELD_REF
      },
      duplicateCount: NULL_FIELD_REF,
      likeCount: NULL_FIELD_REF,
      viewCount: NULL_FIELD_REF,
      viewerMode: NULL_FIELD_REF,
      monetizedResourceMetadataId: NULL_FIELD_REF
    }]
  }
};
let Ec = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, {
      id: NULL_FIELD_REF,
      publishedHubFile: {
        id: NULL_FIELD_REF,
        badges: {
          id: NULL_FIELD_REF,
          badgeType: NULL_FIELD_REF
        },
        hubFileMonetizedResourceMetadata: {
          id: NULL_FIELD_REF,
          price: NULL_FIELD_REF,
          isSubscription: NULL_FIELD_REF
        },
        verificationStatus: NULL_FIELD_REF,
        unpublishedAt: NULL_FIELD_REF,
        currentHubFileVersionId: NULL_FIELD_REF,
        currentHubFileVersion: {
          id: NULL_FIELD_REF,
          hubFileId: NULL_FIELD_REF,
          name: NULL_FIELD_REF,
          version: NULL_FIELD_REF,
          releaseNotes: NULL_FIELD_REF,
          creatorPolicy: NULL_FIELD_REF,
          description: NULL_FIELD_REF,
          createdAt: NULL_FIELD_REF,
          validPrototype: NULL_FIELD_REF,
          thumbnailGuid: NULL_FIELD_REF
        },
        thumbnailUrl: NULL_FIELD_REF,
        viewerMode: NULL_FIELD_REF,
        publishingStatus: NULL_FIELD_REF,
        communityPublishers: {
          id: NULL_FIELD_REF,
          role: NULL_FIELD_REF,
          isPending: NULL_FIELD_REF,
          profile: {
            id: NULL_FIELD_REF,
            name: NULL_FIELD_REF,
            profileHandle: NULL_FIELD_REF,
            imgUrl: NULL_FIELD_REF,
            imgUrls: NULL_FIELD_REF,
            currentUserIsFollowing: [{
              userId: createSessionRef('userId')
            }, NULL_FIELD_REF],
            currentUserIsFollowed: [{
              userId: createSessionRef('userId')
            }, NULL_FIELD_REF],
            entityType: NULL_FIELD_REF,
            primaryUserId: NULL_FIELD_REF,
            location: NULL_FIELD_REF,
            followerCount: NULL_FIELD_REF,
            followingCount: NULL_FIELD_REF,
            description: NULL_FIELD_REF,
            badges: {
              id: NULL_FIELD_REF,
              badgeType: NULL_FIELD_REF
            }
          }
        },
        publishedByUser: {
          id: NULL_FIELD_REF,
          handle: NULL_FIELD_REF,
          imgUrl: NULL_FIELD_REF,
          description: NULL_FIELD_REF
        },
        viewCount: NULL_FIELD_REF,
        likeCount: NULL_FIELD_REF,
        duplicateCount: NULL_FIELD_REF
      }
    }])
  }
};
let Eu = {
  args: [{
    name: 'hubFileId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    hubFile: [{
      id: createViewRef('hubFileId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      profile: {
        id: NULL_FIELD_REF,
        profileHandle: NULL_FIELD_REF
      }
    }]
  }
};
let Ep = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      idpUsersInOrg: makeFieldRefOptional([{
        orgId: createViewRef('orgId')
      }, {
        scim: {
          figmaEnterpriseFields: {
            figmaPermission: NULL_FIELD_REF,
            figjamPermission: NULL_FIELD_REF,
            devModePermission: NULL_FIELD_REF
          }
        },
        seatType: NULL_FIELD_REF
      }])
    }]
  }
};
let Em = {
  installedPlugins: {
    id: NULL_FIELD_REF,
    pluginId: NULL_FIELD_REF,
    pinnedStatus: NULL_FIELD_REF,
    createdAt: NULL_FIELD_REF,
    plugin: [{
      userId: createSessionRef('userId'),
      orgId: createViewRef('orgId')
    }, {
      id: NULL_FIELD_REF,
      currentPluginVersionId: NULL_FIELD_REF,
      publishingStatus: NULL_FIELD_REF,
      isWidget: NULL_FIELD_REF,
      orgId: NULL_FIELD_REF,
      communityPublishers: {
        isPending: NULL_FIELD_REF,
        profile: {
          id: NULL_FIELD_REF,
          profileHandle: NULL_FIELD_REF,
          user: {
            id: NULL_FIELD_REF,
            name: NULL_FIELD_REF
          },
          team: {
            id: NULL_FIELD_REF,
            name: NULL_FIELD_REF
          },
          org: {
            id: NULL_FIELD_REF,
            name: NULL_FIELD_REF
          }
        },
        role: NULL_FIELD_REF
      },
      currentPluginVersion: {
        id: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        version: NULL_FIELD_REF,
        releaseNotes: NULL_FIELD_REF,
        description: NULL_FIELD_REF,
        tagline: NULL_FIELD_REF,
        creatorPolicy: NULL_FIELD_REF,
        manifest: NULL_FIELD_REF,
        createdAt: NULL_FIELD_REF,
        iconPath: NULL_FIELD_REF,
        coverImagePath: NULL_FIELD_REF,
        codePath: NULL_FIELD_REF,
        plugin: {
          currentPluginVersionId: NULL_FIELD_REF
        }
      },
      viewableInEditor: [{
        userId: createSessionRef('userId'),
        orgId: createViewRef('orgId')
      }, NULL_FIELD_REF]
    }]
  }
};
let Eh = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.Extensibility
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, Em],
    org: [{
      userId: createSessionRef('userId'),
      id: createViewRef('orgId')
    }, Em]
  }
};
let Eg = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Scale
  },
  fields: {
    org: [{
      id: createViewRef('orgId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      ipAllowlistRanges: makeFieldRefOptional({
        id: NULL_FIELD_REF,
        ipRange: NULL_FIELD_REF,
        createdAt: NULL_FIELD_REF
      })
    }]
  }
};
let Ef = {
  args: [],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    jamboardOfferRedeemedAt: [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      userId: NULL_FIELD_REF,
      redeemedAt: NULL_FIELD_REF
    }]
  }
};
let E_ = {
  args: [{
    name: 'deviceType',
    type: {
      kind: 'enum',
      name: 'DeviceType'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Mobile
  },
  fields: {
    latestClipboardData: [{
      userId: createSessionRef('userId'),
      deviceType: createViewRef('deviceType')
    }, {
      id: NULL_FIELD_REF,
      deviceType: NULL_FIELD_REF,
      timestamp: NULL_FIELD_REF,
      presignedDownloadUrl: NULL_FIELD_REF
    }]
  }
};
let EA = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, {
      stylesWithLegacySourceAssets: {
        key: NULL_FIELD_REF,
        legacySourceAsset: {
          key: NULL_FIELD_REF
        }
      }
    }])
  }
};
let Ey = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.DesignSystem
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, yj.fields],
    org: [{
      id: createViewRef('orgId'),
      userId: createSessionRef('userId')
    }, {
      workspaces: {
        id: NULL_FIELD_REF,
        name: NULL_FIELD_REF
      }
    }]
  }
};
let Eb = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }, {
    name: 'libraryKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    libraryAsset: [{
      key: createViewRef('key'),
      libraryKey: createViewRef('libraryKey')
    }, {
      ...AZ.fields,
      codePresetMetadata: AX.fields
    }]
  }
};
let Ev = {
  args: [{
    name: 'libraryKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.DesignSystem
  },
  fields: {
    libraryKeyToFile: [{
      libraryKey: createViewRef('libraryKey')
    }, {
      file: {
        name: NULL_FIELD_REF,
        libraryKey: NULL_FIELD_REF,
        thumbnailUrl: createAliasedFieldRef('signedThumbnailUrl', NULL_FIELD_REF),
        template: {
          name: NULL_FIELD_REF,
          publishedByUserNullable: {
            name: NULL_FIELD_REF
          }
        },
        libraryAssets: [{
          libraryKey: createViewRef('libraryKey')
        }, {
          ...AZ.fields,
          codePresetMetadata: AX.fields
        }]
      },
      hubFile: {
        id: NULL_FIELD_REF,
        currentHubFileVersion: {
          name: NULL_FIELD_REF
        },
        libraryKey: NULL_FIELD_REF,
        thumbnailUrl: NULL_FIELD_REF,
        communityPublishers: {
          profile: {
            name: NULL_FIELD_REF
          }
        },
        libraryAssets: [{
          libraryKey: createViewRef('libraryKey')
        }, {
          ...AZ.fields,
          codePresetMetadata: AX.fields
        }]
      }
    }]
  }
};
let EI = {
  args: [{
    name: 'libraryKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'assetType',
    type: {
      kind: 'enum',
      name: 'AssetType'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    libraryKeyToFile: [{
      libraryKey: createViewRef('libraryKey')
    }, {
      file: {
        name: NULL_FIELD_REF,
        libraryKey: NULL_FIELD_REF,
        thumbnailUrl: createAliasedFieldRef('signedThumbnailUrl', NULL_FIELD_REF),
        template: {
          name: NULL_FIELD_REF,
          publishedByUserNullable: {
            name: NULL_FIELD_REF
          }
        },
        libraryAssets: createAliasedFieldRef('libraryAssetsOfType', [{
          libraryKey: createViewRef('libraryKey'),
          assetType: createViewRef('assetType')
        }, {
          ...AZ.fields,
          codePresetMetadata: AX.fields
        }])
      },
      hubFile: {
        id: NULL_FIELD_REF,
        currentHubFileVersion: {
          name: NULL_FIELD_REF
        },
        libraryKey: NULL_FIELD_REF,
        thumbnailUrl: NULL_FIELD_REF,
        communityPublishers: {
          profile: {
            name: NULL_FIELD_REF
          }
        },
        libraryAssets: createAliasedFieldRef('libraryAssetsOfType', [{
          libraryKey: createViewRef('libraryKey'),
          assetType: createViewRef('assetType')
        }, {
          ...AZ.fields,
          codePresetMetadata: AX.fields
        }])
      }
    }]
  }
};
let EE = {
  args: [{
    name: 'libraryKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    libraryKeyToFile: [{
      libraryKey: createViewRef('libraryKey')
    }, {
      file: {
        libraryKey: NULL_FIELD_REF,
        libraryHierarchyPaths: {
          components: AL.fields,
          stateGroups: yR.fields
        },
        template: {
          name: NULL_FIELD_REF,
          publishedByUserNullable: {
            name: NULL_FIELD_REF
          },
          description: NULL_FIELD_REF
        }
      }
    }]
  }
};
let Ex = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.DesignSystem
  },
  fields: {
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, {
      key: NULL_FIELD_REF,
      libraryKey: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      teamId: NULL_FIELD_REF,
      library: {
        numComponents: NULL_FIELD_REF,
        numStateGroups: NULL_FIELD_REF,
        numStyles: NULL_FIELD_REF,
        numStylesFill: NULL_FIELD_REF,
        numStylesText: NULL_FIELD_REF,
        numStylesEffect: NULL_FIELD_REF,
        numStylesGrid: NULL_FIELD_REF,
        numVariableSets: NULL_FIELD_REF,
        numVariables: NULL_FIELD_REF,
        numVariablesBoolean: NULL_FIELD_REF,
        numVariablesColor: NULL_FIELD_REF,
        numVariablesFloat: NULL_FIELD_REF,
        numVariablesString: NULL_FIELD_REF,
        numModuleAssets: NULL_FIELD_REF
      },
      variableCollections: A7.fields,
      modules: [{
        userId: createSessionRef('userId')
      }, ys.fields],
      libraryHierarchyPaths: {
        pageName: NULL_FIELD_REF,
        containingFrameName: NULL_FIELD_REF,
        nameHierarchyPath: NULL_FIELD_REF,
        components: AL.fields,
        stateGroups: yR.fields,
        styles: yO.fields
      }
    }])
  }
};
let ES = {
  args: [{
    name: 'libraryKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.DesignSystem
  },
  fields: {
    libraryKeyToFile: [{
      libraryKey: createViewRef('libraryKey')
    }, {
      file: {
        key: NULL_FIELD_REF,
        libraryKey: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        teamId: NULL_FIELD_REF,
        variableCollections: A7.fields,
        modules: [{
          userId: createSessionRef('userId')
        }, ys.fields],
        library: {
          numStyles: NULL_FIELD_REF
        },
        libraryHierarchyPaths: {
          pageName: NULL_FIELD_REF,
          containingFrameName: NULL_FIELD_REF,
          nameHierarchyPath: NULL_FIELD_REF,
          components: AL.fields,
          stateGroups: yR.fields,
          styles: yO.fields
        }
      },
      hubFile: {
        id: NULL_FIELD_REF,
        libraryKey: NULL_FIELD_REF,
        currentHubFileVersion: {
          name: NULL_FIELD_REF
        },
        libraryHierarchyPaths: makeFieldRefOptional({
          pageName: NULL_FIELD_REF,
          containingFrameName: NULL_FIELD_REF,
          nameHierarchyPath: NULL_FIELD_REF,
          components: AL.fields,
          stateGroups: yR.fields,
          styles: yO.fields
        })
      }
    }]
  }
};
let Ew = {
  args: [{
    name: 'libraryKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    libraryKeyToFile: [{
      libraryKey: createViewRef('libraryKey')
    }, {
      file: {
        name: NULL_FIELD_REF,
        teamLimitedInfo: {
          id: NULL_FIELD_REF,
          name: NULL_FIELD_REF
        },
        computedWorkspace: [{
          userId: createSessionRef('userId')
        }, {
          workspace: {
            id: NULL_FIELD_REF,
            name: NULL_FIELD_REF
          }
        }]
      },
      hubFile: {
        currentHubFileVersion: {
          name: NULL_FIELD_REF
        }
      }
    }]
  }
};
let EC = {
  args: [{
    name: 'projectId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: [{
      id: createViewRef('projectId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      path: NULL_FIELD_REF,
      teamId: NULL_FIELD_REF
    }]
  }
};
let ET = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, {
      id: NULL_FIELD_REF,
      libraryFileSubscriptionOverrides: createAliasedFieldRef('libraryFileSubscriptionOverridesV2', {
        id: NULL_FIELD_REF,
        isSubscribed: NULL_FIELD_REF,
        libraryKey: NULL_FIELD_REF,
        library: {
          fileKey: NULL_FIELD_REF
        },
        communityLibrary: {
          hubFileId: NULL_FIELD_REF
        }
      }),
      communityLibraryFileSubscriptions: [{
        userId: createSessionRef('userId')
      }, {
        hubFileId: NULL_FIELD_REF,
        isSubscribed: NULL_FIELD_REF
      }]
    }])
  }
};
let Ek = {
  args: [{
    name: 'libraryKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.DesignSystem
  },
  fields: {
    libraryKeyToFile: [{
      libraryKey: createViewRef('libraryKey')
    }, {
      file: {
        name: NULL_FIELD_REF,
        library: mergeFieldRefs(AJ.fields, {
          approvedLibraries: {}
        })
      },
      hubFile: {
        currentHubFileVersion: {
          name: NULL_FIELD_REF
        },
        communityLibrary: [{
          userId: createSessionRef('userId')
        }, A1.fields]
      }
    }]
  }
};
let ER = {
  args: [{
    name: 'libraryKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.DesignSystem
  },
  fields: {
    libraryKeyToFile: [{
      libraryKey: createViewRef('libraryKey')
    }, {
      file: {
        isBranch: makeFieldRefOptional()
      }
    }]
  }
};
let EN = {
  args: [{
    name: 'libraryKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    libraryKeyToFile: [{
      libraryKey: createViewRef('libraryKey')
    }, {
      fileCanAccess: {
        key: NULL_FIELD_REF,
        canEditV3: [{
          userId: createSessionRef('userId'),
          sessionId: createSessionRef('sessionId'),
          anonymousUserId: createSessionRef('anonymousUserId')
        }, NULL_FIELD_REF]
      },
      hubFile: {
        id: NULL_FIELD_REF
      }
    }]
  }
};
let EP = {
  args: [{
    name: 'hubFileId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    communityLibraryByHubFileId: [{
      hubFileId: createViewRef('hubFileId')
    }, {
      updatedAt: NULL_FIELD_REF,
      hubFile: {
        id: NULL_FIELD_REF,
        libraryKey: NULL_FIELD_REF,
        thumbnailUrl: NULL_FIELD_REF,
        currentHubFileVersion: {
          name: NULL_FIELD_REF
        },
        supportContact: NULL_FIELD_REF,
        profile: {
          name: NULL_FIELD_REF,
          imgUrl: NULL_FIELD_REF
        }
      }
    }],
    org: [{
      id: createViewRef('orgId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      librarySubscriptionByLibraryHubFileId: [{
        hubFileId: createViewRef('hubFileId')
      }, {
        id: NULL_FIELD_REF,
        isSubscribed: NULL_FIELD_REF,
        figJamSubscribed: NULL_FIELD_REF,
        slidesSubscribed: makeFieldRefOptional(NULL_FIELD_REF),
        buzzSubscribed: makeFieldRefOptional(NULL_FIELD_REF)
      }],
      workspaces: {
        id: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        librarySubscriptionByLibraryHubFileId: [{
          hubFileId: createViewRef('hubFileId')
        }, {
          id: NULL_FIELD_REF,
          isSubscribed: NULL_FIELD_REF,
          figJamSubscribed: NULL_FIELD_REF,
          slidesSubscribed: makeFieldRefOptional(NULL_FIELD_REF),
          buzzSubscribed: makeFieldRefOptional(NULL_FIELD_REF)
        }],
        canAdmin: [{
          userId: createSessionRef('userId')
        }, NULL_FIELD_REF]
      },
      sharedOrgLicenseGroupSetting: {
        autogenPasswordControls: NULL_FIELD_REF,
        externalCollaborationControls: NULL_FIELD_REF,
        publicLinkControlsSetting: NULL_FIELD_REF,
        publicLinkControlsMaxExpiration: NULL_FIELD_REF
      },
      orgSharedSetting: {
        autogenPasswordControls: NULL_FIELD_REF,
        externalCollaborationControls: NULL_FIELD_REF,
        publicLinkControlsSetting: NULL_FIELD_REF,
        publicLinkControlsMaxExpiration: NULL_FIELD_REF
      }
    }]
  }
};
let EO = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'orgId',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.DesignSystem
  },
  fields: {
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, {
      key: NULL_FIELD_REF,
      libraryKey: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      orgAudience: NULL_FIELD_REF,
      orgBrowsable: NULL_FIELD_REF,
      linkAccess: NULL_FIELD_REF,
      protoLinkAccess: NULL_FIELD_REF,
      hasFileLinkPassword: NULL_FIELD_REF,
      hasProtoLinkPassword: NULL_FIELD_REF,
      library: {
        updatedAt: NULL_FIELD_REF,
        approvedLibraries: {
          id: NULL_FIELD_REF,
          resourceId: NULL_FIELD_REF,
          resourceType: NULL_FIELD_REF
        }
      },
      repo: {
        ownerRole: {
          user: {
            id: NULL_FIELD_REF,
            email: NULL_FIELD_REF,
            imgUrl: NULL_FIELD_REF,
            name: NULL_FIELD_REF
          }
        }
      },
      ownerRole: {
        user: {
          id: NULL_FIELD_REF,
          email: NULL_FIELD_REF,
          imgUrl: NULL_FIELD_REF,
          name: NULL_FIELD_REF
        }
      },
      teamId: NULL_FIELD_REF
    }]),
    org: [{
      id: createViewRef('orgId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      librarySubscriptionByLibraryKey: [{
        fileKey: createViewRef('fileKey')
      }, {
        id: NULL_FIELD_REF,
        isSubscribed: NULL_FIELD_REF,
        figJamSubscribed: NULL_FIELD_REF,
        slidesSubscribed: makeFieldRefOptional(NULL_FIELD_REF),
        buzzSubscribed: makeFieldRefOptional(NULL_FIELD_REF)
      }],
      workspaces: {
        id: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        librarySubscriptionByLibraryKey: [{
          fileKey: createViewRef('fileKey')
        }, {
          id: NULL_FIELD_REF,
          isSubscribed: NULL_FIELD_REF,
          figJamSubscribed: NULL_FIELD_REF,
          slidesSubscribed: makeFieldRefOptional(NULL_FIELD_REF),
          buzzSubscribed: makeFieldRefOptional(NULL_FIELD_REF)
        }],
        canAdmin: [{
          userId: createSessionRef('userId')
        }, NULL_FIELD_REF]
      },
      sharedOrgLicenseGroupSetting: {
        autogenPasswordControls: NULL_FIELD_REF,
        externalCollaborationControls: NULL_FIELD_REF,
        publicLinkControlsSetting: NULL_FIELD_REF,
        publicLinkControlsMaxExpiration: NULL_FIELD_REF
      },
      orgSharedSetting: {
        autogenPasswordControls: NULL_FIELD_REF,
        externalCollaborationControls: NULL_FIELD_REF,
        publicLinkControlsSetting: NULL_FIELD_REF,
        publicLinkControlsMaxExpiration: NULL_FIELD_REF
      }
    }]
  }
};
let ED = {
  args: [{
    name: 'libraryKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    libraryKeyToFile: [{
      libraryKey: createViewRef('libraryKey')
    }, {
      libraryKey: NULL_FIELD_REF,
      file: {
        name: NULL_FIELD_REF,
        thumbnailUrl: createAliasedFieldRef('signedThumbnailUrl', NULL_FIELD_REF),
        thumbnailUrlOverride: NULL_FIELD_REF,
        thumbnailGuid: NULL_FIELD_REF
      },
      hubFile: {
        thumbnailUrl: NULL_FIELD_REF,
        currentHubFileVersion: {
          name: NULL_FIELD_REF
        }
      }
    }]
  }
};
let EL = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: makeFieldRefOptional(createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, {
      key: NULL_FIELD_REF,
      libraryKey: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      teamId: NULL_FIELD_REF,
      library: {
        numVariables: NULL_FIELD_REF,
        numModuleAssets: NULL_FIELD_REF,
        numLibraryAssets: NULL_FIELD_REF
      },
      variableCollections: A8.fields,
      modules: [{
        userId: createSessionRef('userId')
      }, ys.fields]
    }]))
  }
};
let EF = {
  args: [{
    name: 'libraryKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    libraryKeyToFile: [{
      libraryKey: createViewRef('libraryKey')
    }, {
      file: {
        libraryKey: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        teamId: NULL_FIELD_REF,
        library: {
          numVariables: NULL_FIELD_REF,
          numModuleAssets: NULL_FIELD_REF,
          numLibraryAssets: NULL_FIELD_REF
        },
        variableCollections: A8.fields,
        modules: [{
          userId: createSessionRef('userId')
        }, ys.fields],
        libraryAssets: [{
          libraryKey: createViewRef('libraryKey')
        }, AZ.fields]
      },
      hubFile: {
        communityLibrary: [{
          userId: createSessionRef('userId')
        }, {
          id: NULL_FIELD_REF,
          numVariables: NULL_FIELD_REF,
          variableCollections: A8.fields,
          modules: ys.fields
        }],
        libraryAssets: [{
          libraryKey: createViewRef('libraryKey')
        }, AZ.fields]
      }
    }]
  }
};
let EM = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.DesignSystem
  },
  fields: {
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, {
      key: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      teamId: NULL_FIELD_REF,
      library: {
        numVariables: NULL_FIELD_REF
      },
      variableCollections: A8.fields
    }])
  }
};
let Ej = {
  args: [{
    name: 'libraryKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    libraryKeyToFile: [{
      libraryKey: createViewRef('libraryKey')
    }, {
      file: {
        name: NULL_FIELD_REF,
        teamId: NULL_FIELD_REF,
        library: {
          numVariables: NULL_FIELD_REF
        },
        variableCollections: A8.fields
      }
    }]
  }
};
let EU = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, {
      key: NULL_FIELD_REF,
      libraryKey: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      teamId: NULL_FIELD_REF,
      modules: [{
        userId: createSessionRef('userId')
      }, ys.fields]
    }])
  }
};
let EB = {
  args: [{
    name: 'libraryKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    libraryKeyToFile: makeFieldRefOptional([{
      libraryKey: createViewRef('libraryKey')
    }, {
      file: {
        key: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        teamId: NULL_FIELD_REF,
        libraryKey: NULL_FIELD_REF,
        template: {
          name: NULL_FIELD_REF,
          publishedByUserNullable: {
            name: NULL_FIELD_REF
          }
        },
        modules: [{
          userId: createSessionRef('userId')
        }, ys.fields]
      },
      hubFile: {
        id: NULL_FIELD_REF,
        currentHubFileVersion: {
          name: NULL_FIELD_REF
        },
        libraryKey: NULL_FIELD_REF,
        communityPublishers: {
          profile: {
            name: NULL_FIELD_REF
          }
        },
        modules_v2: ys.fields
      }
    }])
  }
};
let EV = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    orgLibrarySubscriptions: [{
      orgId: createViewRef('orgId')
    }, {
      id: NULL_FIELD_REF,
      isSubscribed: NULL_FIELD_REF,
      figJamSubscribed: NULL_FIELD_REF,
      slidesSubscribed: NULL_FIELD_REF,
      buzzSubscribed: makeFieldRefOptional(NULL_FIELD_REF),
      libraryKey: NULL_FIELD_REF,
      library: {
        fileKey: NULL_FIELD_REF
      },
      communityLibrary: {
        hubFileId: NULL_FIELD_REF
      }
    }]
  }
};
let EG = {
  props: {
    priority: PriorityLevels.P1,
    team: yQ.DesignSystem
  },
  args: [{
    name: 'group',
    type: {
      kind: 'enum',
      name: 'PresetLibraryGroup'
    },
    nullable: !0
  }],
  fields: {
    libraryPresetSubscriptionsV2: [{
      group: createViewRef('group')
    }, {
      id: NULL_FIELD_REF,
      hubFileId: NULL_FIELD_REF,
      group: NULL_FIELD_REF,
      order: NULL_FIELD_REF,
      partner_type: NULL_FIELD_REF,
      libraryKey: NULL_FIELD_REF,
      default_subscribed: makeFieldRefOptional(NULL_FIELD_REF)
    }]
  }
};
let Ez = {
  args: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    libraryPublishV2: [{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      fileKey: NULL_FIELD_REF,
      fileCheckpointId: NULL_FIELD_REF,
      count: NULL_FIELD_REF,
      createdAt: NULL_FIELD_REF,
      userId: NULL_FIELD_REF,
      error: NULL_FIELD_REF,
      assetSuccessCount: NULL_FIELD_REF,
      assetFailureCount: NULL_FIELD_REF,
      assetPendingCount: NULL_FIELD_REF,
      firstAssetError: NULL_FIELD_REF
    }]
  }
};
let EH = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, {
      key: NULL_FIELD_REF,
      libraryKey: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      teamId: NULL_FIELD_REF,
      library: {
        numStyles: NULL_FIELD_REF,
        numStylesFill: NULL_FIELD_REF,
        numStylesText: NULL_FIELD_REF,
        numStylesEffect: NULL_FIELD_REF,
        numStylesGrid: NULL_FIELD_REF
      },
      libraryHierarchyPaths: {
        pageName: NULL_FIELD_REF,
        containingFrameName: NULL_FIELD_REF,
        nameHierarchyPath: NULL_FIELD_REF,
        styles: yO.fields
      }
    }])
  }
};
let EW = {
  args: [{
    name: 'hubFileId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    communityLibraryByHubFileId: [{
      hubFileId: createViewRef('hubFileId')
    }, {
      hubFileId: NULL_FIELD_REF,
      libraryKey: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      numStyles: NULL_FIELD_REF,
      numStylesFill: NULL_FIELD_REF,
      numStylesText: NULL_FIELD_REF,
      numStylesEffect: NULL_FIELD_REF,
      numStylesGrid: NULL_FIELD_REF,
      libraryHierarchyPaths: {
        pageName: NULL_FIELD_REF,
        containingFrameName: NULL_FIELD_REF,
        nameHierarchyPath: NULL_FIELD_REF,
        styles: yD.fields
      }
    }]
  }
};
let EK = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.DesignSystem
  },
  fields: {
    org: [{
      id: createViewRef('orgId'),
      userId: createSessionRef('userId')
    }, {
      librarySubscriptions: {
        id: NULL_FIELD_REF,
        isSubscribed: NULL_FIELD_REF,
        figJamSubscribed: NULL_FIELD_REF,
        slidesSubscribed: makeFieldRefOptional(NULL_FIELD_REF),
        buzzSubscribed: makeFieldRefOptional(NULL_FIELD_REF),
        library: {
          fileKey: NULL_FIELD_REF
        },
        communityLibrary: {
          hubFileId: NULL_FIELD_REF
        }
      },
      workspaces: {
        name: NULL_FIELD_REF,
        id: NULL_FIELD_REF,
        librarySubscriptions: {
          id: NULL_FIELD_REF,
          isSubscribed: NULL_FIELD_REF,
          figJamSubscribed: NULL_FIELD_REF,
          slidesSubscribed: makeFieldRefOptional(NULL_FIELD_REF),
          buzzSubscribed: makeFieldRefOptional(NULL_FIELD_REF),
          library: {
            fileKey: NULL_FIELD_REF
          },
          communityLibrary: {
            hubFileId: NULL_FIELD_REF
          }
        }
      }
    }]
  }
};
let EY = {
  args: [{
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.DesignSystem
  },
  fields: {
    team: [{
      id: createViewRef('teamId'),
      userId: createSessionRef('userId')
    }, {
      libraryTeamSubscriptionOverrides: createAliasedFieldRef('libraryTeamSubscriptionOverridesV2', {
        id: NULL_FIELD_REF,
        isSubscribed: NULL_FIELD_REF,
        figJamSubscribed: NULL_FIELD_REF,
        slidesSubscribed: NULL_FIELD_REF,
        buzzSubscribed: makeFieldRefOptional(NULL_FIELD_REF),
        libraryKey: NULL_FIELD_REF,
        library: {
          fileKey: NULL_FIELD_REF
        },
        communityLibrary: {
          hubFileId: NULL_FIELD_REF
        }
      })
    }]
  }
};
let Eq = {
  props: {
    priority: PriorityLevels.P2,
    team: yQ.DesignSystem
  },
  fields: {
    allTeamRoles: [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      team: {
        id: NULL_FIELD_REF,
        orgId: NULL_FIELD_REF,
        deletedAt: NULL_FIELD_REF,
        libraryTeamSubscriptionOverrides: createAliasedFieldRef('libraryTeamSubscriptionOverridesV2', {
          id: NULL_FIELD_REF,
          isSubscribed: NULL_FIELD_REF,
          figJamSubscribed: NULL_FIELD_REF,
          slidesSubscribed: NULL_FIELD_REF,
          buzzSubscribed: makeFieldRefOptional(NULL_FIELD_REF),
          libraryKey: NULL_FIELD_REF,
          library: {
            fileKey: NULL_FIELD_REF
          },
          communityLibrary: {
            hubFileId: NULL_FIELD_REF
          }
        })
      }
    }]
  }
};
let E$ = {
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      libraryUserSubscriptions: {
        id: NULL_FIELD_REF,
        isSubscribed: NULL_FIELD_REF,
        figJamSubscribed: NULL_FIELD_REF,
        slidesSubscribed: NULL_FIELD_REF,
        buzzSubscribed: makeFieldRefOptional(NULL_FIELD_REF),
        libraryKey: NULL_FIELD_REF,
        library: {
          fileKey: NULL_FIELD_REF
        },
        communityLibrary: {
          hubFileId: NULL_FIELD_REF
        }
      }
    }]
  }
};
let EZ = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.DesignSystem
  },
  fields: {
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, {
      key: NULL_FIELD_REF,
      libraryKey: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      teamId: NULL_FIELD_REF,
      variableCollections: A6.fields,
      library: {
        numVariableSets: NULL_FIELD_REF,
        numVariables: NULL_FIELD_REF,
        numVariablesBoolean: NULL_FIELD_REF,
        numVariablesColor: NULL_FIELD_REF,
        numVariablesFloat: NULL_FIELD_REF,
        numVariablesString: NULL_FIELD_REF
      }
    }])
  }
};
let EX = {
  args: [{
    name: 'libraryKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    libraryKeyToFile: [{
      libraryKey: createViewRef('libraryKey')
    }, {
      file: {
        key: NULL_FIELD_REF,
        teamId: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        libraryKey: NULL_FIELD_REF,
        variableCollections: A6.fields
      },
      hubFile: {
        id: NULL_FIELD_REF,
        libraryKey: NULL_FIELD_REF,
        variableCollections: makeFieldRefOptional(A6.fields)
      }
    }]
  }
};
let EQ = {
  args: [{
    name: 'libraryKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    libraryKeyToFile: [{
      libraryKey: createViewRef('libraryKey')
    }, {
      file: {
        key: NULL_FIELD_REF,
        teamId: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        libraryKey: NULL_FIELD_REF,
        variableCollections: A7.fields
      },
      hubFile: {
        id: NULL_FIELD_REF,
        libraryKey: NULL_FIELD_REF,
        variableCollections: makeFieldRefOptional(A7.fields)
      }
    }]
  }
};
let EJ = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, {
      key: NULL_FIELD_REF,
      libraryKey: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      teamId: NULL_FIELD_REF,
      variableCollections: A7.fields,
      library: {
        numVariableSets: NULL_FIELD_REF,
        numVariables: NULL_FIELD_REF,
        numVariablesBoolean: NULL_FIELD_REF,
        numVariablesColor: NULL_FIELD_REF,
        numVariablesFloat: NULL_FIELD_REF,
        numVariablesString: NULL_FIELD_REF
      }
    }])
  }
};
let E0 = {
  args: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    licenseGroup: [{
      id: createViewRef('id'),
      userId: createSessionRef('userId')
    }, {
      licenseGroupMemberCounts: [{
        userId: createSessionRef('userId')
      }, {
        totalCount: NULL_FIELD_REF,
        fullPaidStatusCounts: {
          licenseType: NULL_FIELD_REF,
          count: NULL_FIELD_REF
        }
      }]
    }]
  }
};
let E1 = {
  args: [{
    name: 'licenseGroupId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    licenseGroup: [{
      id: createViewRef('licenseGroupId'),
      userId: createSessionRef('userId')
    }, {
      licenseGroupSeatCounts: [{
        userId: createSessionRef('userId')
      }, {
        billableProductKey: NULL_FIELD_REF,
        count: NULL_FIELD_REF
      }]
    }]
  }
};
let E2 = {
  args: [{
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    currentUser: makeFieldRefOptional([{
      userId: createSessionRef('userId')
    }, {
      teamProjectRoles: [{
        teamId: createViewRef('teamId')
      }, {
        project: {
          id: NULL_FIELD_REF,
          name: NULL_FIELD_REF,
          description: NULL_FIELD_REF,
          path: NULL_FIELD_REF,
          teamId: NULL_FIELD_REF,
          updatedAt: NULL_FIELD_REF,
          createdAt: NULL_FIELD_REF,
          viewOnlyAt: NULL_FIELD_REF,
          inviteOnlyAt: NULL_FIELD_REF,
          orgId: NULL_FIELD_REF,
          deletedAt: NULL_FIELD_REF,
          lastModifiedAt: NULL_FIELD_REF,
          activeProjectResourceConnections: {
            hostPlanName: NULL_FIELD_REF,
            connectedPlanName: NULL_FIELD_REF
          }
        },
        isShared: NULL_FIELD_REF,
        sharedWithYouFolder: {
          sharedByUser: {
            name: NULL_FIELD_REF
          },
          sharedAt: NULL_FIELD_REF
        }
      }]
    }])
  }
};
let E5 = {
  props: {
    priority: PriorityLevels.P2,
    team: yQ.WebPlatform
  },
  args: [{
    name: 'litmusComparisonId',
    type: {
      kind: 'uuid'
    }
  }],
  fields: {
    litmusComparison: [{
      id: createViewRef('litmusComparisonId')
    }, {
      artifacts: {
        id: NULL_FIELD_REF,
        aggregatedResult: NULL_FIELD_REF,
        commentsTotal: NULL_FIELD_REF,
        headArtifact: {
          path: NULL_FIELD_REF
        },
        baseArtifact: {
          path: NULL_FIELD_REF
        },
        availableResults: makeFieldRefOptional({
          id: NULL_FIELD_REF,
          headVariant: {
            url: NULL_FIELD_REF,
            variant: NULL_FIELD_REF
          },
          baseVariant: {
            url: NULL_FIELD_REF,
            variant: NULL_FIELD_REF
          }
        })
      }
    }]
  }
};
let E4 = {
  props: {
    priority: PriorityLevels.P2,
    team: yQ.DevTools
  },
  args: [{
    name: 'litmusComparisonId',
    type: {
      kind: 'uuid'
    }
  }],
  fields: {
    litmusComparison: [{
      id: createViewRef('litmusComparisonId')
    }, {
      status: NULL_FIELD_REF,
      statusReasonFiltered: makeFieldRefOptional(NULL_FIELD_REF),
      artifacts: {
        id: NULL_FIELD_REF,
        aggregatedResult: NULL_FIELD_REF,
        commentsTotal: NULL_FIELD_REF,
        headArtifact: {
          path: NULL_FIELD_REF
        },
        baseArtifact: {
          path: NULL_FIELD_REF,
          id: NULL_FIELD_REF
        },
        availableResults: makeFieldRefOptional({
          id: NULL_FIELD_REF,
          headVariant: {
            url: NULL_FIELD_REF,
            variant: NULL_FIELD_REF
          },
          baseVariant: {
            url: NULL_FIELD_REF,
            variant: NULL_FIELD_REF
          }
        }),
        reviews: {
          id: NULL_FIELD_REF,
          conclusion: NULL_FIELD_REF,
          reviewedAt: NULL_FIELD_REF,
          reviewer: {
            id: NULL_FIELD_REF,
            handle: NULL_FIELD_REF,
            imgUrl: NULL_FIELD_REF
          }
        }
      }
    }]
  }
};
let E3 = {
  props: {
    priority: PriorityLevels.P2,
    team: yQ.DevTools
  },
  args: [{
    name: 'comparisonId',
    type: {
      kind: 'uuid'
    }
  }],
  fields: {
    litmusComparison: [{
      id: createViewRef('comparisonId')
    }, {
      id: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      reviewCountUnreviewed: makeFieldRefOptional(NULL_FIELD_REF),
      aggregatedResult: NULL_FIELD_REF
    }]
  }
};
let E6 = {
  props: {
    priority: PriorityLevels.P2
  },
  args: [{
    name: 'litmusComparisonId',
    type: {
      kind: 'uuid'
    }
  }],
  fields: {
    litmusComparison: [{
      id: createViewRef('litmusComparisonId')
    }, {
      litmusProjectId: NULL_FIELD_REF,
      artifacts: {
        id: NULL_FIELD_REF,
        headArtifact: {
          path: NULL_FIELD_REF,
          variants: {
            id: NULL_FIELD_REF
          }
        },
        baseArtifact: {
          path: NULL_FIELD_REF,
          variants: {
            id: NULL_FIELD_REF
          }
        },
        results: {
          id: NULL_FIELD_REF,
          headVariant: {
            id: NULL_FIELD_REF,
            variant: NULL_FIELD_REF
          },
          baseVariant: {
            id: NULL_FIELD_REF,
            variant: NULL_FIELD_REF
          }
        }
      },
      comments: {
        id: NULL_FIELD_REF,
        litmusComparisonId: NULL_FIELD_REF,
        messageMeta: {
          t: NULL_FIELD_REF,
          user: {
            id: NULL_FIELD_REF,
            handle: NULL_FIELD_REF,
            imgUrl: NULL_FIELD_REF
          }
        },
        clientMeta: {
          x: NULL_FIELD_REF,
          y: NULL_FIELD_REF,
          pageId: NULL_FIELD_REF,
          pageType: NULL_FIELD_REF
        },
        createdAt: NULL_FIELD_REF,
        updatedAt: NULL_FIELD_REF,
        resolvedAt: NULL_FIELD_REF,
        parentId: NULL_FIELD_REF,
        user: {
          id: NULL_FIELD_REF,
          handle: NULL_FIELD_REF,
          imgUrl: NULL_FIELD_REF
        }
      }
    }]
  }
};
let E7 = {
  props: {
    priority: PriorityLevels.P1
  },
  args: [{
    name: 'litmusComparisonId',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'litmusComparisonArtifactId',
    type: {
      kind: 'uuid'
    }
  }],
  fields: {
    litmusComparison: makeFieldRefOptional([{
      id: createViewRef('litmusComparisonId')
    }, {
      id: NULL_FIELD_REF,
      litmusProject: {
        id: NULL_FIELD_REF,
        name: NULL_FIELD_REF
      },
      status: NULL_FIELD_REF,
      baseBuild: {
        commitSha: NULL_FIELD_REF
      },
      headBuild: {
        commitSha: NULL_FIELD_REF
      },
      artifact: [{
        id: createViewRef('litmusComparisonArtifactId')
      }, {
        id: NULL_FIELD_REF,
        status: NULL_FIELD_REF,
        aggregatedResult: NULL_FIELD_REF,
        headArtifact: {
          id: NULL_FIELD_REF,
          path: NULL_FIELD_REF,
          designConnections: {
            id: NULL_FIELD_REF,
            nodeId: NULL_FIELD_REF,
            file: {
              id: NULL_FIELD_REF,
              name: NULL_FIELD_REF
            },
            properties: NULL_FIELD_REF
          }
        },
        baseArtifact: {
          id: NULL_FIELD_REF,
          path: NULL_FIELD_REF
        },
        filteredResults: [{
          status: 'mismatch'
        }, {
          id: NULL_FIELD_REF,
          headVariant: {
            id: NULL_FIELD_REF,
            url: NULL_FIELD_REF,
            variant: NULL_FIELD_REF,
            artifact: {
              id: NULL_FIELD_REF,
              path: NULL_FIELD_REF
            }
          },
          baseVariant: {
            id: NULL_FIELD_REF,
            url: NULL_FIELD_REF,
            variant: NULL_FIELD_REF,
            artifact: {
              id: NULL_FIELD_REF,
              path: NULL_FIELD_REF
            }
          }
        }],
        availableResults: {
          id: NULL_FIELD_REF,
          headVariant: {
            id: NULL_FIELD_REF,
            url: NULL_FIELD_REF,
            variant: NULL_FIELD_REF,
            artifact: {
              id: NULL_FIELD_REF,
              path: NULL_FIELD_REF
            }
          },
          baseVariant: {
            id: NULL_FIELD_REF,
            url: NULL_FIELD_REF,
            variant: NULL_FIELD_REF,
            artifact: {
              id: NULL_FIELD_REF,
              path: NULL_FIELD_REF
            }
          }
        },
        reviews: {
          id: NULL_FIELD_REF,
          conclusion: NULL_FIELD_REF,
          reviewedAt: NULL_FIELD_REF,
          reviewer: {
            id: NULL_FIELD_REF,
            handle: NULL_FIELD_REF,
            imgUrl: NULL_FIELD_REF
          }
        }
      }]
    }])
  }
};
let E8 = {
  props: {
    priority: PriorityLevels.P1
  },
  args: [{
    name: 'litmusComparisonId',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'litmusComparisonArtifactId',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'litmusComparisonResultId',
    type: {
      kind: 'uuid'
    }
  }],
  fields: {
    litmusComparison: makeFieldRefOptional([{
      id: createViewRef('litmusComparisonId')
    }, {
      id: NULL_FIELD_REF,
      artifact: [{
        id: createViewRef('litmusComparisonArtifactId')
      }, {
        result: [{
          id: createViewRef('litmusComparisonResultId')
        }, {
          id: NULL_FIELD_REF,
          baseVariant: {
            id: NULL_FIELD_REF,
            url: NULL_FIELD_REF,
            width: NULL_FIELD_REF,
            height: NULL_FIELD_REF,
            variant: NULL_FIELD_REF,
            artifact: {
              id: NULL_FIELD_REF,
              path: NULL_FIELD_REF
            }
          },
          headVariant: {
            id: NULL_FIELD_REF,
            url: NULL_FIELD_REF,
            variant: NULL_FIELD_REF,
            width: NULL_FIELD_REF,
            height: NULL_FIELD_REF,
            artifact: {
              id: NULL_FIELD_REF,
              path: NULL_FIELD_REF
            }
          },
          difference: {
            id: NULL_FIELD_REF,
            imageUrl: NULL_FIELD_REF
          }
        }]
      }]
    }])
  }
};
let E9 = {
  props: {
    priority: PriorityLevels.P1
  },
  args: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }],
  fields: {
    litmusComparison: [{
      id: createViewRef('id')
    }, {
      id: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      pr: {
        githubUserId: NULL_FIELD_REF,
        githubUsername: NULL_FIELD_REF,
        githubPrNumber: NULL_FIELD_REF,
        headRef: NULL_FIELD_REF,
        baseRef: NULL_FIELD_REF,
        updatedAt: NULL_FIELD_REF
      },
      createdAt: NULL_FIELD_REF,
      completedAt: NULL_FIELD_REF,
      aggregatedResult: NULL_FIELD_REF,
      reviewCountUnreviewed: NULL_FIELD_REF,
      status: NULL_FIELD_REF,
      statusReasonFiltered: NULL_FIELD_REF,
      litmusProject: {
        id: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        githubRepository: makeFieldRefOptional({
          owner: NULL_FIELD_REF,
          name: NULL_FIELD_REF
        })
      },
      headBuild: {
        id: NULL_FIELD_REF,
        createdAt: NULL_FIELD_REF,
        completedAt: NULL_FIELD_REF
      }
    }]
  }
};
let xe = {
  props: {
    priority: PriorityLevels.P2,
    team: yQ.DevTools
  },
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  fields: {
    fileV2: [{
      key: createViewRef('fileKey')
    }, {
      id: NULL_FIELD_REF,
      name: NULL_FIELD_REF
    }]
  }
};
let xt = {
  args: [{
    name: 'projectId',
    type: {
      kind: 'uuid'
    }
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    litmusProject: [{
      id: createViewRef('projectId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      githubRepository: {
        owner: NULL_FIELD_REF,
        name: NULL_FIELD_REF
      },
      activeComparisons: makeFieldRefOptional({
        id: NULL_FIELD_REF,
        createdAt: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        pr: {
          githubUserId: NULL_FIELD_REF,
          githubUsername: NULL_FIELD_REF,
          githubPrNumber: NULL_FIELD_REF,
          headRef: NULL_FIELD_REF
        },
        aggregatedResult: NULL_FIELD_REF,
        reviewCountUnreviewed: NULL_FIELD_REF,
        artifacts: {
          id: NULL_FIELD_REF
        },
        status: NULL_FIELD_REF,
        changesCountUpdated: NULL_FIELD_REF,
        changesCountAdded: NULL_FIELD_REF,
        changesCountRemoved: NULL_FIELD_REF,
        commentsTotal: NULL_FIELD_REF
      })
    }]
  }
};
let xi = {
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    litmusProjects: {
      id: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      githubRepository: makeFieldRefOptional({
        owner: NULL_FIELD_REF,
        name: NULL_FIELD_REF
      })
    }
  }
};
let xn = {
  props: {
    priority: PriorityLevels.P1,
    team: yQ.DevTools
  },
  args: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }],
  fields: {
    litmusComparison: makeFieldRefOptional([{
      id: createViewRef('id')
    }, {
      reviewCountAccepted: NULL_FIELD_REF,
      reviewCountRejected: NULL_FIELD_REF,
      reviewCountUnreviewed: NULL_FIELD_REF,
      artifacts: {
        id: NULL_FIELD_REF,
        aggregatedResult: NULL_FIELD_REF,
        headArtifact: {
          path: NULL_FIELD_REF
        },
        availableResults: {
          id: NULL_FIELD_REF,
          aggregatedResult: NULL_FIELD_REF,
          headVariant: {
            url: NULL_FIELD_REF,
            artifact: {
              path: NULL_FIELD_REF
            },
            variant: NULL_FIELD_REF
          }
        }
      }
    }])
  }
};
let xr = {
  args: [{
    name: 'cacheNonce',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Scale
  },
  fields: {
    lockClient: [{
      userId: createSessionRef('userId'),
      cacheNonce: createViewRef('cacheNonce')
    }, {
      id: NULL_FIELD_REF,
      lock: NULL_FIELD_REF
    }]
  }
};
let xa = {
  args: [{
    name: 'planType',
    type: {
      kind: 'enum',
      name: 'PlanType'
    }
  }, {
    name: 'planId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'targetUserId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.Scale
  },
  fields: {
    memberFlyoutInfo: [{
      userId: createSessionRef('userId'),
      planType: createViewRef('planType'),
      planId: createViewRef('planId'),
      targetUserId: createViewRef('targetUserId')
    }, {
      orgUserId: NULL_FIELD_REF,
      teamUserId: NULL_FIELD_REF,
      orgUser: {
        user: {
          profile: {
            jobTitle: NULL_FIELD_REF
          }
        },
        createdAt: NULL_FIELD_REF,
        planUserMembershipRecord: {
          createdAt: NULL_FIELD_REF,
          resourceName: NULL_FIELD_REF,
          resourceType: NULL_FIELD_REF,
          resourceId: NULL_FIELD_REF,
          source: NULL_FIELD_REF,
          metadata: makeFieldRefOptional({
            previous_team_id: NULL_FIELD_REF,
            previous_team_name: NULL_FIELD_REF
          }),
          actor: {
            name: NULL_FIELD_REF
          }
        }
      },
      teamUser: {
        user: {
          profile: {
            jobTitle: NULL_FIELD_REF
          }
        },
        currentSeat: {
          billingInterval: NULL_FIELD_REF
        }
      }
    }]
  }
};
let xs = {
  id: NULL_FIELD_REF,
  key: NULL_FIELD_REF,
  reviewNumber: NULL_FIELD_REF,
  title: NULL_FIELD_REF,
  description: NULL_FIELD_REF,
  owner: {
    id: NULL_FIELD_REF,
    handle: NULL_FIELD_REF,
    imgUrl: NULL_FIELD_REF
  },
  closer: {
    id: NULL_FIELD_REF,
    handle: NULL_FIELD_REF,
    imgUrl: NULL_FIELD_REF
  },
  closedAt: NULL_FIELD_REF,
  fileMergeId: NULL_FIELD_REF,
  reviewers: {
    user: {
      id: NULL_FIELD_REF,
      handle: NULL_FIELD_REF,
      imgUrl: NULL_FIELD_REF
    },
    notes: NULL_FIELD_REF,
    changesRequestedAt: NULL_FIELD_REF,
    approvedAt: NULL_FIELD_REF
  },
  mergeSummaryNotes: NULL_FIELD_REF,
  requestedAt: NULL_FIELD_REF,
  updatedAt: NULL_FIELD_REF,
  createdAt: NULL_FIELD_REF
};
let xo = {
  args: [{
    name: 'repoId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    repo: [{
      id: createViewRef('repoId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      defaultFileKey: NULL_FIELD_REF,
      updatedAt: NULL_FIELD_REF,
      trashedAt: NULL_FIELD_REF,
      linkAccess: NULL_FIELD_REF,
      protoLinkAccess: NULL_FIELD_REF,
      orgBrowsable: NULL_FIELD_REF,
      orgAudience: NULL_FIELD_REF,
      canEdit: createAliasedFieldRef('canEditV3', [{
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      }, NULL_FIELD_REF]),
      roleOnObjectForUser: [{
        userId: createSessionRef('userId')
      }, {
        id: NULL_FIELD_REF,
        isOwnerOfResource: NULL_FIELD_REF
      }],
      files: {
        id: NULL_FIELD_REF,
        key: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        _name: NULL_FIELD_REF,
        sourceFileKey: NULL_FIELD_REF,
        sourceCheckpointId: NULL_FIELD_REF,
        fileRepoId: NULL_FIELD_REF,
        folderId: NULL_FIELD_REF,
        parentOrgId: NULL_FIELD_REF,
        teamId: NULL_FIELD_REF,
        createdAt: NULL_FIELD_REF,
        trashedAt: NULL_FIELD_REF,
        updatedAt: NULL_FIELD_REF,
        deletedAt: NULL_FIELD_REF,
        trashedUserId: NULL_FIELD_REF,
        orgBrowsable: NULL_FIELD_REF,
        orgAudience: NULL_FIELD_REF,
        linkAccess: NULL_FIELD_REF,
        protoLinkAccess: NULL_FIELD_REF,
        editorType: NULL_FIELD_REF,
        description: NULL_FIELD_REF,
        checkpointId: NULL_FIELD_REF,
        openMergeRequest: {
          id: NULL_FIELD_REF,
          mergeRequestKey: NULL_FIELD_REF,
          mergeRequest: xs,
          branchFileKey: NULL_FIELD_REF
        },
        fileMerges: {
          id: NULL_FIELD_REF,
          userId: NULL_FIELD_REF,
          user: {
            id: NULL_FIELD_REF,
            name: NULL_FIELD_REF,
            handle: NULL_FIELD_REF
          },
          direction: NULL_FIELD_REF,
          checkpointDiffId: NULL_FIELD_REF,
          mergeResultCheckpointId: NULL_FIELD_REF,
          mergeResultFileversionId: NULL_FIELD_REF,
          updatedAt: NULL_FIELD_REF,
          createdAt: NULL_FIELD_REF,
          mergeRequest: xs
        },
        canEdit: createAliasedFieldRef('canEditV3', [{
          userId: createSessionRef('userId'),
          sessionId: createSessionRef('sessionId'),
          anonymousUserId: createSessionRef('anonymousUserId')
        }, NULL_FIELD_REF]),
        canManage: createAliasedFieldRef('canManageV2', [{
          userId: createSessionRef('userId'),
          sessionId: createSessionRef('sessionId'),
          anonymousUserId: createSessionRef('anonymousUserId')
        }, NULL_FIELD_REF]),
        roleOnObjectForUser: [{
          userId: createSessionRef('userId')
        }, {
          id: NULL_FIELD_REF,
          isOwnerOfResource: NULL_FIELD_REF
        }],
        creator: {
          id: NULL_FIELD_REF,
          imgUrl: NULL_FIELD_REF,
          name: NULL_FIELD_REF,
          handle: NULL_FIELD_REF
        }
      }
    }]
  }
};
let xl = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'rootId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('fileKey')
    }, {
      mobileCommentThread: [{
        rootId: createViewRef('rootId')
      }, yn.fields],
      currentUserFileFollower: [{
        userId: createSessionRef('userId')
      }, {
        unreadComments: NULL_FIELD_REF
      }]
    }])
  }
};
let xd = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('fileKey')
    }, {
      mobileComments: [{
        parentId: null,
        initialPageSize: 1e4
      }, {
        ...yn.fields,
        clientMeta: {
          pageId: NULL_FIELD_REF,
          nodeId: NULL_FIELD_REF
        }
      }],
      currentUserCommentReadStatus: [{
        userId: createSessionRef('userId')
      }, {
        id: NULL_FIELD_REF,
        userId: NULL_FIELD_REF,
        fileKey: NULL_FIELD_REF,
        createdAt: NULL_FIELD_REF,
        allReadAt: NULL_FIELD_REF,
        readComments: NULL_FIELD_REF,
        unreadComments: NULL_FIELD_REF
      }]
    }])
  }
};
let xc = {
  id: NULL_FIELD_REF,
  orgId: NULL_FIELD_REF,
  createdAt: NULL_FIELD_REF,
  updatedAt: NULL_FIELD_REF,
  resourceId: NULL_FIELD_REF,
  resourceType: NULL_FIELD_REF,
  sidebarSectionId: NULL_FIELD_REF
};
let xu = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      favoritedFiles: [{
        orgId: createViewRef('orgId')
      }, mergeFieldRefs(xc, {
        file: createAliasedFieldRef('readableWhiteboardFile', [{
          userId: createSessionRef('userId')
        }, yr.fields])
      })]
    }]
  }
};
let xp = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      favoritedFiles: [{
        orgId: createViewRef('orgId')
      }, mergeFieldRefs(xc, {
        file: createAliasedFieldRef('readableFile', [{
          userId: createSessionRef('userId')
        }, yr.fields])
      })],
      favoritedPrototypes: [{
        orgId: createViewRef('orgId')
      }, mergeFieldRefs(xc, {
        prototype: createAliasedFieldRef('readablePrototype', [{
          userId: createSessionRef('userId')
        }, {
          id: NULL_FIELD_REF,
          name: NULL_FIELD_REF,
          fileKey: NULL_FIELD_REF,
          pageId: NULL_FIELD_REF,
          thumbnailUrl: createAliasedFieldRef('signedThumbnailUrl', NULL_FIELD_REF),
          thumbnailMeta: NULL_FIELD_REF,
          deleted: NULL_FIELD_REF,
          isFavorited: [{
            userId: createSessionRef('userId'),
            orgId: createViewRef('orgId')
          }, NULL_FIELD_REF],
          file: {
            key: NULL_FIELD_REF,
            name: NULL_FIELD_REF,
            folderId: NULL_FIELD_REF,
            updatedAt: NULL_FIELD_REF,
            projectPath: [{
              userId: createSessionRef('userId')
            }, NULL_FIELD_REF]
          }
        }])
      })]
    }]
  }
};
let xm = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: createAliasedFieldRef('_fileViewableByPrototypeViewers', [{
      key: createViewRef('fileKey'),
      userId: createSessionRef('userId')
    }, mergeFieldRefs(yr.fields, {
      _name: NULL_FIELD_REF,
      branchMetadata: createAliasedFieldRef('repo', {
        id: NULL_FIELD_REF,
        sourceFileName: createAliasedFieldRef('name', NULL_FIELD_REF),
        deletedAt: NULL_FIELD_REF,
        trashedAt: NULL_FIELD_REF,
        sourceFileKey: createAliasedFieldRef('defaultFileKey', NULL_FIELD_REF),
        hasActiveBranches: NULL_FIELD_REF,
        activeBranches: {
          key: NULL_FIELD_REF,
          name: NULL_FIELD_REF
        }
      })
    })])
  }
};
let xh = {
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    lastFrameSelection: [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      fileKey: NULL_FIELD_REF,
      frameId: NULL_FIELD_REF,
      frameName: NULL_FIELD_REF
    }]
  }
};
let xg = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      baseOrgUser: [{
        orgId: createViewRef('orgId')
      }, {
        draftsProject: ya.fields,
        fileBrowserPreferences: {
          orderedSidebarSections: NULL_FIELD_REF
        }
      }],
      draftsProject: ya.fields,
      externalRestrictedOrgId: NULL_FIELD_REF,
      teamRoles: {
        team: {
          id: NULL_FIELD_REF,
          name: NULL_FIELD_REF,
          deletedAt: NULL_FIELD_REF,
          description: NULL_FIELD_REF,
          imgUrl: createAliasedFieldRef('imgUrlTransformed', NULL_FIELD_REF),
          orgId: NULL_FIELD_REF,
          orgAccess: NULL_FIELD_REF,
          roles: {
            id: NULL_FIELD_REF
          },
          currentPlanUser: [{
            userId: createSessionRef('userId')
          }, {
            createdAt: NULL_FIELD_REF,
            designPaidStatus: NULL_FIELD_REF,
            whiteboardPaidStatus: NULL_FIELD_REF
          }],
          currentTeamUser: [{
            userId: createSessionRef('userId')
          }, {
            createdAt: makeFieldRefOptional(),
            designPaidStatus: NULL_FIELD_REF,
            whiteboardPaidStatus: NULL_FIELD_REF
          }]
        }
      },
      favoritedProjects: [{
        orgId: createViewRef('orgId')
      }, mergeFieldRefs(xc, {
        project: createAliasedFieldRef('readableProject', [{
          userId: createSessionRef('userId')
        }, ya.fields])
      })],
      userSidebarSections: [{
        orgId: createViewRef('orgId')
      }, {
        id: NULL_FIELD_REF,
        createdAt: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        orderedFavoritedResourceIds: NULL_FIELD_REF
      }],
      fileBrowserPreferences: {
        orderedSidebarSections: NULL_FIELD_REF
      },
      hasSharedProjects: [{
        orgId: createViewRef('orgId')
      }, NULL_FIELD_REF]
    }]
  }
};
let xf = {
  args: [{
    name: 'projectId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    project: [{
      id: createViewRef('projectId'),
      userId: createSessionRef('userId')
    }, {
      path: NULL_FIELD_REF,
      description: NULL_FIELD_REF,
      subscription: [{
        userId: createSessionRef('userId')
      }, {
        id: NULL_FIELD_REF
      }],
      teamId: NULL_FIELD_REF,
      orgId: NULL_FIELD_REF,
      canCreateFigjamFile: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF],
      files: createAliasedFieldRef('whiteboardFiles', yr.fields)
    }]
  }
};
let x_ = {
  args: [{
    name: 'projectId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    project: [{
      id: createViewRef('projectId'),
      userId: createSessionRef('userId')
    }, {
      path: NULL_FIELD_REF,
      description: NULL_FIELD_REF,
      subscription: [{
        userId: createSessionRef('userId')
      }, {
        id: NULL_FIELD_REF
      }],
      teamId: NULL_FIELD_REF,
      orgId: NULL_FIELD_REF,
      canCreateFigjamFile: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF],
      files: yr.fields,
      undeletedFiles: {
        id: NULL_FIELD_REF,
        key: NULL_FIELD_REF,
        fileRepoId: NULL_FIELD_REF,
        trackTags: {
          isTemplate: NULL_FIELD_REF
        }
      }
    }]
  }
};
let xA = {
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      externalRestrictedOrgId: NULL_FIELD_REF,
      baseOrgUsers: {
        id: NULL_FIELD_REF,
        org: {
          id: NULL_FIELD_REF,
          name: NULL_FIELD_REF,
          imgUrl: createAliasedFieldRef('imgUrlTransformed', NULL_FIELD_REF),
          figjamDisabledAt: NULL_FIELD_REF
        },
        permission: NULL_FIELD_REF,
        createdAt: NULL_FIELD_REF,
        accountType: NULL_FIELD_REF,
        whiteboardPaidStatus: NULL_FIELD_REF
      },
      teamUsers: {
        createdAt: NULL_FIELD_REF,
        hasLimitedPlanSpace: NULL_FIELD_REF,
        hasFullPlanSpace: NULL_FIELD_REF,
        team: createAliasedFieldRef('teamInfo', {
          id: NULL_FIELD_REF,
          name: NULL_FIELD_REF,
          description: NULL_FIELD_REF,
          imgUrl: createAliasedFieldRef('imgUrlTransformed', NULL_FIELD_REF),
          deletedAt: NULL_FIELD_REF,
          orgId: NULL_FIELD_REF
        })
      }
    }]
  }
};
let xy = {
  args: [{
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    team: makeFieldRefOptional(createAliasedFieldRef('teamLimitedInfo', [{
      id: createViewRef('teamId'),
      userId: createSessionRef('userId')
    }, {
      name: NULL_FIELD_REF,
      description: NULL_FIELD_REF,
      imgUrl: createAliasedFieldRef('imgUrlTransformed', NULL_FIELD_REF),
      orgId: NULL_FIELD_REF,
      currentTeamUser: [{
        userId: createSessionRef('userId')
      }, {
        designPaidStatus: NULL_FIELD_REF,
        whiteboardPaidStatus: NULL_FIELD_REF,
        teamProjectRoles: {
          project: ya.fields
        }
      }]
    }]))
  }
};
let xb = {
  args: [{
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      teamUser: [{
        teamId: createViewRef('teamId')
      }, {
        favoritedFiles: mergeFieldRefs(xc, {
          file: createAliasedFieldRef('readableWhiteboardFile', [{
            userId: createSessionRef('userId')
          }, yr.fields])
        }),
        planlessFavoritedFiles: mergeFieldRefs(xc, {
          file: createAliasedFieldRef('readableWhiteboardFile', [{
            userId: createSessionRef('userId')
          }, yr.fields])
        })
      }]
    }]
  }
};
let xv = {
  id: NULL_FIELD_REF,
  name: NULL_FIELD_REF,
  fileKey: NULL_FIELD_REF,
  pageId: NULL_FIELD_REF,
  thumbnailUrl: createAliasedFieldRef('signedThumbnailUrl', NULL_FIELD_REF),
  thumbnailMeta: NULL_FIELD_REF,
  deleted: NULL_FIELD_REF,
  isFavorited: [{
    userId: createSessionRef('userId'),
    orgId: null
  }, NULL_FIELD_REF],
  file: {
    key: NULL_FIELD_REF,
    name: NULL_FIELD_REF,
    folderId: NULL_FIELD_REF,
    updatedAt: NULL_FIELD_REF,
    projectPath: [{
      userId: createSessionRef('userId')
    }, NULL_FIELD_REF]
  }
};
let xI = {
  args: [{
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      teamUser: [{
        teamId: createViewRef('teamId')
      }, {
        favoritedFiles: mergeFieldRefs(xc, {
          file: createAliasedFieldRef('readableFile', [{
            userId: createSessionRef('userId')
          }, yr.fields])
        }),
        favoritedPrototypes: {
          prototype: createAliasedFieldRef('readablePrototype', [{
            userId: createSessionRef('userId')
          }, xv])
        },
        planlessFavoritedFiles: mergeFieldRefs(xc, {
          file: createAliasedFieldRef('readableFile', [{
            userId: createSessionRef('userId')
          }, yr.fields])
        }),
        planlessFavoritedPrototypes: mergeFieldRefs(xc, {
          prototype: createAliasedFieldRef('readablePrototype', [{
            userId: createSessionRef('userId')
          }, xv])
        })
      }]
    }]
  }
};
let xE = {
  args: [{
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    team: [{
      id: createViewRef('teamId'),
      userId: createSessionRef('userId')
    }, {
      name: NULL_FIELD_REF,
      description: NULL_FIELD_REF,
      imgUrl: createAliasedFieldRef('imgUrlTransformed', NULL_FIELD_REF),
      orgId: NULL_FIELD_REF,
      currentTeamUser: [{
        userId: createSessionRef('userId')
      }, {
        designPaidStatus: NULL_FIELD_REF,
        whiteboardPaidStatus: NULL_FIELD_REF
      }],
      currentPlanUser: [{
        userId: createSessionRef('userId')
      }, {
        designPaidStatus: NULL_FIELD_REF,
        whiteboardPaidStatus: NULL_FIELD_REF,
        key: {
          parentId: NULL_FIELD_REF,
          type: NULL_FIELD_REF
        }
      }],
      projects: createAliasedFieldRef('allProjects', [{
        userId: createSessionRef('userId')
      }, ya.fields])
    }]
  }
};
let xx = {
  args: [{
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.Mobile
  },
  fields: {
    team: [{
      id: createViewRef('teamId'),
      userId: createSessionRef('userId')
    }, {
      name: NULL_FIELD_REF,
      description: NULL_FIELD_REF,
      imgUrl: createAliasedFieldRef('imgUrlTransformed', NULL_FIELD_REF),
      orgId: NULL_FIELD_REF,
      currentUser: [{
        userId: createSessionRef('userId')
      }, {
        draftsFolderId: NULL_FIELD_REF
      }],
      currentPlanUser: [{
        userId: createSessionRef('userId')
      }, {
        createdAt: NULL_FIELD_REF,
        designPaidStatus: NULL_FIELD_REF,
        whiteboardPaidStatus: NULL_FIELD_REF,
        draftsProject: ya.fields
      }],
      currentTeamUser: [{
        userId: createSessionRef('userId')
      }, {
        createdAt: makeFieldRefOptional(),
        designPaidStatus: NULL_FIELD_REF,
        whiteboardPaidStatus: NULL_FIELD_REF,
        draftsProject: ya.fields
      }],
      projects: createAliasedFieldRef('allProjects', [{
        userId: createSessionRef('userId')
      }, ya.fields])
    }]
  }
};
let xS = {
  args: [{
    name: 'postId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    mobileFeedPost: [{
      id: createViewRef('postId')
    }, mergeFieldRefs(vY.fields, {
      currentUserIsFollowing: createAliasedFieldRef('currentUserIsFollowingV2', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF]),
      numComments: NULL_FIELD_REF,
      views: {
        createdAt: NULL_FIELD_REF,
        user: {
          handle: NULL_FIELD_REF,
          id: NULL_FIELD_REF,
          imgUrl: NULL_FIELD_REF
        }
      }
    })]
  }
};
let xw = {
  id: NULL_FIELD_REF,
  pending: NULL_FIELD_REF,
  pendingEmail: NULL_FIELD_REF,
  level: NULL_FIELD_REF,
  updatedAt: NULL_FIELD_REF,
  createdAt: NULL_FIELD_REF,
  resourceId: NULL_FIELD_REF,
  resourceType: NULL_FIELD_REF,
  userId: NULL_FIELD_REF,
  user: {
    id: NULL_FIELD_REF,
    handle: NULL_FIELD_REF,
    imgUrl: NULL_FIELD_REF,
    name: NULL_FIELD_REF
  }
};
let xC = {
  id: NULL_FIELD_REF,
  setByUser: {
    id: NULL_FIELD_REF,
    handle: NULL_FIELD_REF,
    imgUrl: NULL_FIELD_REF,
    name: NULL_FIELD_REF
  },
  expiresAt: NULL_FIELD_REF,
  prevPrivateLinkAccess: NULL_FIELD_REF,
  prevPrivateProtoLinkAccess: NULL_FIELD_REF,
  prevOrgBrowsable: NULL_FIELD_REF,
  accessReverted: NULL_FIELD_REF
};
let xT = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: createAliasedFieldRef('_fileViewableByPrototypeViewers', [{
      key: createViewRef('fileKey'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      canEdit: createAliasedFieldRef('canEditV3', [{
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      }, NULL_FIELD_REF]),
      canEditCanvas: createAliasedFieldRef('canEditCanvasV2', [{
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      }, NULL_FIELD_REF]),
      canRead: createAliasedFieldRef('canReadV3', [{
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      }, NULL_FIELD_REF]),
      canView: createAliasedFieldRef('canViewV3', [{
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      }, NULL_FIELD_REF]),
      canViewPrototype: createAliasedFieldRef('canViewPrototypeV3', [{
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      }, NULL_FIELD_REF]),
      hasViewPrototypeRole: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF],
      hasEditRole: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF],
      hasViewRole: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF],
      linkAccess: NULL_FIELD_REF,
      org: createAliasedFieldRef('_orgForLegacyViews', {
        id: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        imgUrl: createAliasedFieldRef('imgUrlTransformed', NULL_FIELD_REF),
        orgDomains: {
          id: NULL_FIELD_REF,
          domain: NULL_FIELD_REF,
          orgId: NULL_FIELD_REF,
          createdAt: NULL_FIELD_REF,
          googleSsoOnlyAt: NULL_FIELD_REF,
          samlSsoOnlyAt: NULL_FIELD_REF
        }
      }),
      project: [{
        userId: createSessionRef('userId')
      }, {
        id: NULL_FIELD_REF,
        path: NULL_FIELD_REF,
        teamId: NULL_FIELD_REF,
        viewOnlyAt: NULL_FIELD_REF,
        teamAccess: NULL_FIELD_REF,
        canRead: [{
          userId: createSessionRef('userId')
        }, NULL_FIELD_REF]
      }],
      repo: {
        roles: xw,
        canEdit: createAliasedFieldRef('canEditV3', [{
          userId: createSessionRef('userId'),
          sessionId: createSessionRef('sessionId'),
          anonymousUserId: createSessionRef('anonymousUserId')
        }, NULL_FIELD_REF]),
        roleOnObjectForUser: [{
          userId: createSessionRef('userId')
        }, {
          id: NULL_FIELD_REF,
          isOwnerOfResource: NULL_FIELD_REF
        }]
      },
      roles: createAliasedFieldRef('readableRoles', [{
        userId: createSessionRef('userId')
      }, xw]),
      fileRoleRequests: AH.fields,
      hasFileLinkPassword: NULL_FIELD_REF,
      hasProtoLinkPassword: NULL_FIELD_REF,
      pwdConfig: createAliasedFieldRef('pwdConfigV2', {
        id: NULL_FIELD_REF,
        setByUser: {
          id: NULL_FIELD_REF,
          handle: NULL_FIELD_REF,
          imgUrl: NULL_FIELD_REF,
          name: NULL_FIELD_REF
        },
        updatedAt: NULL_FIELD_REF
      }),
      fileLinkExpirationConfig: xC,
      sourceFileLinkExpirationConfig: xC
    }])
  }
};
let xk = {
  args: [],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.Mobile
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      email: NULL_FIELD_REF,
      recentFilesLimit15: [{
        userId: createSessionRef('userId')
      }, AY.fields]
    }]
  }
};
let xR = {
  args: [{
    name: 'planType',
    type: {
      kind: 'enum',
      name: 'PlanType'
    }
  }, {
    name: 'targetPlanUserId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'targetUserId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.Scale
  },
  fields: {
    planUserById: [{
      requestingUserId: createSessionRef('userId'),
      planType: createViewRef('planType'),
      targetPlanUserId: createViewRef('targetPlanUserId'),
      targetUserId: createViewRef('targetUserId')
    }, {
      currentSeat: {
        billableProductKey: NULL_FIELD_REF,
        initialBillingPeriodStartAt: NULL_FIELD_REF,
        billingInterval: NULL_FIELD_REF
      }
    }]
  }
};
let xN = {
  args: [],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Monetization
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      recentFiles2: [{
        userId: createSessionRef('userId')
      }, {
        file: {
          teamId: NULL_FIELD_REF
        }
      }]
    }]
  }
};
let xP = {
  args: [],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Monetization
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      email: NULL_FIELD_REF,
      recentFiles2: [{
        userId: createSessionRef('userId')
      }, AY.fields]
    }]
  }
};
let xO = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P0,
    cuf: FileOperationTypes.CreateFile,
    team: yQ.Wayfinding
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      teamEditRoles: {
        id: NULL_FIELD_REF,
        pending: NULL_FIELD_REF,
        team: {
          id: NULL_FIELD_REF,
          name: NULL_FIELD_REF,
          imgUrl: createAliasedFieldRef('imgUrlTransformed', NULL_FIELD_REF),
          projects: {
            id: NULL_FIELD_REF,
            path: NULL_FIELD_REF,
            teamId: NULL_FIELD_REF,
            inviteOnlyAt: NULL_FIELD_REF,
            viewOnlyAt: NULL_FIELD_REF,
            isEditingLockedForUser: [{
              userId: createSessionRef('userId')
            }, NULL_FIELD_REF]
          },
          roles: {
            user: {
              id: NULL_FIELD_REF,
              name: NULL_FIELD_REF,
              email: NULL_FIELD_REF,
              imgUrl: NULL_FIELD_REF,
              handle: NULL_FIELD_REF
            }
          },
          studentTeamAt: NULL_FIELD_REF,
          deletedAt: NULL_FIELD_REF,
          eduGracePeriod: [{
            userId: createSessionRef('userId')
          }, {
            id: NULL_FIELD_REF,
            isValid: NULL_FIELD_REF
          }],
          restrictionsList: NULL_FIELD_REF,
          subscription: NULL_FIELD_REF,
          gracePeriodEnd: NULL_FIELD_REF,
          canEdit: [{
            userId: createSessionRef('userId')
          }, NULL_FIELD_REF],
          canAdmin: [{
            userId: createSessionRef('userId')
          }, NULL_FIELD_REF]
        }
      }
    }]
  }
};
let xD = {
  args: [{
    name: 'projectId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: makeFieldRefOptional([{
      id: createViewRef('projectId'),
      userId: createSessionRef('userId')
    }, mergeFieldRefs({
      id: NULL_FIELD_REF,
      orgId: NULL_FIELD_REF,
      teamId: NULL_FIELD_REF,
      currentPlanUser: [{
        userId: createSessionRef('userId')
      }, {
        designPaidStatus: NULL_FIELD_REF,
        whiteboardPaidStatus: NULL_FIELD_REF,
        draftsFolderId: NULL_FIELD_REF
      }],
      currentPrivilegedOrgUser: [{
        userId: createSessionRef('userId')
      }, {
        designPaidStatus: NULL_FIELD_REF,
        whiteboardPaidStatus: NULL_FIELD_REF,
        draftsFolderId: NULL_FIELD_REF,
        org: [{
          userId: createSessionRef('userId')
        }, {
          k12GoogleOrg: NULL_FIELD_REF
        }]
      }],
      currentTeamUser: [{
        userId: createSessionRef('userId')
      }, {
        designPaidStatus: NULL_FIELD_REF,
        whiteboardPaidStatus: NULL_FIELD_REF,
        draftsFolderId: NULL_FIELD_REF
      }],
      path: NULL_FIELD_REF,
      viewOnlyAt: NULL_FIELD_REF,
      inviteOnlyAt: NULL_FIELD_REF,
      canEdit: makeFieldRefOptional([{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF]),
      subscription: [{
        userId: createSessionRef('userId')
      }, {
        id: NULL_FIELD_REF
      }],
      createdAt: NULL_FIELD_REF,
      updatedAt: NULL_FIELD_REF,
      deletedAt: NULL_FIELD_REF,
      trashedAt: NULL_FIELD_REF,
      description: NULL_FIELD_REF,
      isEditingLockedForUser: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF]
    }, yA.fields)])
  }
};
let xL = {
  args: [{
    name: 'projectId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Workflow
  },
  fields: {
    project: [{
      id: createViewRef('projectId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      teamId: NULL_FIELD_REF,
      path: NULL_FIELD_REF,
      viewOnlyAt: NULL_FIELD_REF,
      inviteOnlyAt: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      isEditingLockedForUser: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF],
      team: createAliasedFieldRef('teamLimitedInfo', {
        id: NULL_FIELD_REF,
        name: NULL_FIELD_REF
      })
    }]
  }
};
let xF = {
  args: [{
    name: 'cacheNonce',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      notificationExperimentInfo: makeFieldRefOptional([{
        cacheNonce: createViewRef('cacheNonce')
      }, {
        id: NULL_FIELD_REF,
        fileKey: NULL_FIELD_REF,
        userId: NULL_FIELD_REF,
        type: NULL_FIELD_REF,
        experimentName: NULL_FIELD_REF,
        preference: NULL_FIELD_REF,
        timestamp: NULL_FIELD_REF
      }])
    }]
  }
};
let xM = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P0,
    cuf: FileOperationTypes.CreateFile,
    team: yQ.Workflow
  },
  fields: {
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, {
      id: NULL_FIELD_REF,
      key: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      _name: NULL_FIELD_REF,
      teamId: NULL_FIELD_REF,
      clientMeta: NULL_FIELD_REF,
      isAbandonedDraftFile: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF],
      org: createAliasedFieldRef('_orgForLegacyViews', {
        figjamDisabledAt: NULL_FIELD_REF,
        inviteWhitelist: {
          guestInviteSetting: NULL_FIELD_REF
        },
        name: NULL_FIELD_REF,
        isSlidesDisabled: NULL_FIELD_REF,
        sitesPublishingDisabled: NULL_FIELD_REF,
        supabaseDisabled: NULL_FIELD_REF,
        isSitesDisabled: NULL_FIELD_REF,
        isCooperDisabled: NULL_FIELD_REF
      }),
      plan: [{
        userId: createSessionRef('userId')
      }, {
        id: NULL_FIELD_REF,
        tier: NULL_FIELD_REF,
        campfireModelEnabledAt: NULL_FIELD_REF
      }],
      planPublicInfo: {
        key: {
          type: NULL_FIELD_REF,
          parentId: NULL_FIELD_REF
        },
        tier: NULL_FIELD_REF
      },
      currentPlanUser: [{
        userId: createSessionRef('userId')
      }, {
        draftsFolderId: NULL_FIELD_REF,
        designPaidStatus: NULL_FIELD_REF,
        whiteboardPaidStatus: NULL_FIELD_REF,
        seatTypeLicenseTypes: NULL_FIELD_REF,
        designAccountTypeRequest: Ax.fields,
        whiteboardAccountTypeRequest: Ax.fields,
        devModeAccountTypeRequest: Ax.fields
      }],
      currentOrgUser: [{
        userId: createSessionRef('userId')
      }, {
        draftsFolderId: NULL_FIELD_REF,
        designPaidStatus: NULL_FIELD_REF,
        whiteboardPaidStatus: NULL_FIELD_REF,
        accountType: NULL_FIELD_REF,
        designAccountTypeRequest: Ax.fields,
        whiteboardAccountTypeRequest: Ax.fields,
        devModeAccountTypeRequest: Ax.fields
      }],
      currentPartialOrgUser: [{
        userId: createSessionRef('userId')
      }, {
        draftsFolderId: NULL_FIELD_REF,
        designPaidStatus: NULL_FIELD_REF,
        whiteboardPaidStatus: NULL_FIELD_REF,
        accountType: NULL_FIELD_REF,
        designAccountTypeRequest: Ax.fields,
        whiteboardAccountTypeRequest: Ax.fields,
        devModeAccountTypeRequest: Ax.fields
      }],
      currentTeamUser: [{
        userId: createSessionRef('userId')
      }, {
        designPaidStatus: NULL_FIELD_REF,
        whiteboardPaidStatus: NULL_FIELD_REF,
        designAccountTypeRequest: Ax.fields,
        whiteboardAccountTypeRequest: Ax.fields
      }],
      ownerRole: {
        userId: NULL_FIELD_REF
      },
      isTeamTemplate: NULL_FIELD_REF,
      isPublishedSite: NULL_FIELD_REF,
      team: createAliasedFieldRef('_teamForLegacyViews', {
        id: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        orgId: NULL_FIELD_REF,
        subscription: NULL_FIELD_REF,
        restrictionsList: NULL_FIELD_REF,
        deletedAt: NULL_FIELD_REF,
        gracePeriodEnd: NULL_FIELD_REF,
        trialPeriodEnd: NULL_FIELD_REF,
        createdAt: NULL_FIELD_REF,
        imgUrl: createAliasedFieldRef('imgUrlTransformed', NULL_FIELD_REF),
        studentTeamAt: NULL_FIELD_REF,
        licenseGroupId: NULL_FIELD_REF,
        licenseGroup: {
          id: NULL_FIELD_REF,
          name: NULL_FIELD_REF
        },
        workspaceId: NULL_FIELD_REF,
        eduGracePeriod: [{
          userId: createSessionRef('userId')
        }, {
          id: NULL_FIELD_REF,
          isValid: NULL_FIELD_REF
        }],
        orgAccess: NULL_FIELD_REF,
        studentTeamState: NULL_FIELD_REF,
        canEdit: [{
          userId: createSessionRef('userId')
        }, NULL_FIELD_REF],
        canView: [{
          userId: createSessionRef('userId')
        }, NULL_FIELD_REF]
      }),
      folderId: NULL_FIELD_REF,
      project: [{
        userId: createSessionRef('userId')
      }, mergeFieldRefs({
        id: NULL_FIELD_REF,
        orgId: NULL_FIELD_REF,
        teamId: NULL_FIELD_REF,
        path: NULL_FIELD_REF,
        viewOnlyAt: NULL_FIELD_REF,
        inviteOnlyAt: NULL_FIELD_REF,
        trashedAt: NULL_FIELD_REF,
        subscription: [{
          userId: createSessionRef('userId')
        }, {
          id: NULL_FIELD_REF
        }],
        canEdit: [{
          userId: createSessionRef('userId')
        }, NULL_FIELD_REF],
        team: {
          canView: [{
            userId: createSessionRef('userId')
          }, NULL_FIELD_REF],
          canEdit: [{
            userId: createSessionRef('userId')
          }, NULL_FIELD_REF]
        },
        activeProjectResourceConnections: {
          id: NULL_FIELD_REF,
          resourceId: NULL_FIELD_REF,
          resourceType: NULL_FIELD_REF,
          hostPlanName: NULL_FIELD_REF,
          hostPlanId: NULL_FIELD_REF,
          hostPlanType: NULL_FIELD_REF,
          connectedPlanId: NULL_FIELD_REF,
          connectedPlanType: NULL_FIELD_REF,
          connectedPlanName: NULL_FIELD_REF
        },
        name: NULL_FIELD_REF,
        isEditingLockedForUser: [{
          userId: createSessionRef('userId')
        }, NULL_FIELD_REF]
      }, yA.fields)],
      license: NULL_FIELD_REF,
      orgBrowsable: NULL_FIELD_REF,
      editorType: NULL_FIELD_REF,
      parentOrgId: NULL_FIELD_REF,
      fileRepoId: NULL_FIELD_REF,
      repo: {
        id: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        folderId: NULL_FIELD_REF,
        teamId: NULL_FIELD_REF,
        defaultFileKey: NULL_FIELD_REF,
        canEdit: createAliasedFieldRef('canEditV3', [{
          userId: createSessionRef('userId'),
          sessionId: createSessionRef('sessionId'),
          anonymousUserId: createSessionRef('anonymousUserId')
        }, NULL_FIELD_REF])
      },
      sourceFileKey: NULL_FIELD_REF,
      sourceFile: {
        key: NULL_FIELD_REF,
        libraryKey: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        fileRepoId: NULL_FIELD_REF,
        canView: createAliasedFieldRef('canViewV3', [{
          userId: createSessionRef('userId'),
          sessionId: createSessionRef('sessionId'),
          anonymousUserId: createSessionRef('anonymousUserId')
        }, NULL_FIELD_REF]),
        canManage: createAliasedFieldRef('canManageV2', [{
          userId: createSessionRef('userId'),
          sessionId: createSessionRef('sessionId'),
          anonymousUserId: createSessionRef('anonymousUserId')
        }, NULL_FIELD_REF])
      },
      linkAccess: NULL_FIELD_REF,
      hasFileLinkPassword: NULL_FIELD_REF,
      hasProtoLinkPassword: NULL_FIELD_REF,
      updatedAt: NULL_FIELD_REF,
      trashedAt: NULL_FIELD_REF,
      deletedAt: NULL_FIELD_REF,
      creatorId: NULL_FIELD_REF,
      createdAt: NULL_FIELD_REF,
      sourceCheckpointId: NULL_FIELD_REF,
      canDelete: createAliasedFieldRef('canDeleteV2', [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF]),
      canMove: [{
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      }, NULL_FIELD_REF],
      canExport: [{
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      }, NULL_FIELD_REF],
      canEdit: createAliasedFieldRef('canEditV3', [{
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      }, NULL_FIELD_REF]),
      canEditCanvas: createAliasedFieldRef('canEditCanvasV2', [{
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      }, NULL_FIELD_REF]),
      canEditIgnoreEduGracePeriod: createAliasedFieldRef('canEditIgnoreEduGracePeriodV2', [{
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      }, NULL_FIELD_REF]),
      canManage: createAliasedFieldRef('canManageV2', [{
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      }, NULL_FIELD_REF]),
      canView: createAliasedFieldRef('canViewV3', [{
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      }, NULL_FIELD_REF]),
      canAccessDevModeEntryPoint: createAliasedFieldRef('canAccessDevModeEntryPointV2', [{
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      }, NULL_FIELD_REF]),
      canAccessFullDevMode: createAliasedFieldRef('canAccessFullDevModeV2', [{
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      }, NULL_FIELD_REF]),
      canRunExtensions: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF],
      thumbnailGuid: NULL_FIELD_REF,
      publishedHubFile: {
        id: NULL_FIELD_REF,
        libraryKey: NULL_FIELD_REF,
        profile: {
          id: NULL_FIELD_REF,
          entityType: NULL_FIELD_REF
        },
        currentHubFileVersion: {
          id: NULL_FIELD_REF,
          createdAt: NULL_FIELD_REF
        },
        unpublishedAt: NULL_FIELD_REF,
        verificationStatus: NULL_FIELD_REF,
        publishingStatus: NULL_FIELD_REF,
        publishingStatusUpdatedAt: NULL_FIELD_REF,
        publishedByUser: {
          id: NULL_FIELD_REF,
          name: NULL_FIELD_REF
        }
      },
      trackTags: {
        isTemplate: NULL_FIELD_REF,
        isDuplicatedFromDevModeDemoFile: makeFieldRefOptional(),
        isDuplicatedFromSupabaseConnectedFile: makeFieldRefOptional()
      },
      isTryFile: NULL_FIELD_REF,
      votingSessions: {
        id: NULL_FIELD_REF,
        inProgress: NULL_FIELD_REF,
        title: NULL_FIELD_REF,
        userId: NULL_FIELD_REF,
        createdAt: NULL_FIELD_REF,
        userVoteLimit: NULL_FIELD_REF,
        pageNodeId: NULL_FIELD_REF
      },
      template: {
        id: NULL_FIELD_REF,
        fileKey: NULL_FIELD_REF,
        fileVersionId: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        description: NULL_FIELD_REF,
        thumbnailUrl: NULL_FIELD_REF,
        thumbnailGuid: NULL_FIELD_REF,
        publishScope: NULL_FIELD_REF,
        orgId: NULL_FIELD_REF,
        licenseGroupId: NULL_FIELD_REF,
        workspaceId: NULL_FIELD_REF,
        teamId: NULL_FIELD_REF,
        publishedByUserId: NULL_FIELD_REF,
        unpublishedAt: NULL_FIELD_REF,
        createdAt: NULL_FIELD_REF,
        updatedAt: NULL_FIELD_REF,
        publishedByUser: createAliasedFieldRef('publishedByUserNullable', {
          handle: NULL_FIELD_REF,
          imgUrl: NULL_FIELD_REF,
          name: NULL_FIELD_REF
        })
      },
      canPublishTemplate: createAliasedFieldRef('canPublishTemplateV2', [{
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      }, NULL_FIELD_REF]),
      viewerExportRestricted: NULL_FIELD_REF,
      libraryKey: NULL_FIELD_REF,
      hasEditRole: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF],
      isFavorited: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF],
      siteMount: {
        siteDomain: {
          domain: NULL_FIELD_REF
        },
        status: NULL_FIELD_REF
      },
      sharedContainerSetting: makeFieldRefOptional({
        autogenPasswordControls: NULL_FIELD_REF
      })
    }])
  }
};
let xj = {
  args: [{
    name: 'currentOrgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.WebPlatform
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      createdAt: makeFieldRefOptional(),
      description: NULL_FIELD_REF,
      recentSearches: [{
        orgId: createViewRef('currentOrgId')
      }, {
        searches: makeFieldRefOptional({
          query: NULL_FIELD_REF,
          timestamp: NULL_FIELD_REF
        })
      }]
    }]
  }
};
let xU = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.Scale
  },
  fields: {
    org: makeFieldRefOptional([{
      id: createViewRef('orgId'),
      userId: createSessionRef('userId')
    }, {
      isAiDataSharingEnabled: NULL_FIELD_REF,
      sitesPublishingDisabled: NULL_FIELD_REF,
      supabaseDisabled: NULL_FIELD_REF,
      isResourceHubCmtyTabDisabled: NULL_FIELD_REF
    }])
  }
};
let xB = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'queryParams',
    type: {
      kind: 'string'
    }
  }, {
    name: 'firstPageSize',
    type: {
      kind: 'int'
    },
    nullable: !0
  }, {
    name: 'refetchToken',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    orgAdminUsersMinimalFields: makeFieldRefOptional([{
      orgId: createViewRef('orgId'),
      queryParams: createViewRef('queryParams'),
      firstPageSize: createViewRef('firstPageSize'),
      userId: createSessionRef('userId')
    }, {
      orgUserId: NULL_FIELD_REF,
      orgUser: {
        id: NULL_FIELD_REF,
        user: {
          id: NULL_FIELD_REF,
          handle: NULL_FIELD_REF,
          imgUrl: NULL_FIELD_REF,
          email: NULL_FIELD_REF
        }
      }
    }])
  }
};
let xV = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'queryParams',
    type: {
      kind: 'string'
    }
  }, {
    name: 'firstPageSize',
    type: {
      kind: 'int'
    },
    nullable: !0
  }, {
    name: 'refetchToken',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    org: [{
      id: createViewRef('orgId'),
      userId: createSessionRef('userId')
    }, {
      featuredScimMetadata: NULL_FIELD_REF,
      vatGstId: NULL_FIELD_REF,
      taxIdVerificationStatus: NULL_FIELD_REF
    }],
    orgAdminUsersInfo: [{
      orgId: createViewRef('orgId'),
      userId: createSessionRef('userId')
    }, {
      totalUserCount: NULL_FIELD_REF,
      canRoleSetWithScim: NULL_FIELD_REF
    }],
    orgAdminUsers: [{
      orgId: createViewRef('orgId'),
      queryParams: createViewRef('queryParams'),
      firstPageSize: createViewRef('firstPageSize'),
      userId: createSessionRef('userId')
    }, {
      orgUserId: NULL_FIELD_REF,
      orgUser: AO.fields,
      idpUserId: NULL_FIELD_REF,
      idpUser: {
        id: NULL_FIELD_REF,
        createdAt: NULL_FIELD_REF,
        updatedAt: NULL_FIELD_REF,
        userName: NULL_FIELD_REF,
        scim: AN.fields,
        seatType: NULL_FIELD_REF
      },
      orgInviteId: NULL_FIELD_REF,
      orgInvite: {
        id: NULL_FIELD_REF,
        orgId: NULL_FIELD_REF,
        email: NULL_FIELD_REF,
        accountType: NULL_FIELD_REF,
        billableProductKey: makeFieldRefOptional(),
        createdAt: NULL_FIELD_REF,
        updatedAt: NULL_FIELD_REF,
        licenseGroupId: NULL_FIELD_REF,
        workspaceId: NULL_FIELD_REF
      },
      type: NULL_FIELD_REF,
      lastEdit: NULL_FIELD_REF,
      lastSeen: NULL_FIELD_REF,
      lastDesignEdit: NULL_FIELD_REF,
      lastWhiteboardEdit: NULL_FIELD_REF,
      lastDesignSeen: NULL_FIELD_REF,
      lastWhiteboardSeen: NULL_FIELD_REF,
      lastDevModeSeen: NULL_FIELD_REF
    }]
  }
};
let xG = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    org: [{
      id: createViewRef('orgId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      planSubscription: {
        tier: NULL_FIELD_REF,
        status: NULL_FIELD_REF
      },
      plan: [{
        userId: createSessionRef('userId')
      }, yl.fields]
    }],
    orgInfo: [{
      id: createViewRef('orgId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      planSubscription: {
        tier: NULL_FIELD_REF,
        status: NULL_FIELD_REF
      },
      plan: [{
        userId: createSessionRef('userId')
      }, yl.fields]
    }],
    orgPublicInfo: makeFieldRefOptional([{
      id: createViewRef('orgId')
    }, {
      id: NULL_FIELD_REF,
      planPublicInfo: [{
        userId: createSessionRef('userId')
      }, {
        id: NULL_FIELD_REF,
        tier: NULL_FIELD_REF,
        key: {
          type: NULL_FIELD_REF,
          parentId: NULL_FIELD_REF
        },
        planRecordId: makeFieldRefOptional(NULL_FIELD_REF)
      }]
    }])
  }
};
let xz = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.Scale
  },
  fields: {
    org: [{
      id: createViewRef('orgId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      currentPlanUser: [{
        userId: createSessionRef('userId')
      }, yp.fields]
    }],
    orgPublicInfo: [{
      id: createViewRef('orgId')
    }, {
      id: NULL_FIELD_REF,
      currentPlanUser: [{
        userId: createSessionRef('userId')
      }, yp.fields]
    }]
  }
};
let xH = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    org: [{
      id: createViewRef('orgId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      pluginsWhitelistEnforced: NULL_FIELD_REF,
      widgetsWhitelistEnforced: NULL_FIELD_REF,
      customTemplatesAllowed: NULL_FIELD_REF
    }]
  }
};
let xW = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.Scale
  },
  fields: {
    org: makeFieldRefOptional([{
      id: createViewRef('orgId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      domainCapture: NULL_FIELD_REF,
      domainsRequireVerification: NULL_FIELD_REF,
      mfaRequired: NULL_FIELD_REF,
      orgDomains: {
        id: NULL_FIELD_REF,
        domain: NULL_FIELD_REF,
        verifiedAt: NULL_FIELD_REF
      }
    }])
  }
};
let xK = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    orgPublicInfo: [{
      id: createViewRef('orgId')
    }, {
      mfaRequired: NULL_FIELD_REF
    }]
  }
};
let xY = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    org: [{
      id: createViewRef('orgId'),
      userId: createSessionRef('userId')
    }, {
      orgSamlConfigs: {
        hasSeatManagedViaScim: makeFieldRefOptional()
      }
    }]
  }
};
let xq = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    org: [{
      id: createViewRef('orgId'),
      userId: createSessionRef('userId')
    }, yo.fields]
  }
};
let x$ = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Scale
  },
  fields: {
    org: [{
      id: createViewRef('orgId'),
      userId: createSessionRef('userId')
    }, {
      orgSamlConfigs: makeFieldRefOptional({
        id: NULL_FIELD_REF,
        idpGroups: {
          id: NULL_FIELD_REF,
          name: NULL_FIELD_REF,
          deletedAt: NULL_FIELD_REF
        }
      })
    }]
  }
};
let xZ = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Scale
  },
  fields: {
    org: [{
      id: createViewRef('orgId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      samlSsoOnlyAt: NULL_FIELD_REF,
      orgSamlConfigs: {
        id: NULL_FIELD_REF,
        updatedAt: NULL_FIELD_REF,
        nickname: makeFieldRefOptional(NULL_FIELD_REF),
        idpName: NULL_FIELD_REF,
        idpSsoTargetUrl: NULL_FIELD_REF,
        idpEntityId: NULL_FIELD_REF,
        spEntityId: NULL_FIELD_REF,
        spAcsUrl: NULL_FIELD_REF,
        spScimBearerTokenAt: makeFieldRefOptional(NULL_FIELD_REF),
        orgDomains: {
          id: NULL_FIELD_REF,
          domain: NULL_FIELD_REF,
          verifiedAt: NULL_FIELD_REF,
          orgSamlConfigId: NULL_FIELD_REF
        }
      },
      orgDomains: {
        id: NULL_FIELD_REF,
        domain: NULL_FIELD_REF,
        verifiedAt: NULL_FIELD_REF,
        orgSamlConfigId: makeFieldRefOptional(NULL_FIELD_REF)
      }
    }]
  }
};
let xX = {
  args: [{
    name: 'workspaceId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Scale
  },
  fields: {
    workspace: [{
      id: createViewRef('workspaceId'),
      userId: createSessionRef('userId')
    }, {
      name: NULL_FIELD_REF
    }]
  }
};
let xQ = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.Scale
  },
  fields: {
    orgJoinRequest: [{
      userId: createSessionRef('userId'),
      orgId: createViewRef('orgId')
    }, {
      id: NULL_FIELD_REF
    }]
  }
};
let xJ = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    org: [{
      id: createViewRef('orgId'),
      userId: createSessionRef('userId')
    }, {
      memberCount: [{
        userId: createSessionRef('userId')
      }, {
        data: NULL_FIELD_REF
      }],
      discoverableTeamCount: [{
        userId: createSessionRef('userId')
      }, {
        data: NULL_FIELD_REF
      }]
    }]
  }
};
let x0 = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    org: [{
      id: createViewRef('orgId'),
      userId: createSessionRef('userId')
    }, {
      memberCount: [{
        userId: createSessionRef('userId')
      }, {
        data: NULL_FIELD_REF
      }],
      workspaceCount: [{
        userId: createSessionRef('userId')
      }, {
        data: NULL_FIELD_REF
      }]
    }]
  }
};
let x1 = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Scale
  },
  fields: {
    orgMfaGuestInfo: makeFieldRefOptional([{
      userId: createSessionRef('userId'),
      orgId: createViewRef('orgId')
    }, {
      id: NULL_FIELD_REF,
      totalGuestCount: NULL_FIELD_REF,
      nonMfaGuestCount: NULL_FIELD_REF
    }])
  }
};
let x2 = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    orgMfaMemberInfo: makeFieldRefOptional([{
      userId: createSessionRef('userId'),
      orgId: createViewRef('orgId')
    }, {
      id: NULL_FIELD_REF,
      totalMemberCount: NULL_FIELD_REF,
      nonMfaMemberCount: NULL_FIELD_REF
    }])
  }
};
let x5 = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    org: [{
      id: createViewRef('orgId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      isSalesAssistedPlanProperty: makeFieldRefOptional({
        id: NULL_FIELD_REF,
        value: NULL_FIELD_REF
      }),
      subscriptionShouldNotAutoRenewPlanProperty: makeFieldRefOptional({
        id: NULL_FIELD_REF,
        value: NULL_FIELD_REF
      }),
      plan: [{
        userId: createSessionRef('userId')
      }, {
        termsOfServiceAcceptanceByTermsKey: makeFieldRefOptional([{
          termsKey: 'seats_model_billing_2025'
        }, {
          id: NULL_FIELD_REF,
          planParentId: NULL_FIELD_REF,
          planParentType: NULL_FIELD_REF,
          termsKey: NULL_FIELD_REF
        }])
      }]
    }]
  }
};
let x4 = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Scale
  },
  fields: {
    org: [{
      id: createViewRef('orgId'),
      userId: createSessionRef('userId')
    }, {
      sharedOrgLicenseGroupSetting: {
        id: NULL_FIELD_REF,
        autogenPasswordControls: NULL_FIELD_REF,
        externalCollaborationControls: NULL_FIELD_REF,
        publicLinkControlsSetting: NULL_FIELD_REF,
        publicLinkControlsMaxExpiration: NULL_FIELD_REF,
        configuredUpgradeRequestSetting: makeFieldRefOptional(NULL_FIELD_REF)
      },
      orgSharedSetting: {
        id: NULL_FIELD_REF,
        autogenPasswordControls: NULL_FIELD_REF,
        externalCollaborationControls: NULL_FIELD_REF,
        publicLinkControlsSetting: NULL_FIELD_REF,
        publicLinkControlsMaxExpiration: NULL_FIELD_REF,
        configuredUpgradeRequestSetting: NULL_FIELD_REF
      }
    }]
  }
};
let x3 = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Billing
  },
  fields: {
    org: [{
      id: createViewRef('orgId'),
      userId: createSessionRef('userId')
    }, {
      vatGstId: NULL_FIELD_REF,
      taxIdVerificationStatus: NULL_FIELD_REF,
      taxInfo: makeFieldRefOptional([{
        userId: createSessionRef('userId')
      }, {
        vatGstId: NULL_FIELD_REF,
        regionalVatGstId: NULL_FIELD_REF,
        canUpdateRegionalVatGst: NULL_FIELD_REF,
        country: NULL_FIELD_REF,
        state: NULL_FIELD_REF
      }])
    }]
  }
};
let x6 = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.Scale
  },
  fields: {
    org: [{
      id: createViewRef('orgId'),
      userId: createSessionRef('userId')
    }, {
      teamsWithSummary: [{
        userId: createSessionRef('userId')
      }, {
        team: {
          id: NULL_FIELD_REF,
          imgUrl: createAliasedFieldRef('imgUrlTransformed', NULL_FIELD_REF),
          name: NULL_FIELD_REF,
          workspaceId: NULL_FIELD_REF
        }
      }]
    }]
  }
};
let x7 = {
  id: NULL_FIELD_REF,
  createdAt: NULL_FIELD_REF,
  imgUrl: createAliasedFieldRef('imgUrlTransformed', NULL_FIELD_REF),
  orgId: NULL_FIELD_REF,
  name: NULL_FIELD_REF,
  description: NULL_FIELD_REF,
  hidden: NULL_FIELD_REF,
  orgBrowsable: NULL_FIELD_REF,
  orgAccess: NULL_FIELD_REF,
  licenseGroupId: NULL_FIELD_REF,
  workspaceId: NULL_FIELD_REF,
  projectsCount: NULL_FIELD_REF,
  editorsCount: NULL_FIELD_REF,
  restrictionsList: NULL_FIELD_REF,
  subscription: NULL_FIELD_REF,
  _subscriptionRaw: NULL_FIELD_REF,
  stripeCustomerId: NULL_FIELD_REF,
  studentTeamAt: NULL_FIELD_REF,
  studentTeamState: NULL_FIELD_REF,
  studentAutoverifyingTeamAt: NULL_FIELD_REF,
  isStarterTeam: NULL_FIELD_REF,
  gracePeriodEnd: NULL_FIELD_REF,
  gracePeriodType: NULL_FIELD_REF,
  deletedAt: NULL_FIELD_REF,
  defaultPermission: NULL_FIELD_REF,
  vatGstId: NULL_FIELD_REF,
  taxIdVerificationStatus: NULL_FIELD_REF,
  aiFeaturesDisabledAt: NULL_FIELD_REF,
  legalName: NULL_FIELD_REF,
  sharingAudienceControlComputed: NULL_FIELD_REF,
  roleOnObjectTeamForUser: [{
    userId: createSessionRef('userId')
  }, {
    id: NULL_FIELD_REF,
    level: NULL_FIELD_REF
  }],
  ownerRole: {
    id: NULL_FIELD_REF,
    user: {
      id: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      handle: NULL_FIELD_REF,
      imgUrl: NULL_FIELD_REF,
      email: NULL_FIELD_REF,
      description: NULL_FIELD_REF
    }
  },
  sanctionedAt: NULL_FIELD_REF,
  canRead: [{
    userId: createSessionRef('userId')
  }, NULL_FIELD_REF],
  canEdit: [{
    userId: createSessionRef('userId')
  }, NULL_FIELD_REF],
  canAdmin: [{
    userId: createSessionRef('userId')
  }, NULL_FIELD_REF],
  canDelete: [{
    userId: createSessionRef('userId')
  }, NULL_FIELD_REF]
};
let x8 = {
  teamId: NULL_FIELD_REF,
  team: x7,
  memberCount: NULL_FIELD_REF
};
let x9 = {
  fields: [{
    id: createViewRef('orgId'),
    userId: createSessionRef('userId')
  }, {
    teamsById: [{
      userId: createSessionRef('userId'),
      teamIds: createViewRef('extraTeamIds')
    }, x7],
    teamsByIdInAdmin: [{
      userId: createSessionRef('userId'),
      teamIds: createViewRef('extraTeamIds')
    }, {
      team: x7
    }]
  }]
};
let Se = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'queryParams',
    type: {
      kind: 'string'
    }
  }, {
    name: 'extraTeamIds',
    type: {
      kind: 'list',
      ofType: {
        kind: 'bigint'
      }
    }
  }, {
    name: 'firstPageSize',
    type: {
      kind: 'int'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    orgTeams: [{
      orgId: createViewRef('orgId'),
      queryParams: createViewRef('queryParams'),
      firstPageSize: createViewRef('firstPageSize'),
      userId: createSessionRef('userId')
    }, {
      ...x8,
      teamOwnerRole: makeFieldRefOptional({
        id: NULL_FIELD_REF,
        user: {
          id: NULL_FIELD_REF,
          name: NULL_FIELD_REF,
          handle: NULL_FIELD_REF,
          imgUrl: NULL_FIELD_REF,
          email: NULL_FIELD_REF,
          description: NULL_FIELD_REF
        }
      })
    }],
    org: x9
  }
};
let St = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    org: makeFieldRefOptional([{
      id: createViewRef('orgId'),
      userId: createSessionRef('userId')
    }, {
      activeTeams: [{
        userId: createSessionRef('userId')
      }, {
        id: NULL_FIELD_REF,
        name: NULL_FIELD_REF
      }]
    }])
  }
};
let Si = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'queryParams',
    type: {
      kind: 'string'
    }
  }, {
    name: 'extraTeamIds',
    type: {
      kind: 'list',
      ofType: {
        kind: 'bigint'
      }
    }
  }, {
    name: 'firstPageSize',
    type: {
      kind: 'int'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Scale
  },
  fields: {
    orgTeams: createAliasedFieldRef('orgTeamsInAdmin', [{
      orgId: createViewRef('orgId'),
      queryParams: createViewRef('queryParams'),
      firstPageSize: createViewRef('firstPageSize'),
      userId: createSessionRef('userId')
    }, x8]),
    org: x9
  }
};
let Sn = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    org: [{
      id: createViewRef('orgId'),
      userId: createSessionRef('userId')
    }, {
      teamsWithSummary: [{
        userId: createSessionRef('userId')
      }, {
        id: NULL_FIELD_REF,
        memberCount: NULL_FIELD_REF
      }]
    }]
  }
};
let Sr = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      baseOrgUser: [{
        orgId: createViewRef('orgId')
      }, {
        draftsProject: {
          id: NULL_FIELD_REF,
          canEdit: [{
            userId: createSessionRef('userId')
          }, NULL_FIELD_REF]
        }
      }]
    }]
  }
};
let Sa = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'eventType',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Scale
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      baseOrgUser: [{
        orgId: createViewRef('orgId')
      }, {
        orgUserFlag: [{
          eventType: createViewRef('eventType')
        }, {
          id: NULL_FIELD_REF
        }]
      }]
    }]
  }
};
let Ss = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.Scale
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      baseOrgUser: [{
        orgId: createViewRef('orgId')
      }, {
        isMfaRestricted: makeFieldRefOptional([{
          userId: createSessionRef('userId')
        }, NULL_FIELD_REF]),
        org: {
          id: NULL_FIELD_REF,
          name: NULL_FIELD_REF,
          imgUrl: createAliasedFieldRef('imgUrlTransformed', NULL_FIELD_REF),
          mfaRequired: NULL_FIELD_REF
        }
      }]
    }]
  }
};
let So = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'orgUserIds',
    type: {
      kind: 'list',
      ofType: {
        kind: 'bigint'
      }
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Scale
  },
  fields: {
    org: makeFieldRefOptional([{
      id: createViewRef('orgId'),
      userId: createSessionRef('userId')
    }, {
      baseOrgUserMembersById: [{
        orgUserIds: createViewRef('orgUserIds')
      }, AO.fields]
    }])
  }
};
let Sl = {
  args: [],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Scale
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      allBaseOrgUsers: {
        id: NULL_FIELD_REF,
        orgId: NULL_FIELD_REF,
        userId: NULL_FIELD_REF,
        whiteboardPaidStatus: NULL_FIELD_REF,
        permission: NULL_FIELD_REF,
        draftsFolderId: NULL_FIELD_REF,
        createdAt: NULL_FIELD_REF,
        updatedAt: NULL_FIELD_REF,
        accountType: NULL_FIELD_REF,
        accountTypeChangedAt: NULL_FIELD_REF,
        description: NULL_FIELD_REF,
        userStateChangedAt: NULL_FIELD_REF,
        agreedToCommunityTosAt: NULL_FIELD_REF,
        showFigjamUserOnboarding: NULL_FIELD_REF,
        hasShownFigjamAdminOnboarding: NULL_FIELD_REF,
        hasShownFigjamAdminLaunchOnboarding: NULL_FIELD_REF,
        devModePaidStatus: NULL_FIELD_REF,
        designPaidStatus: NULL_FIELD_REF
      }
    }]
  }
};
let Sd = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    org: [{
      id: createViewRef('orgId'),
      userId: createSessionRef('userId')
    }, {
      sharedOrgLicenseGroupSetting: {
        fileExportSetting: NULL_FIELD_REF
      },
      orgSharedSetting: {
        fileExportSetting: NULL_FIELD_REF
      },
      workspaces: {
        id: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        imgUrl: createAliasedFieldRef('imgUrlTransformed', NULL_FIELD_REF),
        workspaceSharedSetting: {
          fileExportSetting: NULL_FIELD_REF
        }
      }
    }]
  }
};
let Sc = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Scale
  },
  fields: {
    org: [{
      id: createViewRef('orgId'),
      userId: createSessionRef('userId')
    }, {
      sharedOrgLicenseGroupSetting: {
        publicLinkControlsSetting: NULL_FIELD_REF,
        publicLinkControlsMaxExpiration: NULL_FIELD_REF
      },
      orgSharedSetting: {
        publicLinkControlsSetting: NULL_FIELD_REF,
        publicLinkControlsMaxExpiration: NULL_FIELD_REF
      },
      workspaces: {
        id: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        imgUrl: createAliasedFieldRef('imgUrlTransformed', NULL_FIELD_REF),
        publicLinkControlsSetting: NULL_FIELD_REF,
        publicLinkControlsMaxExpiration: NULL_FIELD_REF,
        hasCustomPublicLinkControlsSetting: NULL_FIELD_REF
      }
    }]
  }
};
let Su = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Scale
  },
  fields: {
    org: [{
      id: createViewRef('orgId'),
      userId: createSessionRef('userId')
    }, {
      workspaceCount: [{
        userId: createSessionRef('userId')
      }, {
        data: NULL_FIELD_REF
      }]
    }]
  }
};
let Sp = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Scale
  },
  fields: {
    org: [{
      id: createViewRef('orgId'),
      userId: createSessionRef('userId')
    }, {
      orgSharedSetting: {
        fileExportSetting: NULL_FIELD_REF,
        publicLinkControlsSetting: NULL_FIELD_REF,
        publicLinkControlsMaxExpiration: NULL_FIELD_REF
      },
      workspaces: {
        id: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        imgUrl: createAliasedFieldRef('imgUrlTransformed', NULL_FIELD_REF),
        workspaceSharedSetting: {
          fileExportSetting: NULL_FIELD_REF,
          publicLinkControlsSetting: NULL_FIELD_REF,
          publicLinkControlsMaxExpiration: NULL_FIELD_REF,
          aiSetting: makeFieldRefOptional()
        }
      }
    }]
  }
};
let Sm = {
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      orgUsers: {
        id: NULL_FIELD_REF,
        org: [{
          userId: createSessionRef('userId')
        }, {
          id: NULL_FIELD_REF,
          name: NULL_FIELD_REF,
          imgUrl: createAliasedFieldRef('imgUrlTransformed', NULL_FIELD_REF)
        }]
      },
      allOrgUsers: {
        id: NULL_FIELD_REF,
        org: {
          id: NULL_FIELD_REF,
          name: NULL_FIELD_REF,
          imgUrl: createAliasedFieldRef('imgUrlTransformed', NULL_FIELD_REF)
        }
      }
    }]
  }
};
let Sh = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Wayfinding
  },
  fields: {
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, {
      pagesSignedThumbnailData: makeFieldRefOptional()
    }])
  }
};
let Sg = {
  args: [{
    name: 'folderId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'sortOrder',
    type: {
      kind: 'string'
    }
  }, {
    name: 'cursorColumn',
    type: {
      kind: 'string'
    }
  }, {
    name: 'firstPageSize',
    type: {
      kind: 'int'
    }
  }, {
    name: 'showTrashed',
    type: {
      kind: 'bool'
    }
  }, {
    name: 'queryString',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    abandonedDraftFiles: [{
      userId: createSessionRef('userId'),
      folderId: createViewRef('folderId'),
      sortOrder: createViewRef('sortOrder'),
      cursorColumn: createViewRef('cursorColumn'),
      firstPageSize: createViewRef('firstPageSize'),
      showTrashed: createViewRef('showTrashed'),
      queryString: createViewRef('queryString')
    }, {
      id: NULL_FIELD_REF,
      fileKey: NULL_FIELD_REF,
      file: {
        id: NULL_FIELD_REF,
        key: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        touchedAt: NULL_FIELD_REF,
        createdAt: NULL_FIELD_REF,
        signedThumbnailUrl: NULL_FIELD_REF,
        folderId: NULL_FIELD_REF,
        editorType: NULL_FIELD_REF,
        url: NULL_FIELD_REF,
        editUrl: NULL_FIELD_REF,
        parentOrgId: NULL_FIELD_REF,
        creatorId: NULL_FIELD_REF,
        checkpointClientMeta: NULL_FIELD_REF,
        description: NULL_FIELD_REF,
        deletedAt: NULL_FIELD_REF,
        trashedAt: NULL_FIELD_REF,
        trashedUserId: NULL_FIELD_REF,
        license: NULL_FIELD_REF,
        linkAccess: NULL_FIELD_REF,
        hasFileLinkPassword: NULL_FIELD_REF,
        hasProtoLinkPassword: NULL_FIELD_REF,
        protoLinkAccess: NULL_FIELD_REF,
        updatedAt: NULL_FIELD_REF,
        prototypeUrl: NULL_FIELD_REF,
        fileRepoId: NULL_FIELD_REF,
        sourceFileKey: NULL_FIELD_REF,
        isTryFile: NULL_FIELD_REF,
        isTeamTemplate: NULL_FIELD_REF,
        teamId: NULL_FIELD_REF,
        repo: {
          id: NULL_FIELD_REF,
          folderId: NULL_FIELD_REF,
          teamId: NULL_FIELD_REF,
          name: NULL_FIELD_REF,
          createdAt: NULL_FIELD_REF,
          deletedAt: NULL_FIELD_REF,
          trashedAt: NULL_FIELD_REF,
          updatedAt: NULL_FIELD_REF,
          hasFileLinkPassword: NULL_FIELD_REF,
          hasProtoLinkPassword: NULL_FIELD_REF,
          linkAccess: NULL_FIELD_REF,
          orgBrowsable: NULL_FIELD_REF,
          parentOrgId: NULL_FIELD_REF,
          protoLinkAccess: NULL_FIELD_REF,
          orgAudience: NULL_FIELD_REF,
          defaultFileKey: NULL_FIELD_REF,
          hasActiveBranches: NULL_FIELD_REF
        }
      }
    }]
  }
};
let Sf = {
  args: [{
    name: 'planType',
    type: {
      kind: 'string'
    }
  }, {
    name: 'planId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'sortOrder',
    type: {
      kind: 'string'
    }
  }, {
    name: 'cursorColumn',
    type: {
      kind: 'string'
    }
  }, {
    name: 'firstPageSize',
    type: {
      kind: 'int'
    }
  }, {
    name: 'queryString',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    abandonedDraftFolders: [{
      userId: createSessionRef('userId'),
      planType: createViewRef('planType'),
      planId: createViewRef('planId'),
      sortOrder: createViewRef('sortOrder'),
      cursorColumn: createViewRef('cursorColumn'),
      firstPageSize: createViewRef('firstPageSize'),
      queryString: createViewRef('queryString')
    }, {
      id: NULL_FIELD_REF,
      fileCount: NULL_FIELD_REF,
      projectId: NULL_FIELD_REF,
      project: {
        id: NULL_FIELD_REF,
        createdAt: NULL_FIELD_REF,
        updatedAt: NULL_FIELD_REF,
        path: NULL_FIELD_REF,
        teamId: NULL_FIELD_REF,
        orgId: NULL_FIELD_REF,
        abandonedDraftUserName: NULL_FIELD_REF,
        abandonedDraftUserEmail: NULL_FIELD_REF,
        abandonedDraftUserRemovedAt: NULL_FIELD_REF
      }
    }]
  }
};
let S_ = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'feedFilter',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'firstPageSize',
    type: {
      kind: 'int'
    },
    nullable: !0
  }, {
    name: 'refreshNonce',
    type: {
      kind: 'int'
    },
    nullable: !1
  }],
  fields: {
    feedPosts: [{
      orgId: createViewRef('orgId'),
      userId: createSessionRef('userId'),
      feedFilter: createViewRef('feedFilter'),
      firstPageSize: createViewRef('firstPageSize')
    }, {
      id: NULL_FIELD_REF,
      publicUuid: NULL_FIELD_REF,
      type: NULL_FIELD_REF,
      createdAt: NULL_FIELD_REF,
      forYou: NULL_FIELD_REF,
      currentTagFilterId: NULL_FIELD_REF,
      feedPost: mergeFieldRefs(vY.fields, {
        numComments: NULL_FIELD_REF,
        viewCount: NULL_FIELD_REF,
        views: {
          createdAt: NULL_FIELD_REF,
          user: {
            id: NULL_FIELD_REF,
            handle: NULL_FIELD_REF,
            imgUrl: NULL_FIELD_REF
          }
        }
      })
    }]
  },
  props: {
    priority: PriorityLevels.P2
  }
};
let SA = {
  args: [{
    name: 'projectId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'firstPageSize',
    type: {
      kind: 'int'
    }
  }, {
    name: 'sortColumn',
    type: {
      kind: 'string'
    }
  }, {
    name: 'sortType',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    paginatedFilesByProjectId: makeFieldRefOptional([{
      projectId: createViewRef('projectId'),
      firstPageSize: createViewRef('firstPageSize'),
      sortColumn: createViewRef('sortColumn'),
      sortType: createViewRef('sortType')
    }, {
      key: NULL_FIELD_REF,
      name: createAliasedFieldRef('_name', NULL_FIELD_REF),
      createdAt: NULL_FIELD_REF,
      updatedAt: NULL_FIELD_REF,
      editorType: NULL_FIELD_REF
    }])
  }
};
let Sy = {
  args: [{
    name: 'projectId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'editorType',
    type: {
      kind: 'int'
    }
  }, {
    name: 'firstPageSize',
    type: {
      kind: 'int'
    }
  }, {
    name: 'sortColumn',
    type: {
      kind: 'string'
    }
  }, {
    name: 'sortType',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    paginatedFilesByProjectIdAndEditorType: makeFieldRefOptional([{
      projectId: createViewRef('projectId'),
      editorType: createViewRef('editorType'),
      firstPageSize: createViewRef('firstPageSize'),
      sortColumn: createViewRef('sortColumn'),
      sortType: createViewRef('sortType')
    }, {
      key: NULL_FIELD_REF,
      name: createAliasedFieldRef('_name', NULL_FIELD_REF),
      createdAt: NULL_FIELD_REF,
      updatedAt: NULL_FIELD_REF,
      editorType: NULL_FIELD_REF
    }])
  }
};
let Sb = {
  id: NULL_FIELD_REF,
  sortOrder: NULL_FIELD_REF,
  libraryKeyToFile: {
    libraryKey: NULL_FIELD_REF
  },
  template: {
    id: NULL_FIELD_REF,
    fileKey: NULL_FIELD_REF,
    description: NULL_FIELD_REF,
    name: NULL_FIELD_REF,
    publishedByUserNullable: {
      handle: NULL_FIELD_REF,
      imgUrl: NULL_FIELD_REF
    },
    thumbnailUrl: NULL_FIELD_REF,
    coverImagePath: NULL_FIELD_REF,
    hasCustomThumbnail: NULL_FIELD_REF,
    file: {
      signedThumbnailUrl: NULL_FIELD_REF,
      checkpointClientMeta: NULL_FIELD_REF,
      editorType: NULL_FIELD_REF
    }
  }
};
let Sv = {
  teamId: NULL_FIELD_REF,
  totalTemplatesByTeam: NULL_FIELD_REF,
  team: {
    name: NULL_FIELD_REF,
    workspace: {
      id: NULL_FIELD_REF,
      name: NULL_FIELD_REF
    }
  },
  teamLimitedInfo: makeFieldRefOptional({
    name: NULL_FIELD_REF
  })
};
let SI = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'editorType',
    type: {
      kind: 'enum',
      name: 'EditorType'
    }
  }, {
    name: 'filterByTeamIds',
    type: {
      kind: 'list',
      ofType: {
        kind: 'bigint'
      }
    },
    nullable: !0
  }, {
    name: 'numTemplatesPerTeam',
    type: {
      kind: 'int'
    },
    nullable: !0
  }, {
    name: 'firstPageSize',
    type: {
      kind: 'int'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Slide
  },
  fields: {
    templatesByOrg: [{
      orgId: createViewRef('orgId'),
      editorType: createViewRef('editorType'),
      filterByTeamIds: createViewRef('filterByTeamIds'),
      numTemplatesPerTeam: createViewRef('numTemplatesPerTeam'),
      firstPageSize: createViewRef('firstPageSize'),
      userId: createSessionRef('userId')
    }, mergeFieldRefs(Sb, Sv)]
  }
};
let SE = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'filterByWorkspaceIds',
    type: {
      kind: 'list',
      ofType: {
        kind: 'bigint'
      }
    },
    nullable: !0
  }, {
    name: 'includeMyTeamsOnly',
    type: {
      kind: 'bool'
    },
    nullable: !0
  }, {
    name: 'editorType',
    type: {
      kind: 'enum',
      name: 'EditorType'
    }
  }, {
    name: 'numTemplatesPerTeam',
    type: {
      kind: 'int'
    },
    nullable: !0
  }, {
    name: 'firstPageSize',
    type: {
      kind: 'int'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    templatesByOrgWorkspaces: [{
      orgId: createViewRef('orgId'),
      filterByWorkspaceIds: createViewRef('filterByWorkspaceIds'),
      includeMyTeamsOnly: createViewRef('includeMyTeamsOnly'),
      numTemplatesPerTeam: createViewRef('numTemplatesPerTeam'),
      editorType: createViewRef('editorType'),
      firstPageSize: createViewRef('firstPageSize'),
      userId: createSessionRef('userId')
    }, mergeFieldRefs(Sb, Sv)]
  }
};
let Sx = {
  args: [{
    name: 'teamId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'editorType',
    type: {
      kind: 'enum',
      name: 'EditorType'
    }
  }, {
    name: 'firstPageSize',
    type: {
      kind: 'int'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Slide
  },
  fields: {
    templatesByTeam: [{
      teamId: createViewRef('teamId'),
      editorType: createViewRef('editorType'),
      firstPageSize: createViewRef('firstPageSize'),
      userId: createSessionRef('userId')
    }, mergeFieldRefs(Sv, Sb)]
  }
};
let SS = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'teamId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'query',
    type: {
      kind: 'string'
    }
  }, {
    name: 'editorType',
    type: {
      kind: 'enum',
      name: 'EditorType'
    }
  }, {
    name: 'firstPageSize',
    type: {
      kind: 'int'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    templatesSearch: [{
      orgId: createViewRef('orgId'),
      teamId: createViewRef('teamId'),
      query: createViewRef('query'),
      editorType: createViewRef('editorType'),
      firstPageSize: createViewRef('firstPageSize'),
      userId: createSessionRef('userId')
    }, mergeFieldRefs(Sb, {
      totalSearchResults: NULL_FIELD_REF
    })]
  }
};
let Sw = {
  args: [{
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    team: [{
      id: createViewRef('teamId'),
      userId: createSessionRef('userId')
    }, {
      pendingAssetTransferRequest: {
        id: NULL_FIELD_REF,
        isTransferCopy: NULL_FIELD_REF,
        sourceUser: {
          id: NULL_FIELD_REF,
          email: NULL_FIELD_REF
        },
        destinationUser: {
          id: NULL_FIELD_REF,
          email: NULL_FIELD_REF
        }
      }
    }]
  }
};
let SC = {
  args: [{
    name: 'planParentId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'planParentType',
    type: {
      kind: 'string'
    }
  }, {
    name: 'billingInterval',
    type: {
      kind: 'enum',
      name: 'BillingInterval'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Billing
  },
  fields: {
    pendingConfirmedRenewalSeatCounts: [{
      planParentType: createViewRef('planParentType'),
      planParentId: createViewRef('planParentId'),
      billingInterval: createViewRef('billingInterval')
    }, {
      id: NULL_FIELD_REF,
      billableProductKey: NULL_FIELD_REF,
      billingPeriodStart: NULL_FIELD_REF,
      surplusSeatCount: NULL_FIELD_REF,
      totalSeatCount: NULL_FIELD_REF
    }]
  }
};
let ST = {
  args: [{
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    team: [{
      id: createViewRef('teamId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      pendingTeamRoleRequests: [{
        userId: createSessionRef('userId')
      }, {
        id: NULL_FIELD_REF,
        status: NULL_FIELD_REF,
        teamId: NULL_FIELD_REF,
        requesterUserId: NULL_FIELD_REF,
        level: NULL_FIELD_REF,
        user: {
          id: NULL_FIELD_REF,
          handle: NULL_FIELD_REF,
          name: NULL_FIELD_REF,
          email: NULL_FIELD_REF,
          imgUrl: NULL_FIELD_REF
        }
      }]
    }]
  }
};
let Sk = {
  args: [{
    name: 'fileCommentId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.Wayfinding
  },
  fields: {
    pendingUserMentions: [{
      fileCommentId: createViewRef('fileCommentId')
    }, {
      inviteeEmail: NULL_FIELD_REF,
      inviterUserId: NULL_FIELD_REF,
      id: NULL_FIELD_REF
    }]
  }
};
let SR = {
  args: [],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    computedFieldTestPeriodicUpdate: makeFieldRefOptional(NULL_FIELD_REF),
    testPeriodicUpdate: makeFieldRefOptional({
      id: NULL_FIELD_REF,
      refreshValue: NULL_FIELD_REF
    })
  }
};
let SN = {
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    persistentLastFrameSelection: makeFieldRefOptional([{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      fileKey: NULL_FIELD_REF,
      frameId: NULL_FIELD_REF,
      frameName: NULL_FIELD_REF,
      timestamp: NULL_FIELD_REF,
      selectionId: NULL_FIELD_REF,
      selectionOrdinal: NULL_FIELD_REF,
      publisherId: NULL_FIELD_REF
    }])
  }
};
let SP = {
  args: [{
    name: 'folderId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.Wayfinding
  },
  fields: {
    project: [{
      id: createViewRef('folderId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      pinnedFiles: {
        pinnedByUser: {
          id: NULL_FIELD_REF,
          name: NULL_FIELD_REF
        },
        file: mergeFieldRefs(Aw.fields, {
          key: NULL_FIELD_REF,
          name: NULL_FIELD_REF,
          createdAt: NULL_FIELD_REF,
          editorType: NULL_FIELD_REF,
          fileRepoId: NULL_FIELD_REF,
          folderId: NULL_FIELD_REF,
          teamId: NULL_FIELD_REF,
          parentOrgId: NULL_FIELD_REF,
          isFavorited: [{
            userId: createSessionRef('userId')
          }, NULL_FIELD_REF],
          linkAccess: NULL_FIELD_REF,
          isTeamTemplate: NULL_FIELD_REF,
          lastPublishedAt: NULL_FIELD_REF,
          protoLinkAccess: NULL_FIELD_REF
        })
      }
    }]
  }
};
let SO = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.Workflow
  },
  fields: {
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, {
      plan: [{
        userId: createSessionRef('userId')
      }, yl.fields]
    }])
  }
};
let SD = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    org: [{
      id: createViewRef('orgId'),
      userId: createSessionRef('userId')
    }, {
      plan: [{
        userId: createSessionRef('userId')
      }, yl.fields]
    }]
  }
};
let SL = {
  args: [{
    name: 'projectId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    project: [{
      id: createViewRef('projectId'),
      userId: createSessionRef('userId')
    }, {
      plan: [{
        userId: createSessionRef('userId')
      }, yl.fields]
    }]
  }
};
let SF = {
  args: [{
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.Workflow
  },
  fields: {
    team: [{
      id: createViewRef('teamId'),
      userId: createSessionRef('userId')
    }, {
      plan: [{
        userId: createSessionRef('userId')
      }, yl.fields]
    }]
  }
};
let SM = {
  args: [{
    name: 'planParentId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'planType',
    type: {
      kind: 'enum',
      name: 'PlanType'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    plan: [{
      planParentId: createViewRef('planParentId'),
      planType: createViewRef('planType'),
      userId: createSessionRef('userId')
    }, {
      _parentId: NULL_FIELD_REF,
      key: NULL_FIELD_REF,
      type: NULL_FIELD_REF,
      tier: NULL_FIELD_REF,
      connectionCount: NULL_FIELD_REF,
      unlimitedConnectionsEnabled: NULL_FIELD_REF,
      testingOnlyUnlimitedConnectionsEnabled: NULL_FIELD_REF
    }]
  }
};
let Sj = {
  args: [{
    name: 'planParentId',
    type: {
      kind: 'bigint'
    },
    nullable: !1
  }, {
    name: 'planType',
    type: {
      kind: 'enum',
      name: 'PlanType'
    },
    nullable: !1
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    planPublicInfo: makeFieldRefOptional([{
      planParentId: createViewRef('planParentId'),
      planType: createViewRef('planType')
    }, {
      id: NULL_FIELD_REF,
      featureFlagFcPlanEnabled: {
        value: NULL_FIELD_REF
      }
    }])
  }
};
let SU = {
  args: [{
    name: 'planId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'planType',
    type: {
      kind: 'enum',
      name: 'PlanType'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    planConnectedProjectsForUser: makeFieldRefOptional([{
      planParentId: createViewRef('planId'),
      planType: createViewRef('planType'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      projectId: NULL_FIELD_REF,
      project: makeFieldRefOptional({
        id: NULL_FIELD_REF,
        path: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        orgId: NULL_FIELD_REF,
        teamId: NULL_FIELD_REF,
        createdAt: NULL_FIELD_REF,
        deletedAt: NULL_FIELD_REF,
        trashedAt: NULL_FIELD_REF,
        updatedAt: NULL_FIELD_REF,
        description: NULL_FIELD_REF,
        viewOnlyAt: NULL_FIELD_REF,
        inviteOnlyAt: NULL_FIELD_REF,
        lastModifiedAt: NULL_FIELD_REF,
        activeProjectResourceConnections: {
          hostPlanName: NULL_FIELD_REF,
          connectedPlanName: NULL_FIELD_REF
        },
        isAbandonedDrafts: NULL_FIELD_REF,
        teamV2: makeFieldRefOptional({
          name: NULL_FIELD_REF
        })
      })
    }])
  }
};
let SB = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, {
      currentPlanUser: [{
        userId: createSessionRef('userId')
      }, yp.fields]
    }])
  }
};
let SV = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    org: [{
      id: createViewRef('orgId'),
      userId: createSessionRef('userId')
    }, {
      currentPlanUser: [{
        userId: createSessionRef('userId')
      }, yp.fields]
    }]
  }
};
let SG = {
  args: [{
    name: 'projectId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.Workflow
  },
  fields: {
    project: [{
      id: createViewRef('projectId'),
      userId: createSessionRef('userId')
    }, {
      currentPlanUser: [{
        userId: createSessionRef('userId')
      }, yp.fields]
    }]
  }
};
let Sz = {
  args: [{
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    team: [{
      id: createViewRef('teamId'),
      userId: createSessionRef('userId')
    }, {
      currentPlanUser: [{
        userId: createSessionRef('userId')
      }, yp.fields]
    }]
  }
};
let SH = {
  args: [{
    name: 'pluginId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    plugin: [{
      pluginId: createViewRef('pluginId'),
      userId: createSessionRef('userId'),
      orgId: createViewRef('orgId')
    }, {
      id: NULL_FIELD_REF,
      currentPluginVersionId: NULL_FIELD_REF,
      publishingStatus: NULL_FIELD_REF,
      isWidget: NULL_FIELD_REF,
      orgId: NULL_FIELD_REF,
      communityPublishers: {
        isPending: NULL_FIELD_REF,
        profile: {
          id: NULL_FIELD_REF,
          profileHandle: NULL_FIELD_REF,
          user: {
            id: NULL_FIELD_REF,
            name: NULL_FIELD_REF
          },
          team: {
            id: NULL_FIELD_REF,
            name: NULL_FIELD_REF
          },
          org: {
            id: NULL_FIELD_REF,
            name: NULL_FIELD_REF
          }
        },
        role: NULL_FIELD_REF
      },
      currentPluginVersion: {
        id: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        version: NULL_FIELD_REF,
        releaseNotes: NULL_FIELD_REF,
        description: NULL_FIELD_REF,
        tagline: NULL_FIELD_REF,
        creatorPolicy: NULL_FIELD_REF,
        manifest: NULL_FIELD_REF,
        createdAt: NULL_FIELD_REF,
        iconPath: NULL_FIELD_REF,
        coverImagePath: NULL_FIELD_REF,
        codePath: NULL_FIELD_REF,
        plugin: {
          currentPluginVersionId: NULL_FIELD_REF
        },
        iconUrl: NULL_FIELD_REF,
        coverImageUrl: NULL_FIELD_REF
      }
    }]
  }
};
let SW = {
  args: [{
    name: 'pluginId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Extensibility
  },
  fields: {
    plugin: [{
      userId: createSessionRef('userId'),
      pluginId: createViewRef('pluginId'),
      orgId: createViewRef('orgId')
    }, {
      id: NULL_FIELD_REF,
      installCount: NULL_FIELD_REF,
      communityPublishers: {
        profile: {
          id: NULL_FIELD_REF,
          entityType: NULL_FIELD_REF,
          profileHandle: NULL_FIELD_REF,
          user: {
            name: NULL_FIELD_REF,
            imgUrl: NULL_FIELD_REF
          },
          team: {
            name: NULL_FIELD_REF,
            imgUrl: createAliasedFieldRef('imgUrlTransformed', NULL_FIELD_REF)
          },
          org: {
            name: NULL_FIELD_REF,
            imgUrl: createAliasedFieldRef('imgUrlTransformed', NULL_FIELD_REF)
          }
        }
      },
      isWidget: NULL_FIELD_REF,
      currentPluginVersion: {
        id: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        description: NULL_FIELD_REF,
        manifest: NULL_FIELD_REF,
        creatorPolicy: NULL_FIELD_REF,
        iconUrl: NULL_FIELD_REF,
        coverImageUrl: NULL_FIELD_REF,
        playgroundFigFileKey: NULL_FIELD_REF,
        hasPlaygroundFile: NULL_FIELD_REF
      },
      monetizedResourceMetadataId: NULL_FIELD_REF,
      pluginRequests: [{
        orgId: createViewRef('orgId')
      }, {
        id: NULL_FIELD_REF,
        orgUser: {
          id: NULL_FIELD_REF,
          user: {
            id: NULL_FIELD_REF,
            name: NULL_FIELD_REF,
            handle: NULL_FIELD_REF,
            imgUrl: NULL_FIELD_REF,
            email: NULL_FIELD_REF
          },
          workspaceUsers: {
            id: NULL_FIELD_REF,
            workspaceId: NULL_FIELD_REF
          }
        },
        pluginId: NULL_FIELD_REF,
        createdAt: NULL_FIELD_REF,
        updatedAt: NULL_FIELD_REF,
        status: NULL_FIELD_REF,
        requesterNote: NULL_FIELD_REF,
        workspaceId: NULL_FIELD_REF,
        declineNote: NULL_FIELD_REF
      }]
    }],
    org: [{
      id: createViewRef('orgId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      workspaces: {
        name: NULL_FIELD_REF,
        id: NULL_FIELD_REF,
        isPluginAllowlisted: [{
          pluginId: createViewRef('pluginId')
        }, NULL_FIELD_REF]
      },
      isPluginAllowlisted: [{
        pluginId: createViewRef('pluginId')
      }, NULL_FIELD_REF]
    }]
  }
};
let SK = {
  args: [{
    name: 'pluginId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'orgIds',
    type: {
      kind: 'list',
      ofType: {
        kind: 'bigint'
      }
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Extensibility
  },
  fields: {
    pluginInstall: [{
      userId: createSessionRef('userId'),
      pluginId: createViewRef('pluginId')
    }, {
      createdAt: NULL_FIELD_REF
    }],
    orgPluginInstalls: makeFieldRefOptional([{
      pluginId: createViewRef('pluginId'),
      orgIds: createViewRef('orgIds')
    }, {
      orgId: NULL_FIELD_REF,
      createdAt: NULL_FIELD_REF
    }])
  }
};
let SY = {
  args: [{
    name: 'targetOrgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'targetUserId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Extensibility
  },
  fields: {
    pluginPreferences: [{
      currentUserId: createSessionRef('userId'),
      targetOrgId: createViewRef('targetOrgId'),
      targetUserId: createViewRef('targetUserId')
    }, {
      id: NULL_FIELD_REF,
      preferences: {
        pins: {
          pluginId: NULL_FIELD_REF,
          inherited: NULL_FIELD_REF,
          plugin: {
            id: NULL_FIELD_REF,
            currentPluginVersionId: NULL_FIELD_REF,
            publishingStatus: NULL_FIELD_REF,
            isWidget: NULL_FIELD_REF,
            orgId: NULL_FIELD_REF,
            communityPublishers: {
              isPending: NULL_FIELD_REF,
              profile: {
                id: NULL_FIELD_REF,
                profileHandle: NULL_FIELD_REF,
                user: {
                  id: NULL_FIELD_REF,
                  name: NULL_FIELD_REF
                },
                team: {
                  id: NULL_FIELD_REF,
                  name: NULL_FIELD_REF
                },
                org: {
                  id: NULL_FIELD_REF,
                  name: NULL_FIELD_REF
                }
              },
              role: NULL_FIELD_REF
            },
            currentPluginVersion: {
              id: NULL_FIELD_REF,
              name: NULL_FIELD_REF,
              version: NULL_FIELD_REF,
              releaseNotes: NULL_FIELD_REF,
              description: NULL_FIELD_REF,
              tagline: NULL_FIELD_REF,
              creatorPolicy: NULL_FIELD_REF,
              manifest: NULL_FIELD_REF,
              createdAt: NULL_FIELD_REF,
              iconPath: NULL_FIELD_REF,
              coverImagePath: NULL_FIELD_REF,
              codePath: NULL_FIELD_REF,
              plugin: {
                currentPluginVersionId: NULL_FIELD_REF
              },
              iconUrl: NULL_FIELD_REF,
              coverImageUrl: NULL_FIELD_REF
            }
          }
        },
        removedInheritedPins: NULL_FIELD_REF,
        codegenSettings: {
          language: {
            type: NULL_FIELD_REF,
            id: NULL_FIELD_REF,
            pluginLanguage: NULL_FIELD_REF
          },
          preferences: {
            scaleFactor: NULL_FIELD_REF,
            unit: NULL_FIELD_REF,
            customSettings: NULL_FIELD_REF
          },
          behavior: NULL_FIELD_REF
        }
      },
      codegenEnabled: NULL_FIELD_REF,
      pinnedPluginsEnabled: NULL_FIELD_REF
    }]
  }
};
let Sq = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    org: [{
      userId: createSessionRef('userId'),
      id: createViewRef('orgId')
    }, {
      pluginRequests: {
        id: NULL_FIELD_REF,
        orgUser: {
          id: NULL_FIELD_REF,
          user: {
            id: NULL_FIELD_REF,
            name: NULL_FIELD_REF,
            handle: NULL_FIELD_REF,
            imgUrl: NULL_FIELD_REF,
            email: NULL_FIELD_REF
          }
        },
        pluginId: NULL_FIELD_REF,
        plugin: {
          id: NULL_FIELD_REF,
          currentPluginVersionId: NULL_FIELD_REF,
          publishingStatus: NULL_FIELD_REF,
          isWidget: NULL_FIELD_REF,
          orgId: NULL_FIELD_REF,
          communityPublishers: {
            isPending: NULL_FIELD_REF,
            profile: {
              id: NULL_FIELD_REF,
              profileHandle: NULL_FIELD_REF,
              user: {
                id: NULL_FIELD_REF,
                name: NULL_FIELD_REF
              },
              team: {
                id: NULL_FIELD_REF,
                name: NULL_FIELD_REF
              },
              org: {
                id: NULL_FIELD_REF,
                name: NULL_FIELD_REF
              }
            },
            role: NULL_FIELD_REF
          },
          currentPluginVersion: {
            id: NULL_FIELD_REF,
            name: NULL_FIELD_REF,
            version: NULL_FIELD_REF,
            releaseNotes: NULL_FIELD_REF,
            description: NULL_FIELD_REF,
            tagline: NULL_FIELD_REF,
            creatorPolicy: NULL_FIELD_REF,
            manifest: NULL_FIELD_REF,
            createdAt: NULL_FIELD_REF,
            iconPath: NULL_FIELD_REF,
            coverImagePath: NULL_FIELD_REF,
            codePath: NULL_FIELD_REF,
            plugin: {
              currentPluginVersionId: NULL_FIELD_REF
            },
            iconUrl: NULL_FIELD_REF,
            coverImageUrl: NULL_FIELD_REF
          }
        },
        createdAt: NULL_FIELD_REF,
        updatedAt: NULL_FIELD_REF,
        status: NULL_FIELD_REF,
        declineNote: NULL_FIELD_REF,
        requesterNote: NULL_FIELD_REF,
        workspaceId: NULL_FIELD_REF
      },
      allowlistedPlugins: createAliasedFieldRef('whitelistedPlugins', {
        id: NULL_FIELD_REF,
        pluginId: NULL_FIELD_REF
      })
    }]
  }
};
let S$ = {
  args: [{
    name: 'pluginId',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    pluginSecurityFormResponse: [{
      pluginId: createViewRef('pluginId')
    }, {
      id: NULL_FIELD_REF,
      status: NULL_FIELD_REF,
      responses: NULL_FIELD_REF,
      pluginId: NULL_FIELD_REF,
      formVersion: NULL_FIELD_REF,
      updatedAt: NULL_FIELD_REF,
      createdAt: NULL_FIELD_REF
    }]
  }
};
let SZ = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'updatedAtTimestamp',
    type: {
      kind: 'datetime'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    org: [{
      id: createViewRef('orgId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      pluginUpdates: [{
        orgId: createViewRef('orgId'),
        updatedAtTimestamp: createViewRef('updatedAtTimestamp')
      }, {
        id: NULL_FIELD_REF,
        installCount: NULL_FIELD_REF,
        viewCount: NULL_FIELD_REF,
        likeCount: NULL_FIELD_REF,
        commentCount: NULL_FIELD_REF,
        blockedAt: NULL_FIELD_REF,
        categoryId: NULL_FIELD_REF,
        orgId: NULL_FIELD_REF,
        thumbnailUrl: NULL_FIELD_REF,
        currentPluginVersionId: NULL_FIELD_REF,
        currentPluginVersion: {
          id: NULL_FIELD_REF,
          version: NULL_FIELD_REF,
          creatorPolicy: NULL_FIELD_REF,
          createdAt: NULL_FIELD_REF,
          description: NULL_FIELD_REF,
          coverImagePath: NULL_FIELD_REF,
          manifest: NULL_FIELD_REF,
          name: NULL_FIELD_REF,
          playgroundFigFileKey: NULL_FIELD_REF,
          iconPath: NULL_FIELD_REF,
          codePath: NULL_FIELD_REF,
          snapshotPath: NULL_FIELD_REF,
          playgroundFileVersionId: NULL_FIELD_REF,
          pluginId: NULL_FIELD_REF,
          releaseNotes: NULL_FIELD_REF,
          resourceStagingSignature: NULL_FIELD_REF,
          tagline: NULL_FIELD_REF,
          userId: NULL_FIELD_REF
        },
        createdAt: NULL_FIELD_REF,
        redirectThumbnailUrl: NULL_FIELD_REF,
        currentUserFirstRanAt: [{
          userId: createSessionRef('userId')
        }, NULL_FIELD_REF],
        uniqueRunCount: NULL_FIELD_REF,
        pluginEditorType: NULL_FIELD_REF,
        unpublishedAt: NULL_FIELD_REF,
        supportContact: NULL_FIELD_REF,
        commentsSetting: NULL_FIELD_REF,
        hideRelatedContentByOthers: NULL_FIELD_REF,
        publishingStatus: NULL_FIELD_REF,
        isWidget: NULL_FIELD_REF,
        badges: {
          id: NULL_FIELD_REF,
          pluginId: NULL_FIELD_REF,
          badgeType: NULL_FIELD_REF
        },
        creator: {
          handle: NULL_FIELD_REF,
          id: NULL_FIELD_REF,
          imgUrl: NULL_FIELD_REF
        },
        profile: {
          id: NULL_FIELD_REF,
          location: NULL_FIELD_REF,
          entityType: NULL_FIELD_REF,
          followerCount: NULL_FIELD_REF,
          followingCount: NULL_FIELD_REF,
          name: NULL_FIELD_REF,
          primaryUserId: NULL_FIELD_REF,
          profileHandle: NULL_FIELD_REF,
          publicAt: NULL_FIELD_REF,
          badges: {
            id: NULL_FIELD_REF,
            pluginId: NULL_FIELD_REF,
            badgeType: NULL_FIELD_REF
          },
          user: {
            imgUrl: NULL_FIELD_REF,
            profile: {
              images: NULL_FIELD_REF
            }
          },
          currentUserIsFollowing: [{
            userId: createSessionRef('userId')
          }, NULL_FIELD_REF],
          currentUserIsFollowed: [{
            userId: createSessionRef('userId')
          }, NULL_FIELD_REF]
        },
        communityPublishers: {
          id: NULL_FIELD_REF,
          profile: {
            id: NULL_FIELD_REF,
            location: NULL_FIELD_REF,
            entityType: NULL_FIELD_REF,
            followerCount: NULL_FIELD_REF,
            followingCount: NULL_FIELD_REF,
            name: NULL_FIELD_REF,
            primaryUserId: NULL_FIELD_REF,
            profileHandle: NULL_FIELD_REF,
            publicAt: NULL_FIELD_REF,
            badges: {
              id: NULL_FIELD_REF,
              pluginId: NULL_FIELD_REF,
              badgeType: NULL_FIELD_REF
            },
            user: {
              imgUrl: NULL_FIELD_REF,
              profile: {
                images: NULL_FIELD_REF
              }
            },
            currentUserIsFollowing: [{
              userId: createSessionRef('userId')
            }, NULL_FIELD_REF],
            currentUserIsFollowed: [{
              userId: createSessionRef('userId')
            }, NULL_FIELD_REF]
          }
        }
      }]
    }]
  }
};
let SX = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    org: [{
      id: createViewRef('orgId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      whitelistedPlugins: {
        id: NULL_FIELD_REF,
        pluginId: NULL_FIELD_REF,
        orgId: NULL_FIELD_REF,
        createdAt: NULL_FIELD_REF,
        allowlistGroupId: NULL_FIELD_REF,
        allowlistGroupType: NULL_FIELD_REF,
        isWidget: makeFieldRefOptional()
      }
    }]
  }
};
let SQ = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'updatedAtTimestamp',
    type: {
      kind: 'datetime'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    org: [{
      id: createViewRef('orgId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      widgetUpdates: makeFieldRefOptional([{
        orgId: createViewRef('orgId'),
        updatedAtTimestamp: createViewRef('updatedAtTimestamp')
      }, {
        id: NULL_FIELD_REF,
        installCount: NULL_FIELD_REF,
        viewCount: NULL_FIELD_REF,
        likeCount: NULL_FIELD_REF,
        commentCount: NULL_FIELD_REF,
        blockedAt: NULL_FIELD_REF,
        categoryId: NULL_FIELD_REF,
        orgId: NULL_FIELD_REF,
        thumbnailUrl: NULL_FIELD_REF,
        currentPluginVersionId: NULL_FIELD_REF,
        currentPluginVersion: {
          id: NULL_FIELD_REF,
          version: NULL_FIELD_REF,
          creatorPolicy: NULL_FIELD_REF,
          createdAt: NULL_FIELD_REF,
          description: NULL_FIELD_REF,
          coverImagePath: NULL_FIELD_REF,
          manifest: NULL_FIELD_REF,
          name: NULL_FIELD_REF,
          playgroundFigFileKey: NULL_FIELD_REF,
          iconPath: NULL_FIELD_REF,
          codePath: NULL_FIELD_REF,
          snapshotPath: NULL_FIELD_REF,
          playgroundFileVersionId: NULL_FIELD_REF,
          pluginId: NULL_FIELD_REF,
          releaseNotes: NULL_FIELD_REF,
          resourceStagingSignature: NULL_FIELD_REF,
          tagline: NULL_FIELD_REF,
          userId: NULL_FIELD_REF
        },
        createdAt: NULL_FIELD_REF,
        redirectThumbnailUrl: NULL_FIELD_REF,
        uniqueRunCount: NULL_FIELD_REF,
        pluginEditorType: NULL_FIELD_REF,
        unpublishedAt: NULL_FIELD_REF,
        supportContact: NULL_FIELD_REF,
        commentsSetting: NULL_FIELD_REF,
        hideRelatedContentByOthers: NULL_FIELD_REF,
        publishingStatus: NULL_FIELD_REF,
        isWidget: NULL_FIELD_REF,
        badges: {
          id: NULL_FIELD_REF,
          pluginId: NULL_FIELD_REF,
          badgeType: NULL_FIELD_REF
        },
        creator: {
          handle: NULL_FIELD_REF,
          id: NULL_FIELD_REF,
          imgUrl: NULL_FIELD_REF
        },
        profile: {
          id: NULL_FIELD_REF,
          location: NULL_FIELD_REF,
          entityType: NULL_FIELD_REF,
          followerCount: NULL_FIELD_REF,
          followingCount: NULL_FIELD_REF,
          name: NULL_FIELD_REF,
          primaryUserId: NULL_FIELD_REF,
          profileHandle: NULL_FIELD_REF,
          publicAt: NULL_FIELD_REF,
          badges: {
            id: NULL_FIELD_REF,
            pluginId: NULL_FIELD_REF,
            badgeType: NULL_FIELD_REF
          },
          user: {
            imgUrl: NULL_FIELD_REF,
            profile: {
              images: NULL_FIELD_REF
            }
          },
          currentUserIsFollowing: [{
            userId: createSessionRef('userId')
          }, NULL_FIELD_REF],
          currentUserIsFollowed: [{
            userId: createSessionRef('userId')
          }, NULL_FIELD_REF]
        },
        communityPublishers: {
          id: NULL_FIELD_REF,
          profile: {
            id: NULL_FIELD_REF,
            location: NULL_FIELD_REF,
            entityType: NULL_FIELD_REF,
            followerCount: NULL_FIELD_REF,
            followingCount: NULL_FIELD_REF,
            name: NULL_FIELD_REF,
            primaryUserId: NULL_FIELD_REF,
            profileHandle: NULL_FIELD_REF,
            publicAt: NULL_FIELD_REF,
            badges: {
              id: NULL_FIELD_REF,
              pluginId: NULL_FIELD_REF,
              badgeType: NULL_FIELD_REF
            },
            user: {
              imgUrl: NULL_FIELD_REF,
              profile: {
                images: NULL_FIELD_REF
              }
            },
            currentUserIsFollowing: [{
              userId: createSessionRef('userId')
            }, NULL_FIELD_REF],
            currentUserIsFollowed: [{
              userId: createSessionRef('userId')
            }, NULL_FIELD_REF]
          }
        },
        currentUserFirstRanAt: [{
          userId: createSessionRef('userId')
        }, NULL_FIELD_REF],
        profileInstallStatus: [{
          userId: createSessionRef('userId')
        }, NULL_FIELD_REF]
      }])
    }]
  }
};
let SJ = {
  args: [{
    name: 'openFileKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'nodes',
    type: {
      kind: 'list',
      ofType: {
        kind: 'string'
      }
    }
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('openFileKey')
    }, {
      preload_code_connect_lk: [{
        nodes: createViewRef('nodes'),
        userId: createSessionRef('userId')
      }, {
        id: NULL_FIELD_REF,
        docsById: NULL_FIELD_REF,
        nodesWithCodeConnect: NULL_FIELD_REF
      }]
    }])
  }
};
let S0 = {
  args: [{
    name: 'teamId',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    team: [{
      id: createViewRef('teamId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      adminRoles: {
        id: NULL_FIELD_REF,
        level: NULL_FIELD_REF,
        pending: NULL_FIELD_REF,
        user: {
          id: NULL_FIELD_REF,
          handle: NULL_FIELD_REF,
          email: NULL_FIELD_REF,
          imgUrl: NULL_FIELD_REF,
          name: NULL_FIELD_REF
        }
      }
    }]
  }
};
let S1 = {
  args: [],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.Billing
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      hasProTeamPaidStatusDesign: makeFieldRefOptional([{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF]),
      hasProTeamPaidStatusWhiteboard: makeFieldRefOptional([{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF])
    }]
  }
};
let S2 = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.Billing
  },
  fields: {
    org: [{
      id: createViewRef('orgId'),
      userId: createSessionRef('userId')
    }, {
      canAdmin: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF],
      billingTrials: {
        id: NULL_FIELD_REF,
        trialType: NULL_FIELD_REF,
        productLicenseTypes: NULL_FIELD_REF,
        status: NULL_FIELD_REF,
        trialPeriodEnd: NULL_FIELD_REF,
        resourceType: NULL_FIELD_REF,
        resourceId: NULL_FIELD_REF,
        createdAt: NULL_FIELD_REF,
        metadata: NULL_FIELD_REF
      }
    }]
  }
};
let S5 = {
  args: [{
    name: 'projectId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: [{
      id: createViewRef('projectId'),
      userId: createSessionRef('userId')
    }, {
      activeProjectResourceConnections: {
        id: NULL_FIELD_REF,
        hostPlanName: NULL_FIELD_REF,
        connectedPlanName: NULL_FIELD_REF
      }
    }]
  }
};
let S4 = {
  args: [{
    name: 'folderId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: [{
      id: createViewRef('folderId'),
      userId: createSessionRef('userId')
    }, mergeFieldRefs({
      id: NULL_FIELD_REF,
      canEdit: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF],
      canRead: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF]
    }, yA.fields)]
  }
};
let S3 = {
  args: [{
    name: 'projectId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Workflow
  },
  fields: {
    project: [{
      id: createViewRef('projectId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      path: NULL_FIELD_REF,
      teamId: NULL_FIELD_REF,
      orgId: NULL_FIELD_REF,
      abandonedDraftUserName: NULL_FIELD_REF,
      abandonedDraftUserEmail: NULL_FIELD_REF,
      trashedAt: NULL_FIELD_REF,
      planPublicInfo: {
        key: {
          parentId: NULL_FIELD_REF,
          type: NULL_FIELD_REF
        }
      }
    }]
  }
};
let $$S6 = {
  args: [{
    name: 'projectId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: [{
      id: createViewRef('projectId'),
      userId: createSessionRef('userId')
    }, yy.fields]
  }
};
let S7 = {
  args: [{
    name: 'projectId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: [{
      id: createViewRef('projectId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      orgId: NULL_FIELD_REF,
      teamId: NULL_FIELD_REF,
      updatedAt: NULL_FIELD_REF,
      createdAt: NULL_FIELD_REF,
      path: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      description: NULL_FIELD_REF,
      trashedAt: NULL_FIELD_REF,
      viewOnlyAt: NULL_FIELD_REF,
      isInviteOnly: NULL_FIELD_REF,
      isViewOnly: NULL_FIELD_REF,
      team: createAliasedFieldRef('teamV2', {
        id: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        pendingAssetTransferRequest: {
          id: NULL_FIELD_REF
        }
      }),
      activeProjectResourceConnections: {
        id: NULL_FIELD_REF,
        hostPlanId: NULL_FIELD_REF,
        hostPlanType: NULL_FIELD_REF,
        hostPlanName: NULL_FIELD_REF,
        hostPlanImageUrl: NULL_FIELD_REF,
        connectedPlanId: NULL_FIELD_REF,
        connectedPlanType: NULL_FIELD_REF,
        connectedPlanName: NULL_FIELD_REF,
        connectedPlanImageUrl: NULL_FIELD_REF,
        resourceConnectionInvite: {
          hostInviterName: NULL_FIELD_REF,
          handledByName: [{
            userId: createSessionRef('userId')
          }, NULL_FIELD_REF],
          createdAt: NULL_FIELD_REF,
          handledAt: NULL_FIELD_REF
        },
        isHostPlanAdmin: [{
          userId: createSessionRef('userId')
        }, NULL_FIELD_REF]
      },
      pendingResourceConnectionInvite: {
        id: NULL_FIELD_REF,
        status: NULL_FIELD_REF,
        hostPlanId: NULL_FIELD_REF,
        hostPlanType: NULL_FIELD_REF,
        hostPlanName: NULL_FIELD_REF,
        hostPlanImageUrl: NULL_FIELD_REF,
        connectingPlanType: NULL_FIELD_REF,
        connectingPlanId: NULL_FIELD_REF,
        connectingPlanName: NULL_FIELD_REF,
        connectingPlanImageUrl: NULL_FIELD_REF,
        hostInviterName: NULL_FIELD_REF,
        createdAt: NULL_FIELD_REF,
        isHostPlanAdmin: [{
          userId: createSessionRef('userId')
        }, NULL_FIELD_REF]
      },
      pendingAssetTransferRequest: {
        id: NULL_FIELD_REF,
        isTransferCopy: NULL_FIELD_REF,
        sourceUser: {
          id: NULL_FIELD_REF,
          email: NULL_FIELD_REF
        },
        destinationUser: {
          id: NULL_FIELD_REF,
          email: NULL_FIELD_REF
        }
      },
      connectedPlan: [{
        userId: createSessionRef('userId')
      }, {
        name: NULL_FIELD_REF,
        imgUrl: NULL_FIELD_REF,
        key: {
          type: NULL_FIELD_REF
        },
        isAdmin: NULL_FIELD_REF
      }],
      plan: [{
        userId: createSessionRef('userId')
      }, {
        name: NULL_FIELD_REF,
        imgUrl: NULL_FIELD_REF,
        tier: NULL_FIELD_REF,
        key: {
          type: NULL_FIELD_REF,
          parentId: NULL_FIELD_REF
        },
        isAdmin: NULL_FIELD_REF
      }]
    }]
  }
};
let S8 = {
  args: [{
    name: 'projectId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: [{
      id: createViewRef('projectId'),
      userId: createSessionRef('userId')
    }, {
      activeProjectResourceConnections: {
        id: NULL_FIELD_REF
      },
      plan: [{
        userId: createSessionRef('userId')
      }, {
        key: {
          parentId: NULL_FIELD_REF,
          type: NULL_FIELD_REF
        },
        name: NULL_FIELD_REF
      }],
      pendingResourceConnectionInvite: {
        id: NULL_FIELD_REF
      }
    }]
  }
};
let S9 = {
  args: [{
    name: 'projectId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: [{
      id: createViewRef('projectId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      canRead: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF]
    }]
  }
};
let we = {
  args: [{
    name: 'projectId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: [{
      id: createViewRef('projectId'),
      userId: createSessionRef('userId')
    }, {
      untrashedFiles: {
        fileRepoId: NULL_FIELD_REF
      },
      trashedWithFolderFiles: makeFieldRefOptional({
        fileRepoId: NULL_FIELD_REF
      })
    }]
  }
};
let wt = {
  args: [{
    name: 'projectId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: [{
      id: createViewRef('projectId'),
      userId: createSessionRef('userId')
    }, {
      untrashedFiles: {
        name: NULL_FIELD_REF
      }
    }]
  }
};
let wi = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, {
      project: [{
        userId: createSessionRef('userId')
      }, {
        path: NULL_FIELD_REF
      }],
      folderOwnerRole: {
        user: {
          handle: NULL_FIELD_REF
        }
      }
    }])
  }
};
let wn = {
  args: [{
    name: 'projectId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Workflow
  },
  fields: {
    project: [{
      id: createViewRef('projectId'),
      userId: createSessionRef('userId')
    }, {
      ownerRole: {
        id: NULL_FIELD_REF
      }
    }]
  }
};
let wr = {
  args: [{
    name: 'projectId',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Wayfinding
  },
  fields: {
    project: [{
      id: createViewRef('projectId'),
      userId: createSessionRef('userId')
    }, mergeFieldRefs(yb.fields, {
      id: NULL_FIELD_REF
    })]
  }
};
let wa = {
  args: [{
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'updatedAtTimestamp',
    type: {
      kind: 'datetime'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Wayfinding
  },
  fields: {
    team: [{
      id: createViewRef('teamId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      projectUpdates: [{
        updatedAtTimestamp: createViewRef('updatedAtTimestamp')
      }, yy.fields]
    }]
  }
};
let ws = {
  args: [{
    name: 'prototypeId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Workflow
  },
  fields: {
    prototype: makeFieldRefOptional([{
      id: createViewRef('prototypeId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      canRead: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF]
    }])
  }
};
let wo = {
  args: [{
    name: 'prototypeId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    prototype: [{
      id: createViewRef('prototypeId'),
      userId: createSessionRef('userId')
    }, mergeFieldRefs(yv.fields, {
      id: NULL_FIELD_REF
    })]
  }
};
let wl = {
  args: [{
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Growth
  },
  fields: {
    team: [{
      id: createViewRef('teamId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      canEdit: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF],
      plan: [{
        userId: createSessionRef('userId')
      }, {
        tier: NULL_FIELD_REF
      }]
    }]
  }
};
let wd = {
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Growth
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      teamEditRoles: {
        id: NULL_FIELD_REF,
        team: mergeFieldRefs({
          id: NULL_FIELD_REF,
          deletedAt: NULL_FIELD_REF,
          orgId: NULL_FIELD_REF
        }, yf.fields)
      }
    }]
  }
};
let wc = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, {
      lastPublishedAt: NULL_FIELD_REF,
      libraryKeyToFile: {
        libraryPublishScope: {
          publishScopeType: NULL_FIELD_REF
        }
      },
      workspaceId: NULL_FIELD_REF,
      computedWorkspace: [{
        userId: createSessionRef('userId')
      }, {
        workspace: {
          name: NULL_FIELD_REF
        }
      }]
    }])
  }
};
let wu = {
  props: {
    priority: PriorityLevels.P1
  },
  args: [{
    name: 'cacheNonce',
    type: {
      kind: 'string'
    }
  }],
  fields: {
    recentIdleTimeoutSettingChange: makeFieldRefOptional([{
      userId: createSessionRef('userId'),
      cacheNonce: createViewRef('cacheNonce')
    }, {
      id: NULL_FIELD_REF,
      orgName: NULL_FIELD_REF,
      durationInSecs: NULL_FIELD_REF,
      lastActiveAt: NULL_FIELD_REF
    }])
  }
};
let wp = {
  props: {
    priority: PriorityLevels.P1
  },
  args: [{
    name: 'cacheNonce',
    type: {
      kind: 'string'
    }
  }],
  fields: {
    recentNetworkControlRejection: makeFieldRefOptional([{
      userId: createSessionRef('userId'),
      cacheNonce: createViewRef('cacheNonce')
    }, {
      id: NULL_FIELD_REF,
      reason: NULL_FIELD_REF
    }])
  }
};
let wm = {
  args: [],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Workflow
  },
  fields: {
    actionsHistory: makeFieldRefOptional([{
      userId: createSessionRef('userId')
    }, {
      recentlyUsedActions: {
        displayName: NULL_FIELD_REF,
        selectedRunPluginArgs: {
          parameterValues: NULL_FIELD_REF
        },
        extensionInfo: {
          extensionId: NULL_FIELD_REF,
          extensionType: NULL_FIELD_REF,
          currentExtensionVersionId: NULL_FIELD_REF,
          localFileId: NULL_FIELD_REF
        }
      }
    }])
  }
};
let wh = {
  args: [{
    name: 'repoId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    repo: [{
      id: createViewRef('repoId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      canRead: createAliasedFieldRef('canReadV3', [{
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      }, NULL_FIELD_REF]),
      canEdit: createAliasedFieldRef('canEditV3', [{
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      }, NULL_FIELD_REF])
    }]
  }
};
let wg = {
  args: [{
    name: 'repoId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    repo: [{
      id: createViewRef('repoId'),
      userId: createSessionRef('userId')
    }, yI.fields]
  }
};
let wf = {
  args: [{
    name: 'repoId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Workflow
  },
  fields: {
    repo: makeFieldRefOptional([{
      id: createViewRef('repoId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      canView: createAliasedFieldRef('canViewV3', [{
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      }, NULL_FIELD_REF])
    }])
  }
};
let w_ = {
  id: NULL_FIELD_REF,
  key: NULL_FIELD_REF,
  reviewNumber: NULL_FIELD_REF,
  title: NULL_FIELD_REF,
  description: NULL_FIELD_REF,
  owner: {
    id: NULL_FIELD_REF,
    handle: NULL_FIELD_REF,
    imgUrl: NULL_FIELD_REF
  },
  closer: {
    id: NULL_FIELD_REF,
    handle: NULL_FIELD_REF,
    imgUrl: NULL_FIELD_REF
  },
  closedAt: NULL_FIELD_REF,
  fileMergeId: NULL_FIELD_REF,
  reviewers: {
    user: {
      id: NULL_FIELD_REF,
      handle: NULL_FIELD_REF,
      imgUrl: NULL_FIELD_REF
    },
    notes: NULL_FIELD_REF,
    changesRequestedAt: NULL_FIELD_REF,
    approvedAt: NULL_FIELD_REF
  },
  mergeSummaryNotes: NULL_FIELD_REF,
  requestedAt: NULL_FIELD_REF,
  updatedAt: NULL_FIELD_REF,
  createdAt: NULL_FIELD_REF
};
let wA = {
  args: [{
    name: 'repoId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Wayfinding
  },
  fields: {
    repo: [{
      id: createViewRef('repoId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      defaultFileKey: NULL_FIELD_REF,
      updatedAt: NULL_FIELD_REF,
      trashedAt: NULL_FIELD_REF,
      linkAccess: NULL_FIELD_REF,
      protoLinkAccess: NULL_FIELD_REF,
      orgBrowsable: NULL_FIELD_REF,
      orgAudience: NULL_FIELD_REF,
      canEdit: createAliasedFieldRef('canEditV3', [{
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      }, NULL_FIELD_REF]),
      roleOnObjectForUser: [{
        userId: createSessionRef('userId')
      }, {
        id: NULL_FIELD_REF,
        isOwnerOfResource: NULL_FIELD_REF
      }],
      files: {
        id: NULL_FIELD_REF,
        key: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        _name: NULL_FIELD_REF,
        sourceFileKey: NULL_FIELD_REF,
        sourceCheckpointId: NULL_FIELD_REF,
        fileRepoId: NULL_FIELD_REF,
        folderId: NULL_FIELD_REF,
        parentOrgId: NULL_FIELD_REF,
        teamId: NULL_FIELD_REF,
        createdAt: NULL_FIELD_REF,
        trashedAt: NULL_FIELD_REF,
        updatedAt: NULL_FIELD_REF,
        deletedAt: NULL_FIELD_REF,
        trashedUserId: NULL_FIELD_REF,
        orgBrowsable: NULL_FIELD_REF,
        orgAudience: NULL_FIELD_REF,
        linkAccess: NULL_FIELD_REF,
        protoLinkAccess: NULL_FIELD_REF,
        editorType: NULL_FIELD_REF,
        description: NULL_FIELD_REF,
        checkpointId: NULL_FIELD_REF,
        openMergeRequest: {
          id: NULL_FIELD_REF,
          mergeRequestKey: NULL_FIELD_REF,
          mergeRequest: w_,
          branchFileKey: NULL_FIELD_REF
        },
        fileMerges: {
          id: NULL_FIELD_REF,
          userId: NULL_FIELD_REF,
          user: {
            id: NULL_FIELD_REF,
            name: NULL_FIELD_REF,
            handle: NULL_FIELD_REF
          },
          direction: NULL_FIELD_REF,
          checkpointDiffId: NULL_FIELD_REF,
          mergeResultCheckpointId: NULL_FIELD_REF,
          mergeResultFileversionId: NULL_FIELD_REF,
          updatedAt: NULL_FIELD_REF,
          createdAt: NULL_FIELD_REF,
          mergeRequest: w_
        },
        canEdit: createAliasedFieldRef('canEditV3', [{
          userId: createSessionRef('userId'),
          sessionId: createSessionRef('sessionId'),
          anonymousUserId: createSessionRef('anonymousUserId')
        }, NULL_FIELD_REF]),
        canManage: createAliasedFieldRef('canManageV2', [{
          userId: createSessionRef('userId'),
          sessionId: createSessionRef('sessionId'),
          anonymousUserId: createSessionRef('anonymousUserId')
        }, NULL_FIELD_REF]),
        roleOnObjectForUser: [{
          userId: createSessionRef('userId')
        }, {
          id: NULL_FIELD_REF,
          isOwnerOfResource: NULL_FIELD_REF
        }],
        recentFileVersions: makeFieldRefOptional({
          id: NULL_FIELD_REF,
          label: NULL_FIELD_REF,
          description: NULL_FIELD_REF,
          view: NULL_FIELD_REF,
          updatedAt: NULL_FIELD_REF,
          user: {
            id: NULL_FIELD_REF,
            imgUrl: NULL_FIELD_REF,
            name: NULL_FIELD_REF,
            handle: NULL_FIELD_REF,
            isSystemUser: NULL_FIELD_REF
          },
          checkpoint: {
            key: NULL_FIELD_REF,
            id: NULL_FIELD_REF,
            createdAt: NULL_FIELD_REF,
            meta: {
              diffs: NULL_FIELD_REF,
              editCounts: NULL_FIELD_REF
            }
          }
        }),
        creator: {
          id: NULL_FIELD_REF,
          imgUrl: NULL_FIELD_REF,
          name: NULL_FIELD_REF,
          handle: NULL_FIELD_REF
        }
      }
    }]
  }
};
let wy = {
  id: NULL_FIELD_REF,
  name: NULL_FIELD_REF,
  handle: NULL_FIELD_REF,
  imgUrl: NULL_FIELD_REF,
  description: NULL_FIELD_REF
};
let wb = {
  args: [{
    name: 'repoId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    repo: makeFieldRefOptional([{
      id: createViewRef('repoId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      roles: {
        pending: NULL_FIELD_REF,
        userId: NULL_FIELD_REF,
        level: NULL_FIELD_REF,
        resourceType: NULL_FIELD_REF,
        user: {
          ...wy
        }
      },
      team: {
        id: NULL_FIELD_REF,
        roles: {
          pending: NULL_FIELD_REF,
          userId: NULL_FIELD_REF,
          level: NULL_FIELD_REF,
          resourceType: NULL_FIELD_REF,
          user: {
            ...wy
          }
        }
      }
    }])
  }
};
let wv = {
  args: [{
    name: 'repoId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Wayfinding
  },
  fields: {
    repo: [{
      id: createViewRef('repoId'),
      userId: createSessionRef('userId')
    }, mergeFieldRefs(yx.fields, {
      id: NULL_FIELD_REF
    })]
  }
};
let wI = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: createAliasedFieldRef('_fileViewableByPrototypeViewers', [{
      key: createViewRef('fileKey'),
      userId: createSessionRef('userId')
    }, {
      repo: yI.fields
    }])
  }
};
let wE = {
  args: [{
    name: 'folderId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'updatedAtTimestamp',
    type: {
      kind: 'datetime'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Wayfinding
  },
  fields: {
    project: [{
      id: createViewRef('folderId'),
      userId: createSessionRef('userId')
    }, {
      repoUpdates: [{
        updatedAtTimestamp: createViewRef('updatedAtTimestamp')
      }, yI.fields]
    }]
  }
};
let wx = {
  args: [{
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'updatedAtTimestamp',
    type: {
      kind: 'datetime'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Wayfinding
  },
  fields: {
    team: [{
      id: createViewRef('teamId'),
      userId: createSessionRef('userId')
    }, {
      repoUpdates: [{
        updatedAtTimestamp: createViewRef('updatedAtTimestamp')
      }, yI.fields]
    }]
  }
};
let wS = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Wayfinding
  },
  fields: {
    file: createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('fileKey')
    }, {
      resolvedComments: {
        id: NULL_FIELD_REF,
        uuid: NULL_FIELD_REF,
        key: NULL_FIELD_REF,
        orderId: NULL_FIELD_REF,
        parentId: NULL_FIELD_REF,
        createdAt: NULL_FIELD_REF,
        resolvedAt: NULL_FIELD_REF,
        user: {
          id: NULL_FIELD_REF,
          handle: NULL_FIELD_REF,
          imgUrl: NULL_FIELD_REF
        },
        commentPin: {
          id: NULL_FIELD_REF
        },
        clientMeta: {
          x: NULL_FIELD_REF,
          y: NULL_FIELD_REF,
          nodeId: NULL_FIELD_REF,
          pageId: NULL_FIELD_REF,
          nodeOffset: {
            x: NULL_FIELD_REF,
            y: NULL_FIELD_REF
          },
          inFrame: NULL_FIELD_REF,
          selectionBoxAnchor: {
            x: NULL_FIELD_REF,
            y: NULL_FIELD_REF
          },
          stablePath: NULL_FIELD_REF
        },
        messageMetaStylized: A9.fields,
        messageMeta: {
          t: NULL_FIELD_REF,
          user: {
            id: NULL_FIELD_REF,
            handle: NULL_FIELD_REF,
            imgUrl: NULL_FIELD_REF
          }
        }
      }
    }])
  }
};
let ww = {
  args: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'isHostPlanAdmin',
    type: {
      kind: 'bool'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    resourceConnection: [{
      id: createViewRef('id')
    }, {
      resourceConnectedUsersWithPlan: [{
        userId: createSessionRef('userId'),
        isHostPlanAdmin: createViewRef('isHostPlanAdmin')
      }, {
        id: NULL_FIELD_REF,
        userId: NULL_FIELD_REF,
        user: {
          id: NULL_FIELD_REF,
          name: NULL_FIELD_REF,
          handle: NULL_FIELD_REF,
          imgUrl: NULL_FIELD_REF,
          email: NULL_FIELD_REF
        },
        planParentId: NULL_FIELD_REF,
        planName: NULL_FIELD_REF,
        planImgUrl: NULL_FIELD_REF,
        level: NULL_FIELD_REF,
        isFileRole: NULL_FIELD_REF
      }],
      totalResourceConnectedUsers: NULL_FIELD_REF
    }]
  }
};
let wC = {
  id: NULL_FIELD_REF,
  hostPlanId: NULL_FIELD_REF,
  hostPlanType: NULL_FIELD_REF,
  hostPlanName: NULL_FIELD_REF,
  hostPlanImageUrl: NULL_FIELD_REF,
  connectedPlanId: NULL_FIELD_REF,
  connectedPlanType: NULL_FIELD_REF,
  connectedPlanName: NULL_FIELD_REF,
  connectedPlanImageUrl: NULL_FIELD_REF,
  disconnectedAt: NULL_FIELD_REF,
  disconnectedByName: [{
    userId: createSessionRef('userId')
  }, NULL_FIELD_REF],
  resourceId: NULL_FIELD_REF,
  projectLimitedInfo: {
    name: NULL_FIELD_REF,
    teamId: NULL_FIELD_REF
  },
  isHostPlanAdmin: [{
    userId: createSessionRef('userId')
  }, NULL_FIELD_REF],
  projectLastModifiedAt: NULL_FIELD_REF,
  projectDescription: NULL_FIELD_REF,
  resourceConnectionInvite: {
    createdAt: NULL_FIELD_REF,
    handledAt: NULL_FIELD_REF,
    hostInviterName: NULL_FIELD_REF,
    handledByName: [{
      userId: createSessionRef('userId')
    }, NULL_FIELD_REF]
  }
};
let wT = {
  id: NULL_FIELD_REF,
  hostPlanId: NULL_FIELD_REF,
  hostPlanType: NULL_FIELD_REF,
  hostPlanName: NULL_FIELD_REF,
  hostPlanImageUrl: NULL_FIELD_REF,
  connectingPlanId: NULL_FIELD_REF,
  connectingPlanType: NULL_FIELD_REF,
  connectingPlanName: NULL_FIELD_REF,
  connectingPlanImageUrl: NULL_FIELD_REF,
  resourceId: NULL_FIELD_REF,
  projectLimitedInfo: {
    name: NULL_FIELD_REF
  },
  createdAt: NULL_FIELD_REF,
  hostInviterName: NULL_FIELD_REF,
  isHostPlanAdmin: [{
    userId: createSessionRef('userId')
  }, NULL_FIELD_REF],
  hostInviterPublic: makeFieldRefOptional({
    name: NULL_FIELD_REF,
    userPublicImgUrl: NULL_FIELD_REF
  })
};
let wk = {
  args: [{
    name: 'planId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'planType',
    type: {
      kind: 'enum',
      name: 'PlanType'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    plan: [{
      planParentId: createViewRef('planId'),
      planType: createViewRef('planType'),
      userId: createSessionRef('userId')
    }, {
      hostPlanResourceConnections: {
        ...wC,
        assetTransferRequest: makeFieldRefOptional({
          sourceUser: {
            name: NULL_FIELD_REF
          }
        })
      },
      connectedPlanResourceConnections: wC,
      hostPlanPendingResourceConnectionInvites: wT,
      connectingPlanPendingResourceConnectionInvites: wT
    }]
  }
};
let wR = {
  args: [{
    name: 'resourceConnectionInviteId',
    type: {
      kind: 'uuid'
    }
  }],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.Workflow
  },
  fields: {
    resourceConnectionInvite: makeFieldRefOptional([{
      id: createViewRef('resourceConnectionInviteId')
    }, {
      id: NULL_FIELD_REF,
      hostPlanType: NULL_FIELD_REF,
      hostPlanName: NULL_FIELD_REF,
      hostPlanImageUrl: NULL_FIELD_REF,
      connectingPlanId: NULL_FIELD_REF,
      connectingPlanType: NULL_FIELD_REF,
      connectingPlanName: NULL_FIELD_REF,
      connectingPlanImageUrl: NULL_FIELD_REF,
      status: NULL_FIELD_REF,
      resourceId: NULL_FIELD_REF,
      projectLimitedInfo: {
        name: NULL_FIELD_REF
      },
      hostInviterPublic: {
        userPublicImgUrl: NULL_FIELD_REF,
        name: NULL_FIELD_REF
      }
    }])
  }
};
let wN = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: createAliasedFieldRef('_fileViewableByPrototypeViewers', [{
      key: createViewRef('fileKey'),
      userId: createSessionRef('userId')
    }, {
      resourceConnectionSharingGroupUsers: makeFieldRefOptional([{
        userId: createSessionRef('userId')
      }, {
        id: NULL_FIELD_REF,
        userId: NULL_FIELD_REF,
        userPublic: {
          id: NULL_FIELD_REF,
          handle: NULL_FIELD_REF,
          userPublicImgUrl: NULL_FIELD_REF,
          name: NULL_FIELD_REF
        },
        planParentId: NULL_FIELD_REF,
        planType: NULL_FIELD_REF,
        planName: NULL_FIELD_REF,
        planImgUrl: NULL_FIELD_REF,
        level: NULL_FIELD_REF
      }])
    }])
  }
};
let wP = {
  args: [{
    name: 'hubFileId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    resourceSave: [{
      userId: createSessionRef('userId'),
      hubFileId: createViewRef('hubFileId')
    }, {
      createdAt: NULL_FIELD_REF
    }]
  }
};
let wO = {
  args: [{
    name: 'resourceId',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'orgIds',
    type: {
      kind: 'list',
      ofType: {
        kind: 'bigint'
      }
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Community
  },
  fields: {
    resourceSaveFromResourceId: makeFieldRefOptional([{
      userId: createSessionRef('userId'),
      resourceId: createViewRef('resourceId')
    }, {
      createdAt: NULL_FIELD_REF
    }]),
    orgResourceSaves: makeFieldRefOptional([{
      resourceId: createViewRef('resourceId'),
      orgIds: createViewRef('orgIds')
    }, {
      orgId: NULL_FIELD_REF,
      createdAt: NULL_FIELD_REF
    }])
  }
};
let wD = {
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    resourceSaves: [{
      userId: createSessionRef('userId')
    }, {
      createdAt: NULL_FIELD_REF,
      hubFileId: NULL_FIELD_REF,
      hubFile: {
        viewerMode: NULL_FIELD_REF
      }
    }]
  }
};
let wL = {
  id: NULL_FIELD_REF,
  level: NULL_FIELD_REF,
  createdAt: NULL_FIELD_REF,
  updatedAt: NULL_FIELD_REF,
  resourceId: NULL_FIELD_REF,
  resourceType: NULL_FIELD_REF,
  pending: NULL_FIELD_REF,
  pendingEmail: NULL_FIELD_REF,
  userId: NULL_FIELD_REF,
  user: {
    id: NULL_FIELD_REF,
    name: NULL_FIELD_REF,
    handle: NULL_FIELD_REF,
    imgUrl: NULL_FIELD_REF,
    email: NULL_FIELD_REF,
    description: NULL_FIELD_REF
  }
};
let wF = {
  args: [{
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'updatedAtTimestamp',
    type: {
      kind: 'datetime'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    team: [{
      id: createViewRef('teamId'),
      userId: createSessionRef('userId')
    }, mergeFieldRefs(yL.fields, {
      roleUpdates: [{
        updatedAtTimestamp: createViewRef('updatedAtTimestamp')
      }, wL],
      roleDeletionUpdates: [{
        updatedAtTimestamp: createViewRef('updatedAtTimestamp')
      }, {
        roleId: NULL_FIELD_REF,
        resourceId: NULL_FIELD_REF,
        op: NULL_FIELD_REF
      }]
    })]
  }
};
let wM = {
  args: [{
    name: 'updatedAtTimestamp',
    type: {
      kind: 'datetime'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Workflow
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      fileRoleUpdates: [{
        updatedAtTimestamp: createViewRef('updatedAtTimestamp')
      }, mergeFieldRefs(wL, {
        file: Az.fields
      })],
      repoRoleUpdates: [{
        updatedAtTimestamp: createViewRef('updatedAtTimestamp')
      }, wL],
      projectRoleUpdates: [{
        updatedAtTimestamp: createViewRef('updatedAtTimestamp')
      }, mergeFieldRefs(wL, {
        project: yy.fields
      })],
      teamRoleUpdates: [{
        updatedAtTimestamp: createViewRef('updatedAtTimestamp')
      }, mergeFieldRefs(wL, {
        team: yL.fields
      })],
      roleDeletionUpdates: [{
        updatedAtTimestamp: createViewRef('updatedAtTimestamp')
      }, {
        roleId: NULL_FIELD_REF,
        resourceId: NULL_FIELD_REF,
        resourceType: NULL_FIELD_REF,
        op: NULL_FIELD_REF
      }]
    }]
  }
};
let wj = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.Workflow
  },
  fields: {
    org: [{
      id: createViewRef('orgId'),
      userId: createSessionRef('userId')
    }, {
      workspaces: {
        id: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        canView: [{
          userId: createSessionRef('userId')
        }, NULL_FIELD_REF]
      }
    }],
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      baseOrgUser: [{
        orgId: createViewRef('orgId')
      }, {
        workspaceUsers: {
          workspaceId: NULL_FIELD_REF,
          isMainWorkspace: NULL_FIELD_REF
        }
      }]
    }]
  }
};
let wU = {
  args: [{
    name: 'planParentId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'planType',
    type: {
      kind: 'enum',
      name: 'PlanType'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Scale
  },
  fields: {
    plan: [{
      planParentId: createViewRef('planParentId'),
      planType: createViewRef('planType'),
      userId: createSessionRef('userId')
    }, {
      _parentId: NULL_FIELD_REF,
      type: NULL_FIELD_REF,
      availableSeatCountsV2: [{
        userId: createSessionRef('userId'),
        byBillingInterval: !1
      }, {
        billableProductKey: NULL_FIELD_REF,
        count: NULL_FIELD_REF
      }],
      assignedSeatCountsV2: [{
        userId: createSessionRef('userId'),
        byBillingInterval: !1
      }, {
        billableProductKey: NULL_FIELD_REF,
        count: NULL_FIELD_REF
      }]
    }]
  }
};
let wB = {
  args: [{
    name: 'planParentId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'planType',
    type: {
      kind: 'enum',
      name: 'PlanType'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    plan: [{
      planParentId: createViewRef('planParentId'),
      planType: createViewRef('planType'),
      userId: createSessionRef('userId')
    }, {
      _parentId: NULL_FIELD_REF,
      type: NULL_FIELD_REF,
      availableSeatCountsV2: [{
        userId: createSessionRef('userId'),
        byBillingInterval: !0
      }, {
        billableProductKey: NULL_FIELD_REF,
        billingInterval: NULL_FIELD_REF,
        count: NULL_FIELD_REF
      }],
      assignedSeatCountsV2: [{
        userId: createSessionRef('userId'),
        byBillingInterval: !0
      }, {
        billableProductKey: NULL_FIELD_REF,
        billingInterval: NULL_FIELD_REF,
        count: NULL_FIELD_REF
      }]
    }]
  }
};
let wV = {
  args: [{
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    team: [{
      id: createViewRef('teamId'),
      userId: createSessionRef('userId')
    }, {
      canAdmin: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF]
    }]
  }
};
let wG = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    org: [{
      id: createViewRef('orgId'),
      userId: createSessionRef('userId')
    }, {
      canAdmin: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF]
    }]
  }
};
let wz = {
  args: [{
    name: 'resourceTypes',
    type: {
      kind: 'list',
      ofType: {
        kind: 'string'
      }
    }
  }, {
    name: 'firstPageSize',
    type: {
      kind: 'int'
    }
  }, {
    name: 'sortOrder',
    type: {
      kind: 'string'
    }
  }, {
    name: 'cursorColumn',
    type: {
      kind: 'string'
    }
  }, {
    name: 'sharedBy',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'planId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'planType',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'fileType',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'orgDeletedDrafts',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    sharedWithYouResources: [{
      userId: createSessionRef('userId'),
      resourceTypes: createViewRef('resourceTypes'),
      firstPageSize: createViewRef('firstPageSize'),
      sortOrder: createViewRef('sortOrder'),
      cursorColumn: createViewRef('cursorColumn'),
      sharedBy: createViewRef('sharedBy'),
      planId: createViewRef('planId'),
      planType: createViewRef('planType'),
      fileType: createViewRef('fileType'),
      orgDeletedDrafts: createViewRef('orgDeletedDrafts')
    }, {
      id: NULL_FIELD_REF,
      sharedWithYouFile: yS.fields,
      sharedWithYouFolder: yw.fields,
      sharedWithYouRepo: yC.fields,
      sharedWithYouPrototype: yT.fields
    }]
  }
};
let wH = {
  args: [{
    name: 'libraryKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    libraryKeyToFile: [{
      libraryKey: createViewRef('libraryKey')
    }, {
      libraryKey: NULL_FIELD_REF,
      file: {
        fileSharingGroups: {
          id: NULL_FIELD_REF,
          resourceConnection: {
            id: NULL_FIELD_REF,
            projectLimitedInfo: {
              name: NULL_FIELD_REF
            }
          }
        }
      }
    }]
  }
};
let wW = {
  args: [{
    name: 'resourceConnectionId',
    type: {
      kind: 'uuid'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    resourceConnectionSharingGroups: [{
      resourceConnectionId: createViewRef('resourceConnectionId')
    }, {
      id: NULL_FIELD_REF,
      resourceId: NULL_FIELD_REF,
      libraryKey: NULL_FIELD_REF
    }]
  }
};
let wK = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    siteBundles: makeFieldRefOptional([{
      fileKey: createViewRef('fileKey')
    }, {
      id: NULL_FIELD_REF,
      createdAt: NULL_FIELD_REF,
      updatedAt: NULL_FIELD_REF,
      publishedByUserId: NULL_FIELD_REF,
      fileKey: NULL_FIELD_REF,
      completedAt: NULL_FIELD_REF,
      status: NULL_FIELD_REF,
      publishedByUser: {
        id: NULL_FIELD_REF,
        handle: NULL_FIELD_REF,
        imgUrl: NULL_FIELD_REF
      },
      responsiveSetGuids: NULL_FIELD_REF
    }])
  }
};
let wY = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    siteMount: makeFieldRefOptional([{
      fileKey: createViewRef('fileKey')
    }, {
      id: NULL_FIELD_REF,
      siteDomain: {
        id: NULL_FIELD_REF,
        domain: NULL_FIELD_REF
      },
      customDomain: {
        id: NULL_FIELD_REF,
        domain: NULL_FIELD_REF,
        verifiedAt: NULL_FIELD_REF,
        activationStatus: NULL_FIELD_REF,
        pairedDomain: {
          id: NULL_FIELD_REF,
          domain: NULL_FIELD_REF,
          verifiedAt: NULL_FIELD_REF,
          activationStatus: NULL_FIELD_REF
        }
      },
      createdAt: NULL_FIELD_REF,
      updatedAt: NULL_FIELD_REF,
      status: NULL_FIELD_REF,
      fileKey: NULL_FIELD_REF,
      pwdConfig: {
        id: NULL_FIELD_REF
      }
    }])
  }
};
let wq = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.Site
  },
  fields: {
    siteMount: makeFieldRefOptional([{
      fileKey: createViewRef('fileKey')
    }, {
      id: NULL_FIELD_REF,
      siteDomain: {
        id: NULL_FIELD_REF,
        domain: NULL_FIELD_REF
      },
      customDomain: {
        id: NULL_FIELD_REF,
        domain: NULL_FIELD_REF,
        verifiedAt: NULL_FIELD_REF,
        activationStatus: NULL_FIELD_REF
      },
      createdAt: NULL_FIELD_REF,
      updatedAt: NULL_FIELD_REF,
      status: NULL_FIELD_REF,
      fileKey: NULL_FIELD_REF,
      publishEvents: [{}, {
        id: NULL_FIELD_REF,
        createdAt: NULL_FIELD_REF,
        siteBundleId: NULL_FIELD_REF,
        siteBundle: {
          id: NULL_FIELD_REF,
          createdAt: NULL_FIELD_REF,
          updatedAt: NULL_FIELD_REF,
          status: NULL_FIELD_REF,
          publishedByUser: {
            id: NULL_FIELD_REF,
            handle: NULL_FIELD_REF,
            imgUrl: NULL_FIELD_REF
          },
          responsiveSetGuids: NULL_FIELD_REF,
          publishedByUserId: NULL_FIELD_REF,
          completedAt: NULL_FIELD_REF,
          fileKey: NULL_FIELD_REF,
          fileVersion: {
            id: NULL_FIELD_REF,
            label: NULL_FIELD_REF,
            description: NULL_FIELD_REF
          }
        },
        autoGeneratedDomain: NULL_FIELD_REF,
        customDomain: NULL_FIELD_REF,
        action: NULL_FIELD_REF,
        actor: {
          id: NULL_FIELD_REF,
          handle: NULL_FIELD_REF,
          imgUrl: NULL_FIELD_REF
        }
      }]
    }])
  }
};
let w$ = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Slide
  },
  fields: {
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, {
      id: NULL_FIELD_REF,
      key: NULL_FIELD_REF,
      viewerExportRestricted: NULL_FIELD_REF,
      canEdit: createAliasedFieldRef('canEditV3', [{
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      }, NULL_FIELD_REF]),
      org: createAliasedFieldRef('orgInfo', {
        id: NULL_FIELD_REF,
        aiFeaturesDisabledAt: NULL_FIELD_REF,
        k12GoogleOrg: NULL_FIELD_REF
      }),
      team: createAliasedFieldRef('teamPublicInfo', {
        id: NULL_FIELD_REF,
        aiFeaturesDisabledAt: NULL_FIELD_REF
      })
    }])
  }
};
let wZ = {
  args: [{
    name: 'themeKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Slide
  },
  fields: {
    slidesTheme: [{
      themeKey: createViewRef('themeKey')
    }, {
      userId: NULL_FIELD_REF,
      themeKey: NULL_FIELD_REF,
      version: NULL_FIELD_REF,
      variableSet: {
        id: NULL_FIELD_REF,
        version: NULL_FIELD_REF,
        key: NULL_FIELD_REF,
        checkpoint: {
          key: NULL_FIELD_REF
        }
      },
      variables: {
        key: NULL_FIELD_REF,
        version: NULL_FIELD_REF,
        variable: A5.fields
      },
      styles: {
        key: NULL_FIELD_REF,
        version: NULL_FIELD_REF,
        style: yP.fields
      },
      file: {
        key: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        teamId: NULL_FIELD_REF
      }
    }]
  }
};
let wX = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, {
      key: NULL_FIELD_REF,
      slotsFileEnablement: makeFieldRefOptional({
        slotsEnabled: NULL_FIELD_REF
      })
    }])
  }
};
let wQ = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('key')
    }, {
      linkAccess: NULL_FIELD_REF,
      team: createAliasedFieldRef('teamPublicInfo', {
        isStarterTeam: NULL_FIELD_REF,
        isStudentTeam: NULL_FIELD_REF
      }),
      roles: {
        userId: NULL_FIELD_REF
      }
    }])
  }
};
let wJ = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    stateGroup: [{
      key: createViewRef('key'),
      userId: createSessionRef('userId')
    }, bX]
  }
};
let w0 = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.DesignSystem
  },
  fields: {
    stateGroup: [{
      key: createViewRef('key'),
      userId: createSessionRef('userId')
    }, mergeFieldRefs(yR.fields, {
      file: {
        key: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        teamId: NULL_FIELD_REF,
        libraryKey: NULL_FIELD_REF
      }
    })]
  }
};
let w1 = {
  id: NULL_FIELD_REF,
  updateType: NULL_FIELD_REF,
  updatedAt: NULL_FIELD_REF,
  destinationKey: NULL_FIELD_REF,
  fileKey: NULL_FIELD_REF,
  libraryKey: NULL_FIELD_REF,
  nodeId: NULL_FIELD_REF,
  key: NULL_FIELD_REF,
  stateGroup: {
    file: {
      teamId: NULL_FIELD_REF,
      libraryKey: NULL_FIELD_REF
    },
    libraryKey: NULL_FIELD_REF,
    libraryResourceId: NULL_FIELD_REF,
    nodeId: NULL_FIELD_REF,
    key: NULL_FIELD_REF,
    checkpointId: NULL_FIELD_REF,
    fileCheckpointId: NULL_FIELD_REF,
    version: NULL_FIELD_REF,
    userFacingVersion: NULL_FIELD_REF,
    containingFrame: {
      name: NULL_FIELD_REF,
      nodeId: NULL_FIELD_REF,
      backgroundColor: NULL_FIELD_REF,
      pageId: NULL_FIELD_REF,
      pageName: NULL_FIELD_REF
    },
    minNodeWidth: NULL_FIELD_REF,
    minNodeHeight: NULL_FIELD_REF,
    name: NULL_FIELD_REF,
    description: NULL_FIELD_REF,
    createdAt: NULL_FIELD_REF,
    updatedAt: NULL_FIELD_REF,
    unpublishedAt: NULL_FIELD_REF,
    fillColor: NULL_FIELD_REF,
    defaultStateKey: NULL_FIELD_REF,
    destinationKey: NULL_FIELD_REF,
    fullHierarchyPath: NULL_FIELD_REF,
    libraryHierarchyPathId: NULL_FIELD_REF,
    description_rt: NULL_FIELD_REF,
    hubFileId: NULL_FIELD_REF
  }
};
let w2 = {
  args: [{
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.DesignSystem
  },
  fields: {
    team: [{
      id: createViewRef('teamId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      stateGroupUpdates: w1
    }]
  }
};
let w5 = {
  args: [{
    name: 'projectId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.DesignSystem
  },
  fields: {
    project: [{
      id: createViewRef('projectId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      stateGroupUpdates: w1
    }]
  }
};
let w4 = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.DesignSystem
  },
  fields: {
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, {
      id: NULL_FIELD_REF,
      key: NULL_FIELD_REF,
      stateGroupUpdates: w1
    }])
  }
};
let w3 = {
  args: [{
    name: 'currentOrgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.Workflow
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      fileBrowserPreferences: {
        orderedTeamIds: NULL_FIELD_REF
      },
      teamRoles: {
        pending: NULL_FIELD_REF,
        team: {
          id: NULL_FIELD_REF,
          deletedAt: NULL_FIELD_REF,
          orgId: NULL_FIELD_REF,
          createdAt: NULL_FIELD_REF
        }
      }
    }]
  }
};
let w6 = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.DesignSystem
  },
  fields: {
    style: [{
      key: createViewRef('key'),
      userId: createSessionRef('userId')
    }, bX]
  }
};
let w7 = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }, {
    name: 'openFileKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.DesignSystem
  },
  fields: {
    styleWithDestinationAssetV2: [{
      key: createViewRef('key'),
      userId: createSessionRef('userId'),
      openFileKey: createViewRef('openFileKey')
    }, mergeFieldRefs(yO.fields, {
      file: {
        key: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        teamId: NULL_FIELD_REF,
        libraryKey: NULL_FIELD_REF
      },
      destinationAsset: mergeFieldRefs(yO.fields, {
        file: {
          key: NULL_FIELD_REF,
          name: NULL_FIELD_REF,
          teamId: NULL_FIELD_REF,
          libraryKey: NULL_FIELD_REF
        }
      })
    })]
  }
};
let w8 = {
  libraryPresetSubscriptionsV2: [{
    group: createViewRef('group')
  }, {
    id: NULL_FIELD_REF,
    default_subscribed: NULL_FIELD_REF,
    communityLibrary: A1.fields,
    libraryFileSubscriptionOverride: [{
      subscribingFileKey: createViewRef('fileKey')
    }, {}],
    libraryTeamSubscriptionOverride: [{
      subscribingFileTeamId: createViewRef('teamId')
    }, {}],
    libraryWorkspaceSubscriptionOverride: [{
      subscribingFileWorkspaceId: createViewRef('workspaceId')
    }, {}],
    libraryUserSubscriptionOverride: [{
      subscribingUserId: createSessionRef('userId')
    }, {}],
    libraryOrgSubscriptionOverride: [{
      subscribingFileOrgId: createViewRef('orgId')
    }, {}]
  }]
};
let w9 = {
  id: NULL_FIELD_REF,
  library: A0.fields,
  communityLibrary: A1.fields,
  libraryFileSubscriptionOverride: [{
    subscribingFileKey: createViewRef('fileKey')
  }, {}],
  libraryTeamSubscriptionOverride: [{
    subscribingFileTeamId: createViewRef('teamId')
  }, {}],
  libraryWorkspaceSubscriptionOverride: [{
    subscribingFileWorkspaceId: createViewRef('workspaceId')
  }, {}],
  libraryUserSubscriptionOverride: [{
    subscribingUserId: createSessionRef('userId')
  }, {}]
};
let Ce = {
  id: NULL_FIELD_REF,
  library: A0.fields,
  communityLibrary: A1.fields,
  libraryFileSubscriptionOverride: [{
    subscribingFileKey: createViewRef('fileKey')
  }, {}]
};
let Ct = {
  id: NULL_FIELD_REF,
  library: A0.fields,
  communityLibrary: A1.fields,
  libraryFileSubscriptionOverride: [{
    subscribingFileKey: createViewRef('fileKey')
  }, {}],
  libraryUserSubscriptionOverride: [{
    subscribingUserId: createSessionRef('userId')
  }, {}]
};
let Ci = {
  id: NULL_FIELD_REF,
  library: A0.fields,
  communityLibrary: A1.fields,
  libraryFileSubscriptionOverride: [{
    subscribingFileKey: createViewRef('fileKey')
  }, {}]
};
let Cn = {
  parentOrgId: NULL_FIELD_REF,
  teamId: NULL_FIELD_REF,
  sourceFileKey: NULL_FIELD_REF,
  sourceLibraryKey: NULL_FIELD_REF,
  fileRepoId: NULL_FIELD_REF,
  libraryFileSubscriptions: [{
    userId: createSessionRef('userId')
  }, {
    id: NULL_FIELD_REF,
    library: A0.fields,
    communityLibrary: A1.fields
  }],
  communityLibraryFileSubscriptions: [{
    userId: createSessionRef('userId')
  }, {
    isSubscribed: NULL_FIELD_REF,
    communityLibrary: A1.fields
  }],
  computedWorkspacePublicInfo: {
    workspace: {
      librarySubscriptions: {
        id: NULL_FIELD_REF,
        isSubscribed: NULL_FIELD_REF,
        figJamSubscribed: NULL_FIELD_REF,
        slidesSubscribed: NULL_FIELD_REF,
        buzzSubscribed: makeFieldRefOptional(NULL_FIELD_REF),
        library: A0.fields,
        communityLibrary: A1.fields,
        libraryFileSubscriptionOverride: [{
          subscribingFileKey: createViewRef('fileKey')
        }, {}],
        libraryTeamSubscriptionOverride: [{
          subscribingFileTeamId: createViewRef('teamId')
        }, {}]
      }
    }
  }
};
let Cr = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'workspaceId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'group',
    type: {
      kind: 'enum',
      name: 'PresetLibraryGroup'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, {
      libraryTeamSubscriptions: [{
        userId: createSessionRef('userId')
      }, {
        ...Ce
      }],
      libraryOrgSubscriptions: [{
        userId: createSessionRef('userId')
      }, {
        ...w9
      }],
      libraryUserSubscriptions: [{
        userId: createSessionRef('userId')
      }, {
        ...Ci
      }],
      currentUser: [{
        userId: createSessionRef('userId')
      }, {
        orgAwareTeamRoles: [{
          orgId: createViewRef('orgId')
        }, {
          team: {
            id: NULL_FIELD_REF,
            libraryTeamSubscriptions: [{
              userId: createSessionRef('userId')
            }, {
              ...Ct
            }]
          }
        }]
      }],
      ...Cn
    }]),
    ...w8
  }
};
let Ca = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'workspaceId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'group',
    type: {
      kind: 'enum',
      name: 'PresetLibraryGroup'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, {
      libraryTeamSubscriptionsForSlides: makeFieldRefOptional([{
        userId: createSessionRef('userId')
      }, {
        ...Ce
      }]),
      libraryOrgSubscriptionsForSlides: makeFieldRefOptional([{
        userId: createSessionRef('userId')
      }, {
        ...w9
      }]),
      libraryUserSubscriptionsForSlides: makeFieldRefOptional([{
        userId: createSessionRef('userId')
      }, {
        ...Ci
      }]),
      currentUser: [{
        userId: createSessionRef('userId')
      }, {
        orgAwareTeamRoles: [{
          orgId: createViewRef('orgId')
        }, {
          team: {
            id: NULL_FIELD_REF,
            libraryTeamSubscriptionsForSlides: makeFieldRefOptional([{
              userId: createSessionRef('userId')
            }, {
              ...Ct
            }])
          }
        }]
      }],
      ...Cn
    }]),
    ...w8
  }
};
let Cs = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'workspaceId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'group',
    type: {
      kind: 'enum',
      name: 'PresetLibraryGroup'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, {
      libraryTeamSubscriptionsForBuzz: makeFieldRefOptional([{
        userId: createSessionRef('userId')
      }, {
        ...Ce
      }]),
      libraryOrgSubscriptionsForBuzz: makeFieldRefOptional([{
        userId: createSessionRef('userId')
      }, {
        ...w9
      }]),
      libraryUserSubscriptionsForBuzz: makeFieldRefOptional([{
        userId: createSessionRef('userId')
      }, {
        ...Ci
      }]),
      currentUser: [{
        userId: createSessionRef('userId')
      }, {
        orgAwareTeamRoles: [{
          orgId: createViewRef('orgId')
        }, {
          team: {
            id: NULL_FIELD_REF,
            libraryTeamSubscriptionsForBuzz: makeFieldRefOptional([{
              userId: createSessionRef('userId')
            }, {
              ...Ct
            }])
          }
        }]
      }],
      ...Cn
    }]),
    ...w8
  }
};
let Co = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'workspaceId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'group',
    type: {
      kind: 'enum',
      name: 'PresetLibraryGroup'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, {
      libraryTeamSubscriptionsForFigJam: makeFieldRefOptional([{
        userId: createSessionRef('userId')
      }, {
        ...Ce
      }]),
      libraryOrgSubscriptionsForFigJam: makeFieldRefOptional([{
        userId: createSessionRef('userId')
      }, {
        ...w9
      }]),
      libraryUserSubscriptionsForFigJam: makeFieldRefOptional([{
        userId: createSessionRef('userId')
      }, {
        ...Ci
      }]),
      currentUser: [{
        userId: createSessionRef('userId')
      }, {
        orgAwareTeamRoles: [{
          orgId: createViewRef('orgId')
        }, {
          team: {
            id: NULL_FIELD_REF,
            libraryTeamSubscriptionsForFigJam: makeFieldRefOptional([{
              userId: createSessionRef('userId')
            }, {
              ...Ct
            }])
          }
        }]
      }],
      ...Cn
    }]),
    ...w8
  }
};
let Cl = {
  args: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.WebPlatform
  },
  fields: {
    subscriptionUpdateSloData: [{
      id: createViewRef('id')
    }, {
      id: NULL_FIELD_REF,
      key: NULL_FIELD_REF,
      updatedAt: NULL_FIELD_REF,
      createdAt: NULL_FIELD_REF
    }]
  }
};
let Cd = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    supabaseAuth: makeFieldRefOptional([{
      userId: createSessionRef('userId'),
      fileKey: createViewRef('fileKey')
    }, {
      authorized: NULL_FIELD_REF,
      expired: NULL_FIELD_REF,
      org: {
        plan: NULL_FIELD_REF,
        opt_in_tags: NULL_FIELD_REF,
        allowed_release_channels: NULL_FIELD_REF,
        id: NULL_FIELD_REF,
        name: NULL_FIELD_REF
      }
    }])
  }
};
let Cc = {
  args: [{
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    team: makeFieldRefOptional([{
      id: createViewRef('teamId'),
      userId: createSessionRef('userId')
    }, {
      aiFeaturesDisabledAt: NULL_FIELD_REF,
      isAiDataSharingEnabled: NULL_FIELD_REF,
      studentTeamAt: NULL_FIELD_REF
    }])
  }
};
let Cu = {
  args: [{
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    team: [{
      id: createViewRef('teamId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      deletedAt: NULL_FIELD_REF,
      gracePeriodEnd: NULL_FIELD_REF,
      isStudentTeam: NULL_FIELD_REF,
      orgId: NULL_FIELD_REF,
      orgAccess: NULL_FIELD_REF,
      studentTeamAt: NULL_FIELD_REF,
      canRead: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF],
      canEdit: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF],
      canAdmin: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF],
      canDelete: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF],
      isOwner: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF],
      subscription: NULL_FIELD_REF,
      roleOnObjectForUser: [{
        userId: createSessionRef('userId')
      }, {
        level: NULL_FIELD_REF
      }]
    }]
  }
};
let Cp = {
  args: [{
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    team: [{
      id: createViewRef('teamId'),
      userId: createSessionRef('userId')
    }, mergeFieldRefs(yL.fields, {
      updatedAt: NULL_FIELD_REF,
      planProperties: {
        property: NULL_FIELD_REF,
        value: NULL_FIELD_REF
      },
      communityProfile: {
        id: NULL_FIELD_REF,
        publicAt: NULL_FIELD_REF,
        profileHandle: NULL_FIELD_REF
      }
    })]
  }
};
let Cm = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'teamIds',
    type: {
      kind: 'list',
      ofType: {
        kind: 'bigint'
      }
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    org: makeFieldRefOptional([{
      id: createViewRef('orgId'),
      userId: createSessionRef('userId')
    }, {
      teamsByIdInAdmin: [{
        userId: createSessionRef('userId'),
        teamIds: createViewRef('teamIds')
      }, {
        team: {
          id: NULL_FIELD_REF,
          canViewInAdmin: [{
            userId: createSessionRef('userId')
          }, NULL_FIELD_REF]
        }
      }]
    }])
  }
};
let Ch = {
  args: [{
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.Workflow
  },
  fields: {
    team: [{
      id: createViewRef('teamId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      planSubscription: {
        status: NULL_FIELD_REF,
        tier: NULL_FIELD_REF
      },
      plan: [{
        userId: createSessionRef('userId')
      }, yl.fields]
    }],
    teamLimitedInfo: [{
      id: createViewRef('teamId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      planSubscription: {
        status: NULL_FIELD_REF,
        tier: NULL_FIELD_REF
      },
      plan: [{
        userId: createSessionRef('userId')
      }, yl.fields]
    }],
    teamPublicInfo: makeFieldRefOptional([{
      id: createViewRef('teamId')
    }, {
      id: NULL_FIELD_REF,
      planPublicInfo: [{
        userId: createSessionRef('userId')
      }, {
        id: NULL_FIELD_REF,
        tier: NULL_FIELD_REF,
        key: {
          type: NULL_FIELD_REF,
          parentId: NULL_FIELD_REF
        },
        planRecordId: makeFieldRefOptional(NULL_FIELD_REF)
      }]
    }])
  }
};
let Cg = {
  args: [{
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    team: [{
      id: createViewRef('teamId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      currentPlanUser: [{
        userId: createSessionRef('userId')
      }, yp.fields]
    }],
    teamPublicInfo: [{
      id: createViewRef('teamId')
    }, {
      id: NULL_FIELD_REF,
      currentPlanUser: [{
        userId: createSessionRef('userId')
      }, yp.fields]
    }]
  }
};
let Cf = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.Scale
  },
  fields: {
    org: [{
      id: createViewRef('orgId'),
      userId: createSessionRef('userId')
    }, {
      workspaces: {
        id: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        canCreateTeam: [{
          userId: createSessionRef('userId')
        }, NULL_FIELD_REF],
        orgAccess: NULL_FIELD_REF,
        imgUrl: createAliasedFieldRef('imgUrlTransformed', NULL_FIELD_REF)
      }
    }],
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      baseOrgUser: [{
        orgId: createViewRef('orgId')
      }, {
        workspaceUsers: {
          workspaceId: NULL_FIELD_REF,
          isMainWorkspace: NULL_FIELD_REF
        },
        permission: NULL_FIELD_REF
      }]
    }]
  }
};
let C_ = {
  args: [{
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    team: makeFieldRefOptional([{
      id: createViewRef('teamId'),
      userId: createSessionRef('userId')
    }, {
      discoverableLibraries: [{
        userId: createSessionRef('userId')
      }, {
        library: A0.fields
      }]
    }])
  }
};
let CA = {
  args: [{
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    team: [{
      id: createViewRef('teamId'),
      userId: createSessionRef('userId')
    }, {
      teamFileCounts: {
        id: NULL_FIELD_REF,
        designFileCount: NULL_FIELD_REF,
        whiteboardFileCount: NULL_FIELD_REF,
        slideFileCount: NULL_FIELD_REF,
        sitesFileCount: NULL_FIELD_REF,
        totalFileCount: makeFieldRefOptional()
      }
    }]
  }
};
let Cy = {
  args: [{
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'updatedAtTimestamp',
    type: {
      kind: 'datetime'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Wayfinding
  },
  fields: {
    team: [{
      id: createViewRef('teamId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      projectUpdates: [{
        updatedAtTimestamp: createViewRef('updatedAtTimestamp')
      }, yy.fields]
    }]
  }
};
let Cb = {
  args: [{
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    team: [{
      id: createViewRef('teamId'),
      userId: createSessionRef('userId')
    }, {
      hasPublishedSite: makeFieldRefOptional()
    }]
  }
};
let Cv = {
  args: [{
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.Scale
  },
  fields: {
    team: [{
      id: createViewRef('teamId'),
      userId: createSessionRef('userId')
    }, {
      name: NULL_FIELD_REF,
      studentTeamAt: NULL_FIELD_REF,
      canAdmin: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF],
      isOwner: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF],
      roles: {
        id: NULL_FIELD_REF,
        createdAt: NULL_FIELD_REF,
        updatedAt: NULL_FIELD_REF,
        level: NULL_FIELD_REF,
        resourceType: NULL_FIELD_REF,
        resourceId: NULL_FIELD_REF,
        pending: NULL_FIELD_REF,
        pendingEmail: NULL_FIELD_REF,
        userId: NULL_FIELD_REF,
        user: {
          id: NULL_FIELD_REF,
          name: NULL_FIELD_REF,
          handle: NULL_FIELD_REF,
          email: NULL_FIELD_REF,
          imgUrl: NULL_FIELD_REF,
          studentValidatedAt: NULL_FIELD_REF
        },
        eduGracePeriod: {
          isValid: NULL_FIELD_REF
        },
        canEdit: [{
          userId: createSessionRef('userId')
        }, NULL_FIELD_REF]
      }
    }]
  }
};
let CI = {
  args: [{
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    team: makeFieldRefOptional([{
      id: createViewRef('teamId'),
      userId: createSessionRef('userId')
    }, {
      isOrphaned: NULL_FIELD_REF
    }])
  }
};
let CE = {
  args: [{
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    teamInAdmin: [{
      id: createViewRef('teamId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      team: {
        name: NULL_FIELD_REF,
        pendingRoles: {
          id: NULL_FIELD_REF,
          createdAt: NULL_FIELD_REF,
          updatedAt: NULL_FIELD_REF,
          level: NULL_FIELD_REF,
          resourceType: NULL_FIELD_REF,
          resourceId: NULL_FIELD_REF,
          pending: NULL_FIELD_REF,
          pendingEmail: NULL_FIELD_REF,
          userId: NULL_FIELD_REF,
          canEdit: [{
            userId: createSessionRef('userId')
          }, NULL_FIELD_REF],
          invite: {
            id: NULL_FIELD_REF,
            redeemedBy: NULL_FIELD_REF,
            billableProductKey: NULL_FIELD_REF,
            inviteeUserId: NULL_FIELD_REF
          }
        },
        canRead: [{
          userId: createSessionRef('userId')
        }, NULL_FIELD_REF],
        canEdit: [{
          userId: createSessionRef('userId')
        }, NULL_FIELD_REF],
        canAdmin: [{
          userId: createSessionRef('userId')
        }, NULL_FIELD_REF],
        canDelete: [{
          userId: createSessionRef('userId')
        }, NULL_FIELD_REF],
        isOwner: [{
          userId: createSessionRef('userId')
        }, NULL_FIELD_REF]
      },
      teamUsers: {
        id: NULL_FIELD_REF,
        user: {
          id: NULL_FIELD_REF,
          name: NULL_FIELD_REF,
          email: NULL_FIELD_REF,
          handle: NULL_FIELD_REF,
          imgUrl: NULL_FIELD_REF,
          externalRestrictedOrgId: NULL_FIELD_REF,
          description: NULL_FIELD_REF,
          profile: {
            jobTitle: NULL_FIELD_REF
          }
        },
        teamRole: {
          id: NULL_FIELD_REF,
          createdAt: NULL_FIELD_REF,
          updatedAt: NULL_FIELD_REF,
          level: NULL_FIELD_REF,
          resourceType: NULL_FIELD_REF,
          resourceId: NULL_FIELD_REF,
          teamId: NULL_FIELD_REF,
          pending: NULL_FIELD_REF,
          pendingEmail: NULL_FIELD_REF,
          userId: NULL_FIELD_REF,
          canEdit: [{
            userId: createSessionRef('userId')
          }, NULL_FIELD_REF]
        },
        activeSeatTypeUpgrade: {
          billableProduct: {
            key: NULL_FIELD_REF,
            licenseTypes: NULL_FIELD_REF
          },
          upgradeMethod: NULL_FIELD_REF,
          reason: NULL_FIELD_REF,
          actor: {
            name: NULL_FIELD_REF
          },
          createdAt: NULL_FIELD_REF
        },
        lastActive: {
          actionAt: NULL_FIELD_REF
        },
        activeDesignUserUpgrade: {
          reason: NULL_FIELD_REF,
          actorId: NULL_FIELD_REF,
          actor: {
            name: NULL_FIELD_REF
          },
          createdAt: NULL_FIELD_REF,
          resourceType: NULL_FIELD_REF,
          resourceId: NULL_FIELD_REF,
          teamId: NULL_FIELD_REF
        },
        activeWhiteboardUserUpgrade: {
          reason: NULL_FIELD_REF,
          actorId: NULL_FIELD_REF,
          actor: {
            name: NULL_FIELD_REF
          },
          createdAt: NULL_FIELD_REF,
          resourceType: NULL_FIELD_REF,
          resourceId: NULL_FIELD_REF,
          teamId: NULL_FIELD_REF
        },
        currentSeat: {
          billingInterval: NULL_FIELD_REF
        }
      }
    }]
  }
};
let Cx = {
  args: [{
    name: 'teamId',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    team: [{
      id: createViewRef('teamId'),
      userId: createSessionRef('userId')
    }, {
      org: createAliasedFieldRef('orgForGuests', {
        id: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        domainCapture: NULL_FIELD_REF,
        inviteWhitelist: {
          guestInviteSetting: NULL_FIELD_REF
        },
        orgDomains: {
          id: NULL_FIELD_REF,
          domain: NULL_FIELD_REF,
          orgId: NULL_FIELD_REF,
          createdAt: NULL_FIELD_REF,
          googleSsoOnlyAt: NULL_FIELD_REF,
          samlSsoOnlyAt: NULL_FIELD_REF
        },
        figjamDisabledAt: NULL_FIELD_REF,
        imgUrl: createAliasedFieldRef('imgUrlTransformed', NULL_FIELD_REF),
        workspaces: {
          id: NULL_FIELD_REF
        }
      }),
      workspace: {
        id: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        imgUrl: createAliasedFieldRef('imgUrlTransformed', NULL_FIELD_REF),
        canRead: [{
          userId: createSessionRef('userId')
        }, NULL_FIELD_REF]
      },
      canEdit: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF],
      canAdmin: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF],
      canRead: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF],
      canDelete: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF],
      currentPlanUser: [{
        userId: createSessionRef('userId')
      }, {
        key: NULL_FIELD_REF,
        permission: NULL_FIELD_REF
      }],
      sharingAudienceControl: createAliasedFieldRef('sharingAudienceControlComputed', NULL_FIELD_REF),
      orgBrowsable: NULL_FIELD_REF,
      hidden: NULL_FIELD_REF,
      pendingTeamRoleRequests: [{
        userId: createSessionRef('userId')
      }, {
        id: NULL_FIELD_REF,
        status: NULL_FIELD_REF,
        teamId: NULL_FIELD_REF,
        requesterUserId: NULL_FIELD_REF,
        level: NULL_FIELD_REF,
        user: {
          id: NULL_FIELD_REF,
          handle: NULL_FIELD_REF,
          name: NULL_FIELD_REF,
          email: NULL_FIELD_REF,
          imgUrl: NULL_FIELD_REF
        }
      }],
      isOwner: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF],
      roleOnObjectForUser: [{
        userId: createSessionRef('userId')
      }, {
        level: NULL_FIELD_REF
      }],
      plan: [{
        userId: createSessionRef('userId')
      }, {
        tier: NULL_FIELD_REF
      }]
    }]
  }
};
let CS = {
  args: [{
    name: 'projectId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    project: [{
      id: createViewRef('projectId'),
      userId: createSessionRef('userId')
    }, {
      team: {
        id: NULL_FIELD_REF,
        stripeCustomerId: makeFieldRefOptional(),
        restrictionsList: NULL_FIELD_REF,
        studentTeamAt: NULL_FIELD_REF,
        gracePeriodEnd: NULL_FIELD_REF,
        subscription: NULL_FIELD_REF,
        projectsCount: makeFieldRefOptional(),
        teamFileCounts: {
          designFileCount: NULL_FIELD_REF,
          whiteboardFileCount: NULL_FIELD_REF,
          slideFileCount: NULL_FIELD_REF,
          sitesFileCount: NULL_FIELD_REF,
          totalFileCount: makeFieldRefOptional()
        },
        allProjects: [{
          userId: createSessionRef('userId')
        }, {
          id: NULL_FIELD_REF,
          isViewOnly: NULL_FIELD_REF,
          isInviteOnly: NULL_FIELD_REF
        }]
      }
    }]
  }
};
let Cw = {
  args: [{
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    team: [{
      id: createViewRef('teamId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      stripeCustomerId: makeFieldRefOptional(),
      restrictionsList: NULL_FIELD_REF,
      studentTeamAt: NULL_FIELD_REF,
      gracePeriodEnd: NULL_FIELD_REF,
      subscription: NULL_FIELD_REF,
      teamFileCounts: {
        designFileCount: NULL_FIELD_REF,
        whiteboardFileCount: NULL_FIELD_REF,
        slideFileCount: NULL_FIELD_REF,
        sitesFileCount: NULL_FIELD_REF,
        totalFileCount: makeFieldRefOptional()
      },
      projects: mergeFieldRefs({
        id: NULL_FIELD_REF
      }, yA.fields),
      allProjects: [{
        userId: createSessionRef('userId')
      }, {
        id: NULL_FIELD_REF,
        isViewOnly: NULL_FIELD_REF,
        isInviteOnly: NULL_FIELD_REF,
        trashedAt: NULL_FIELD_REF
      }]
    }]
  }
};
let CC = {
  args: [{
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    teamRoleRequest: makeFieldRefOptional([{
      teamId: createViewRef('teamId'),
      requesterUserId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      status: NULL_FIELD_REF
    }])
  }
};
let CT = {
  args: [{
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    team: [{
      id: createViewRef('teamId'),
      userId: createSessionRef('userId')
    }, {
      roles: {
        id: NULL_FIELD_REF,
        createdAt: NULL_FIELD_REF,
        updatedAt: NULL_FIELD_REF,
        level: NULL_FIELD_REF,
        resourceType: NULL_FIELD_REF,
        resourceId: NULL_FIELD_REF,
        pending: NULL_FIELD_REF,
        pendingEmail: NULL_FIELD_REF,
        userId: NULL_FIELD_REF,
        user: {
          id: NULL_FIELD_REF,
          name: NULL_FIELD_REF,
          handle: NULL_FIELD_REF,
          email: NULL_FIELD_REF,
          imgUrl: NULL_FIELD_REF
        }
      }
    }]
  }
};
let Ck = {
  args: [{
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    team: [{
      id: createViewRef('teamId'),
      userId: createSessionRef('userId')
    }, {
      canAdmin: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF],
      canEdit: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF],
      orgId: NULL_FIELD_REF,
      description: NULL_FIELD_REF,
      communityProfile: {
        id: NULL_FIELD_REF,
        profileHandle: NULL_FIELD_REF
      },
      workspace: {
        id: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        imgUrl: createAliasedFieldRef('imgUrlTransformed', NULL_FIELD_REF)
      },
      hasActiveProjectConnection: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF],
      currentPlanUser: [{
        userId: createSessionRef('userId')
      }, {
        permission: NULL_FIELD_REF,
        key: {
          parentId: NULL_FIELD_REF,
          type: NULL_FIELD_REF
        }
      }],
      plan: [{
        userId: createSessionRef('userId')
      }, {
        tier: NULL_FIELD_REF
      }]
    }]
  }
};
let CR = {
  args: [{
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    team: [{
      id: createViewRef('teamId'),
      userId: createSessionRef('userId')
    }, {
      vatGstId: NULL_FIELD_REF,
      taxIdVerificationStatus: NULL_FIELD_REF,
      taxInfo: makeFieldRefOptional([{
        userId: createSessionRef('userId')
      }, {
        vatGstId: NULL_FIELD_REF,
        regionalVatGstId: NULL_FIELD_REF,
        canUpdateRegionalVatGst: NULL_FIELD_REF,
        country: NULL_FIELD_REF,
        state: NULL_FIELD_REF
      }])
    }]
  }
};
let CN = {
  args: [{
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.Wayfinding
  },
  fields: {
    team: [{
      id: createViewRef('teamId'),
      userId: createSessionRef('userId')
    }, yF.fields]
  }
};
let CP = {
  args: [{
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.Monetization
  },
  fields: {
    team: [{
      id: createViewRef('teamId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      canAdmin: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF]
    }]
  }
};
let CO = {
  args: [{
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    team: [{
      id: createViewRef('teamId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      gracePeriodEnd: NULL_FIELD_REF,
      gracePeriodType: NULL_FIELD_REF,
      subscription: NULL_FIELD_REF,
      canEdit: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF],
      canAdmin: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF]
    }]
  }
};
let CD = {
  args: [{
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.Workflow
  },
  fields: {
    team: [{
      id: createViewRef('teamId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      currentPlanUser: [{
        userId: createSessionRef('userId')
      }, {
        designPaidStatus: NULL_FIELD_REF,
        whiteboardPaidStatus: NULL_FIELD_REF,
        designAccountTypeRequest: makeFieldRefOptional(Ax.fields),
        whiteboardAccountTypeRequest: makeFieldRefOptional(Ax.fields)
      }],
      currentTeamUser: [{
        userId: createSessionRef('userId')
      }, {
        designPaidStatus: NULL_FIELD_REF,
        whiteboardPaidStatus: NULL_FIELD_REF,
        designAccountTypeRequest: Ax.fields,
        whiteboardAccountTypeRequest: Ax.fields
      }]
    }]
  }
};
let CL = {
  args: [{
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.WebPlatform
  },
  fields: {
    team: [{
      id: createViewRef('teamId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      currentOrgUser: [{
        userId: createSessionRef('userId')
      }, {
        id: NULL_FIELD_REF,
        activeSeatTypeUpgrade: makeFieldRefOptional({
          billableProduct: {
            licenseTypes: NULL_FIELD_REF
          }
        }),
        licenseTypes: makeFieldRefOptional(NULL_FIELD_REF)
      }],
      currentPlanUser: [{
        userId: createSessionRef('userId')
      }, {
        id: NULL_FIELD_REF,
        activeSeatTypeUpgrade: makeFieldRefOptional({
          billableProduct: {
            licenseTypes: NULL_FIELD_REF
          }
        }),
        seatTypeLicenseTypes: makeFieldRefOptional(NULL_FIELD_REF),
        provisionalLicenseTypes: makeFieldRefOptional(NULL_FIELD_REF)
      }],
      currentTeamUser: [{
        userId: createSessionRef('userId')
      }, {
        id: NULL_FIELD_REF,
        activeSeatTypeUpgrade: makeFieldRefOptional({
          billableProduct: {
            licenseTypes: NULL_FIELD_REF
          }
        })
      }]
    }]
  }
};
let CF = {
  args: [],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    testPlanFromRoot: makeFieldRefOptional([{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      name: NULL_FIELD_REF
    }]),
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      testPlanUser: {
        id: makeFieldRefOptional(),
        planType: NULL_FIELD_REF,
        plan: makeFieldRefOptional({
          id: NULL_FIELD_REF
        }),
        currentUser: {
          name: NULL_FIELD_REF
        }
      },
      testPlan: makeFieldRefOptional({
        id: NULL_FIELD_REF
      })
    }]
  }
};
let CM = {
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      testPlanUser: {
        id: makeFieldRefOptional(),
        planType: NULL_FIELD_REF,
        currentUser: {
          name: NULL_FIELD_REF
        },
        userById: [{
          userId: createViewRef('userId')
        }, {
          name: NULL_FIELD_REF
        }]
      }
    }]
  }
};
let Cj = {
  args: [],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      testPlanUser: {
        id: makeFieldRefOptional(),
        planType: NULL_FIELD_REF,
        currentUser: {
          name: NULL_FIELD_REF
        },
        userById: [{
          userId: createSessionRef('userId')
        }, {
          name: NULL_FIELD_REF
        }]
      }
    }]
  }
};
let CU = {
  args: [],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    testPlanFromRoot: [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      name: NULL_FIELD_REF
    }]
  }
};
let CB = {
  args: [],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    testPlanFromRoot: [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF
    }],
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      testPlan: {
        id: NULL_FIELD_REF,
        name: NULL_FIELD_REF
      }
    }]
  }
};
let CV = {
  args: [],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    testPlanFromRoot: [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      nameAlias: createAliasedFieldRef('name', NULL_FIELD_REF)
    }],
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      testPlanUser: {
        id: NULL_FIELD_REF,
        currentUserAlias: createAliasedFieldRef('currentUser', {
          name: NULL_FIELD_REF
        })
      }
    }]
  }
};
let CG = {
  args: [],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      testPlanUser: {
        currentUser: {
          name: NULL_FIELD_REF
        }
      }
    }]
  }
};
let Cz = {
  args: [],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      testPlanUser: {
        planType: NULL_FIELD_REF,
        currentUser: {
          name: NULL_FIELD_REF
        }
      }
    }]
  }
};
let CH = {
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      name: NULL_FIELD_REF
    }]
  }
};
let CW = {
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    currentUserWithAlias: createAliasedFieldRef('currentUser', [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      nameAlias: createAliasedFieldRef('name', NULL_FIELD_REF)
    }])
  }
};
let CK = {
  args: [{
    name: 'workspaceId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    workspace: [{
      id: createViewRef('workspaceId'),
      userId: createSessionRef('userId')
    }, {
      name: NULL_FIELD_REF,
      approvedLibraries: {
        fileKey: NULL_FIELD_REF
      },
      org: {
        id: NULL_FIELD_REF,
        approvedLibraries: {
          fileKey: NULL_FIELD_REF
        }
      }
    }]
  }
};
let CY = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    org: [{
      id: createViewRef('orgId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      bigmaEnabledAt: NULL_FIELD_REF,
      name: NULL_FIELD_REF
    }]
  }
};
let Cq = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    org: [{
      id: createViewRef('orgId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      canRead: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF],
      canAccessDraftsFolder: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF]
    }]
  }
};
let C$ = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    org: makeFieldRefOptional([{
      id: createViewRef('orgId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      name: makeFieldRefOptional(NULL_FIELD_REF)
    }])
  }
};
let CZ = {
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    recentPrototypes: [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      userId: NULL_FIELD_REF,
      prototypeId: NULL_FIELD_REF
    }]
  }
};
let CX = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    fileCmsCollections: [{
      fileKey: createViewRef('fileKey')
    }, {
      id: NULL_FIELD_REF,
      createdAt: NULL_FIELD_REF
    }]
  }
};
let CQ = {
  props: {
    priority: PriorityLevels.P0,
    cuf: FileOperationTypes.CreateFile
  },
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  fields: {
    file: createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('fileKey')
    }, {
      id: NULL_FIELD_REF
    }])
  }
};
let CJ = {
  props: {
    priority: PriorityLevels.P1
  },
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  fields: {
    file: createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('fileKey')
    }, {
      id: NULL_FIELD_REF
    }])
  }
};
let C0 = {
  props: {
    priority: PriorityLevels.P2
  },
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  fields: {
    file: createAliasedFieldRef('filePrototypeInfo', [{
      key: createViewRef('fileKey')
    }, {
      id: NULL_FIELD_REF
    }])
  }
};
let C1 = {
  args: [{
    name: 'targetOrgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'targetUserId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    pluginPreferences: [{
      currentUserId: createSessionRef('userId'),
      targetOrgId: createViewRef('targetOrgId'),
      targetUserId: createViewRef('targetUserId')
    }, {
      autoRunEnabled: NULL_FIELD_REF,
      codegenEnabled: NULL_FIELD_REF,
      pinnedPluginsEnabled: NULL_FIELD_REF
    }]
  }
};
let C2 = {
  args: [{
    name: 'planType',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'planId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'cursor',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'creatorFilter',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'fileTypeFilter',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'firstPageSize',
    type: {
      kind: 'int'
    }
  }, {
    name: 'sortType',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'sortDirection',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'queryParams',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    trashedResources: [{
      userId: createSessionRef('userId'),
      planType: createViewRef('planType'),
      planId: createViewRef('planId'),
      cursor: createViewRef('cursor'),
      creatorFilter: createViewRef('creatorFilter'),
      fileTypeFilter: createViewRef('fileTypeFilter'),
      firstPageSize: createViewRef('firstPageSize'),
      sortType: createViewRef('sortType'),
      sortDirection: createViewRef('sortDirection'),
      queryParams: createViewRef('queryParams')
    }, {
      file: AK.fields,
      repo: mergeFieldRefs(Aq.fields, {
        sourceFile: AK.fields
      })
    }]
  }
};
let C5 = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'domainId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'searchQuery',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'firstPageSize',
    type: {
      kind: 'int'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    unclaimedDomainUsers: makeFieldRefOptional([{
      orgId: createViewRef('orgId'),
      domainId: createViewRef('domainId'),
      searchQuery: createViewRef('searchQuery'),
      firstPageSize: createViewRef('firstPageSize'),
      userId: createSessionRef('userId')
    }, {
      userId: NULL_FIELD_REF,
      user: {
        id: NULL_FIELD_REF,
        handle: NULL_FIELD_REF,
        email: NULL_FIELD_REF,
        imgUrl: NULL_FIELD_REF
      },
      status: NULL_FIELD_REF
    }])
  }
};
let C4 = {
  args: [{
    name: 'projectId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'permissionArguments',
    type: {
      kind: 'map',
      valueType: {
        kind: 'string'
      }
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    project: [{
      id: createViewRef('projectId'),
      userId: createSessionRef('userId')
    }, {
      resolvedHostOrConnectedPlanUser: [{
        userId: createSessionRef('userId'),
        permissionArguments: createViewRef('permissionArguments')
      }, ym.fields],
      resolvedHostOrConnectedPlanPermissions: [{
        userId: createSessionRef('userId'),
        permissionArguments: createViewRef('permissionArguments')
      }, yh.fields]
    }]
  }
};
let C3 = {
  args: [{
    name: 'projectId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'planParentId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'planType',
    type: {
      kind: 'enum',
      name: 'PlanType'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.Billing
  },
  fields: {
    planUser: [{
      planType: createViewRef('planType'),
      parentId: createViewRef('planParentId'),
      userId: createSessionRef('userId')
    }, ym.fields],
    planPermissions: [{
      planType: createViewRef('planType'),
      planParentId: createViewRef('planParentId'),
      userId: createSessionRef('userId')
    }, yh.fields],
    project: [{
      id: createViewRef('projectId'),
      userId: createSessionRef('userId')
    }, {
      resolvedHostOrConnectedPlanUserDesign: makeFieldRefOptional([{
        userId: createSessionRef('userId')
      }, ym.fields]),
      resolvedHostOrConnectedPlanDesignPermissions: makeFieldRefOptional([{
        userId: createSessionRef('userId')
      }, yh.fields]),
      resolvedHostOrConnectedPlanUserFigjam: makeFieldRefOptional([{
        userId: createSessionRef('userId')
      }, ym.fields]),
      resolvedHostOrConnectedPlanFigjamPermissions: makeFieldRefOptional([{
        userId: createSessionRef('userId')
      }, yh.fields]),
      resolvedHostOrConnectedPlanUserSlides: makeFieldRefOptional([{
        userId: createSessionRef('userId')
      }, ym.fields]),
      resolvedHostOrConnectedPlanSlidesPermissions: makeFieldRefOptional([{
        userId: createSessionRef('userId')
      }, yh.fields]),
      resolvedHostOrConnectedPlanUserDevMode: makeFieldRefOptional([{
        userId: createSessionRef('userId')
      }, ym.fields]),
      resolvedHostOrConnectedPlanDevModePermissions: makeFieldRefOptional([{
        userId: createSessionRef('userId')
      }, yh.fields]),
      resolvedHostOrConnectedPlanUserSites: makeFieldRefOptional([{
        userId: createSessionRef('userId')
      }, ym.fields]),
      resolvedHostOrConnectedPlanSitesPermissions: makeFieldRefOptional([{
        userId: createSessionRef('userId')
      }, yh.fields]),
      resolvedHostOrConnectedPlanUserFigmake: makeFieldRefOptional([{
        userId: createSessionRef('userId')
      }, ym.fields]),
      resolvedHostOrConnectedPlanFigmakePermissions: makeFieldRefOptional([{
        userId: createSessionRef('userId')
      }, yh.fields])
    }],
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, {
      resolvedHostOrConnectedPlanUser: [{
        userId: createSessionRef('userId')
      }, ym.fields],
      resolvedHostOrConnectedPlanPermissions: [{
        userId: createSessionRef('userId')
      }, yh.fields],
      resolvedHostOrConnectedPlanUserDevMode: [{
        userId: createSessionRef('userId')
      }, ym.fields],
      resolvedHostOrConnectedPlanDevModePermissions: [{
        userId: createSessionRef('userId')
      }, yh.fields]
    }])
  }
};
let C6 = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'teamId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      teamUser: [{
        teamId: createViewRef('teamId')
      }, {
        designPaidStatus: NULL_FIELD_REF,
        whiteboardPaidStatus: NULL_FIELD_REF
      }],
      baseOrgUser: [{
        orgId: createViewRef('orgId')
      }, {
        id: NULL_FIELD_REF,
        permission: NULL_FIELD_REF,
        licenseGroupMember: {
          licenseGroupId: NULL_FIELD_REF
        },
        user: {
          id: NULL_FIELD_REF
        },
        designPaidStatus: NULL_FIELD_REF,
        devModePaidStatus: NULL_FIELD_REF,
        whiteboardPaidStatus: NULL_FIELD_REF
      }]
    }]
  }
};
let C7 = {
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Growth
  },
  fields: {
    userPublic: [{
      userId: createViewRef('userId')
    }, {
      id: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      handle: NULL_FIELD_REF,
      userPublicImgUrl: NULL_FIELD_REF
    }]
  }
};
let C8 = {
  args: [],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    userColorProfilePreference: [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      colorProfilePreference: NULL_FIELD_REF
    }]
  }
};
let C9 = {
  args: [{
    name: 'name',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Growth
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      userFlagByName: [{
        name: createViewRef('name')
      }, {
        id: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        createdAt: NULL_FIELD_REF,
        updatedAt: NULL_FIELD_REF,
        count: NULL_FIELD_REF
      }]
    }]
  }
};
let Te = {
  value: NULL_FIELD_REF,
  updatedAt: NULL_FIELD_REF
};
let Tt = {
  args: [],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Growth
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      email: NULL_FIELD_REF,
      emailValidatedAt: NULL_FIELD_REF,
      imgUrl: NULL_FIELD_REF,
      createdAt: NULL_FIELD_REF,
      draftsFolderId: NULL_FIELD_REF,
      studentValidatedAt: NULL_FIELD_REF,
      userFlags: {
        id: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        createdAt: NULL_FIELD_REF,
        updatedAt: NULL_FIELD_REF
      },
      externalRestrictedOrgId: makeFieldRefOptional(NULL_FIELD_REF),
      teamRoles: {
        id: NULL_FIELD_REF,
        team: {
          id: NULL_FIELD_REF,
          trialPeriodEnd: NULL_FIELD_REF,
          gracePeriodEnd: NULL_FIELD_REF,
          gracePeriodType: NULL_FIELD_REF,
          canEdit: [{
            userId: createSessionRef('userId')
          }, NULL_FIELD_REF],
          canAdmin: [{
            userId: createSessionRef('userId')
          }, NULL_FIELD_REF],
          subscription: NULL_FIELD_REF,
          studentTeamAt: NULL_FIELD_REF,
          orgId: NULL_FIELD_REF,
          restrictionsList: NULL_FIELD_REF
        }
      },
      profile: {
        jobTitle: NULL_FIELD_REF,
        usagePurpose: NULL_FIELD_REF
      },
      onboardingSignals: {
        signals: {
          workLocationV1: Te,
          expandedUsagePurposeV1: Te,
          howCollabV1: Te,
          howCollabV2: Te,
          howWillYouUseFigmaV1: Te,
          expandedUsagePurposeV2: Te,
          haveUsedFigmaProductsBeforeV1: Te,
          whatBringsYouToFigmaTodayV1: makeFieldRefOptional(Te)
        }
      },
      communityProfile: {
        followingCount: NULL_FIELD_REF
      },
      hasSavedPlugins: NULL_FIELD_REF,
      hasCreatedPlugins: NULL_FIELD_REF,
      userMonetizationMetadata: {
        cmtySellerAcceptedAt: NULL_FIELD_REF
      },
      orgUsers: {
        id: NULL_FIELD_REF,
        orgId: NULL_FIELD_REF,
        draftsFolderId: NULL_FIELD_REF,
        permission: NULL_FIELD_REF,
        userId: NULL_FIELD_REF,
        licenseGroupMember: {
          licenseGroupId: NULL_FIELD_REF
        },
        designPaidStatus: NULL_FIELD_REF,
        devModePaidStatus: NULL_FIELD_REF,
        org: [{
          userId: createSessionRef('userId')
        }, {
          id: NULL_FIELD_REF,
          bigmaEnabledAt: NULL_FIELD_REF,
          templatePickerDisabled: NULL_FIELD_REF,
          figjamDisabledAt: NULL_FIELD_REF,
          voiceDisabledAt: NULL_FIELD_REF,
          canRead: [{
            userId: createSessionRef('userId')
          }, NULL_FIELD_REF],
          canAdmin: [{
            userId: createSessionRef('userId')
          }, NULL_FIELD_REF],
          widgetsWhitelistEnforced: NULL_FIELD_REF,
          customTemplatesAllowed: NULL_FIELD_REF,
          k12GoogleOrg: NULL_FIELD_REF
        }]
      },
      accountManagerMessages: {
        id: NULL_FIELD_REF,
        amName: NULL_FIELD_REF,
        amEmail: NULL_FIELD_REF,
        amAvatarUrl: NULL_FIELD_REF,
        ctaUrl: NULL_FIELD_REF,
        sentAt: NULL_FIELD_REF,
        reminderSentAt: NULL_FIELD_REF
      }
    }]
  }
};
let Ti = {
  args: [],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Wayfinding
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      email: NULL_FIELD_REF,
      handle: NULL_FIELD_REF,
      imgUrl: NULL_FIELD_REF,
      createdAt: NULL_FIELD_REF,
      emailValidatedAt: NULL_FIELD_REF,
      utcOffset: NULL_FIELD_REF,
      profile: {
        jobTitle: NULL_FIELD_REF,
        usagePurpose: NULL_FIELD_REF,
        images: makeFieldRefOptional()
      },
      phoneNumber: NULL_FIELD_REF,
      studentValidatedAt: NULL_FIELD_REF,
      description: NULL_FIELD_REF,
      pluginPublishingBlockedAt: NULL_FIELD_REF,
      communityCommentingBlockedAt: NULL_FIELD_REF,
      communityBlockedAt: NULL_FIELD_REF,
      communityBetaAt: NULL_FIELD_REF,
      externalRestrictedOrgId: NULL_FIELD_REF,
      twoFactorEnabled: NULL_FIELD_REF,
      twoFactorAppEnabled: NULL_FIELD_REF,
      communityProfile: {
        id: NULL_FIELD_REF,
        publicAt: NULL_FIELD_REF,
        profileHandle: NULL_FIELD_REF
      },
      googleSsoOnly: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF],
      samlSsoOnly: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF],
      sharingRestricted: NULL_FIELD_REF,
      userMonetizationMetadata: {
        cmtyBuyerTosAcceptedAt: NULL_FIELD_REF,
        cmtySellerTosAcceptedAt: NULL_FIELD_REF,
        stripeConnectedAccountId: NULL_FIELD_REF,
        stripeAccountStatus: NULL_FIELD_REF,
        communityPurchasingBlockedAt: NULL_FIELD_REF
      },
      canSellOnCommunity: NULL_FIELD_REF,
      hasPassedVisualCompliance: NULL_FIELD_REF,
      experimentAssignments: {
        experimentId: NULL_FIELD_REF,
        treatmentId: NULL_FIELD_REF
      },
      developerTokens: {
        id: NULL_FIELD_REF,
        description: NULL_FIELD_REF,
        lastUsed: NULL_FIELD_REF,
        scope: NULL_FIELD_REF,
        expiresAt: NULL_FIELD_REF
      }
    }]
  }
};
let Tn = {
  args: [],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.Wayfinding
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      favoritedFiles: createAliasedFieldRef('globalFavoritedFiles', {
        id: NULL_FIELD_REF,
        orgId: NULL_FIELD_REF,
        teamId: NULL_FIELD_REF,
        createdAt: NULL_FIELD_REF,
        updatedAt: NULL_FIELD_REF,
        resourceId: NULL_FIELD_REF,
        sidebarSectionId: NULL_FIELD_REF,
        file: createAliasedFieldRef('readableFile', [{
          userId: createSessionRef('userId')
        }, {
          id: NULL_FIELD_REF,
          name: NULL_FIELD_REF,
          key: NULL_FIELD_REF,
          editorType: NULL_FIELD_REF,
          createdAt: NULL_FIELD_REF,
          deletedAt: NULL_FIELD_REF,
          trashedAt: NULL_FIELD_REF,
          parentOrgId: NULL_FIELD_REF
        }])
      })
    }]
  }
};
let Tr = {
  args: [],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.FigJam
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      jamboardOfferEligibility: {
        id: NULL_FIELD_REF,
        isEligible: NULL_FIELD_REF,
        ineligibilityReason: NULL_FIELD_REF,
        promoCodeId: NULL_FIELD_REF,
        promoExpirationDate: NULL_FIELD_REF
      }
    }]
  }
};
let Ta = {
  type: _$$Y.PlanPermissions,
  fields: {
    id: NULL_FIELD_REF,
    key: {
      type: NULL_FIELD_REF,
      parentId: NULL_FIELD_REF
    },
    activeTrialLicenseTypes: NULL_FIELD_REF
  }
};
let Ts = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, {
      connectedPlanUser: [{
        userId: createViewRef('userId')
      }, ym.fields],
      currentPlanUser: [{
        userId: createViewRef('userId')
      }, ym.fields],
      plan: [{
        userId: createViewRef('userId')
      }, {
        ...Ta.fields,
        featureFlagFcPlanEnabled: {
          value: NULL_FIELD_REF
        }
      }],
      connectedPlan: [{
        userId: createViewRef('userId')
      }, Ta.fields]
    }])
  }
};
let To = {
  args: [{
    name: 'userId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    userMonetizationMetadata: [{
      sessionUserId: createSessionRef('userId'),
      userId: createViewRef('userId')
    }, {
      id: NULL_FIELD_REF,
      stripeCmtyCreatorStatsMeta: NULL_FIELD_REF,
      cmtySellerAcceptedAt: NULL_FIELD_REF
    }]
  }
};
let Tl = {
  args: [],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.Wayfinding
  },
  fields: {
    userNotificationBell: [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      bell: NULL_FIELD_REF,
      notificationSpaceId: NULL_FIELD_REF,
      userId: NULL_FIELD_REF,
      timestamp: NULL_FIELD_REF
    }]
  }
};
let Td = {
  args: [],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.Wayfinding
  },
  fields: {
    persistentUserNotificationBells: makeFieldRefOptional([{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      bell: NULL_FIELD_REF,
      fileKeyWithoutBadge: NULL_FIELD_REF,
      notificationSpaceId: NULL_FIELD_REF,
      userId: NULL_FIELD_REF
    }])
  }
};
let Tc = {
  args: [],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.Wayfinding
  },
  fields: {
    allPlanNotificationBellState: makeFieldRefOptional([{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      bell: NULL_FIELD_REF,
      fileKeyWithoutBadge: NULL_FIELD_REF,
      notificationSpaceId: NULL_FIELD_REF,
      userId: NULL_FIELD_REF
    }])
  }
};
let Tu = {
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Desktop
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      userPreferences: makeFieldRefOptional({
        preferences: {
          auto_open_in_desktop: NULL_FIELD_REF
        }
      })
    }]
  }
};
let Tp = {
  args: [{
    name: 'action',
    type: {
      kind: 'string'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'firstPageSize',
    type: {
      kind: 'int'
    }
  }, {
    name: 'sortOrder',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Wayfinding
  },
  fields: {
    userPublic: [{
      userId: createViewRef('userId')
    }, {
      id: NULL_FIELD_REF,
      paginatedRecentFiles: makeFieldRefOptional([{
        action: createViewRef('action'),
        firstPageSize: createViewRef('firstPageSize'),
        sortOrder: createViewRef('sortOrder')
      }, {
        id: NULL_FIELD_REF,
        actionAt: NULL_FIELD_REF,
        file: {
          key: NULL_FIELD_REF,
          name: NULL_FIELD_REF,
          parentOrgId: NULL_FIELD_REF,
          editorType: NULL_FIELD_REF,
          folderId: NULL_FIELD_REF,
          trashedAt: NULL_FIELD_REF,
          project: [{
            userId: createSessionRef('userId')
          }, {
            name: NULL_FIELD_REF
          }],
          teamId: NULL_FIELD_REF,
          team: {
            name: NULL_FIELD_REF
          },
          signedThumbnailUrl: NULL_FIELD_REF,
          clientMeta: createAliasedFieldRef('checkpointClientMeta', NULL_FIELD_REF),
          thumbnailGuid: NULL_FIELD_REF,
          editUrl: NULL_FIELD_REF,
          hasFileLinkPassword: NULL_FIELD_REF,
          linkAccess: NULL_FIELD_REF,
          sourceFile: {
            name: NULL_FIELD_REF
          },
          isDraftFile: [{
            userId: createSessionRef('userId')
          }, NULL_FIELD_REF]
        }
      }])
    }]
  }
};
let Tm = {
  args: [],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      recentSharedWithYouFiles: {
        id: NULL_FIELD_REF,
        sharedAt: NULL_FIELD_REF,
        resourceId: NULL_FIELD_REF,
        resourceType: NULL_FIELD_REF,
        file: {
          id: NULL_FIELD_REF,
          name: NULL_FIELD_REF,
          key: NULL_FIELD_REF,
          editorType: NULL_FIELD_REF,
          createdAt: NULL_FIELD_REF,
          deletedAt: NULL_FIELD_REF,
          trashedAt: NULL_FIELD_REF,
          parentOrgId: NULL_FIELD_REF
        }
      }
    }]
  }
};
let Th = {
  args: [{
    name: 'planParentId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'planType',
    type: {
      kind: 'enum',
      name: 'PlanType'
    }
  }],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.Billing
  },
  fields: {
    planPermissions: [{
      planType: createViewRef('planType'),
      planParentId: createViewRef('planParentId'),
      userId: createSessionRef('userId')
    }, {
      name: NULL_FIELD_REF,
      key: {
        parentId: NULL_FIELD_REF,
        type: NULL_FIELD_REF
      },
      canUpgradeExpert: NULL_FIELD_REF,
      canUpgradeDeveloper: NULL_FIELD_REF,
      canUpgradeCollaborator: NULL_FIELD_REF
    }],
    planUser: [{
      planType: createViewRef('planType'),
      parentId: createViewRef('planParentId'),
      userId: createSessionRef('userId')
    }, {
      billableProductKeys: NULL_FIELD_REF,
      permission: NULL_FIELD_REF,
      latestProvisionalAccess: {
        billableProductKey: NULL_FIELD_REF
      },
      pendingAccountTypeRequest: {
        billableProductKey: NULL_FIELD_REF
      }
    }]
  }
};
let Tg = {
  args: [],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      userTeamFlags: {
        id: NULL_FIELD_REF,
        userId: NULL_FIELD_REF,
        teamId: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        createdAt: NULL_FIELD_REF,
        updatedAt: NULL_FIELD_REF
      }
    }]
  }
};
let Tf = {
  args: [{
    name: 'updatedAtTimestamp',
    type: {
      kind: 'datetime'
    }
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      teamRoleRequestUpdates: makeFieldRefOptional([{
        updatedAtTimestamp: createViewRef('updatedAtTimestamp')
      }, {
        id: NULL_FIELD_REF,
        requesterUserId: NULL_FIELD_REF,
        teamId: NULL_FIELD_REF,
        level: NULL_FIELD_REF,
        status: NULL_FIELD_REF,
        updatedAt: NULL_FIELD_REF
      }])
    }]
  }
};
let T_ = {
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      teamRoles: {
        id: NULL_FIELD_REF,
        team: {
          id: NULL_FIELD_REF,
          canRead: [{
            userId: createSessionRef('userId')
          }, NULL_FIELD_REF],
          canEdit: [{
            userId: createSessionRef('userId')
          }, NULL_FIELD_REF],
          canAdmin: [{
            userId: createSessionRef('userId')
          }, NULL_FIELD_REF],
          subscription: NULL_FIELD_REF,
          orgId: NULL_FIELD_REF
        }
      }
    }]
  }
};
let TA = {
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      teamRoles: {
        id: NULL_FIELD_REF,
        team: {
          id: NULL_FIELD_REF,
          canRead: [{
            userId: createSessionRef('userId')
          }, NULL_FIELD_REF],
          canEdit: [{
            userId: createSessionRef('userId')
          }, NULL_FIELD_REF],
          canAdmin: [{
            userId: createSessionRef('userId')
          }, NULL_FIELD_REF]
        }
      }
    }]
  }
};
let Ty = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.DesignSystem
  },
  fields: {
    variable: [{
      key: createViewRef('key'),
      userId: createSessionRef('userId')
    }, mergeFieldRefs(A4.fields, {
      file: {
        key: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        teamId: NULL_FIELD_REF,
        libraryKey: NULL_FIELD_REF
      },
      hubFile: makeFieldRefOptional({
        id: NULL_FIELD_REF,
        currentHubFileVersion: {
          name: NULL_FIELD_REF
        },
        libraryKey: NULL_FIELD_REF
      })
    })]
  }
};
let Tb = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.DesignSystem
  },
  fields: {
    variableCollection: [{
      key: createViewRef('key'),
      userId: createSessionRef('userId')
    }, bX]
  }
};
let Tv = {
  args: [{
    name: 'key',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.DesignSystem
  },
  fields: {
    variableCollection: [{
      key: createViewRef('key'),
      userId: createSessionRef('userId')
    }, mergeFieldRefs(A6.fields, {
      file: {
        key: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        teamId: NULL_FIELD_REF,
        libraryKey: NULL_FIELD_REF
      },
      hubFile: makeFieldRefOptional({
        id: NULL_FIELD_REF,
        currentHubFileVersion: {
          name: NULL_FIELD_REF
        },
        libraryKey: NULL_FIELD_REF
      })
    })]
  }
};
let TI = {
  args: [{
    name: 'variableCollectionKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.DesignSystem
  },
  fields: {
    variableCollection: [{
      key: createViewRef('variableCollectionKey'),
      userId: createSessionRef('userId')
    }, mergeFieldRefs(A7.fields, {
      file: {
        key: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        teamId: NULL_FIELD_REF,
        libraryKey: NULL_FIELD_REF
      },
      hubFile: makeFieldRefOptional({
        id: NULL_FIELD_REF,
        currentHubFileVersion: {
          name: NULL_FIELD_REF
        },
        libraryKey: NULL_FIELD_REF
      })
    })]
  }
};
let TE = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'teamId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      teamUser: [{
        teamId: createViewRef('teamId')
      }, {
        id: NULL_FIELD_REF,
        teamId: NULL_FIELD_REF,
        team: {
          id: NULL_FIELD_REF,
          name: NULL_FIELD_REF,
          imgUrl: createAliasedFieldRef('imgUrlTransformed', NULL_FIELD_REF)
        },
        userId: NULL_FIELD_REF,
        designPaidStatus: NULL_FIELD_REF,
        whiteboardPaidStatus: NULL_FIELD_REF,
        whiteboardAccountTypeRequest: {
          id: NULL_FIELD_REF,
          status: NULL_FIELD_REF,
          lastNudgedAt: NULL_FIELD_REF,
          createdAt: NULL_FIELD_REF
        },
        designAccountTypeRequest: {
          id: NULL_FIELD_REF,
          status: NULL_FIELD_REF,
          lastNudgedAt: NULL_FIELD_REF,
          createdAt: NULL_FIELD_REF
        }
      }],
      baseOrgUser: [{
        orgId: createViewRef('orgId')
      }, {
        id: NULL_FIELD_REF,
        orgId: NULL_FIELD_REF,
        org: {
          id: NULL_FIELD_REF,
          name: NULL_FIELD_REF,
          imgUrl: createAliasedFieldRef('imgUrlTransformed', NULL_FIELD_REF)
        },
        permission: NULL_FIELD_REF,
        licenseGroupMember: {
          licenseGroupId: NULL_FIELD_REF
        },
        userId: NULL_FIELD_REF,
        designPaidStatus: NULL_FIELD_REF,
        whiteboardPaidStatus: NULL_FIELD_REF,
        whiteboardAccountTypeRequest: {
          id: NULL_FIELD_REF,
          status: NULL_FIELD_REF,
          lastNudgedAt: NULL_FIELD_REF,
          createdAt: NULL_FIELD_REF
        },
        designAccountTypeRequest: {
          id: NULL_FIELD_REF,
          status: NULL_FIELD_REF,
          lastNudgedAt: NULL_FIELD_REF,
          createdAt: NULL_FIELD_REF
        },
        devModeAccountTypeRequest: {
          id: NULL_FIELD_REF,
          status: NULL_FIELD_REF,
          lastNudgedAt: NULL_FIELD_REF,
          createdAt: NULL_FIELD_REF
        }
      }]
    }],
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, {
      editorType: NULL_FIELD_REF,
      isDraftFile: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF]
    }]),
    viewerRestrictedDraftAccessLog: makeFieldRefOptional([{
      fileKey: createViewRef('fileKey')
    }, {
      fileKey: NULL_FIELD_REF,
      createdAt: NULL_FIELD_REF,
      dismissedAt: NULL_FIELD_REF,
      viewerUser: {
        name: NULL_FIELD_REF
      }
    }])
  }
};
let Tx = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    webFonts: makeFieldRefOptional([{
      fileKey: createViewRef('fileKey')
    }, {
      id: NULL_FIELD_REF,
      createdAt: NULL_FIELD_REF,
      updatedAt: NULL_FIELD_REF,
      deletedAt: NULL_FIELD_REF,
      postscriptName: NULL_FIELD_REF,
      family: NULL_FIELD_REF,
      style: NULL_FIELD_REF,
      variationInstances: {
        name: NULL_FIELD_REF,
        postscriptName: NULL_FIELD_REF
      }
    }])
  }
};
let TS = {
  args: [{
    name: 'workspaceId',
    type: {
      kind: 'bigint'
    },
    nullable: !1
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    workspace: makeFieldRefOptional([{
      id: createViewRef('workspaceId'),
      userId: createSessionRef('userId')
    }, {
      approvedLibraries: {
        fileKey: NULL_FIELD_REF
      },
      name: NULL_FIELD_REF
    }])
  }
};
let Tw = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.Growth
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      baseOrgUser: [{
        orgId: createViewRef('orgId')
      }, {
        workspaceUsers: {
          permission: NULL_FIELD_REF
        }
      }]
    }]
  }
};
let TC = {
  args: [{
    name: 'workspaceId',
    type: {
      kind: 'bigint'
    },
    nullable: !1
  }],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.Scale
  },
  fields: {
    workspace: [{
      id: createViewRef('workspaceId'),
      userId: createSessionRef('userId')
    }, {
      publicLinkControlsSetting: NULL_FIELD_REF,
      publicLinkControlsMaxExpiration: NULL_FIELD_REF,
      fileExportSetting: makeFieldRefOptional()
    }]
  }
};
let TT = {
  args: [{
    name: 'workspaceId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.Scale
  },
  fields: {
    workspace: [{
      id: createViewRef('workspaceId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      defaultTeams: {
        teamId: NULL_FIELD_REF,
        team: {
          workspace: {
            name: NULL_FIELD_REF
          }
        }
      }
    }]
  }
};
let Tk = {
  args: [{
    name: 'workspaceId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    workspace: [{
      id: createViewRef('workspaceId'),
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      name: NULL_FIELD_REF,
      imgUrl: createAliasedFieldRef('imgUrlTransformed', NULL_FIELD_REF)
    }]
  }
};
let TR = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      id: NULL_FIELD_REF,
      baseOrgUser: [{
        orgId: createViewRef('orgId')
      }, {
        pluginRequests: {
          id: NULL_FIELD_REF,
          createdAt: NULL_FIELD_REF,
          status: NULL_FIELD_REF,
          pluginId: NULL_FIELD_REF,
          workspaceId: NULL_FIELD_REF
        }
      }]
    }]
  }
};
let TN = {
  args: [{
    name: 'workspaceId',
    type: {
      kind: 'bigint'
    },
    nullable: !1
  }],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.Workflow
  },
  fields: {
    workspace: [{
      id: createViewRef('workspaceId'),
      userId: createSessionRef('userId')
    }, {
      orgAccess: NULL_FIELD_REF
    }]
  }
};
let TP = {
  args: [{
    name: 'workspaceId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    workspace: [{
      id: createViewRef('workspaceId'),
      userId: createSessionRef('userId')
    }, {
      members: mergeFieldRefs(yz.fields, {
        permission: NULL_FIELD_REF
      })
    }]
  }
};
let TO = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'workspaceId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, yj.fields],
    workspace: [{
      id: createViewRef('workspaceId'),
      userId: createSessionRef('userId')
    }, mergeFieldRefs(yY.fields, yW.fields, yV.fields, {
      id: NULL_FIELD_REF,
      canView: [{
        userId: createSessionRef('userId')
      }, NULL_FIELD_REF]
    })]
  }
};
let TD = {
  args: [{
    name: 'workspaceId',
    type: {
      kind: 'bigint'
    }
  }],
  props: {
    priority: PriorityLevels.P2,
    team: yQ.Wayfinding
  },
  fields: {
    workspace: [{
      id: createViewRef('workspaceId'),
      userId: createSessionRef('userId')
    }, {
      pinnedFiles: {
        file: {
          id: NULL_FIELD_REF
        }
      }
    }]
  }
};
let TL = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    org: [{
      id: createViewRef('orgId'),
      userId: createSessionRef('userId')
    }, {
      workspaces: {
        id: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        imgUrl: createAliasedFieldRef('imgUrlTransformed', NULL_FIELD_REF),
        canView: [{
          userId: createSessionRef('userId')
        }, NULL_FIELD_REF]
      }
    }]
  }
};
let TF = {
  args: [{
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P1,
    team: yQ.DesignSystem
  },
  fields: {
    file: createAliasedFieldRef('fileV2', [{
      key: createViewRef('fileKey')
    }, {
      computedWorkspacePublicInfo: {
        workspace: {
          librarySubscriptions: {
            id: NULL_FIELD_REF,
            isSubscribed: NULL_FIELD_REF,
            figJamSubscribed: NULL_FIELD_REF,
            slidesSubscribed: NULL_FIELD_REF,
            buzzSubscribed: makeFieldRefOptional(NULL_FIELD_REF),
            libraryKey: NULL_FIELD_REF,
            library: {
              fileKey: NULL_FIELD_REF
            },
            communityLibrary: {
              hubFileId: NULL_FIELD_REF
            }
          }
        }
      }
    }])
  }
};
let TM = {
  args: [{
    name: 'teamId',
    type: {
      kind: 'string'
    }
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    team: [{
      id: createViewRef('teamId'),
      userId: createSessionRef('userId')
    }, {
      workspace: {
        librarySubscriptions: {
          id: NULL_FIELD_REF,
          isSubscribed: NULL_FIELD_REF,
          figJamSubscribed: NULL_FIELD_REF,
          slidesSubscribed: NULL_FIELD_REF,
          buzzSubscribed: makeFieldRefOptional(NULL_FIELD_REF),
          libraryKey: NULL_FIELD_REF,
          library: {
            fileKey: NULL_FIELD_REF
          },
          communityLibrary: {
            hubFileId: NULL_FIELD_REF
          }
        }
      }
    }]
  }
};
let Tj = {
  args: [],
  props: {
    priority: PriorityLevels.P2
  },
  fields: {
    currentUser: [{
      userId: createSessionRef('userId')
    }, {
      recentFiles2: [{
        userId: createSessionRef('userId')
      }, {
        file: mergeFieldRefs(AK.fields, Aw.fields, Ak.fields, {
          project: [{
            userId: createSessionRef('userId')
          }, {
            name: NULL_FIELD_REF
          }],
          newUserPlaygroundLibrary: NULL_FIELD_REF
        })
      }]
    }]
  }
};
let TU = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    org: [{
      id: createViewRef('orgId'),
      userId: createSessionRef('userId')
    }, {
      workspaces: {
        id: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        canAdmin: [{
          userId: createSessionRef('userId')
        }, NULL_FIELD_REF]
      }
    }]
  }
};
let TB = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    org: [{
      id: createViewRef('orgId'),
      userId: createSessionRef('userId')
    }, {
      workspaces: {
        id: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        orgId: NULL_FIELD_REF,
        mirroringLicenseGroup: {
          id: NULL_FIELD_REF
        },
        imgUrl: createAliasedFieldRef('imgUrlTransformed', NULL_FIELD_REF),
        colorConfig: {
          colors: NULL_FIELD_REF
        },
        memberCount: [{
          userId: createSessionRef('userId')
        }, {
          data: NULL_FIELD_REF,
          id: NULL_FIELD_REF
        }],
        description: NULL_FIELD_REF,
        canAdmin: [{
          userId: createSessionRef('userId')
        }, NULL_FIELD_REF],
        canView: [{
          userId: createSessionRef('userId')
        }, NULL_FIELD_REF],
        admins: {
          id: NULL_FIELD_REF,
          baseOrgUser: {
            id: NULL_FIELD_REF,
            user: {
              id: NULL_FIELD_REF,
              handle: NULL_FIELD_REF,
              imgUrl: NULL_FIELD_REF,
              email: NULL_FIELD_REF
            }
          }
        },
        orgAccess: NULL_FIELD_REF
      }
    }],
    currentUser: [{
      userId: createSessionRef('userId')
    }, yj.fields]
  }
};
let TV = {
  args: [{
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  props: {
    priority: PriorityLevels.P1
  },
  fields: {
    org: [{
      id: createViewRef('orgId'),
      userId: createSessionRef('userId')
    }, {
      workspaces: {
        id: NULL_FIELD_REF,
        name: NULL_FIELD_REF,
        imgUrl: createAliasedFieldRef('imgUrlTransformed', NULL_FIELD_REF),
        orgAccess: NULL_FIELD_REF,
        admins: {
          id: NULL_FIELD_REF,
          baseOrgUser: {
            id: NULL_FIELD_REF,
            user: {
              id: NULL_FIELD_REF,
              handle: NULL_FIELD_REF,
              imgUrl: NULL_FIELD_REF
            }
          }
        }
      }
    }]
  }
};
let TG = {
  name: _$$Y.AdminRequestDashboardTotalRowCount,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    },
    typechecked: !1
  }, {
    name: 'rowCount',
    type: {
      kind: 'int'
    }
  }]
};
let Tz = {
  name: _$$Y.PersistentLastFrameSelection,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'string'
    }
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'frameId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'frameName',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'timestamp',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'selectionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'selectionOrdinal',
    type: {
      kind: 'int'
    },
    nullable: !0
  }, {
    name: 'publisherId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }]
};
let TH = {
  name: _$$Y.RecentNetworkControlRejection,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'string'
    }
  }, {
    name: 'reason',
    type: {
      kind: 'string'
    }
  }]
};
let TW = [{
  name: 'id',
  type: {
    kind: 'bigint'
  }
}, {
  name: 'roleId',
  type: {
    kind: 'bigint'
  }
}, {
  name: 'triggeredAt',
  type: {
    kind: 'datetime'
  }
}, {
  name: 'op',
  type: {
    kind: 'string'
  }
}, {
  name: 'userId',
  type: {
    kind: 'bigint'
  },
  nullable: !0
}, {
  name: 'resourceType',
  type: {
    kind: 'enum',
    name: 'ResourceType'
  },
  nullable: !0
}, {
  name: 'resourceId',
  type: {
    kind: 'string'
  },
  nullable: !0
}];
let TK = {
  name: _$$Y.TeamRoleLog,
  permissionRequired: !1,
  fields: [...TW]
};
let TY = {
  name: _$$Y.RoleLog,
  permissionRequired: !1,
  fields: [...TW]
};
let Tq = {
  name: _$$Y.DevModeSuggestedUpgradableUser,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'planId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'lastUsedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'orgUser',
    type: {
      kind: 'object',
      name: _$$Y.OrgUser
    },
    filter: {
      and: [['id', '=', createParentRef('id')], ['orgId', '=', createParentRef('planId')]]
    },
    nullable: !0,
    deprecated: {
      reason: 'Use privilegedOrgUser',
      date: '2024-01-29'
    }
  }, {
    name: 'privilegedOrgUser',
    type: {
      kind: 'object',
      name: _$$Y.PrivilegedOrgUser
    },
    filter: {
      and: [['id', '=', createParentRef('id')], ['orgId', '=', createParentRef('planId')]]
    },
    nullable: !0
  }, {
    name: 'teamUser',
    type: {
      kind: 'object',
      name: _$$Y.TeamUser
    },
    filter: {
      and: [['id', '=', createParentRef('id')], ['teamId', '=', createParentRef('planId')]]
    },
    nullable: !0
  }]
};
let T$ = {
  name: _$$Y.PreloadCodeConnect,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    },
    typechecked: !1
  }, {
    name: 'docsById',
    type: {
      kind: 'map',
      valueType: {
        kind: 'string'
      }
    },
    nullable: !0
  }, {
    name: 'nodesWithCodeConnect',
    type: {
      kind: 'list',
      ofType: {
        kind: 'string'
      }
    },
    nullable: !0
  }]
};
let TZ = {
  name: _$$Y.LibraryPresetSubscription,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'hubFileId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'communityLibrary',
    type: {
      kind: 'object',
      name: _$$Y.CommunityLibrary
    },
    filter: ['hubFileId', '=', createParentRef('hubFileId')],
    nullable: !0,
    shadowCheckCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'libraryOrgSubscriptionOverride',
    type: {
      kind: 'object',
      name: _$$Y.LibraryOrgSubscription
    },
    args: [{
      name: 'subscribingFileOrgId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    filter: {
      and: [['hubFileId', '=', createParentRef('hubFileId')], ['orgId', '=', createFieldRef('subscribingFileOrgId')]]
    },
    nullable: !0
  }, {
    name: 'libraryWorkspaceSubscriptionOverride',
    type: {
      kind: 'object',
      name: _$$Y.LibraryWorkspaceSubscription
    },
    args: [{
      name: 'subscribingFileWorkspaceId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    filter: {
      and: [['hubFileId', '=', createParentRef('hubFileId')], ['workspaceId', '=', createFieldRef('subscribingFileWorkspaceId')]]
    },
    nullable: !0
  }, {
    name: 'libraryTeamSubscriptionOverride',
    type: {
      kind: 'object',
      name: _$$Y.LibraryTeamSubscription
    },
    args: [{
      name: 'subscribingFileTeamId',
      type: {
        kind: 'bigint'
      }
    }],
    filter: {
      and: [['hubFileId', '=', createParentRef('hubFileId')], ['teamId', '=', createFieldRef('subscribingFileTeamId')]]
    },
    nullable: !0
  }, {
    name: 'libraryUserSubscriptionOverride',
    type: {
      kind: 'object',
      name: _$$Y.LibraryUserSubscription
    },
    args: [{
      name: 'subscribingUserId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    filter: {
      and: [['hubFileId', '=', createParentRef('hubFileId')], ['userId', '=', createFieldRef('subscribingUserId')]]
    },
    nullable: !0
  }, {
    name: 'libraryFileSubscriptionOverride',
    type: {
      kind: 'object',
      name: _$$Y.LibraryFileSubscription
    },
    args: [{
      name: 'subscribingFileKey',
      type: {
        kind: 'string'
      }
    }],
    filter: {
      and: [['hubFileId', '=', createParentRef('hubFileId')], ['fileKey', '=', createFieldRef('subscribingFileKey')]]
    },
    nullable: !0
  }]
};
let TX = {
  name: _$$Y.RecentFile2,
  permissionRequired: !1,
  naturalKey: new Set(['id', 'userId']),
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'action',
    type: {
      kind: 'string'
    }
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    },
    bannedFromViews: !0
  }, {
    name: 'actionAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: '_editorTypeRaw',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'file',
    type: {
      kind: 'object',
      name: _$$Y.File
    },
    filter: ['key', '=', createParentRef('fileKey')],
    nullable: !0,
    checkCanRead: {
      fieldName: 'canAccess',
      userId: createSessionRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId'),
      linkAccessOverrideKey: null
    }
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'sessionId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }, {
      name: 'anonymousUserId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      file: {
        canAccess: [{
          userId: createViewRef('userId'),
          sessionId: createViewRef('sessionId'),
          anonymousUserId: createViewRef('anonymousUserId'),
          linkAccessOverrideKey: null
        }, NULL_FIELD_REF]
      }
    }
  }]
};
let TQ = {
  name: _$$Y.DevModeActivityMeta,
  embedded: !0,
  permissionRequired: !1,
  fields: [{
    name: 'status',
    type: {
      kind: 'enum',
      name: 'NodeStatus'
    },
    nullable: !0
  }, {
    name: 'description',
    type: {
      kind: 'string'
    },
    nullable: !0
  }]
};
let TJ = {
  naturalKey: new Set(['fileKey', 'id']),
  name: _$$Y.DevModeActivity,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    },
    bannedFromViews: !0
  }, {
    name: 'nodeId',
    type: {
      kind: 'string'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'string'
    }
  }, {
    name: 'user',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    filter: ['id', '=', createParentRef('userId')]
  }, {
    name: 'timestamp',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'activityType',
    type: {
      kind: 'enum',
      name: 'DevModeActivityType'
    }
  }, {
    name: 'metadata',
    type: {
      kind: 'object',
      name: _$$Y.DevModeActivityMeta
    },
    embedded: !0,
    nullable: !0
  }, {
    name: 'versionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'version',
    type: {
      kind: 'object',
      name: _$$Y.FileVersion
    },
    filter: ['id', '=', createParentRef('versionId')],
    nullable: !0
  }]
};
let T0 = {
  name: _$$Y.TermsOfServiceAcceptance,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    },
    nullable: !0
  }, {
    name: 'planParentId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'planParentType',
    type: {
      kind: 'enum',
      name: 'PlanParentClass'
    }
  }, {
    name: 'termsKey',
    type: {
      kind: 'enum',
      name: 'TermsOfServiceAcceptanceTermsKey'
    }
  }]
};
let T1 = {
  name: _$$Y.OrgAdminNewEditorsInfo,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'string'
    }
  }, {
    name: 'cutoff',
    type: {
      kind: 'object',
      name: _$$Y.OrgUserFetchNewEditorCutoff
    },
    embedded: !0,
    nullable: !0
  }, {
    name: 'buffer',
    type: {
      kind: 'object',
      name: _$$Y.OrgUserFetchNewEditorBuffer
    },
    embedded: !0,
    nullable: !0
  }]
};
let T2 = {
  name: _$$Y.LibraryPresetSubscriptionV2,
  permissionRequired: !0,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'hubFileId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'group',
    type: {
      kind: 'enum',
      name: 'PresetLibraryGroup'
    }
  }, {
    name: 'libraryKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'order',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'partner_type',
    type: {
      kind: 'enum',
      name: 'PresetLibraryPartnerType'
    },
    nullable: !0
  }, {
    name: 'default_subscribed',
    type: {
      kind: 'bool'
    }
  }, {
    name: 'communityLibrary',
    type: {
      kind: 'object',
      name: _$$Y.CommunityLibrary
    },
    filter: ['hubFileId', '=', createParentRef('hubFileId')],
    nullable: !0,
    shadowCheckCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'libraryOrgSubscriptionOverride',
    type: {
      kind: 'object',
      name: _$$Y.LibraryOrgSubscription
    },
    args: [{
      name: 'subscribingFileOrgId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    filter: {
      and: [['hubFileId', '=', createParentRef('hubFileId')], ['orgId', '=', createFieldRef('subscribingFileOrgId')]]
    },
    nullable: !0
  }, {
    name: 'libraryWorkspaceSubscriptionOverride',
    type: {
      kind: 'object',
      name: _$$Y.LibraryWorkspaceSubscription
    },
    args: [{
      name: 'subscribingFileWorkspaceId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    filter: {
      and: [['hubFileId', '=', createParentRef('hubFileId')], ['workspaceId', '=', createFieldRef('subscribingFileWorkspaceId')]]
    },
    nullable: !0
  }, {
    name: 'libraryTeamSubscriptionOverride',
    type: {
      kind: 'object',
      name: _$$Y.LibraryTeamSubscription
    },
    args: [{
      name: 'subscribingFileTeamId',
      type: {
        kind: 'bigint'
      }
    }],
    filter: {
      and: [['hubFileId', '=', createParentRef('hubFileId')], ['teamId', '=', createFieldRef('subscribingFileTeamId')]]
    },
    nullable: !0
  }, {
    name: 'libraryUserSubscriptionOverride',
    type: {
      kind: 'object',
      name: _$$Y.LibraryUserSubscription
    },
    args: [{
      name: 'subscribingUserId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    filter: {
      and: [['hubFileId', '=', createParentRef('hubFileId')], ['userId', '=', createFieldRef('subscribingUserId')]]
    },
    nullable: !0
  }, {
    name: 'libraryFileSubscriptionOverride',
    type: {
      kind: 'object',
      name: _$$Y.LibraryFileSubscription
    },
    args: [{
      name: 'subscribingFileKey',
      type: {
        kind: 'string'
      }
    }],
    filter: {
      and: [['hubFileId', '=', createParentRef('hubFileId')], ['fileKey', '=', createFieldRef('subscribingFileKey')]]
    },
    nullable: !0
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      communityLibrary: {
        canRead: [{
          userId: createViewRef('userId')
        }, NULL_FIELD_REF]
      }
    }
  }]
};
let T5 = {
  name: _$$Y.ClientReload,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'string'
    }
  }, {
    name: 'targetUserId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'clientId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'reason',
    type: {
      kind: 'string'
    },
    nullable: !0
  }]
};
let T4 = {
  name: _$$Y.RecentIdleTimeoutSettingChange,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'string'
    }
  }, {
    name: 'orgName',
    type: {
      kind: 'string'
    }
  }, {
    name: 'durationInSecs',
    type: {
      kind: 'int'
    },
    typechecked: !1
  }, {
    name: 'lastActiveAt',
    type: {
      kind: 'int'
    }
  }]
};
let T3 = [{
  name: 'emptyDeveloperSeat',
  type: {
    kind: 'object',
    name: _$$Y.EmbeddedSeat
  },
  nullable: !0,
  embedded: !0
}, {
  name: 'emptyCollaboratorSeat',
  type: {
    kind: 'object',
    name: _$$Y.EmbeddedSeat
  },
  nullable: !0,
  embedded: !0
}, {
  name: 'emptyExpertSeat',
  type: {
    kind: 'object',
    name: _$$Y.EmbeddedSeat
  },
  nullable: !0,
  embedded: !0
}, {
  name: 'emptyContentSeat',
  type: {
    kind: 'object',
    name: _$$Y.EmbeddedSeat
  },
  nullable: !0,
  embedded: !0
}];
let T6 = [{
  name: 'key',
  type: {
    kind: 'object',
    name: _$$Y.PlanKey
  },
  embedded: !0
}, {
  name: 'id',
  type: {
    kind: 'string'
  },
  nullable: !0,
  deprecated: {
    date: '2024-10-30',
    reason: 'Exposed for use in PermissionsV2 Policies. Use key.parentId instead in clients'
  }
}, {
  name: '_parentId',
  type: {
    kind: 'bigint'
  }
}, {
  name: '_parentClass',
  type: {
    kind: 'enum',
    name: 'PlanParentClass'
  }
}, {
  name: 'type',
  type: {
    kind: 'enum',
    name: 'PlanType'
  }
}, {
  name: 'tier',
  type: {
    kind: 'enum',
    name: 'PlanTier'
  }
}, {
  name: 'status',
  type: {
    kind: 'enum',
    name: 'PlanStatus'
  }
}, {
  name: 'tierLevel',
  type: {
    kind: 'int'
  }
}, {
  name: 'stripeCustomerId',
  type: {
    kind: 'string'
  },
  nullable: !0
}, {
  name: 'vatGstId',
  type: {
    kind: 'string'
  },
  nullable: !0
}, {
  name: 'taxIdVerificationStatus',
  type: {
    kind: 'enum',
    name: 'TaxIdVerificationStatus'
  },
  nullable: !0
}, {
  name: 'aiFeaturesEnabled',
  type: {
    kind: 'bool'
  },
  nullable: !0
}, {
  name: 'voiceEnabled',
  type: {
    kind: 'bool'
  }
}, {
  name: 'figjamDisabledAt',
  type: {
    kind: 'datetime'
  },
  nullable: !0
}, {
  name: 'isSlidesDisabled',
  type: {
    kind: 'bool'
  },
  nullable: !0
}, {
  name: 'workshopEnabled',
  type: {
    kind: 'bool'
  }
}, {
  name: 'pluginRequestsAllowed',
  type: {
    kind: 'bool'
  }
}, {
  name: 'widgetRequestsAllowed',
  type: {
    kind: 'bool'
  }
}, {
  name: 'cmtyPublishAsUserEnabled',
  type: {
    kind: 'bool'
  }
}, {
  name: 'figmaProvidedLibrariesEnabled',
  type: {
    kind: 'bool'
  },
  nullable: !0
}, {
  name: 'pluginsWhitelistEnforced',
  type: {
    kind: 'bool'
  }
}, {
  name: 'widgetsWhitelistEnforced',
  type: {
    kind: 'bool'
  }
}, {
  name: 'templatePickerEnabled',
  type: {
    kind: 'bool'
  }
}, {
  name: 'customTemplatesAllowed',
  type: {
    kind: 'bool'
  }
}, {
  name: 'cursorChatEnabled',
  type: {
    kind: 'bool'
  }
}, {
  name: 'designDefaultPaidStatus',
  type: {
    kind: 'string'
  },
  nullable: !0
}, {
  name: 'whiteboardDefaultPaidStatus',
  type: {
    kind: 'string'
  },
  nullable: !0
}, {
  name: 'isBillingRemodelEnabled',
  type: {
    kind: 'bool'
  }
}, {
  name: 'upgradeApprovalSettingsDeveloper',
  type: {
    kind: 'string'
  }
}, {
  name: 'upgradeApprovalSettingsCollaborator',
  type: {
    kind: 'string'
  }
}, {
  name: 'upgradeApprovalSettingsExpert',
  type: {
    kind: 'string'
  }
}, {
  name: 'upgradeApprovalSettingsContent',
  type: {
    kind: 'string'
  },
  nullable: !0
}, {
  name: 'name',
  type: {
    kind: 'string'
  }
}, {
  name: 'imgUrl',
  type: {
    kind: 'string'
  },
  nullable: !0
}, {
  name: 'studentTeamState',
  type: {
    kind: 'enum',
    name: 'StudentTeamState'
  },
  nullable: !0
}, {
  name: 'campfireModelEnabledAt',
  type: {
    kind: 'datetime'
  },
  nullable: !0
}, {
  name: 'activeTrialLicenseTypes',
  type: {
    kind: 'list',
    ofType: {
      kind: 'enum',
      name: 'LicenseType'
    }
  },
  nullable: !0
}, {
  name: 'prorationBillingEnabledAt',
  type: {
    kind: 'datetime'
  },
  nullable: !0
}, {
  name: 'termsOfServiceAcceptanceByTermsKey',
  type: {
    kind: 'object',
    name: _$$Y.TermsOfServiceAcceptance
  },
  nullable: !0,
  args: [{
    name: 'termsKey',
    type: {
      kind: 'enum',
      name: 'TermsOfServiceAcceptanceTermsKey'
    }
  }],
  filter: {
    and: [['planParentId', '=', createParentRef('_parentId')], ['planParentType', '=', createParentRef('_parentClass')], ['termsKey', '=', createFieldRef('termsKey')]]
  },
  expectedMaxCount: 1
}, {
  name: 'assignedSeatCounts',
  deprecated: {
    reason: 'Use assignedSeatCountsV2',
    date: '2025-05-13'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  type: {
    kind: 'objects',
    name: _$$Y.AssignedBillableProductSeatCount
  },
  resolver: {
    type: 'HTTP',
    uri: '/api/internal/livegraph/sinatra_resolver/assigned_seat_counts',
    queryParams: {
      plan_parent_id: createParentRef('_parentId'),
      plan_type: createParentRef('type'),
      userId: createFieldRef('userId')
    },
    realtimePolicy: {
      type: 'RedisPubsub',
      channelPrefix: 'assigned-seat-counts-',
      channelPostfix: [createParentRef('type'), createParentRef('_parentId')]
    }
  }
}, {
  name: 'availableSeatCounts',
  deprecated: {
    reason: 'Use availableSeatCountsV2',
    date: '2025-05-13'
  },
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }],
  type: {
    kind: 'objects',
    name: _$$Y.AvailableBillableProductSeatCount
  },
  resolver: {
    type: 'HTTP',
    uri: '/api/internal/livegraph/sinatra_resolver/available_seat_counts',
    queryParams: {
      plan_parent_id: createParentRef('_parentId'),
      plan_type: createParentRef('type'),
      userId: createFieldRef('userId')
    },
    realtimePolicy: {
      type: 'RedisPubsub',
      channelPrefix: 'available-seat-counts-',
      channelPostfix: [createParentRef('type'), createParentRef('_parentId')]
    }
  }
}, {
  name: 'assignedSeatCountsV2',
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'byBillingInterval',
    type: {
      kind: 'bool'
    }
  }],
  type: {
    kind: 'objects',
    name: _$$Y.AssignedBillableProductSeatCountV2
  },
  resolver: {
    type: 'HTTP',
    uri: '/api/internal/livegraph/sinatra_resolver/assigned_seat_counts',
    queryParams: {
      plan_parent_id: createParentRef('_parentId'),
      plan_type: createParentRef('type'),
      userId: createFieldRef('userId'),
      by_billing_interval: createFieldRef('byBillingInterval')
    },
    realtimePolicy: {
      type: 'RedisPubsub',
      channelPrefix: 'assigned-seat-counts-',
      channelPostfix: [createParentRef('type'), createParentRef('_parentId')]
    }
  }
}, {
  name: 'availableSeatCountsV2',
  args: [{
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'byBillingInterval',
    type: {
      kind: 'bool'
    }
  }],
  type: {
    kind: 'objects',
    name: _$$Y.AvailableBillableProductSeatCountV2
  },
  resolver: {
    type: 'HTTP',
    uri: '/api/internal/livegraph/sinatra_resolver/available_seat_counts',
    queryParams: {
      plan_parent_id: createParentRef('_parentId'),
      plan_type: createParentRef('type'),
      userId: createFieldRef('userId'),
      by_billing_interval: createFieldRef('byBillingInterval')
    },
    realtimePolicy: {
      type: 'RedisPubsub',
      channelPrefix: 'available-seat-counts-',
      channelPostfix: [createParentRef('type'), createParentRef('_parentId')]
    }
  }
}, {
  name: 'hostPlanResourceConnections',
  type: {
    kind: 'objects',
    name: _$$Y.ResourceConnection
  },
  nullable: !0,
  filter: {
    and: [['hostPlanId', '=', createParentRef('_parentId')], ['hostPlanType', '=', createParentRef('type')]]
  },
  expectedMaxCount: 70,
  checkCanRead: {
    userId: createSessionRef('userId')
  }
}, {
  name: 'monetizationConfig',
  type: {
    kind: 'object',
    name: _$$Y.MonetizationConfig
  },
  embedded: !0,
  nullable: !0
}, {
  name: 'connectedPlanResourceConnections',
  type: {
    kind: 'objects',
    name: _$$Y.ResourceConnection
  },
  nullable: !0,
  filter: {
    and: [['connectedPlanId', '=', createParentRef('_parentId')], ['connectedPlanType', '=', createParentRef('type')]]
  },
  expectedMaxCount: 70,
  checkCanRead: {
    userId: createSessionRef('userId')
  }
}, {
  name: 'hostPlanPendingResourceConnectionInvites',
  type: {
    kind: 'objects',
    name: _$$Y.ResourceConnectionInvite
  },
  nullable: !0,
  filter: {
    and: [['hostPlanId', '=', createParentRef('_parentId')], ['hostPlanType', '=', createParentRef('type')], ['status', '=', 'pending']]
  },
  expectedMaxCount: 70,
  shadowCheckCanRead: {
    userId: createSessionRef('userId')
  }
}, {
  name: 'connectingPlanPendingResourceConnectionInvites',
  type: {
    kind: 'objects',
    name: _$$Y.ResourceConnectionInvite
  },
  nullable: !0,
  filter: {
    and: [['connectingPlanId', '=', createParentRef('_parentId')], ['connectingPlanType', '=', createParentRef('type')], ['status', '=', 'pending']]
  },
  expectedMaxCount: 70,
  shadowCheckCanRead: {
    userId: createSessionRef('userId')
  }
}, {
  name: 'planSubscription',
  nullable: !0,
  type: {
    kind: 'object',
    name: _$$Y.PlanSubscription
  },
  orderBy: [['createdAt', 'DESC']],
  filter: {
    and: [['planParentId', '=', createParentRef('_parentId')], ['planParentType', '=', createParentRef('_parentClass')]]
  },
  expectedMaxCount: 1
}, {
  name: 'guestInviteSetting',
  type: {
    kind: 'string'
  },
  nullable: !0
}, {
  name: 'unlimitedConnectionsEnabled',
  type: {
    kind: 'bool'
  }
}, {
  name: 'testingOnlyUnlimitedConnectionsEnabled',
  type: {
    kind: 'bool'
  }
}, {
  name: 'isResourceHubCmtyTabDisabled',
  type: {
    kind: 'bool'
  },
  nullable: !0
}, {
  name: 'campfireProvisionalAccessEnabled',
  type: {
    kind: 'bool'
  }
}, {
  name: 'connectionCount',
  type: {
    kind: 'int'
  }
}, {
  name: 'planConnectionCount',
  type: {
    kind: 'object',
    name: _$$Y.PlanConnectionCount
  },
  embedded: !0,
  nullable: !0
}, {
  name: 'featureFlagFcPlanEnabled',
  type: {
    kind: 'object',
    name: _$$Y.StatsigFeatureGate
  },
  nullable: !0,
  resolver: {
    type: 'Statsig',
    statsigUser: {
      customIDs: {
        planKey: createParentRef('id')
      }
    },
    statsigResource: {
      type: 'flag',
      flagName: 'fc_plan_enabled'
    }
  }
}, {
  name: 'featureFlagBakePlanEnabled',
  type: {
    kind: 'object',
    name: _$$Y.StatsigFeatureGate
  },
  nullable: !0,
  resolver: {
    type: 'Statsig',
    statsigUser: {
      customIDs: {
        planKey: createParentRef('id')
      }
    },
    statsigResource: {
      type: 'flag',
      flagName: 'bake_plan_enabled'
    }
  }
}, {
  name: 'featureFlagBakeMonetizationPlan',
  type: {
    kind: 'object',
    name: _$$Y.StatsigFeatureGate
  },
  nullable: !0,
  resolver: {
    type: 'Statsig',
    statsigUser: {
      customIDs: {
        planKey: createParentRef('id')
      }
    },
    statsigResource: {
      type: 'flag',
      flagName: 'bake_monetization_plan'
    }
  }
}, {
  name: 'planRecordId',
  type: {
    kind: 'uuid'
  },
  nullable: !0
}];
let T7 = {
  name: _$$Y.Plan,
  permissionRequired: !1,
  computed: !0,
  fields: [...T6, ...lT]
};
let T8 = {
  name: _$$Y.PlanPermissions,
  permissionRequired: !1,
  computed: !0,
  fields: [...T6, ...T3, ...aq]
};
let T9 = {
  name: _$$Y.PlanPublicInfo,
  permissionRequired: !1,
  computed: !0,
  fields: [{
    name: 'key',
    type: {
      kind: 'object',
      name: _$$Y.PlanKey
    },
    embedded: !0
  }, {
    name: 'id',
    type: {
      kind: 'bigint'
    },
    nullable: !0,
    deprecated: {
      date: '2024-10-30',
      reason: 'Exposed for use in PermissionsV2 Policies. Use key.parentId instead in clients'
    }
  }, {
    name: 'tier',
    type: {
      kind: 'enum',
      name: 'PlanTier'
    }
  }, {
    name: 'featureFlagFcPlanEnabled',
    type: {
      kind: 'object',
      name: _$$Y.StatsigFeatureGate
    },
    nullable: !0,
    resolver: {
      type: 'Statsig',
      statsigUser: {
        customIDs: {
          planKey: createParentRef('id')
        }
      },
      statsigResource: {
        type: 'flag',
        flagName: 'fc_plan_enabled'
      }
    }
  }, {
    name: 'featureFlagBakePlanEnabled',
    type: {
      kind: 'object',
      name: _$$Y.StatsigFeatureGate
    },
    nullable: !0,
    resolver: {
      type: 'Statsig',
      statsigUser: {
        customIDs: {
          planKey: createParentRef('id')
        }
      },
      statsigResource: {
        type: 'flag',
        flagName: 'bake_plan_enabled'
      }
    }
  }, {
    name: 'featureFlagBakeMonetizationPlan',
    type: {
      kind: 'object',
      name: _$$Y.StatsigFeatureGate
    },
    nullable: !0,
    resolver: {
      type: 'Statsig',
      statsigUser: {
        customIDs: {
          planKey: createParentRef('id')
        }
      },
      statsigResource: {
        type: 'flag',
        flagName: 'bake_monetization_plan'
      }
    }
  }, {
    name: 'planRecordId',
    type: {
      kind: 'uuid'
    },
    nullable: !0
  }]
};
let ke = {
  name: _$$Y.HasConnectedPlanUserInOrgFolder,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'string'
    }
  }, {
    name: 'hasConnectedPlanUserInOrg',
    type: {
      kind: 'bool'
    },
    nullable: !0
  }]
};
let kt = {
  name: _$$Y.TestPlan,
  permissionRequired: !1,
  computed: !0,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'name',
    type: {
      kind: 'string'
    }
  }]
};
let ki = {
  name: _$$Y.TestPlanUser,
  permissionRequired: !1,
  computed: !0,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'planType',
    type: {
      kind: 'string'
    }
  }, {
    name: 'plan',
    type: {
      kind: 'object',
      name: _$$Y.TestPlan
    },
    embedded: !0,
    nullable: !0
  }, {
    name: 'currentUser',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    args: [],
    filter: ['id', '=', createParentRef('id')]
  }, {
    name: 'userById',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    filter: ['id', '=', createFieldRef('userId')]
  }]
};
let kn = {
  name: _$$Y.AbandonedDraftFile,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    },
    typechecked: !1
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'file',
    type: {
      kind: 'object',
      name: _$$Y.File
    },
    filter: ['key', '=', createParentRef('fileKey')],
    nullable: !0,
    checkCanRead: {
      fieldName: 'canAccess',
      userId: createSessionRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId'),
      linkAccessOverrideKey: null
    }
  }]
};
let kr = {
  name: _$$Y.AbandonedDraftFolder,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    },
    typechecked: !1
  }, {
    name: 'projectId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'fileCount',
    type: {
      kind: 'int'
    }
  }, {
    name: 'project',
    type: {
      kind: 'object',
      name: _$$Y.Project
    },
    filter: {
      and: [['id', '=', createParentRef('projectId')], ['isAbandonedDrafts', '=', !0]]
    },
    nullable: !0,
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }]
};
let ka = {
  name: _$$Y.NotificationExperimentInfo,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'string'
    }
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'string'
    }
  }, {
    name: 'type',
    type: {
      kind: 'string'
    }
  }, {
    name: 'experimentName',
    type: {
      kind: 'string'
    }
  }, {
    name: 'preference',
    type: {
      kind: 'string'
    }
  }, {
    name: 'timestamp',
    type: {
      kind: 'string'
    }
  }]
};
let ks = {
  name: _$$Y.LockClient,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'string'
    }
  }, {
    name: 'lock',
    type: {
      kind: 'bool'
    }
  }]
};
let ko = {
  name: _$$Y.AssetAttribution,
  computed: !0,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'string'
    }
  }, {
    name: 'name',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'handle',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'imgUrl',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'type',
    type: {
      kind: 'enum',
      name: 'AssetAttributionType'
    }
  }]
};
let kl = {
  name: _$$Y.PlanUser,
  permissionRequired: !1,
  computed: !0,
  fields: [{
    name: 'key',
    type: {
      kind: 'object',
      name: _$$Y.PlanUserKey
    },
    embedded: !0
  }, {
    name: 'planKey',
    type: {
      kind: 'object',
      name: _$$Y.PlanKey
    },
    embedded: !0
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: '_planUserId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: '_planUserTypeCamelCase',
    type: {
      kind: 'string'
    }
  }, {
    name: 'type',
    type: {
      kind: 'enum',
      name: 'PlanType'
    }
  }, {
    name: 'id',
    type: {
      kind: 'string'
    },
    nullable: !0,
    deprecated: {
      date: '2024-10-30',
      reason: 'Exposed for use in PermissionsV2 Policies. Use key.parentId instead in clients'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'designPaidStatus',
    type: {
      kind: 'enum',
      name: 'PlanPaidUserStatus'
    },
    nullable: !0
  }, {
    name: 'devModePaidStatus',
    type: {
      kind: 'enum',
      name: 'PlanPaidUserStatus'
    },
    nullable: !0
  }, {
    name: 'whiteboardPaidStatus',
    type: {
      kind: 'enum',
      name: 'PlanPaidUserStatus'
    },
    nullable: !0
  }, {
    name: 'showFigjamUserOnboarding',
    type: {
      kind: 'bool'
    }
  }, {
    name: 'hasShownFigjamAdminOnboarding',
    type: {
      kind: 'bool'
    }
  }, {
    name: 'draftsFolderId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'draftsProject',
    type: {
      kind: 'object',
      name: _$$Y.Project
    },
    filter: ['id', '=', createParentRef('draftsFolderId')],
    checkCanRead: {
      userId: createSessionRef('userId')
    },
    expectedMaxCount: 1,
    nullable: !0
  }, {
    name: 'permission',
    type: {
      kind: 'enum',
      name: 'PlanPermission'
    }
  }, {
    name: 'licenseTypes',
    type: {
      kind: 'list',
      ofType: {
        kind: 'enum',
        name: 'LicenseType'
      }
    },
    nullable: !0
  }, {
    name: 'seatTypeLicenseTypes',
    type: {
      kind: 'list',
      ofType: {
        kind: 'enum',
        name: 'LicenseType'
      }
    },
    nullable: !0
  }, {
    name: 'activeSeatTypeUpgrade',
    type: {
      kind: 'object',
      name: _$$Y.EmbeddedOrgUserUpgrade
    },
    nullable: !0,
    embedded: !0
  }, {
    name: 'licenseGroupAdmins',
    type: {
      kind: 'objects',
      name: _$$Y.LicenseGroupAdmin
    },
    filter: ['orgUserId', '=', createParentRef('_planUserId')],
    nullable: !0,
    expectedMaxCount: 1e3
  }, {
    name: 'designAccountTypeRequest',
    type: {
      kind: 'object',
      name: _$$Y.AccountTypeRequest
    },
    filter: {
      and: [['requestableUserId', '=', createParentRef('_planUserId')], ['requestableUserType', '=', createParentRef('_planUserTypeCamelCase')], ['_editorTypeRaw', '=', 0]]
    },
    nullable: !0
  }, {
    name: 'whiteboardAccountTypeRequest',
    type: {
      kind: 'object',
      name: _$$Y.AccountTypeRequest
    },
    filter: {
      and: [['requestableUserId', '=', createParentRef('_planUserId')], ['requestableUserType', '=', createParentRef('_planUserTypeCamelCase')], ['_editorTypeRaw', '=', 1]]
    },
    nullable: !0
  }, {
    name: 'devModeAccountTypeRequest',
    type: {
      kind: 'object',
      name: _$$Y.AccountTypeRequest
    },
    filter: {
      and: [['requestableUserId', '=', createParentRef('_planUserId')], ['requestableUserType', '=', createParentRef('_planUserTypeCamelCase')], ['_editorTypeRaw', '=', 2]]
    },
    nullable: !0
  }, {
    name: 'provisionalLicenseTypes',
    type: {
      kind: 'list',
      ofType: {
        kind: 'enum',
        name: 'LicenseType'
      }
    },
    nullable: !0
  }, {
    name: 'provisionalBillableProductKey',
    type: {
      kind: 'enum',
      name: 'BillableProductKey'
    },
    nullable: !0
  }, {
    name: 'pendingAccountTypeRequest',
    type: {
      kind: 'object',
      name: _$$Y.AccountTypeRequest
    },
    nullable: !0,
    filter: {
      and: [['requestableUserId', '=', createParentRef('_planUserId')], ['requestableUserType', '=', createParentRef('_planUserTypeCamelCase')], ['status', '=', 'pending'], ['billableProductKey', '<>', null]]
    }
  }, {
    name: 'latestProvisionalAccess',
    type: {
      kind: 'object',
      name: _$$Y.ProvisionalAccess
    },
    orderBy: [['endsAt', 'DESC']],
    filter: {
      and: [['planUserId', '=', createParentRef('_planUserId')], ['deactivatedAt', '=', null]]
    },
    nullable: !0,
    expectedMaxCount: 1
  }, {
    name: 'planUserDowngradesNonCheckoutBillableProductKeys',
    type: {
      kind: 'list',
      ofType: {
        kind: 'enum',
        name: 'BillableProductKey'
      }
    },
    nullable: !0
  }, {
    name: '_orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'fromOrgUser',
    type: {
      kind: 'object',
      name: _$$Y.PrivilegedOrgUser
    },
    filter: {
      and: [['userId', '=', createParentRef('userId')], ['orgId', '=', createParentRef('_orgId')]]
    },
    nullable: !0
  }, {
    name: 'pendingAccountTypeRequestBillableProductKeys',
    type: {
      kind: 'list',
      ofType: {
        kind: 'enum',
        name: 'BillableProductKey'
      }
    },
    nullable: !0
  }, {
    name: 'billableProductKeys',
    type: {
      kind: 'list',
      ofType: {
        kind: 'enum',
        name: 'BillableProductKey'
      }
    },
    nullable: !0
  }, {
    name: 'currentSeat',
    type: {
      kind: 'object',
      name: _$$Y.Seat
    },
    filter: {
      and: [['currentPlanUserId', '=', createParentRef('_planUserId')], ['currentPlanUserType', '=', createParentRef('_planUserTypeCamelCase')], ['deprovisionedAt', '=', null]]
    },
    nullable: !0
  }, {
    name: 'provisionalAccessesBillableProductKeys',
    type: {
      kind: 'list',
      ofType: {
        kind: 'enum',
        name: 'BillableProductKey'
      }
    },
    nullable: !0
  }]
};
let kd = {
  name: _$$Y.EmbeddedOrgUserUpgrade,
  permissionRequired: !1,
  embedded: !0,
  fields: [{
    name: 'resourceType',
    type: {
      kind: 'enum',
      name: 'OrgUserUpgradeResourceType'
    },
    nullable: !0
  }, {
    name: 'resourceId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'actorId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'reason',
    type: {
      kind: 'enum',
      name: 'OrgUserUpgradeReason'
    }
  }, {
    name: '_editorTypeRaw',
    type: {
      kind: 'int'
    }
  }, {
    name: 'downgradedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'billableProduct',
    type: {
      kind: 'object',
      name: _$$Y.EmbeddedBillableProduct
    },
    embedded: !0,
    nullable: !0
  }, {
    name: 'billableProductKey',
    type: {
      kind: 'enum',
      name: 'BillableProductKey'
    },
    nullable: !0
  }]
};
let kc = {
  name: _$$Y.EmbeddedBillableProduct,
  permissionRequired: !1,
  embedded: !0,
  fields: [{
    name: 'licenseTypes',
    type: {
      kind: 'list',
      ofType: {
        kind: 'enum',
        name: 'LicenseType'
      }
    },
    nullable: !0
  }]
};
let ku = {
  name: _$$Y.DesktopPushNotificationMessage,
  embedded: !0,
  permissionRequired: !1,
  fields: [{
    name: 'title',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'body',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'subtitle',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'thumbnailUrl',
    type: {
      kind: 'string'
    },
    nullable: !0
  }]
};
let kp = {
  name: _$$Y.DesktopPushNotification,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'string'
    }
  }, {
    name: 'notificationSpaceId',
    type: {
      kind: 'string'
    }
  }, {
    name: 'notificationId',
    type: {
      kind: 'string'
    }
  }, {
    name: 'openUrl',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'message',
    type: {
      kind: 'object',
      name: _$$Y.DesktopPushNotificationMessage
    },
    embedded: !0
  }]
};
let km = {
  name: _$$Y.BillableProduct,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'key',
    type: {
      kind: 'enum',
      name: 'BillableProductKey'
    }
  }, {
    name: 'licenseTypes',
    type: {
      kind: 'list',
      ofType: {
        kind: 'enum',
        name: 'LicenseType'
      }
    },
    typechecked: !1
  }]
};
let kh = {
  name: _$$Y.TeamUserUpgrade,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'teamUserId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'downgradedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'downgradeReason',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'billableProductKey',
    type: {
      kind: 'enum',
      name: 'BillableProductKey'
    },
    nullable: !0
  }, {
    name: 'billableProduct',
    type: {
      kind: 'object',
      name: 'BillableProduct'
    },
    nullable: !0,
    filter: ['key', '=', createParentRef('billableProductKey')]
  }, {
    name: 'upgradeMethod',
    type: {
      kind: 'enum',
      name: 'UpgradeMethod'
    },
    nullable: !0
  }, {
    name: 'reason',
    type: {
      kind: 'enum',
      name: 'TeamUserUpgradeReason'
    },
    typechecked: !1
  }, {
    name: 'actorId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'actor',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    nullable: !0,
    filter: ['id', '=', createParentRef('actorId')]
  }, {
    name: '_editorTypeRaw',
    type: {
      kind: 'int'
    },
    nullable: !0
  }, {
    name: 'licenseType',
    type: {
      kind: 'enum',
      name: 'LicenseType'
    },
    computed: !0,
    nullable: !0,
    dependencies: {
      _editorTypeRaw: NULL_FIELD_REF
    }
  }, {
    name: 'resourceType',
    type: {
      kind: 'enum',
      name: 'ResourceType'
    },
    nullable: !0
  }, {
    name: 'resourceId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }]
};
let kg = {
  name: _$$Y.AssetTransferReload,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'string'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'string'
    }
  }, {
    name: 'destOrgId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'teamId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'folderId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }]
};
let kf = {
  name: _$$Y.DomainOrgAdminToRemove,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'user',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    filter: ['id', '=', createParentRef('userId')],
    nullable: !0
  }]
};
let k_ = [{
  name: 'id',
  type: {
    kind: 'bigint'
  }
}, {
  name: 'fileKey',
  type: {
    kind: 'string'
  },
  bannedFromViews: !0
}, {
  name: 'sortOrder',
  type: {
    kind: 'int'
  }
}, {
  name: 'template',
  type: {
    kind: 'object',
    name: _$$Y.Template
  },
  filter: ['id', '=', createParentRef('id')],
  checkCanRead: {
    userId: createSessionRef('userId'),
    sessionId: createSessionRef('sessionId'),
    anonymousUserId: createSessionRef('anonymousUserId')
  },
  nullable: !0
}, {
  name: 'file',
  type: {
    kind: 'object',
    name: _$$Y.File
  },
  bannedFromViews: !0,
  filter: ['key', '=', createParentRef('fileKey')],
  checkCanRead: {
    fieldName: 'canReadV3',
    userId: createSessionRef('userId'),
    sessionId: createSessionRef('sessionId'),
    anonymousUserId: createSessionRef('anonymousUserId')
  },
  nullable: !0
}, {
  name: 'libraryKeyToFile',
  type: {
    kind: 'object',
    name: _$$Y.LibraryKeyToFile
  },
  filter: ['fileKey', '=', createParentRef('fileKey')],
  nullable: !0
}];
let kA = {
  name: _$$Y.TeamTemplateResult,
  permissionRequired: !1,
  fields: [...k_, {
    name: 'totalTemplatesByTeam',
    type: {
      kind: 'int'
    }
  }, {
    name: 'teamId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'team',
    type: {
      kind: 'object',
      name: _$$Y.Team
    },
    filter: ['id', '=', createParentRef('teamId')],
    checkCanRead: {
      userId: createSessionRef('userId')
    },
    nullable: !0
  }, {
    name: 'teamLimitedInfo',
    type: {
      kind: 'object',
      name: _$$Y.TeamLimitedInfo
    },
    filter: ['id', '=', createParentRef('teamId')],
    checkCanRead: {
      userId: createSessionRef('userId')
    },
    nullable: !0
  }]
};
let ky = {
  name: _$$Y.CommunityBlock,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'profileId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'blockedProfileId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'blockType',
    type: {
      kind: 'string'
    }
  }]
};
let kb = {
  name: _$$Y.OrgMfaGuestInfo,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'totalGuestCount',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'nonMfaGuestCount',
    type: {
      kind: 'bigint'
    }
  }]
};
let kv = {
  name: _$$Y.OrgMfaMemberInfo,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'totalMemberCount',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'nonMfaMemberCount',
    type: {
      kind: 'bigint'
    }
  }]
};
let kI = {
  name: _$$Y.PlanSubscription,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'string'
    }
  }, {
    name: 'planParentId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'planParentType',
    type: {
      kind: 'enum',
      name: 'PlanParentClass'
    }
  }, {
    name: 'tier',
    type: {
      kind: 'enum',
      name: 'PlanTier'
    }
  }, {
    name: 'status',
    type: {
      kind: 'enum',
      name: 'PlanStatus'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'deactivatedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }]
};
let kE = {
  name: _$$Y.BillingRemodelEnabledExperiment,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'string'
    }
  }, {
    name: 'campfireEnabled',
    type: {
      kind: 'bool'
    },
    typechecked: !1
  }]
};
let kx = {
  name: _$$Y.FilePreviewFragments,
  permissionRequired: !1,
  naturalKey: new Set(['fileKey']),
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    },
    bannedFromViews: !0
  }, {
    name: 'fileId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'nodeIds',
    type: {
      kind: 'list',
      ofType: {
        kind: 'string'
      }
    }
  }, {
    name: 'isFragment',
    type: {
      kind: 'bool'
    }
  }]
};
let kS = {
  name: _$$Y.PlanRecordPublicInfo,
  permissionRequired: !1,
  fields: [...dy, ...db]
};
let kw = {
  name: _$$Y.PlanRecord,
  permissionRequired: !1,
  fields: [...dy, ...db, {
    name: 'currentPlanUserRecord',
    type: {
      kind: 'object',
      name: _$$Y.PlanUserRecord
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    filter: {
      and: [['planId', '=', createParentRef('id')], ['userId', '=', createFieldRef('userId')]]
    },
    nullable: !0,
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'type',
    type: {
      kind: 'enum',
      name: 'PlanType'
    },
    computed: !0,
    dependencies: {
      planParentType: NULL_FIELD_REF
    }
  }, {
    name: 'tier',
    type: {
      kind: 'enum',
      name: 'PlanTier'
    },
    computed: !0,
    dependencies: {
      _orgPlanRecord: {
        _org: {
          bigmaEnabledAt: NULL_FIELD_REF
        }
      },
      _teamPlanRecord: {
        _team: {
          studentTeamAt: NULL_FIELD_REF,
          planSubscription: {
            tier: NULL_FIELD_REF,
            status: NULL_FIELD_REF
          },
          gracePeriodEnd: NULL_FIELD_REF,
          subscription: NULL_FIELD_REF,
          id: NULL_FIELD_REF
        }
      }
    }
  }, {
    name: 'status',
    type: {
      kind: 'enum',
      name: 'PlanStatus'
    },
    computed: !0,
    dependencies: {
      _orgPlanRecord: {
        _org: {
          standing: NULL_FIELD_REF
        }
      },
      _teamPlanRecord: {
        _team: {
          planSubscription: {
            status: NULL_FIELD_REF,
            tier: NULL_FIELD_REF
          },
          subscription: NULL_FIELD_REF
        }
      }
    }
  }, {
    name: 'tierLevel',
    type: {
      kind: 'int'
    },
    computed: !0,
    dependencies: {
      _orgPlanRecord: {
        _org: {
          bigmaEnabledAt: NULL_FIELD_REF
        }
      },
      _teamPlanRecord: {
        _team: {
          studentTeamAt: NULL_FIELD_REF,
          planSubscription: {
            tier: NULL_FIELD_REF,
            status: NULL_FIELD_REF
          },
          gracePeriodEnd: NULL_FIELD_REF,
          subscription: NULL_FIELD_REF,
          id: NULL_FIELD_REF
        }
      }
    }
  }, {
    name: 'stripeCustomerId',
    type: {
      kind: 'string'
    },
    nullable: !0,
    computed: !0,
    dependencies: {
      _orgPlanRecord: {
        _org: {
          stripeCustomerId: NULL_FIELD_REF
        }
      },
      _teamPlanRecord: {
        _team: {
          stripeCustomerId: NULL_FIELD_REF
        }
      }
    }
  }, {
    name: 'vatGstId',
    type: {
      kind: 'string'
    },
    nullable: !0,
    computed: !0,
    dependencies: {
      _orgPlanRecord: {
        _org: {
          vatGstId: NULL_FIELD_REF
        }
      },
      _teamPlanRecord: {
        _team: {
          vatGstId: NULL_FIELD_REF
        }
      }
    }
  }, {
    name: 'taxIdVerificationStatus',
    type: {
      kind: 'enum',
      name: 'TaxIdVerificationStatus'
    },
    nullable: !0,
    computed: !0,
    dependencies: {
      _orgPlanRecord: {
        _org: {
          taxIdVerificationStatus: NULL_FIELD_REF
        }
      },
      _teamPlanRecord: {
        _team: {
          taxIdVerificationStatus: NULL_FIELD_REF
        }
      }
    }
  }, {
    name: 'aiFeaturesEnabled',
    type: {
      kind: 'bool'
    },
    nullable: !0,
    computed: !0,
    dependencies: {
      _orgPlanRecord: {
        _org: {
          aiFeaturesDisabledAt: NULL_FIELD_REF
        }
      },
      _teamPlanRecord: {
        _team: {
          aiFeaturesDisabledAt: NULL_FIELD_REF
        }
      }
    }
  }, {
    name: 'voiceEnabled',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      _orgPlanRecord: {
        _org: {
          voiceDisabledAt: NULL_FIELD_REF
        }
      }
    }
  }, {
    name: 'figjamDisabledAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0,
    computed: !0,
    dependencies: {
      _orgPlanRecord: {
        _org: {
          figjamDisabledAt: NULL_FIELD_REF
        }
      }
    }
  }, {
    name: 'isSlidesDisabled',
    type: {
      kind: 'bool'
    },
    nullable: !0,
    computed: !0,
    dependencies: {
      _orgPlanRecord: {
        _org: {
          isSlidesDisabled: NULL_FIELD_REF
        }
      }
    }
  }, {
    name: 'workshopEnabled',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      _orgPlanRecord: {
        _org: {
          workshopDisabledAt: NULL_FIELD_REF
        }
      }
    }
  }, {
    name: 'pluginRequestsAllowed',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      _orgPlanRecord: {
        _org: {
          pluginRequestsAllowed: NULL_FIELD_REF
        }
      }
    }
  }, {
    name: 'widgetRequestsAllowed',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      _orgPlanRecord: {
        _org: {
          widgetRequestsAllowed: NULL_FIELD_REF
        }
      }
    }
  }, {
    name: 'figmaProvidedLibrariesEnabled',
    type: {
      kind: 'bool'
    },
    nullable: !0,
    computed: !0,
    dependencies: {
      _orgPlanRecord: {
        _org: {
          figmaProvidedLibrariesDisabledAt: NULL_FIELD_REF
        }
      },
      _teamPlanRecord: {
        _team: {
          figmaProvidedLibrariesDisabledAt: NULL_FIELD_REF
        }
      }
    }
  }, {
    name: 'pluginsWhitelistEnforced',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      _orgPlanRecord: {
        _org: {
          pluginsWhitelistEnforced: NULL_FIELD_REF
        }
      }
    }
  }, {
    name: 'widgetsWhitelistEnforced',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      _orgPlanRecord: {
        _org: {
          widgetsWhitelistEnforced: NULL_FIELD_REF
        }
      }
    }
  }, {
    name: 'activeTrialLicenseTypes',
    type: {
      kind: 'list',
      ofType: {
        kind: 'enum',
        name: 'LicenseType'
      }
    },
    nullable: !0,
    computed: !0,
    dependencies: {
      _orgPlanRecord: {
        _org: {
          billingTrials: {
            status: NULL_FIELD_REF,
            productLicenseTypes: NULL_FIELD_REF
          }
        }
      }
    }
  }, {
    name: 'templatePickerEnabled',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      _orgPlanRecord: {
        _org: {
          templatePickerDisabled: NULL_FIELD_REF
        }
      }
    }
  }, {
    name: 'customTemplatesAllowed',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      _orgPlanRecord: {
        _org: {
          customTemplatesAllowed: NULL_FIELD_REF
        }
      }
    }
  }, {
    name: 'cursorChatEnabled',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      _orgPlanRecord: {
        _org: {
          cursorChatDisabledAt: NULL_FIELD_REF
        }
      }
    }
  }, {
    name: 'designDefaultPaidStatus',
    type: {
      kind: 'string'
    },
    nullable: !0,
    computed: !0,
    dependencies: {
      _orgPlanRecord: {
        _org: {
          designDefaultPaidStatus: NULL_FIELD_REF
        }
      },
      _teamPlanRecord: {
        _team: {
          designDefaultPaidStatus: NULL_FIELD_REF
        }
      }
    }
  }, {
    name: 'whiteboardDefaultPaidStatus',
    type: {
      kind: 'string'
    },
    nullable: !0,
    computed: !0,
    dependencies: {
      _orgPlanRecord: {
        _org: {
          whiteboardDefaultPaidStatus: NULL_FIELD_REF
        }
      },
      _teamPlanRecord: {
        _team: {
          whiteboardDefaultPaidStatus: NULL_FIELD_REF
        }
      }
    }
  }, {
    name: 'isBillingRemodelEnabled',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      planParentId: NULL_FIELD_REF,
      planParentType: NULL_FIELD_REF
    }
  }, {
    name: 'upgradeApprovalSettingsDeveloper',
    type: {
      kind: 'string'
    },
    computed: !0,
    dependencies: {
      _orgPlanRecord: {
        _org: {
          upgradeApprovalSettingsDeveloper: NULL_FIELD_REF
        }
      },
      _teamPlanRecord: {
        _team: {
          upgradeApprovalSettingsDeveloper: NULL_FIELD_REF
        }
      }
    }
  }, {
    name: 'upgradeApprovalSettingsCollaborator',
    type: {
      kind: 'string'
    },
    computed: !0,
    dependencies: {
      _orgPlanRecord: {
        _org: {
          upgradeApprovalSettingsCollaborator: NULL_FIELD_REF
        }
      },
      _teamPlanRecord: {
        _team: {
          upgradeApprovalSettingsCollaborator: NULL_FIELD_REF
        }
      }
    }
  }, {
    name: 'upgradeApprovalSettingsExpert',
    type: {
      kind: 'string'
    },
    computed: !0,
    dependencies: {
      _orgPlanRecord: {
        _org: {
          upgradeApprovalSettingsExpert: NULL_FIELD_REF
        }
      },
      _teamPlanRecord: {
        _team: {
          upgradeApprovalSettingsExpert: NULL_FIELD_REF
        }
      }
    }
  }, {
    name: 'upgradeApprovalSettingsContent',
    type: {
      kind: 'string'
    },
    computed: !0,
    dependencies: {
      _orgPlanRecord: {
        _org: {
          upgradeApprovalSettingsContent: makeFieldRefOptional(NULL_FIELD_REF)
        }
      },
      _teamPlanRecord: {
        _team: {
          upgradeApprovalSettingsContent: makeFieldRefOptional(NULL_FIELD_REF)
        }
      }
    }
  }, {
    name: 'campfireModelEnabledAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0,
    computed: !0,
    dependencies: {
      _orgPlanRecord: {
        _org: {
          bundlesEnabledAt: NULL_FIELD_REF
        }
      },
      _teamPlanRecord: {
        _team: {
          bundlesEnabledAt: NULL_FIELD_REF
        }
      }
    }
  }, {
    name: 'guestInviteSetting',
    type: {
      kind: 'string'
    },
    nullable: !0,
    computed: !0,
    dependencies: {
      _orgPlanRecord: {
        _org: {
          guestInviteSetting: NULL_FIELD_REF
        }
      }
    }
  }, {
    name: 'unlimitedConnectionsEnabled',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      _orgPlanRecord: {
        _org: {
          unlimitedConnectionsEnabled: NULL_FIELD_REF
        }
      }
    }
  }, {
    name: 'testingOnlyUnlimitedConnectionsEnabled',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      _orgPlanRecord: {
        _org: {
          testingOnlyUnlimitedConnectionsEnabled: NULL_FIELD_REF
        }
      },
      _teamPlanRecord: {
        _team: {
          testingOnlyUnlimitedConnectionsEnabled: NULL_FIELD_REF
        }
      }
    }
  }, {
    name: 'isResourceHubCmtyTabDisabled',
    type: {
      kind: 'bool'
    },
    nullable: !0,
    computed: !0,
    dependencies: {
      _orgPlanRecord: {
        _org: {
          isResourceHubCmtyTabDisabled: NULL_FIELD_REF
        }
      }
    }
  }, {
    name: 'connectionCount',
    type: {
      kind: 'int'
    },
    computed: !0,
    dependencies: {
      _orgPlanRecord: {
        _org: {
          connectionCount: NULL_FIELD_REF
        }
      },
      _teamPlanRecord: {
        _team: {
          connectionCount: NULL_FIELD_REF
        }
      }
    }
  }, {
    name: 'campfireProvisionalAccessEnabled',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      _orgPlanRecord: {
        _org: {
          featureFlagCampfireProvisionalAccessEnabled: {
            value: NULL_FIELD_REF
          }
        }
      },
      _teamPlanRecord: {
        _team: {
          featureFlagCampfireProvisionalAccessEnabled: {
            value: NULL_FIELD_REF
          }
        }
      }
    }
  }, {
    name: 'featureFlagFcPlanEnabled',
    type: {
      kind: 'object',
      name: _$$Y.StatsigFeatureGate
    },
    nullable: !0,
    resolver: {
      type: 'Statsig',
      statsigUser: {
        customIDs: {
          _planParentClassForPlanKey: createParentRef('planParentType'),
          _planParentIdForPlanKey: createParentRef('planParentId')
        }
      },
      statsigResource: {
        type: 'flag',
        flagName: 'fc_plan_enabled'
      }
    }
  }, {
    name: 'featureFlagBakePlanEnabled',
    type: {
      kind: 'object',
      name: _$$Y.StatsigFeatureGate
    },
    nullable: !0,
    resolver: {
      type: 'Statsig',
      statsigUser: {
        customIDs: {
          _planParentClassForPlanKey: createParentRef('planParentType'),
          _planParentIdForPlanKey: createParentRef('planParentId')
        }
      },
      statsigResource: {
        type: 'flag',
        flagName: 'bake_plan_enabled'
      }
    }
  }, {
    name: 'featureFlagBakeMonetizationPlan',
    type: {
      kind: 'object',
      name: _$$Y.StatsigFeatureGate
    },
    nullable: !0,
    resolver: {
      type: 'Statsig',
      statsigUser: {
        customIDs: {
          _planParentClassForPlanKey: createParentRef('planParentType'),
          _planParentIdForPlanKey: createParentRef('planParentId')
        }
      },
      statsigResource: {
        type: 'flag',
        flagName: 'bake_monetization_plan'
      }
    }
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      _teamPlanRecord: {
        _team: {
          canRead: [{
            userId: createFieldRef('userId')
          }, NULL_FIELD_REF]
        }
      },
      _orgPlanRecord: {
        _org: {
          canRead: [{
            userId: createFieldRef('userId')
          }, NULL_FIELD_REF]
        }
      }
    }
  }, k, s6, {
    name: 'permissionPlanFeatureFlags',
    type: {
      kind: 'list',
      ofType: {
        kind: 'string'
      }
    },
    computed: !0,
    dependencies: {
      permissionFlagPermissionsPlanTestFlag: {
        id: null,
        name: null,
        value: null
      }
    }
  }]
};
let kC = {
  name: _$$Y.OrgPlanRecord,
  permissionRequired: !1,
  fields: [...dy, {
    name: '_org',
    type: {
      kind: 'object',
      name: _$$Y.Org
    },
    filter: ['id', '=', createParentRef('planParentId')],
    nullable: !0,
    bannedFromViews: !0
  }]
};
let kT = {
  name: _$$Y.TeamPlanRecord,
  permissionRequired: !1,
  fields: [...dy, {
    name: '_team',
    type: {
      kind: 'object',
      name: _$$Y.Team
    },
    filter: {
      and: [['id', '=', createParentRef('planParentId')], ['orgId', '=', null]]
    },
    nullable: !0,
    bannedFromViews: !0
  }]
};
let kk = [{
  name: 'id',
  type: {
    kind: 'uuid'
  }
}, {
  name: 'planParentId',
  type: {
    kind: 'bigint'
  }
}, {
  name: 'planParentType',
  type: {
    kind: 'enum',
    name: 'PlanParentClass'
  }
}, {
  name: 'userId',
  type: {
    kind: 'bigint'
  }
}, {
  name: 'planId',
  type: {
    kind: 'uuid'
  },
  nullable: !0
}, {
  name: 'canUsePlanCredits',
  type: {
    kind: 'enum',
    name: 'PlanUserRecordPlanCreditsUsagePolicy'
  }
}];
let kR = {
  name: _$$Y.PlanUserRecord,
  permissionRequired: !1,
  fields: [...kk, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'planRecord',
    type: {
      kind: 'object',
      name: _$$Y.PlanRecord
    },
    filter: ['id', '=', createParentRef('planId')],
    checkCanRead: {
      userId: createSessionRef('userId')
    },
    nullable: !0
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      planRecord: {
        canRead: [{
          userId: createFieldRef('userId')
        }, NULL_FIELD_REF]
      },
      userId: NULL_FIELD_REF
    }
  }, {
    name: '_orgPlanUserRecord',
    type: {
      kind: 'object',
      name: _$$Y.OrgPlanUserRecord
    },
    nullable: !0,
    bannedFromViews: !0,
    filter: {
      and: [['id', '=', createParentRef('id')], ['planParentType', '=', 'Org'], ['planParentId', '=', createParentRef('planParentId')], ['userId', '=', createParentRef('userId')]]
    }
  }, {
    name: '_teamPlanUserRecord',
    type: {
      kind: 'object',
      name: _$$Y.TeamPlanUserRecord
    },
    nullable: !0,
    bannedFromViews: !0,
    filter: {
      and: [['id', '=', createParentRef('id')], ['planParentType', '=', 'Team'], ['planParentId', '=', createParentRef('planParentId')], ['userId', '=', createParentRef('userId')]]
    }
  }, {
    name: 'type',
    type: {
      kind: 'enum',
      name: 'PlanType'
    },
    nullable: !0,
    computed: !0,
    dependencies: {
      planParentType: NULL_FIELD_REF
    }
  }, {
    name: 'designPaidStatus',
    type: {
      kind: 'enum',
      name: 'PlanPaidUserStatus'
    },
    nullable: !0,
    computed: !0,
    dependencies: {
      _orgPlanUserRecord: {
        _orgUser: {
          designPaidStatus: NULL_FIELD_REF
        }
      },
      _teamPlanUserRecord: {
        _teamUser: {
          designPaidStatus: NULL_FIELD_REF
        }
      }
    }
  }, {
    name: 'devModePaidStatus',
    type: {
      kind: 'enum',
      name: 'PlanPaidUserStatus'
    },
    nullable: !0,
    computed: !0,
    dependencies: {
      _orgPlanUserRecord: {
        _orgUser: {
          devModePaidStatus: NULL_FIELD_REF
        }
      }
    }
  }, {
    name: 'whiteboardPaidStatus',
    type: {
      kind: 'enum',
      name: 'PlanPaidUserStatus'
    },
    nullable: !0,
    computed: !0,
    dependencies: {
      _orgPlanUserRecord: {
        _orgUser: {
          whiteboardPaidStatus: NULL_FIELD_REF
        }
      },
      _teamPlanUserRecord: {
        _teamUser: {
          whiteboardPaidStatus: NULL_FIELD_REF
        }
      }
    }
  }, {
    name: 'showFigjamUserOnboarding',
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      _orgPlanUserRecord: {
        _orgUser: {
          showFigjamUserOnboarding: NULL_FIELD_REF
        }
      }
    }
  }, {
    name: 'draftsFolderId',
    type: {
      kind: 'bigint'
    },
    nullable: !0,
    computed: !0,
    dependencies: {
      _orgPlanUserRecord: {
        _orgUser: {
          draftsFolderId: NULL_FIELD_REF
        }
      },
      _teamPlanUserRecord: {
        _teamUser: {
          draftsFolderId: NULL_FIELD_REF
        }
      }
    }
  }, {
    name: 'permission',
    type: {
      kind: 'enum',
      name: 'PlanPermission'
    },
    computed: !0,
    dependencies: {
      _orgPlanUserRecord: {
        _orgUser: {
          permission: NULL_FIELD_REF
        }
      },
      _teamPlanUserRecord: {
        _teamUser: {
          teamRole: {
            level: NULL_FIELD_REF
          }
        }
      }
    }
  }, {
    name: 'licenseTypes',
    type: {
      kind: 'list',
      ofType: {
        kind: 'enum',
        name: 'LicenseType'
      }
    },
    nullable: !0,
    computed: !0,
    dependencies: {
      _orgPlanUserRecord: {
        _orgUser: {
          activeSeatTypeUpgrade: {
            billableProduct: {
              licenseTypes: NULL_FIELD_REF
            }
          }
        }
      },
      _teamPlanUserRecord: {
        _teamUser: {
          activeSeatTypeUpgrade: {
            billableProduct: {
              licenseTypes: NULL_FIELD_REF
            }
          }
        }
      }
    }
  }, {
    name: 'provisionalLicenseTypes',
    type: {
      kind: 'list',
      ofType: {
        kind: 'enum',
        name: 'LicenseType'
      }
    },
    nullable: !0,
    computed: !0,
    dependencies: {
      _orgPlanUserRecord: {
        _orgUser: {
          latestProvisionalAccess: {
            status: NULL_FIELD_REF,
            billableProduct: {
              licenseTypes: NULL_FIELD_REF
            }
          }
        }
      },
      _teamPlanUserRecord: {
        _teamUser: {
          latestProvisionalAccess: {
            status: NULL_FIELD_REF,
            billableProduct: {
              licenseTypes: NULL_FIELD_REF
            }
          }
        }
      }
    }
  }, {
    name: 'provisionalBillableProductKey',
    type: {
      kind: 'enum',
      name: 'BillableProductKey'
    },
    nullable: !0,
    computed: !0,
    dependencies: {
      _orgPlanUserRecord: {
        _orgUser: {
          latestProvisionalAccess: {
            status: NULL_FIELD_REF,
            billableProductKey: NULL_FIELD_REF
          }
        }
      },
      _teamPlanUserRecord: {
        _teamUser: {
          latestProvisionalAccess: {
            status: NULL_FIELD_REF,
            billableProductKey: NULL_FIELD_REF
          }
        }
      }
    }
  }, {
    name: 'billableProductKeys',
    type: {
      kind: 'list',
      ofType: {
        kind: 'enum',
        name: 'BillableProductKey'
      }
    },
    nullable: !0,
    computed: !0,
    dependencies: {
      _orgPlanUserRecord: {
        _orgUser: {
          activeSeatTypeUpgrade: {
            billableProductKey: NULL_FIELD_REF
          }
        }
      },
      _teamPlanUserRecord: {
        _teamUser: {
          activeSeatTypeUpgrade: {
            billableProductKey: NULL_FIELD_REF
          }
        }
      }
    }
  }, {
    name: 'pendingAccountTypeRequestBillableProductKeys',
    type: {
      kind: 'list',
      ofType: {
        kind: 'enum',
        name: 'BillableProductKey'
      }
    },
    nullable: !0,
    computed: !0,
    dependencies: {
      _orgPlanUserRecord: {
        _orgUser: {
          pendingAccountTypeRequests: {
            billableProductKey: NULL_FIELD_REF
          }
        }
      },
      _teamPlanUserRecord: {
        _teamUser: {
          pendingAccountTypeRequests: {
            billableProductKey: NULL_FIELD_REF
          }
        }
      }
    }
  }, {
    name: 'provisionalAccessesBillableProductKeys',
    type: {
      kind: 'list',
      ofType: {
        kind: 'enum',
        name: 'BillableProductKey'
      }
    },
    nullable: !0,
    computed: !0,
    dependencies: {
      _orgPlanUserRecord: {
        _orgUser: {
          provisionalAccesses: {
            id: NULL_FIELD_REF,
            billableProductKey: NULL_FIELD_REF
          }
        }
      },
      _teamPlanUserRecord: {
        _teamUser: {
          provisionalAccesses: {
            id: NULL_FIELD_REF,
            billableProductKey: NULL_FIELD_REF
          }
        }
      }
    }
  }, {
    name: 'planUserDowngradesNonCheckoutBillableProductKeys',
    type: {
      kind: 'list',
      ofType: {
        kind: 'enum',
        name: 'BillableProductKey'
      }
    },
    nullable: !0,
    computed: !0,
    dependencies: {
      _orgPlanUserRecord: {
        _orgUser: {
          orgUserDowngrades: {
            id: NULL_FIELD_REF,
            billableProductKey: NULL_FIELD_REF,
            downgradedAt: NULL_FIELD_REF,
            downgradeReason: NULL_FIELD_REF
          }
        }
      },
      _teamPlanUserRecord: {
        _teamUser: {
          teamUserDowngrades: {
            id: NULL_FIELD_REF,
            billableProductKey: NULL_FIELD_REF,
            downgradedAt: NULL_FIELD_REF,
            downgradeReason: NULL_FIELD_REF
          }
        }
      }
    }
  }]
};
let kN = {
  name: _$$Y.OrgPlanUserRecord,
  permissionRequired: !1,
  fields: [...kk, {
    name: '_orgUser',
    type: {
      kind: 'object',
      name: _$$Y.BaseOrgUser
    },
    nullable: !0,
    filter: {
      and: [['orgId', '=', createParentRef('planParentId')], ['userId', '=', createParentRef('userId')]]
    },
    bannedFromViews: !0
  }, {
    name: '_org',
    type: {
      kind: 'object',
      name: _$$Y.Org
    },
    filter: ['id', '=', createParentRef('planParentId')],
    nullable: !0,
    bannedFromViews: !0
  }]
};
let kP = {
  name: _$$Y.TeamPlanUserRecord,
  permissionRequired: !1,
  fields: [...kk, {
    name: '_teamUser',
    type: {
      kind: 'object',
      name: _$$Y.TeamUser
    },
    nullable: !0,
    filter: {
      and: [['teamId', '=', createParentRef('planParentId')], ['userId', '=', createParentRef('userId')]]
    },
    bannedFromViews: !0
  }, {
    name: '_team',
    type: {
      kind: 'object',
      name: _$$Y.Team
    },
    filter: {
      and: [['id', '=', createParentRef('planParentId')], ['orgId', '=', null]]
    },
    nullable: !0,
    bannedFromViews: !0
  }]
};
let kO = {
  name: _$$Y.FileViewHistory,
  permissionRequired: !0,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    },
    nullable: !0,
    bannedFromViews: !0
  }, {
    name: 'file',
    type: {
      kind: 'object',
      name: _$$Y.File
    },
    filter: ['key', '=', createParentRef('fileKey')],
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'user',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    filter: ['id', '=', createParentRef('userId')]
  }, {
    name: 'viewedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'sessionId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }, {
      name: 'anonymousUserId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      file: {
        canViewV3: [{
          userId: createFieldRef('userId'),
          sessionId: createFieldRef('sessionId'),
          anonymousUserId: createFieldRef('anonymousUserId')
        }, NULL_FIELD_REF],
        planPermissions: [{
          userId: createFieldRef('userId')
        }, {
          canUseFileViewHistory: NULL_FIELD_REF
        }]
      }
    }
  }]
};
let kD = {
  name: _$$Y.TeamTemplateSearchResult,
  permissionRequired: !1,
  fields: [...k_, {
    name: 'totalSearchResults',
    type: {
      kind: 'int'
    }
  }]
};
let kL = {
  name: _$$Y.MemberFlyoutInfo,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'string'
    },
    bannedFromViews: !0
  }, {
    name: 'orgUserId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'teamUserId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'orgUser',
    type: {
      kind: 'object',
      name: _$$Y.BaseOrgUser
    },
    filter: ['id', '=', createParentRef('orgUserId')],
    nullable: !0
  }, {
    name: 'teamUser',
    type: {
      kind: 'object',
      name: _$$Y.TeamUser
    },
    filter: ['id', '=', createParentRef('teamUserId')],
    nullable: !0
  }]
};
let kF = {
  name: _$$Y.ActionsHistory,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'string'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'recentlyUsedActions',
    type: {
      kind: 'objects',
      name: _$$Y.QuickActionsRecentCommandSelectedArgs
    },
    nullable: !0,
    embedded: !0
  }, {
    name: 'frecencyHistory',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }]
};
let kM = {
  name: _$$Y.QuickActionsRecentCommandSelectedArgs,
  embedded: !0,
  permissionRequired: !1,
  fields: [{
    name: 'displayName',
    type: {
      kind: 'string'
    }
  }, {
    name: 'selectedRunPluginArgs',
    type: {
      kind: 'object',
      name: _$$Y.SelectedRunPluginArgs
    },
    nullable: !0,
    embedded: !0
  }, {
    name: 'extensionInfo',
    type: {
      kind: 'object',
      name: _$$Y.ExtensionInfo
    },
    nullable: !0,
    embedded: !0
  }]
};
let kj = {
  name: _$$Y.SelectedRunPluginArgs,
  embedded: !0,
  permissionRequired: !1,
  fields: [{
    name: 'pluginId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'currentPluginVersionId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'localFileId',
    type: {
      kind: 'int'
    },
    nullable: !0
  }, {
    name: 'parameterValues',
    type: {
      kind: 'map',
      valueType: {
        kind: 'string'
      }
    },
    nullable: !0
  }]
};
let kU = {
  name: _$$Y.ExtensionInfo,
  embedded: !0,
  permissionRequired: !1,
  fields: [{
    name: 'extensionId',
    type: {
      kind: 'string'
    }
  }, {
    name: 'extensionType',
    type: {
      kind: 'string'
    }
  }, {
    name: 'currentExtensionVersionId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'localFileId',
    type: {
      kind: 'int'
    },
    nullable: !0
  }]
};
let kB = {
  name: _$$Y.StatsigFeatureGate,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'string'
    }
  }, {
    name: 'name',
    type: {
      kind: 'string'
    }
  }, {
    name: 'value',
    type: {
      kind: 'bool'
    }
  }]
};
let kV = {
  plan: [{
    userId: createFieldRef('userId')
  }, {
    isAdmin: NULL_FIELD_REF,
    isMember: NULL_FIELD_REF
  }]
};
let kG = {
  plan: [{
    userId: createFieldRef('userId')
  }, {
    isAdmin: NULL_FIELD_REF,
    name: NULL_FIELD_REF
  }]
};
let kz = {
  name: _$$Y.ResourceConnection,
  permissionRequired: !0,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'resourceId',
    type: {
      kind: 'string'
    }
  }, {
    name: 'resourceType',
    type: {
      kind: 'string'
    }
  }, {
    name: 'projectLimitedInfo',
    type: {
      kind: 'object',
      name: _$$Y.ProjectLimitedInfo
    },
    filter: ['id', '=', createParentRef('resourceId')],
    checkCanRead: {
      userId: createSessionRef('userId')
    },
    nullable: !0
  }, {
    name: 'hostPlanId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'hostPlanType',
    type: {
      kind: 'enum',
      name: 'PlanType'
    }
  }, {
    name: '_hostOrg',
    type: {
      kind: 'object',
      name: _$$Y.Org
    },
    nullable: !0,
    bannedFromViews: !0,
    filter: ['id', '=', createParentRef('hostPlanId')]
  }, {
    name: '_hostTeam',
    type: {
      kind: 'object',
      name: _$$Y.Team
    },
    nullable: !0,
    bannedFromViews: !0,
    filter: ['id', '=', createParentRef('hostPlanId')]
  }, {
    name: 'hostPlanName',
    type: {
      kind: 'string'
    },
    computed: !0,
    dependencies: {
      hostPlanType: NULL_FIELD_REF,
      _hostOrg: {
        name: NULL_FIELD_REF
      },
      _hostTeam: {
        name: NULL_FIELD_REF
      }
    }
  }, {
    name: 'hostPlanImageUrl',
    type: {
      kind: 'string'
    },
    computed: !0,
    dependencies: {
      hostPlanType: NULL_FIELD_REF,
      _hostOrg: {
        imgUrlTransformed: NULL_FIELD_REF
      },
      _hostTeam: {
        imgUrlTransformed: NULL_FIELD_REF
      }
    }
  }, {
    name: 'connectedPlanId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'connectedPlanType',
    type: {
      kind: 'enum',
      name: 'PlanType'
    }
  }, {
    name: '_connectedOrg',
    type: {
      kind: 'object',
      name: _$$Y.Org
    },
    nullable: !0,
    bannedFromViews: !0,
    filter: ['id', '=', createParentRef('connectedPlanId')]
  }, {
    name: '_connectedTeam',
    type: {
      kind: 'object',
      name: _$$Y.Team
    },
    nullable: !0,
    bannedFromViews: !0,
    filter: ['id', '=', createParentRef('connectedPlanId')]
  }, {
    name: 'connectedPlanName',
    type: {
      kind: 'string'
    },
    computed: !0,
    dependencies: {
      connectedPlanType: NULL_FIELD_REF,
      _connectedOrg: {
        name: NULL_FIELD_REF
      },
      _connectedTeam: {
        name: NULL_FIELD_REF
      }
    }
  }, {
    name: 'connectedPlanImageUrl',
    type: {
      kind: 'string'
    },
    computed: !0,
    dependencies: {
      connectedPlanType: NULL_FIELD_REF,
      _connectedOrg: {
        imgUrlTransformed: NULL_FIELD_REF
      },
      _connectedTeam: {
        imgUrlTransformed: NULL_FIELD_REF
      }
    }
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      hostPlanType: NULL_FIELD_REF,
      connectedPlanType: NULL_FIELD_REF,
      _hostOrg: kV,
      _hostTeam: kV,
      _connectedOrg: kV,
      _connectedTeam: kV,
      resourceConnectedUsers: [{
        userId: createFieldRef('userId')
      }, {
        userId: NULL_FIELD_REF
      }]
    }
  }, {
    name: 'isHostPlanAdmin',
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    type: {
      kind: 'bool'
    },
    computed: !0,
    dependencies: {
      hostPlanType: NULL_FIELD_REF,
      _hostOrg: kV,
      _hostTeam: kV
    }
  }, {
    name: '_connectedOrgUser',
    type: {
      kind: 'object',
      name: _$$Y.OrgUser
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    bannedFromViews: !0,
    filter: {
      and: [['userId', '=', createFieldRef('userId')], ['orgId', '=', createParentRef('connectedPlanId')]]
    }
  }, {
    name: '_connectedTeamUser',
    type: {
      kind: 'object',
      name: _$$Y.TeamUser
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    bannedFromViews: !0,
    filter: {
      and: [['userId', '=', createFieldRef('userId')], ['teamId', '=', createParentRef('connectedPlanId')]]
    }
  }, {
    name: 'resourceConnectedUsers',
    type: {
      kind: 'objects',
      name: _$$Y.ResourceConnectedUser
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    filter: {
      and: [['resourceConnectionId', '=', createParentRef('id')], ['userId', '=', createFieldRef('userId')]]
    },
    expectedMaxCount: 200,
    nullable: !0
  }, {
    name: 'allResourceConnectedUsers',
    type: {
      kind: 'objects',
      name: _$$Y.ResourceConnectedUser
    },
    filter: ['resourceConnectionId', '=', createParentRef('id')],
    expectedMaxCount: 200,
    nullable: !0
  }, {
    name: 'resourceConnectionInvite',
    type: {
      kind: 'object',
      name: _$$Y.ResourceConnectionInvite
    },
    nullable: !0,
    filter: ['resourceConnectionId', '=', createParentRef('id')]
  }, {
    name: 'disconnectedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'disconnectedBy',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'disconnectedByPlanParentType',
    type: {
      kind: 'enum',
      name: 'PlanType'
    },
    nullable: !0
  }, {
    name: 'disconnectedByPlanParentId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: '_disconnectedByUser',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    filter: ['id', '=', createParentRef('disconnectedBy')],
    nullable: !0,
    bannedFromViews: !0
  }, {
    name: 'disconnectedByName',
    type: {
      kind: 'string'
    },
    computed: !0,
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    dependencies: {
      _disconnectedByUser: {
        name: NULL_FIELD_REF
      },
      disconnectedByPlanParentType: NULL_FIELD_REF,
      disconnectedByPlanParentId: NULL_FIELD_REF,
      hostPlanType: NULL_FIELD_REF,
      hostPlanId: NULL_FIELD_REF,
      connectedPlanType: NULL_FIELD_REF,
      connectedPlanId: NULL_FIELD_REF,
      _hostOrg: kG,
      _hostTeam: kG,
      _connectedOrg: kG,
      _connectedTeam: kG
    }
  }, {
    name: 'sharingGroups',
    type: {
      kind: 'objects',
      name: _$$Y.SharingGroup
    },
    nullable: !0,
    filter: {
      and: [['groupId', '=', createParentRef('id')], ['groupType', '=', 'resource_connection']]
    },
    expectedMaxCount: 50,
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'project',
    type: {
      kind: 'object',
      name: _$$Y.Project
    },
    filter: ['id', '=', createParentRef('resourceId')],
    bannedFromViews: !0,
    nullable: !0
  }, {
    name: 'projectLastModifiedAt',
    type: {
      kind: 'string'
    },
    computed: !0,
    nullable: !0,
    dependencies: {
      project: {
        lastModifiedAt: NULL_FIELD_REF
      }
    }
  }, {
    name: 'projectDescription',
    type: {
      kind: 'string'
    },
    computed: !0,
    nullable: !0,
    dependencies: {
      project: {
        description: NULL_FIELD_REF
      }
    }
  }, {
    name: 'assetTransferRequestId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'assetTransferRequest',
    type: {
      kind: 'object',
      name: _$$Y.AssetTransferRequest
    },
    nullable: !0,
    filter: ['id', '=', createParentRef('assetTransferRequestId')],
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'resourceConnectedUsersWithPlan',
    type: {
      kind: 'objects',
      name: 'ResourceConnectedUserWithPlan'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'isHostPlanAdmin',
      type: {
        kind: 'bool'
      },
      nullable: !0
    }],
    nullable: !0,
    resolver: {
      type: 'HTTP',
      uri: '/api/internal/livegraph/sinatra_resolver/resource_connected_users_with_plan',
      queryParams: {
        userId: createFieldRef('userId'),
        resourceConnectionId: createParentRef('id'),
        isHostPlanAdmin: createFieldRef('isHostPlanAdmin')
      },
      realtimePolicy: {
        type: 'RedisPubsub',
        channelPrefix: 'resource-connected-users-with-plan',
        channelPostfix: [createParentRef('id')]
      }
    }
  }, {
    name: 'totalResourceConnectedUsers',
    type: {
      kind: 'bigint'
    },
    computed: !0,
    nullable: !0,
    dependencies: {
      allResourceConnectedUsers: {
        id: NULL_FIELD_REF
      }
    }
  }, ...dx]
};
let kH = {
  plan: [{
    userId: createFieldRef('userId')
  }, {
    isAdmin: NULL_FIELD_REF
  }]
};
let kW = {
  plan: [{
    userId: createFieldRef('userId')
  }, {
    isMember: NULL_FIELD_REF,
    isAdmin: NULL_FIELD_REF
  }]
};
let kK = {
  name: _$$Y.ResourceConnectionInvite,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'hostPlanId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'hostPlanType',
    type: {
      kind: 'enum',
      name: 'PlanType'
    }
  }, {
    name: '_hostOrg',
    type: {
      kind: 'object',
      name: _$$Y.Org
    },
    nullable: !0,
    bannedFromViews: !0,
    filter: ['id', '=', createParentRef('hostPlanId')]
  }, {
    name: '_hostTeam',
    type: {
      kind: 'object',
      name: _$$Y.Team
    },
    nullable: !0,
    bannedFromViews: !0,
    filter: ['id', '=', createParentRef('hostPlanId')]
  }, {
    name: 'hostPlanName',
    type: {
      kind: 'string'
    },
    computed: !0,
    dependencies: {
      hostPlanType: NULL_FIELD_REF,
      _hostOrg: {
        name: NULL_FIELD_REF
      },
      _hostTeam: {
        name: NULL_FIELD_REF
      }
    }
  }, {
    name: 'hostPlanImageUrl',
    type: {
      kind: 'string'
    },
    computed: !0,
    dependencies: {
      hostPlanType: NULL_FIELD_REF,
      _hostOrg: {
        imgUrlTransformed: NULL_FIELD_REF
      },
      _hostTeam: {
        imgUrlTransformed: NULL_FIELD_REF
      }
    }
  }, {
    name: 'connectingPlanId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'connectingPlanType',
    type: {
      kind: 'enum',
      name: 'PlanType'
    }
  }, {
    name: 'connectingPlanName',
    type: {
      kind: 'string'
    },
    computed: !0,
    dependencies: {
      connectingPlanType: NULL_FIELD_REF,
      _connectingOrg: {
        name: NULL_FIELD_REF
      },
      _connectingTeam: {
        name: NULL_FIELD_REF
      }
    }
  }, {
    name: 'connectingPlanImageUrl',
    type: {
      kind: 'string'
    },
    computed: !0,
    dependencies: {
      connectingPlanType: NULL_FIELD_REF,
      _connectingOrg: {
        imgUrlTransformed: NULL_FIELD_REF
      },
      _connectingTeam: {
        imgUrlTransformed: NULL_FIELD_REF
      }
    }
  }, {
    name: '_connectingOrg',
    type: {
      kind: 'object',
      name: _$$Y.Org
    },
    nullable: !0,
    bannedFromViews: !0,
    filter: ['id', '=', createParentRef('connectingPlanId')]
  }, {
    name: '_connectingTeam',
    type: {
      kind: 'object',
      name: _$$Y.Team
    },
    nullable: !0,
    bannedFromViews: !0,
    filter: ['id', '=', createParentRef('connectingPlanId')]
  }, {
    name: 'resourceId',
    type: {
      kind: 'string'
    }
  }, {
    name: 'resourceType',
    type: {
      kind: 'string'
    }
  }, {
    name: 'projectLimitedInfo',
    type: {
      kind: 'object',
      name: _$$Y.ProjectLimitedInfo
    },
    filter: ['id', '=', createParentRef('resourceId')],
    checkCanRead: {
      userId: createSessionRef('userId')
    },
    nullable: !0
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      hostPlanType: NULL_FIELD_REF,
      connectingPlanType: NULL_FIELD_REF,
      _hostOrg: kH,
      _hostTeam: kH,
      _connectingOrg: kH,
      _connectingTeam: kH
    }
  }, {
    name: 'isHostPlanAdmin',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      hostPlanType: NULL_FIELD_REF,
      _hostOrg: kH,
      _hostTeam: kH
    }
  }, {
    name: 'status',
    type: {
      kind: 'enum',
      name: 'ResourceConnectionInviteStatus'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'handledAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'handledBy',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'hostInviterId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: '_hostInviter',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    filter: ['id', '=', createParentRef('hostInviterId')],
    nullable: !0,
    bannedFromViews: !0
  }, {
    name: 'hostInviterPublic',
    type: {
      kind: 'object',
      name: _$$Y.UserPublic
    },
    filter: ['id', '=', createParentRef('hostInviterId')],
    nullable: !0
  }, {
    name: '_handledByUser',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    filter: ['id', '=', createParentRef('handledBy')],
    nullable: !0,
    bannedFromViews: !0
  }, {
    name: 'hostInviterName',
    type: {
      kind: 'string'
    },
    computed: !0,
    dependencies: {
      _hostInviter: {
        name: NULL_FIELD_REF
      }
    }
  }, {
    name: 'handledByName',
    type: {
      kind: 'string'
    },
    computed: !0,
    nullable: !0,
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    dependencies: {
      status: NULL_FIELD_REF,
      _handledByUser: {
        name: NULL_FIELD_REF
      },
      hostPlanType: NULL_FIELD_REF,
      connectingPlanType: NULL_FIELD_REF,
      _hostOrg: kW,
      _hostTeam: kW,
      _connectingOrg: kW,
      _connectingTeam: kW
    }
  }, {
    name: 'resourceConnectionId',
    type: {
      kind: 'string'
    },
    nullable: !0
  }]
};
let kY = {
  name: _$$Y.ResourceConnectedUser,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'resourceConnectionId',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }]
};
let kq = {
  name: _$$Y.ResourceConnectedUserWithPlan,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'string'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'user',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    filter: ['id', '=', createParentRef('userId')],
    nullable: !0
  }, {
    name: 'planParentId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'planName',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'planImgUrl',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'level',
    type: {
      kind: 'int'
    },
    nullable: !0
  }, {
    name: 'isFileRole',
    type: {
      kind: 'bool'
    },
    nullable: !0
  }]
};
let k$ = {
  name: _$$Y.SharingGroup,
  permissionRequired: !0,
  fields: [{
    name: 'level',
    type: {
      kind: 'int'
    }
  }, {
    name: 'resourceId',
    type: {
      kind: 'string'
    }
  }, {
    name: 'resourceType',
    type: {
      kind: 'string'
    }
  }, {
    name: 'groupType',
    type: {
      kind: 'string'
    }
  }, {
    name: 'groupId',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'resourceConnection',
    type: {
      kind: 'object',
      name: _$$Y.ResourceConnection
    },
    filter: ['id', '=', createParentRef('groupId')],
    nullable: !0,
    expectedMaxCount: 200,
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'libraryKeyToFile',
    type: {
      kind: 'object',
      name: _$$Y.LibraryKeyToFile
    },
    filter: ['fileKey', '=', createParentRef('resourceId')],
    nullable: !0,
    bannedFromViews: !0
  }, {
    name: 'libraryKey',
    type: {
      kind: 'string'
    },
    computed: !0,
    nullable: !0,
    dependencies: {
      libraryKeyToFile: {
        libraryKey: NULL_FIELD_REF
      }
    }
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      libraryKeyToFile: {
        _file: {
          canAccessLibrary: [{
            userId: createFieldRef('userId')
          }, NULL_FIELD_REF]
        }
      }
    }
  }]
};
let kZ = {
  name: _$$Y.FileCompositeSharingGroup,
  permissionRequired: !1,
  computed: !0,
  fields: [{
    name: 'id',
    type: {
      kind: 'string'
    }
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    },
    bannedFromViews: !0
  }, {
    name: 'maxLevel',
    type: {
      kind: 'int'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }]
};
let kX = {
  name: _$$Y.ResourceConnectionSharingGroupUser,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'string'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'userPublic',
    type: {
      kind: 'object',
      name: _$$Y.UserPublic
    },
    filter: ['id', '=', createParentRef('userId')],
    nullable: !0
  }, {
    name: 'planParentId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'planType',
    type: {
      kind: 'enum',
      name: 'PlanType'
    },
    nullable: !0
  }, {
    name: 'planName',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'planImgUrl',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'resourceConnectionId',
    type: {
      kind: 'string'
    }
  }, {
    name: 'sharingGroupId',
    type: {
      kind: 'string'
    }
  }, {
    name: 'level',
    type: {
      kind: 'int'
    }
  }]
};
let kQ = {
  name: _$$Y.ExpSlidesStarterTeamLimits,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'string'
    }
  }, {
    name: 'isSlideCountWrite',
    type: {
      kind: 'bool'
    },
    typechecked: !1
  }, {
    name: 'isSlideRestrictionOn',
    type: {
      kind: 'bool'
    },
    typechecked: !1
  }, {
    name: 'isSlideCountRead',
    type: {
      kind: 'bool'
    },
    typechecked: !1
  }, {
    name: 'isRepairCountOn',
    type: {
      kind: 'bool'
    },
    typechecked: !1
  }, {
    name: 'isFrontendOn',
    type: {
      kind: 'bool'
    },
    typechecked: !1
  }, {
    name: 'isLivegraphRestrictionOn',
    type: {
      kind: 'bool'
    },
    typechecked: !1
  }]
};
let kJ = {
  name: _$$Y.ExpStarterGlobalFileLimitOnTeam,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'string'
    }
  }, {
    name: 'isGlobalFileLimitOn',
    type: {
      kind: 'bool'
    },
    typechecked: !1
  }, {
    name: 'grandfatherDate',
    type: {
      kind: 'string'
    },
    typechecked: !1
  }]
};
let k0 = {
  name: _$$Y.GraftingUpdateSloData,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'key',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }]
};
let k1 = {
  name: _$$Y.LitmusProject,
  permissionRequired: !0,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'planId',
    type: {
      kind: 'bigint'
    },
    nullable: !0,
    bannedFromViews: !0
  }, {
    name: 'planType',
    type: {
      kind: 'enum',
      name: 'PlanType'
    },
    nullable: !0,
    bannedFromViews: !0
  }, {
    name: 'githubRepositoryId',
    type: {
      kind: 'uuid'
    },
    nullable: !0,
    bannedFromViews: !0
  }, {
    name: 'githubRepository',
    type: {
      kind: 'object',
      name: _$$Y.GithubRepository
    },
    filter: ['id', '=', createParentRef('githubRepositoryId')],
    expectedMaxCount: 1,
    nullable: !0
  }, {
    name: 'name',
    type: {
      kind: 'string'
    }
  }, {
    name: 'comparisons',
    type: {
      kind: 'objects',
      name: _$$Y.LitmusComparison
    },
    filter: ['litmusProjectId', '=', createParentRef('id')],
    orderBy: [['createdAt', 'DESC']],
    expectedMaxCount: 100,
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'activeComparisons',
    type: {
      kind: 'objects',
      name: _$$Y.LitmusComparison
    },
    filter: {
      and: [['litmusProjectId', '=', createParentRef('id')], ['archivedAt', '=', null]]
    },
    orderBy: [['createdAt', 'DESC']],
    expectedMaxCount: 100,
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'builds',
    type: {
      kind: 'objects',
      name: _$$Y.LitmusBuild
    },
    filter: ['litmusProjectId', '=', createParentRef('id')],
    orderBy: [['createdAt', 'DESC']],
    expectedMaxCount: 100
  }, {
    name: 'currentUser',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    bannedFromViews: !0,
    filter: ['id', '=', createFieldRef('userId')]
  }, {
    name: '_orgUser',
    type: {
      kind: 'object',
      name: _$$Y.OrgUser
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    bannedFromViews: !0,
    filter: {
      and: [['userId', '=', createFieldRef('userId')], ['orgId', '=', createParentRef('planId')]]
    }
  }, {
    name: '_teamUser',
    type: {
      kind: 'object',
      name: _$$Y.TeamUser
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    nullable: !0,
    bannedFromViews: !0,
    filter: {
      and: [['userId', '=', createFieldRef('userId')], ['teamId', '=', createParentRef('planId')]]
    }
  }, {
    name: '_org',
    type: {
      kind: 'object',
      name: _$$Y.Org
    },
    nullable: !0,
    bannedFromViews: !0,
    filter: ['id', '=', createParentRef('planId')]
  }, {
    name: '_team',
    type: {
      kind: 'object',
      name: _$$Y.Team
    },
    nullable: !0,
    bannedFromViews: !0,
    filter: ['id', '=', createParentRef('planId')]
  }, l4, l_, ae, at]
};
let k2 = {
  name: _$$Y.LitmusComparison,
  permissionRequired: !0,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'status',
    type: {
      kind: 'enum',
      name: 'LitmusComparisonStatus'
    }
  }, {
    name: 'statusReason',
    type: {
      kind: 'enum',
      name: 'LitmusComparisonStatusReason'
    },
    nullable: !0,
    bannedFromViews: !0
  }, {
    name: 'litmusProjectId',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'completedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'name',
    type: {
      kind: 'string'
    }
  }, {
    name: 'litmusPullRequestId',
    type: {
      kind: 'uuid'
    },
    bannedFromViews: !0,
    nullable: !0
  }, {
    name: 'baseBuildId',
    type: {
      kind: 'uuid'
    },
    bannedFromViews: !0
  }, {
    name: 'headBuildId',
    type: {
      kind: 'uuid'
    },
    bannedFromViews: !0
  }, {
    name: 'litmusProject',
    type: {
      kind: 'object',
      name: _$$Y.LitmusProject
    },
    filter: ['id', '=', createParentRef('litmusProjectId')],
    checkCanRead: {
      fieldName: 'canView',
      userId: createSessionRef('userId')
    },
    expectedMaxCount: 1
  }, {
    name: 'baseBuild',
    type: {
      kind: 'object',
      name: _$$Y.LitmusBuild
    },
    filter: ['id', '=', createParentRef('baseBuildId')]
  }, {
    name: 'headBuild',
    type: {
      kind: 'object',
      name: _$$Y.LitmusBuild
    },
    filter: ['id', '=', createParentRef('headBuildId')]
  }, {
    name: 'results',
    type: {
      kind: 'objects',
      name: _$$Y.LitmusComparisonResult
    },
    filter: ['litmusComparisonId', '=', createParentRef('id')],
    deprecated: {
      reason: 'Replaced by artifacts',
      date: '2024-12-19'
    },
    expectedMaxCount: 1e3
  }, {
    name: 'artifacts',
    type: {
      kind: 'objects',
      name: _$$Y.LitmusComparisonArtifact
    },
    filter: ['litmusComparisonId', '=', createParentRef('id')],
    expectedMaxCount: 1e3
  }, {
    name: 'artifact',
    type: {
      kind: 'object',
      name: _$$Y.LitmusComparisonArtifact
    },
    args: [{
      name: 'id',
      type: {
        kind: 'uuid'
      }
    }],
    filter: {
      and: [['litmusComparisonId', '=', createParentRef('id')], ['id', '=', createFieldRef('id')]]
    },
    nullable: !0
  }, {
    name: 'result',
    type: {
      kind: 'object',
      name: _$$Y.LitmusComparisonResult
    },
    deprecated: {
      reason: 'Replaced by artifact',
      date: '2024-12-19'
    },
    args: [{
      name: 'id',
      type: {
        kind: 'uuid'
      }
    }],
    filter: {
      and: [['litmusComparisonId', '=', createParentRef('id')], ['id', '=', createFieldRef('id')]]
    },
    nullable: !0
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    computed: !0,
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    dependencies: {
      litmusProject: [{}, {
        planId: NULL_FIELD_REF,
        planType: NULL_FIELD_REF,
        canView: [{
          userId: createFieldRef('userId')
        }, NULL_FIELD_REF]
      }]
    }
  }, {
    name: 'reviewCountAccepted',
    type: {
      kind: 'int'
    },
    computed: !0,
    dependencies: {
      artifacts: {
        id: NULL_FIELD_REF,
        aggregatedResult: NULL_FIELD_REF
      }
    }
  }, {
    name: 'reviewCountRejected',
    type: {
      kind: 'int'
    },
    computed: !0,
    dependencies: {
      artifacts: {
        id: NULL_FIELD_REF,
        aggregatedResult: NULL_FIELD_REF
      }
    }
  }, {
    name: 'reviewCountUnreviewed',
    type: {
      kind: 'int'
    },
    computed: !0,
    dependencies: {
      artifacts: {
        id: NULL_FIELD_REF,
        aggregatedResult: NULL_FIELD_REF
      }
    }
  }, {
    name: 'filteredResults',
    deprecated: {
      reason: 'Moved inside artifact',
      date: '2024-12-19'
    },
    args: [{
      name: 'status',
      type: {
        kind: 'enum',
        name: 'LitmusComparisonResultStatus'
      }
    }],
    type: {
      kind: 'objects',
      name: _$$Y.LitmusComparisonResult
    },
    filter: {
      and: [['litmusComparisonId', '=', createParentRef('id')], ['status', '=', createFieldRef('status')]]
    },
    expectedMaxCount: 1e3
  }, {
    name: 'aggregatedResult',
    type: {
      kind: 'enum',
      name: 'LitmusComparisonAggregatedResult'
    }
  }, {
    name: 'pr',
    type: {
      kind: 'object',
      name: _$$Y.LitmusPullRequest
    },
    filter: ['id', '=', createParentRef('litmusPullRequestId')],
    nullable: !0
  }, {
    name: 'changesCountUpdated',
    type: {
      kind: 'int'
    },
    computed: !0,
    dependencies: {
      artifacts: {
        id: NULL_FIELD_REF,
        headArtifactId: NULL_FIELD_REF,
        baseArtifactId: NULL_FIELD_REF
      }
    }
  }, {
    name: 'changesCountRemoved',
    type: {
      kind: 'int'
    },
    computed: !0,
    dependencies: {
      artifacts: {
        id: NULL_FIELD_REF,
        headArtifactId: NULL_FIELD_REF,
        baseArtifactId: NULL_FIELD_REF
      }
    }
  }, {
    name: 'changesCountAdded',
    type: {
      kind: 'int'
    },
    computed: !0,
    dependencies: {
      artifacts: {
        id: NULL_FIELD_REF,
        headArtifactId: NULL_FIELD_REF,
        baseArtifactId: NULL_FIELD_REF
      }
    }
  }, {
    name: 'statusReasonFiltered',
    type: {
      kind: 'enum',
      name: 'LitmusComparisonStatusReason'
    },
    computed: !0,
    nullable: !0,
    dependencies: {
      statusReason: NULL_FIELD_REF
    }
  }, {
    name: 'comments',
    type: {
      kind: 'objects',
      name: _$$Y.LitmusComment
    },
    orderBy: [['createdAt', 'ASC']],
    expectedMaxCount: 1e3,
    filter: {
      and: [['deletedAt', '=', null], {
        or: [['litmusComparisonId', '=', createParentRef('id')], ['litmusPullRequestId', '=', createParentRef('litmusPullRequestId')]]
      }]
    }
  }, {
    name: 'commentsTotal',
    type: {
      kind: 'int'
    },
    computed: !0,
    dependencies: {
      comments: {
        id: NULL_FIELD_REF,
        litmusComparisonId: NULL_FIELD_REF,
        parentId: NULL_FIELD_REF,
        resolvedAt: NULL_FIELD_REF
      }
    }
  }, {
    name: 'archivedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }]
};
let k5 = {
  name: _$$Y.LitmusComparisonResult,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'status',
    type: {
      kind: 'enum',
      name: 'LitmusComparisonResultStatus'
    }
  }, {
    name: 'baseVariantId',
    type: {
      kind: 'uuid'
    },
    bannedFromViews: !0,
    nullable: !0
  }, {
    name: 'headVariantId',
    type: {
      kind: 'uuid'
    },
    bannedFromViews: !0,
    nullable: !0
  }, {
    name: 'litmusComparisonId',
    type: {
      kind: 'uuid'
    },
    bannedFromViews: !0
  }, {
    name: 'litmusComparisonArtifactId',
    type: {
      kind: 'uuid'
    },
    bannedFromViews: !0
  }, {
    name: 'litmusDifferenceId',
    type: {
      kind: 'uuid'
    },
    bannedFromViews: !0,
    nullable: !0
  }, {
    name: 'baseVariant',
    type: {
      kind: 'object',
      name: _$$Y.LitmusArtifactVariant
    },
    filter: ['id', '=', createParentRef('baseVariantId')],
    expectedMaxCount: 1,
    nullable: !0
  }, {
    name: 'headVariant',
    type: {
      kind: 'object',
      name: _$$Y.LitmusArtifactVariant
    },
    filter: ['id', '=', createParentRef('headVariantId')],
    expectedMaxCount: 1,
    nullable: !0
  }, {
    name: 'aggregatedResult',
    type: {
      kind: 'enum',
      name: 'LitmusComparisonAggregatedResult'
    }
  }, {
    name: 'headArtifactId',
    type: {
      kind: 'uuid'
    },
    bannedFromViews: !0,
    nullable: !0
  }, {
    name: 'otherVariantComparisons',
    args: [{
      name: 'status',
      type: {
        kind: 'enum',
        name: 'LitmusComparisonResultStatus'
      }
    }],
    type: {
      kind: 'objects',
      name: _$$Y.LitmusComparisonResult
    },
    filter: {
      and: [['headArtifactId', '=', createParentRef('headArtifactId')], ['id', '<>', createParentRef('id')], ['status', '=', createFieldRef('status')]]
    },
    expectedMaxCount: 100
  }, {
    name: 'difference',
    type: {
      kind: 'object',
      name: _$$Y.LitmusDifference
    },
    filter: ['id', '=', createParentRef('litmusDifferenceId')],
    nullable: !0,
    expectedMaxCount: 1
  }]
};
let k4 = {
  name: _$$Y.LitmusComparisonReview,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'litmusComparisonArtifactId',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'litmusComparisonId',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'conclusion',
    type: {
      kind: 'enum',
      name: 'LitmusComparisonReviewConclusion'
    }
  }, {
    name: 'reviewedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'reviewerId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'reviewer',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    filter: ['id', '=', createParentRef('reviewerId')]
  }]
};
let k3 = {
  name: _$$Y.LitmusArtifact,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'status',
    type: {
      kind: 'enum',
      name: 'LitmusArtifactStatus'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'path',
    type: {
      kind: 'string'
    }
  }, {
    name: 'litmusBuildResultId',
    type: {
      kind: 'uuid'
    },
    bannedFromViews: !0
  }, {
    name: 'litmusProjectId',
    type: {
      kind: 'uuid'
    },
    bannedFromViews: !0,
    nullable: !0
  }, {
    name: 'variants',
    type: {
      kind: 'objects',
      name: _$$Y.LitmusArtifactVariant
    },
    filter: {
      and: [['litmusProjectId', '=', createParentRef('litmusProjectId')], ['litmusArtifactId', '=', createParentRef('id')]]
    },
    expectedMaxCount: 100
  }, {
    name: 'designConnections',
    type: {
      kind: 'objects',
      name: _$$Y.LitmusDesignConnection
    },
    filter: {
      and: [['litmusProjectId', '=', createParentRef('litmusProjectId')], ['path', '=', createParentRef('path')]]
    },
    expectedMaxCount: 10,
    nullable: !0
  }]
};
let k6 = {
  name: _$$Y.LitmusArtifactVariant,
  permissionRequired: !1,
  fields: [{
    name: 'litmusProjectId',
    type: {
      kind: 'uuid'
    },
    bannedFromViews: !0
  }, {
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'width',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'height',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'assetLocation',
    type: {
      kind: 'string'
    },
    bannedFromViews: !0
  }, {
    name: 'variant',
    type: {
      kind: 'list',
      ofType: {
        kind: 'string'
      }
    }
  }, {
    name: 'litmusArtifactId',
    type: {
      kind: 'uuid'
    },
    bannedFromViews: !0
  }, {
    name: 'artifact',
    type: {
      kind: 'object',
      name: _$$Y.LitmusArtifact
    },
    filter: {
      and: [['litmusProjectId', '=', createParentRef('litmusProjectId')], ['id', '=', createParentRef('litmusArtifactId')]]
    }
  }, {
    name: 'url',
    type: {
      kind: 'string'
    },
    computed: !0,
    nullable: !0,
    dependencies: {
      id: NULL_FIELD_REF,
      assetLocation: NULL_FIELD_REF
    }
  }]
};
let k7 = {
  name: _$$Y.LitmusBuild,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'status',
    type: {
      kind: 'enum',
      name: 'LitmusBuildStatus'
    }
  }, {
    name: 'litmusProjectId',
    type: {
      kind: 'uuid'
    },
    bannedFromViews: !0
  }, {
    name: 'litmusBuildResultId',
    type: {
      kind: 'uuid'
    },
    nullable: !0,
    bannedFromViews: !0
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'completedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'commitSha',
    type: {
      kind: 'string'
    }
  }, {
    name: 'commitRef',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'buildResult',
    type: {
      kind: 'object',
      name: _$$Y.LitmusBuildResult
    },
    filter: {
      and: [['litmusProjectId', '=', createParentRef('litmusProjectId')], ['id', '=', createParentRef('litmusBuildResultId')]]
    }
  }]
};
let k8 = {
  name: _$$Y.LitmusPullRequest,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'litmusProjectId',
    type: {
      kind: 'uuid'
    },
    bannedFromViews: !0
  }, {
    name: 'githubUserId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'githubUsername',
    type: {
      kind: 'string'
    }
  }, {
    name: 'githubPrNumber',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'title',
    type: {
      kind: 'string'
    }
  }, {
    name: 'baseRef',
    type: {
      kind: 'string'
    }
  }, {
    name: 'baseSha',
    type: {
      kind: 'string'
    }
  }, {
    name: 'headRef',
    type: {
      kind: 'string'
    }
  }, {
    name: 'headSha',
    type: {
      kind: 'string'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }]
};
let k9 = {
  name: _$$Y.LitmusComment,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'litmusProjectId',
    type: {
      kind: 'uuid'
    },
    bannedFromViews: !0
  }, {
    name: 'litmusPullRequestId',
    type: {
      kind: 'uuid'
    },
    bannedFromViews: !0
  }, {
    name: 'litmusComparisonId',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'parentId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'messageMeta',
    type: {
      kind: 'objects',
      name: _$$Y.CommentMessageMeta
    },
    embedded: !0
  }, {
    name: 'clientMeta',
    type: {
      kind: 'object',
      name: _$$Y.LitmusCommentClientMeta
    },
    embedded: !0
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    },
    bannedFromViews: !0
  }, {
    name: 'deletedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'resolvedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'parent',
    type: {
      kind: 'object',
      name: _$$Y.LitmusComment
    },
    filter: ['id', '=', createParentRef('parentId')],
    nullable: !0
  }, {
    name: 'user',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    filter: ['id', '=', createParentRef('userId')]
  }]
};
let Re = {
  name: _$$Y.LitmusCommentClientMeta,
  permissionRequired: !1,
  embedded: !0,
  fields: [{
    name: 'pageId',
    type: {
      kind: 'string'
    }
  }, {
    name: 'pageType',
    type: {
      kind: 'enum',
      name: 'LitmusCommentClientMetaPageType'
    }
  }, {
    name: 'x',
    type: {
      kind: 'int'
    }
  }, {
    name: 'y',
    type: {
      kind: 'int'
    }
  }]
};
let Rt = {
  name: _$$Y.GithubRepository,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'owner',
    type: {
      kind: 'string'
    }
  }, {
    name: 'name',
    type: {
      kind: 'string'
    }
  }]
};
let Ri = {
  name: _$$Y.FontFile,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'deletedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'teamId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    },
    nullable: !0,
    bannedFromViews: !0
  }, {
    name: 'file',
    type: {
      kind: 'object',
      name: _$$Y.File
    },
    filter: ['key', '=', createParentRef('fileKey')],
    nullable: !0,
    checkCanRead: {
      fieldName: 'canReadV3',
      userId: createSessionRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId')
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'sha1',
    type: {
      kind: 'string'
    }
  }, {
    name: 's3Key',
    type: {
      kind: 'string'
    }
  }, {
    name: 'postscriptName',
    type: {
      kind: 'string'
    }
  }, {
    name: 'family',
    type: {
      kind: 'string'
    }
  }, {
    name: 'style',
    type: {
      kind: 'string'
    }
  }, {
    name: 'weight',
    type: {
      kind: 'int'
    }
  }, {
    name: 'italic',
    type: {
      kind: 'bool'
    }
  }, {
    name: 'stretch',
    type: {
      kind: 'int'
    }
  }, {
    name: 'version',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'samplePath',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'sampleUrl',
    type: {
      kind: 'string'
    },
    computed: !0,
    nullable: !0,
    dependencies: {
      samplePath: NULL_FIELD_REF
    }
  }, {
    name: 'previewUrl',
    type: {
      kind: 'string'
    },
    computed: !0,
    nullable: !0,
    dependencies: {
      sha1: NULL_FIELD_REF
    }
  }, {
    name: 'variationAxes',
    type: {
      kind: 'objects',
      name: _$$Y.VariationAxis
    },
    nullable: !0,
    embedded: !0,
    expectedMaxCount: 10
  }, {
    name: 'variationInstances',
    type: {
      kind: 'objects',
      name: _$$Y.VariationInstance
    },
    nullable: !0,
    embedded: !0,
    expectedMaxCount: 10
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'sessionId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }, {
      name: 'anonymousUserId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }, {
      name: 'fileKey',
      type: {
        kind: 'string'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      file: {
        id: NULL_FIELD_REF,
        canAccess: [{
          userId: createViewRef('userId'),
          sessionId: createViewRef('sessionId'),
          anonymousUserId: createViewRef('anonymousUserId'),
          linkAccessOverrideKey: createViewRef('fileKey')
        }, NULL_FIELD_REF]
      }
    }
  }]
};
let Rn = {
  name: _$$Y.VariationAxis,
  permissionRequired: !1,
  embedded: !0,
  fields: [{
    name: 'tag',
    type: {
      kind: 'string'
    }
  }, {
    name: 'name',
    type: {
      kind: 'string'
    }
  }, {
    name: 'min',
    type: {
      kind: 'int'
    },
    typechecked: !1
  }, {
    name: 'max',
    type: {
      kind: 'int'
    }
  }, {
    name: 'default',
    type: {
      kind: 'int'
    },
    typechecked: !1
  }]
};
let Rr = {
  name: _$$Y.VariationInstance,
  permissionRequired: !1,
  embedded: !0,
  fields: [{
    name: 'name',
    type: {
      kind: 'string'
    }
  }, {
    name: 'postscriptName',
    type: {
      kind: 'string'
    }
  }, {
    name: 'axes',
    type: {
      kind: 'map',
      valueType: {
        kind: 'int'
      }
    },
    typechecked: !1
  }]
};
let Ra = {
  name: _$$Y.AssetForPublish,
  permissionRequired: !1,
  embedded: !0,
  fields: [{
    name: 'type',
    type: {
      kind: 'string'
    }
  }, {
    name: 'hash',
    type: {
      kind: 'string'
    }
  }, {
    name: 'height',
    type: {
      kind: 'int'
    }
  }, {
    name: 'width',
    type: {
      kind: 'int'
    }
  }]
};
let Rs = {
  name: _$$Y.CollectionFieldSchema,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'stableId',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'name',
    type: {
      kind: 'string'
    }
  }, {
    name: 'required',
    type: {
      kind: 'bool'
    },
    nullable: !0
  }, {
    name: 'fieldType',
    type: {
      kind: 'string'
    }
  }, {
    name: 'properties',
    type: {
      kind: 'map',
      valueType: {
        kind: 'string'
      }
    }
  }, {
    name: 'position',
    type: {
      kind: 'string'
    }
  }, {
    name: 'version',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'collectionId',
    type: {
      kind: 'uuid'
    }
  }]
};
let Ro = {
  name: _$$Y.CollectionItemField,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'itemId',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'fieldSchemaId',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'value',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'assetsForPublish',
    type: {
      kind: 'objects',
      name: _$$Y.AssetForPublish
    },
    embedded: !0,
    nullable: !0
  }, {
    name: 'version',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'fieldSchema',
    type: {
      kind: 'object',
      name: _$$Y.CollectionFieldSchema
    },
    filter: ['id', '=', createParentRef('fieldSchemaId')]
  }]
};
let Rl = {
  name: _$$Y.CollectionItemV2,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'stableId',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'collectionId',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'status',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'statusUpdatedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'lastPublishedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'position',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'fields',
    type: {
      kind: 'objects',
      name: _$$Y.CollectionItemField
    },
    filter: ['itemId', '=', createParentRef('id')],
    nullable: !0,
    expectedMaxCount: 100,
    deprecated: {
      date: '2025-07-09',
      reason: 'Use _allFields_ instead. The name _fields_ collides with the LiveGraph reserved keyword _fields_ and causes confusion and compilation errors.'
    }
  }, {
    name: 'allFields',
    type: {
      kind: 'objects',
      name: _$$Y.CollectionItemField
    },
    filter: ['itemId', '=', createParentRef('id')],
    expectedMaxCount: 100
  }]
};
let Rd = {
  name: _$$Y.CollectionV2,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'stableId',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'name',
    type: {
      kind: 'string'
    }
  }, {
    name: 'description',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'orgId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'teamId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'fieldSchemas',
    type: {
      kind: 'objects',
      name: _$$Y.CollectionFieldSchema
    },
    filter: ['collectionId', '=', createParentRef('id')],
    nullable: !0,
    expectedMaxCount: 100
  }, {
    name: 'items',
    type: {
      kind: 'objects',
      name: _$$Y.CollectionItemV2
    },
    filter: ['collectionId', '=', createParentRef('id')],
    expectedMaxCount: 200,
    nullable: !0
  }, {
    name: 'oneItem',
    args: [{
      name: 'itemStableId',
      type: {
        kind: 'uuid'
      }
    }],
    type: {
      kind: 'object',
      name: _$$Y.CollectionItemV2
    },
    filter: {
      and: [['collectionId', '=', createParentRef('id')], ['stableId', '=', createFieldRef('itemStableId')]]
    },
    nullable: !0
  }, {
    name: 'itemCount',
    type: {
      kind: 'bigint'
    },
    computed: !0,
    nullable: !0,
    dependencies: {
      items: {
        id: NULL_FIELD_REF
      }
    }
  }]
};
let Rc = {
  name: _$$Y.AssignedBillableProductSeatCount,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'string'
    }
  }, {
    name: 'billableProductKey',
    type: {
      kind: 'enum',
      name: 'SeatTypeKey'
    }
  }, {
    name: 'count',
    type: {
      kind: 'bigint'
    }
  }]
};
let Ru = {
  name: _$$Y.AvailableBillableProductSeatCount,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'string'
    }
  }, {
    name: 'billableProductKey',
    type: {
      kind: 'enum',
      name: 'SeatTypeKey'
    }
  }, {
    name: 'count',
    type: {
      kind: 'bigint'
    }
  }]
};
let Rp = {
  name: _$$Y.AssignedBillableProductSeatCountV2,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'string'
    }
  }, {
    name: 'billableProductKey',
    type: {
      kind: 'enum',
      name: 'SeatTypeKey'
    }
  }, {
    name: 'billingInterval',
    type: {
      kind: 'enum',
      name: 'BillingInterval'
    },
    nullable: !0
  }, {
    name: 'count',
    type: {
      kind: 'bigint'
    }
  }]
};
let Rm = {
  name: _$$Y.AvailableBillableProductSeatCountV2,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'string'
    }
  }, {
    name: 'billableProductKey',
    type: {
      kind: 'enum',
      name: 'SeatTypeKey'
    }
  }, {
    name: 'billingInterval',
    type: {
      kind: 'enum',
      name: 'BillingInterval'
    },
    nullable: !0
  }, {
    name: 'count',
    type: {
      kind: 'bigint'
    }
  }]
};
let Rh = {
  name: _$$Y.LicenseGroupAssignedBillableProductSeatCount,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'string'
    }
  }, {
    name: 'billableProductKey',
    type: {
      kind: 'enum',
      name: 'SeatTypeKey'
    }
  }, {
    name: 'count',
    type: {
      kind: 'bigint'
    }
  }]
};
let Rg = {
  name: _$$Y.FileCmsCollection,
  permissionRequired: !0,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'collectionId',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'collectionV2',
    type: {
      kind: 'object',
      name: _$$Y.CollectionV2
    },
    filter: ['id', '=', createParentRef('collectionId')],
    nullable: !0,
    expectedMaxCount: 100
  }, {
    name: 'file',
    type: {
      kind: 'object',
      name: _$$Y.File
    },
    filter: ['key', '=', createParentRef('fileKey')],
    checkCanRead: {
      fieldName: 'canReadV3',
      userId: createSessionRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId')
    }
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    computed: !0,
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'sessionId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }, {
      name: 'anonymousUserId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }],
    dependencies: {
      file: {
        canReadV3: [{
          userId: createFieldRef('userId'),
          sessionId: createFieldRef('sessionId'),
          anonymousUserId: createFieldRef('anonymousUserId')
        }, NULL_FIELD_REF]
      }
    }
  }]
};
let Rf = {
  name: _$$Y.TrashedResource,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    nullable: !0,
    bannedFromViews: !0,
    type: {
      kind: 'string'
    }
  }, {
    name: 'fileId',
    nullable: !0,
    bannedFromViews: !0,
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'file',
    type: {
      kind: 'object',
      name: _$$Y.File
    },
    filter: {
      and: [['_id', '=', createParentRef('fileId')], ['_id', '<>', null], ['fileRepoId', '=', null]]
    },
    nullable: !0,
    checkCanRead: {
      fieldName: 'canAccess',
      userId: createSessionRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId'),
      linkAccessOverrideKey: null
    }
  }, {
    name: 'repoId',
    nullable: !0,
    bannedFromViews: !0,
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'repo',
    type: {
      kind: 'object',
      name: _$$Y.Repo
    },
    filter: {
      and: [['id', '=', createParentRef('repoId')], ['id', '<>', null]]
    },
    nullable: !0,
    checkCanRead: {
      fieldName: 'canViewV2',
      userId: createSessionRef('userId'),
      sessionId: createSessionRef('sessionId')
    }
  }]
};
let R_ = {
  name: _$$Y.LitmusBuildResult,
  permissionRequired: !1,
  fields: [{
    name: 'litmusProjectId',
    type: {
      kind: 'uuid'
    },
    bannedFromViews: !0
  }, {
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'buildHash',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'artifacts',
    type: {
      kind: 'objects',
      name: _$$Y.LitmusArtifact
    },
    filter: {
      and: [['litmusProjectId', '=', createParentRef('litmusProjectId')], ['litmusBuildResultId', '=', createParentRef('id')]]
    },
    expectedMaxCount: 1e3
  }, {
    name: 'artifact',
    type: {
      kind: 'object',
      name: _$$Y.LitmusArtifact
    },
    args: [{
      name: 'id',
      type: {
        kind: 'uuid'
      }
    }],
    filter: ['id', '=', createFieldRef('id')],
    nullable: !0
  }]
};
let RA = {
  name: _$$Y.PeriodicUpdate,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'string'
    }
  }, {
    name: 'refreshValue',
    type: {
      kind: 'string'
    }
  }]
};
let Ry = {
  computed: !0,
  name: _$$Y.ComputedIDPUser,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'orgSamlConfigId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'userName',
    type: {
      kind: 'string'
    }
  }, {
    name: 'idpUser',
    type: {
      kind: 'object',
      name: _$$Y.IDPUser
    },
    nullable: !0,
    filter: {
      and: [['orgSamlId', '=', createParentRef('orgSamlConfigId')], ['userName', '=', createParentRef('userName')]]
    }
  }]
};
let Rb = {
  computed: !0,
  name: _$$Y.ComputedWorkspacePublicInfo,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'workspace',
    type: {
      kind: 'object',
      name: _$$Y.WorkspacePublicInfo
    },
    filter: ['id', '=', createParentRef('id')],
    nullable: !0
  }]
};
let Rv = {
  computed: !0,
  name: _$$Y.ComputedWorkspace,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'workspace',
    type: {
      kind: 'object',
      name: _$$Y.Workspace
    },
    filter: ['id', '=', createParentRef('id')],
    nullable: !0,
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }]
};
let RI = {
  name: _$$Y.LitmusComparisonArtifact,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'status',
    type: {
      kind: 'enum',
      name: 'LitmusComparisonStatus'
    }
  }, {
    name: 'litmusComparisonId',
    type: {
      kind: 'uuid'
    },
    bannedFromViews: !0
  }, {
    name: 'aggregatedResult',
    type: {
      kind: 'enum',
      name: 'LitmusComparisonAggregatedResult'
    }
  }, {
    name: 'headArtifactId',
    type: {
      kind: 'uuid'
    },
    bannedFromViews: !0,
    nullable: !0
  }, {
    name: 'baseArtifactId',
    type: {
      kind: 'uuid'
    },
    bannedFromViews: !0,
    nullable: !0
  }, {
    name: 'headArtifact',
    type: {
      kind: 'object',
      name: _$$Y.LitmusArtifact
    },
    filter: ['id', '=', createParentRef('headArtifactId')],
    nullable: !0
  }, {
    name: 'baseArtifact',
    type: {
      kind: 'object',
      name: _$$Y.LitmusArtifact
    },
    filter: ['id', '=', createParentRef('baseArtifactId')],
    nullable: !0
  }, {
    name: 'results',
    type: {
      kind: 'objects',
      name: _$$Y.LitmusComparisonResult
    },
    filter: ['litmusComparisonArtifactId', '=', createParentRef('id')],
    expectedMaxCount: 1e3
  }, {
    name: 'result',
    type: {
      kind: 'object',
      name: _$$Y.LitmusComparisonResult
    },
    args: [{
      name: 'id',
      type: {
        kind: 'uuid'
      }
    }],
    filter: {
      and: [['id', '=', createFieldRef('id')], ['litmusComparisonArtifactId', '=', createParentRef('id')]]
    }
  }, {
    name: 'filteredResults',
    args: [{
      name: 'status',
      type: {
        kind: 'enum',
        name: 'LitmusComparisonResultStatus'
      }
    }],
    type: {
      kind: 'objects',
      name: _$$Y.LitmusComparisonResult
    },
    filter: {
      and: [['litmusComparisonArtifactId', '=', createParentRef('id')], ['status', '=', createFieldRef('status')]]
    },
    expectedMaxCount: 1e3
  }, {
    name: 'availableResults',
    type: {
      kind: 'objects',
      name: _$$Y.LitmusComparisonResult
    },
    filter: {
      and: [['litmusComparisonArtifactId', '=', createParentRef('id')], ['status', '<>', 'not_started']]
    },
    expectedMaxCount: 1e3
  }, {
    name: 'reviews',
    type: {
      kind: 'objects',
      name: _$$Y.LitmusComparisonReview
    },
    filter: ['litmusComparisonArtifactId', '=', createParentRef('id')],
    orderBy: [['reviewedAt', 'DESC']],
    expectedMaxCount: 100
  }, {
    name: 'comparison',
    type: {
      kind: 'object',
      name: _$$Y.LitmusComparison
    },
    filter: ['id', '=', createParentRef('litmusComparisonId')],
    bannedFromViews: !0
  }, {
    name: 'commentsTotal',
    type: {
      kind: 'int'
    },
    computed: !0,
    dependencies: {
      headArtifact: {
        path: NULL_FIELD_REF
      },
      baseArtifact: {
        path: NULL_FIELD_REF
      },
      comparison: {
        comments: {
          litmusComparisonId: NULL_FIELD_REF,
          parentId: NULL_FIELD_REF,
          resolvedAt: NULL_FIELD_REF,
          clientMeta: {
            pageId: NULL_FIELD_REF,
            pageType: NULL_FIELD_REF
          }
        }
      }
    }
  }]
};
let RE = {
  name: _$$Y.ActiveOrgBillingPeriod,
  computed: !0,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'orgId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'startAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'effectiveEndAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'isEla',
    type: {
      kind: 'bool'
    }
  }]
};
let Rx = {
  name: _$$Y.PermissionEvaluationResult,
  permissionRequired: !1,
  computed: !0,
  embedded: !0,
  fields: [{
    name: 'result',
    type: {
      kind: 'bool'
    }
  }, {
    name: 'publicDenyReasons',
    type: {
      kind: 'list',
      ofType: {
        kind: 'enum',
        name: 'PublicDenyReason'
      }
    }
  }]
};
let RS = {
  name: _$$Y.LitmusDifference,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'litmusProjectId',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'pixelDifferenceCount',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'assetHash',
    type: {
      kind: 'string'
    }
  }, {
    name: 'imageUrl',
    type: {
      kind: 'string'
    },
    computed: !0,
    nullable: !0,
    dependencies: {
      id: NULL_FIELD_REF,
      litmusProjectId: NULL_FIELD_REF,
      assetHash: NULL_FIELD_REF
    }
  }]
};
let Rw = {
  name: _$$Y.LitmusDesignConnection,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'litmusProjectId',
    type: {
      kind: 'uuid'
    },
    bannedFromViews: !0
  }, {
    name: 'path',
    type: {
      kind: 'string'
    }
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    },
    bannedFromViews: !0
  }, {
    name: 'nodeId',
    type: {
      kind: 'string'
    }
  }, {
    name: 'properties',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'file',
    type: {
      kind: 'object',
      name: _$$Y.File
    },
    filter: ['id', '=', createParentRef('fileKey')],
    checkCanRead: {
      fieldName: 'canReadV3',
      userId: createSessionRef('userId'),
      sessionId: createSessionRef('sessionId'),
      anonymousUserId: createSessionRef('anonymousUserId')
    }
  }]
};
let RC = {
  name: _$$Y.CodePresetMetadata,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    },
    bannedFromViews: !0
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'libraryKey',
    type: {
      kind: 'string'
    }
  }, {
    name: 'assetId',
    type: {
      kind: 'uuid'
    },
    bannedFromViews: !0
  }, {
    name: 'presetName',
    type: {
      kind: 'string'
    }
  }, {
    name: 'presetIcon',
    type: {
      kind: 'enum',
      name: 'CodePresetIcon'
    },
    nullable: !0
  }, {
    name: 'applicableNodeTypes',
    type: {
      kind: 'list',
      ofType: {
        kind: 'enum',
        name: 'CodePresetNodeType'
      }
    },
    nullable: !0
  }, {
    name: 'category',
    type: {
      kind: 'enum',
      name: 'CodePresetCategory'
    },
    nullable: !0
  }]
};
let RT = {
  name: _$$Y.EditorTypeLicenseTypeTuple,
  permissionRequired: !1,
  embedded: !0,
  fields: [{
    name: 'fromValue',
    type: {
      kind: 'enum',
      name: 'EditorType'
    }
  }, {
    name: 'toValue',
    type: {
      kind: 'enum',
      name: 'LicenseType'
    }
  }]
};
let Rk = {
  name: _$$Y.MonetizationConfig,
  permissionRequired: !1,
  embedded: !0,
  fields: [{
    name: 'id',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'editorTypeToLicenseTypeMap',
    type: {
      kind: 'objects',
      name: _$$Y.EditorTypeLicenseTypeTuple
    },
    embedded: !0
  }]
};
let RR = {
  name: _$$Y.ExpOneClickAskToEditTeamId,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'string'
    }
  }, {
    name: 'treatment',
    type: {
      kind: 'string'
    }
  }]
};
let RN = {
  name: _$$Y.ExpOneClickAskToEditOrgId,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'string'
    }
  }, {
    name: 'treatment',
    type: {
      kind: 'string'
    }
  }]
};
let RP = {
  name: _$$Y.PersonalDraftToPlanDraftLocation,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'planParentId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'planParentType',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'fromDraftsFolderId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'toDraftsFolderId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'status',
    type: {
      kind: 'string'
    }
  }, {
    name: 'toDraftsFolder',
    type: {
      kind: 'object',
      name: _$$Y.Project
    },
    nullable: !0,
    filter: ['id', '=', createParentRef('toDraftsFolderId')],
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }]
};
let RO = {
  name: _$$Y.TeamTrackTags,
  permissionRequired: !1,
  embedded: !0,
  fields: [{
    name: 'is_auto_created_for_dtm_migration',
    type: {
      kind: 'bool'
    },
    nullable: !0
  }]
};
let RD = {
  name: _$$Y.ExpSocialProofExpansionOrgId,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'string'
    }
  }, {
    name: 'enabled',
    type: {
      kind: 'bool'
    }
  }]
};
let RL = {
  name: _$$Y.ExpSocialProofExpansionTeamId,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'string'
    }
  }, {
    name: 'enabled',
    type: {
      kind: 'bool'
    }
  }]
};
let RF = {
  name: _$$Y.AccountTypeRequestsFromPlan,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'request',
    type: {
      kind: 'object',
      name: _$$Y.AccountTypeRequest
    },
    filter: ['id', '=', createParentRef('id')],
    nullable: !0
  }, {
    name: 'user',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    filter: ['id', '=', createParentRef('userId')],
    nullable: !0
  }]
};
let RM = {
  name: _$$Y.OrgJoinedTeamResult,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    },
    bannedFromViews: !0
  }, {
    name: 'team',
    type: {
      kind: 'object',
      name: _$$Y.Team
    },
    filter: {
      and: [['id', '=', createParentRef('id')], ['deletedAt', '=', null]]
    },
    nullable: !0,
    checkCanRead: {
      userId: createSessionRef('userId')
    }
  }, {
    name: 'memberCount',
    type: {
      kind: 'int'
    }
  }]
};
let Rj = {
  name: _$$Y.OrgUnassignedTeamResult,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    },
    bannedFromViews: !0
  }, {
    name: 'team',
    type: {
      kind: 'object',
      name: _$$Y.Team
    },
    filter: {
      and: [['id', '=', createParentRef('id')], ['deletedAt', '=', null]]
    },
    nullable: !0,
    checkCanRead: {
      userId: createSessionRef('userId'),
      fieldName: 'canDiscover'
    }
  }, {
    name: 'memberCount',
    type: {
      kind: 'int'
    }
  }]
};
let RU = {
  name: _$$Y.OrgDiscoverableTeamResult,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'bigint'
    },
    bannedFromViews: !0
  }, {
    name: 'team',
    type: {
      kind: 'object',
      name: _$$Y.Team
    },
    filter: {
      and: [['id', '=', createParentRef('id')], ['deletedAt', '=', null]]
    },
    nullable: !0,
    checkCanRead: {
      userId: createSessionRef('userId'),
      fieldName: 'canDiscover'
    }
  }, {
    name: 'memberCount',
    type: {
      kind: 'int'
    }
  }]
};
let RB = {
  name: _$$Y.UserGroupResourcePermission,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'resourceId',
    type: {
      kind: 'string'
    }
  }, {
    name: 'resourceType',
    type: {
      kind: 'string'
    }
  }, {
    name: 'groupType',
    type: {
      kind: 'string'
    }
  }, {
    name: 'groupId',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'permission',
    type: {
      kind: 'string'
    }
  }, {
    name: '_userGroup',
    type: {
      kind: 'object',
      name: _$$Y.UserGroup
    },
    filter: ['id', '=', createParentRef('groupId')],
    bannedFromViews: !0
  }]
};
let RV = {
  name: _$$Y.PermissionsFromUserGroups,
  permissionRequired: !1,
  computed: !0,
  fields: [{
    name: 'id',
    type: {
      kind: 'string'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'string'
    }
  }, {
    name: 'resourceIdentifier',
    type: {
      kind: 'string'
    }
  }, {
    name: 'permissions',
    type: {
      kind: 'list',
      ofType: {
        kind: 'string'
      }
    }
  }]
};
let RG = {
  name: _$$Y.UserGroupMember,
  permissionRequired: !1,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'userGroupId',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'userId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'memberType',
    type: {
      kind: 'string'
    }
  }, {
    name: 'idpGroupId',
    type: {
      kind: 'uuid'
    },
    nullable: !0
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }]
};
let Rz = {
  name: _$$Y.UserGroup,
  permissionRequired: !0,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'name',
    type: {
      kind: 'string'
    }
  }, {
    name: 'description',
    type: {
      kind: 'string'
    },
    nullable: !0
  }, {
    name: 'planId',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'createdAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'deletedAt',
    type: {
      kind: 'datetime'
    },
    nullable: !0
  }, {
    name: 'createdByUserId',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'deletedByUserId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'currentUser',
    nullable: !0,
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    filter: ['id', '=', createFieldRef('userId')]
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    computed: !0,
    permissionName: 'USER_GROUP::CAN_VIEW',
    dependencies: _$$mv['USER_GROUP::CAN_VIEW']
  }, {
    name: 'currentUserGroupMember',
    type: {
      kind: 'object',
      name: _$$Y.UserGroupMember
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }],
    filter: {
      and: [['userGroupId', '=', createParentRef('id')], ['userId', '=', createFieldRef('userId')]]
    },
    nullable: !0
  }, ...P, sg, sf]
};
let RH = {
  name: _$$Y.SitePwdConfig,
  naturalKey: new Set(['siteMountId']),
  permissionRequired: !0,
  fields: [{
    name: 'id',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'siteMountId',
    type: {
      kind: 'uuid'
    }
  }, {
    name: 'setByUserId',
    type: {
      kind: 'bigint'
    },
    nullable: !0
  }, {
    name: 'updatedAt',
    type: {
      kind: 'datetime'
    }
  }, {
    name: 'setByUser',
    type: {
      kind: 'object',
      name: _$$Y.User
    },
    filter: ['id', '=', createParentRef('setByUserId')],
    nullable: !0
  }, {
    name: 'version',
    type: {
      kind: 'bigint'
    }
  }, {
    name: 'siteMount',
    type: {
      kind: 'object',
      name: _$$Y.SiteMount
    },
    filter: ['id', '=', createParentRef('siteMountId')],
    nullable: !0,
    bannedFromViews: !0
  }, {
    name: 'canRead',
    type: {
      kind: 'bool'
    },
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'sessionId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }, {
      name: 'anonymousUserId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }],
    computed: !0,
    dependencies: {
      siteMount: {
        file: {
          id: NULL_FIELD_REF,
          canEditV3: [{
            userId: createViewRef('userId'),
            sessionId: createViewRef('sessionId'),
            anonymousUserId: createViewRef('anonymousUserId')
          }, NULL_FIELD_REF]
        }
      }
    }
  }]
};
let RW = {
  name: _$$Y.SlotsFileEnablement,
  fields: [{
    name: 'id',
    type: {
      kind: 'string'
    }
  }, {
    name: 'fileKey',
    type: {
      kind: 'string'
    },
    bannedFromViews: !0
  }, {
    name: 'slotsEnabled',
    type: {
      kind: 'bool'
    }
  }],
  permissionRequired: !1
};
let RK = {
  name: _$$Y.SharedContainerSetting,
  permissionRequired: !1,
  computed: !0,
  fields: [{
    name: 'id',
    type: {
      kind: 'string'
    }
  }, {
    name: 'autogenPasswordControls',
    type: {
      kind: 'bool'
    }
  }]
};
let RY = {
  session: {
    args: [{
      name: 'userId',
      type: {
        kind: 'bigint'
      },
      nullable: !0
    }, {
      name: 'sessionId',
      type: {
        kind: 'string'
      },
      nullable: !0
    }]
  },
  views: {
    FileCanAccess: me,
    FileCanAccessDevModeEntryPoint: mt,
    FileCanAccessDevModeEntryPointWithReasons: mi,
    FileCanAccessFileThroughApi: mn,
    FileCanAccessFileThroughApiWithReasons: mr,
    FileCanAccessFragments: ma,
    FileCanAccessFragmentsWithReasons: ms,
    FileCanAccessFullCodeConnect: mo,
    FileCanAccessFullCodeConnectWithReasons: ml,
    FileCanAccessFullDevMode: md,
    FileCanAccessFullDevModeOrgPlus: mc,
    FileCanAccessFullDevModeOrgPlusWithReasons: mu,
    FileCanAccessFullDevModeWithReasons: mp,
    FileCanAccessLibrary: mm,
    FileCanAccessLibraryWithReasons: mh,
    FileCanAccessLinkAccessOverride: mg,
    FileCanAccessLinkAccessOverrideWithReasons: mf,
    FileCanAccessTextureMode: m_,
    FileCanAccessTextureModeWithReasons: mA,
    FileCanAccessWithReasons: my,
    FileCanAdmin: mb,
    FileCanAdminWithReasons: mv,
    FileCanBeMentionedInComment: mI,
    FileCanBeMentionedInCommentWithReasons: mE,
    FileCanBecomeEditor: mx,
    FileCanBecomeEditorWithReasons: mS,
    FileCanClickButtonToUpgradeAndEdit: mw,
    FileCanClickButtonToUpgradeAndEditWithReasons: mC,
    FileCanConsumeCodeConnect: mT,
    FileCanConsumeCodeConnectWithReasons: mk,
    FileCanCreateBranch: mR,
    FileCanCreateBranchWithReasons: mN,
    FileCanCreateCodeConnect: mP,
    FileCanCreateCodeConnectWithReasons: mO,
    FileCanDelete: mD,
    FileCanDeleteWithReasons: mL,
    FileCanDownloadFile: mF,
    FileCanDownloadFileWithReasons: mM,
    FileCanEdit: mj,
    FileCanEditAnnotations: mU,
    FileCanEditAnnotationsWithReasons: mB,
    FileCanEditCanvas: mV,
    FileCanEditCanvasWithReasons: mG,
    FileCanEditCmsStructure: mz,
    FileCanEditCmsStructureWithReasons: mH,
    FileCanEditIgnoreEduGracePeriod: mW,
    FileCanEditIgnoreEduGracePeriodWithReasons: mK,
    FileCanEditIgnorePaidStatus: mY,
    FileCanEditIgnorePaidStatusWithReasons: mq,
    FileCanEditLinkAccess: m$,
    FileCanEditLinkAccessIgnorePasswords: mZ,
    FileCanEditLinkAccessIgnorePasswordsWithReasons: mX,
    FileCanEditLinkAccessWithReasons: mQ,
    FileCanEditOrAccessFullDevMode: mJ,
    FileCanEditOrAccessFullDevModeWithReasons: m0,
    FileCanEditWithReasons: m1,
    FileCanExport: m2,
    FileCanExportWithReasons: m5,
    FileCanFavorite: m4,
    FileCanFavoriteWithReasons: m3,
    FileCanGainView: m6,
    FileCanGainViewPrototype: m7,
    FileCanGainViewPrototypeWithReasons: m8,
    FileCanGainViewWithReasons: m9,
    FileCanInsertTemplate: he,
    FileCanInsertTemplateWithReasons: ht,
    FileCanManage: hi,
    FileCanManageWithReasons: hn,
    FileCanModifyRoles: hr,
    FileCanModifyRolesWithReasons: ha,
    FileCanMove: hs,
    FileCanMoveComments: ho,
    FileCanMoveCommentsWithReasons: hl,
    FileCanMoveWithReasons: hd,
    FileCanOrgEditLinkAccess: hc,
    FileCanOrgEditLinkAccessWithReasons: hu,
    FileCanOrgViewLinkAccess: hp,
    FileCanOrgViewLinkAccessWithReasons: hm,
    FileCanOrgViewPrototypeLinkAccess: hh,
    FileCanOrgViewPrototypeLinkAccessWithReasons: hg,
    FileCanPermanentlyDelete: hf,
    FileCanPermanentlyDeleteWithReasons: h_,
    FileCanPinToWorkspace: hA,
    FileCanPinToWorkspaceWithReasons: hy,
    FileCanPublishSite: hb,
    FileCanPublishSiteWithReasons: hv,
    FileCanPublishTemplate: hI,
    FileCanPublishTemplateWithReasons: hE,
    FileCanRename: hx,
    FileCanRenameWithReasons: hS,
    FileCanRestore: hw,
    FileCanRestoreToOtherFolders: hC,
    FileCanRestoreToOtherFoldersWithReasons: hT,
    FileCanRestoreWithReasons: hk,
    FileCanRunExtensions: hR,
    FileCanRunExtensionsWithReasons: hN,
    FileCanSendWebhook: hP,
    FileCanSendWebhookWithReasons: hO,
    FileCanTestPlanRecordPermission: hD,
    FileCanTestPlanRecordPermissionWithReasons: hL,
    FileCanTrash: hF,
    FileCanTrashWithReasons: hM,
    FileCanUseDevModeDemoFile: hj,
    FileCanUseDevModeDemoFileWithReasons: hU,
    FileCanUseFigjamAi: hB,
    FileCanUseFigjamAiWithReasons: hV,
    FileCanUseFigmaAi: hG,
    FileCanUseFigmaAiBase: hz,
    FileCanUseFigmaAiBaseWithReasons: hH,
    FileCanUseFigmaAiIgnoreAiToggle: hW,
    FileCanUseFigmaAiIgnoreAiToggleWithReasons: hK,
    FileCanUseFigmaAiWithReasons: hY,
    FileCanUseFigmakeAi: hq,
    FileCanUseFigmakeAiBase: h$,
    FileCanUseFigmakeAiBaseWithReasons: hZ,
    FileCanUseFigmakeAiWithReasons: hX,
    FileCanUseFragmentSearchAi: hQ,
    FileCanUseFragmentSearchAiWithReasons: hJ,
    FileCanUseSlidesAi: h0,
    FileCanUseSlidesAiWithReasons: h1,
    FileCanUseSlidesDesignToggle: h2,
    FileCanUseSlidesDesignToggleWithReasons: h5,
    FileCanView: h4,
    FileCanViewAndCreateComments: h3,
    FileCanViewAndCreateCommentsWithReasons: h6,
    FileCanViewAnnotations: h7,
    FileCanViewAnnotationsMegadot: h8,
    FileCanViewAnnotationsMegadotWithReasons: h9,
    FileCanViewAnnotationsWithReasons: ge,
    FileCanViewComponentBrowser: gt,
    FileCanViewComponentBrowserWithReasons: gi,
    FileCanViewLinkAccess: gn,
    FileCanViewLinkAccessWithReasons: gr,
    FileCanViewMetadata: ga,
    FileCanViewMetadataLinkAccess: gs,
    FileCanViewMetadataLinkAccessWithReasons: go,
    FileCanViewMetadataWithReasons: gl,
    FileCanViewPrototype: gd,
    FileCanViewPrototypeLinkAccess: gc,
    FileCanViewPrototypeLinkAccessWithReasons: gu,
    FileCanViewPrototypeWithReasons: gp,
    FileCanViewWithReasons: gm,
    FileCanViewWorkspacePin: gh,
    FileCanViewWorkspacePinWithReasons: gg,
    FileCannotPublishToCommunity: gf,
    FileCannotPublishToCommunityWithReasons: g_,
    FileDevModeRequestDenied: gA,
    FileDevModeRequestDeniedWithReasons: gy,
    FileDevModeRequestPending: gb,
    FileDevModeRequestPendingWithReasons: gv,
    FileDevModeTrialRequestPending: gI,
    FileDevModeTrialRequestPendingWithReasons: gE,
    FileHasRoleAccess: gx,
    FileHasRoleAccessWithReasons: gS,
    FileIsEligibleForDevModeTrial: gw,
    FileIsEligibleForDevModeTrialWithReasons: gC,
    FileIsInDevModeTrial: gT,
    FileIsInDevModeTrialWithReasons: gk,
    FileIsOwner: gR,
    FileIsOwnerWithReasons: gN,
    FileIsWorkspaceVisible: gP,
    FileIsWorkspaceVisibleWithReasons: gO,
    FileMustRequestAccountUpgradeToEdit: gD,
    FileMustRequestAccountUpgradeToEditWithReasons: gL,
    FileMustRequestEditorRoleToEdit: gF,
    FileMustRequestEditorRoleToEditWithReasons: gM,
    FileMustRequestUpgradeToEditDeveloperLinks: gj,
    FileMustRequestUpgradeToEditDeveloperLinksWithReasons: gU,
    FileMustUpgradeToShareDraft: gB,
    FileMustUpgradeToShareDraftWithReasons: gV,
    FileSeatTypePaidStatusTestPermission: gG,
    FileSeatTypePaidStatusTestPermissionWithReasons: gz,
    FileShouldUseConnectedPlanUser: gH,
    FileShouldUseConnectedPlanUserDevMode: gW,
    FileShouldUseConnectedPlanUserDevModeWithReasons: gK,
    FileShouldUseConnectedPlanUserWithReasons: gY,
    RepoCanAdmin: gq,
    RepoCanAdminWithReasons: g$,
    RepoCanDiscover: gZ,
    RepoCanDiscoverWithReasons: gX,
    RepoCanEdit: gQ,
    RepoCanEditLinkAccess: gJ,
    RepoCanEditLinkAccessWithReasons: g0,
    RepoCanEditWithReasons: g1,
    RepoCanManage: g2,
    RepoCanManageWithReasons: g5,
    RepoCanMove: g4,
    RepoCanMoveWithReasons: g3,
    RepoCanOrgEditLinkAccess: g6,
    RepoCanOrgEditLinkAccessWithReasons: g7,
    RepoCanOrgViewLinkAccess: g8,
    RepoCanOrgViewLinkAccessWithReasons: g9,
    RepoCanOrgViewPrototypeLinkAccess: fe,
    RepoCanOrgViewPrototypeLinkAccessWithReasons: ft,
    RepoCanView: fi,
    RepoCanViewLinkAccess: fn,
    RepoCanViewLinkAccessWithReasons: fr,
    RepoCanViewPrototype: fa,
    RepoCanViewPrototypeLinkAccess: fs,
    RepoCanViewPrototypeLinkAccessWithReasons: fo,
    RepoCanViewPrototypeWithReasons: fl,
    RepoCanViewWithReasons: fd,
    RepoIsOwner: fc,
    RepoIsOwnerWithReasons: fu,
    RepoShouldUseConnectedPlanUser: fp,
    RepoShouldUseConnectedPlanUserWithReasons: fm,
    FolderCanConnect: fh,
    FolderCanConnectWithReasons: fg,
    FolderCanCreateCooperFile: ff,
    FolderCanCreateCooperFileWithReasons: f_,
    FolderCanCreateDesignFile: fA,
    FolderCanCreateDesignFileWithReasons: fy,
    FolderCanCreateFigjamFile: fb,
    FolderCanCreateFigjamFileWithReasons: fv,
    FolderCanCreateFigmakeFile: fI,
    FolderCanCreateFigmakeFileWithReasons: fE,
    FolderCanCreateSitesFile: fx,
    FolderCanCreateSitesFileWithReasons: fS,
    FolderCanCreateSlidesFile: fw,
    FolderCanCreateSlidesFileWithReasons: fC,
    FolderCanDiscover: fT,
    FolderCanDiscoverWithReasons: fk,
    FolderCanEdit: fR,
    FolderCanEditWithReasons: fN,
    FolderCanModifyRoles: fP,
    FolderCanModifyRolesWithReasons: fO,
    FolderCanMove: fD,
    FolderCanMoveWithReasons: fL,
    FolderCanPermanentlyDelete: fF,
    FolderCanPermanentlyDeleteWithReasons: fM,
    FolderCanRestore: fj,
    FolderCanRestoreWithReasons: fU,
    FolderCanTransferCopy: fB,
    FolderCanTransferCopyWithReasons: fV,
    FolderCanTransferExternally: fG,
    FolderCanTransferExternallyWithReasons: fz,
    FolderCanTrash: fH,
    FolderCanTrashWithReasons: fW,
    FolderCanView: fK,
    FolderCanViewLimitedInfo: fY,
    FolderCanViewLimitedInfoWithReasons: fq,
    FolderCanViewWithReasons: f$,
    FolderIsOwner: fZ,
    FolderIsOwnerWithReasons: fX,
    FolderShouldUseConnectedPlanUser: fQ,
    FolderShouldUseConnectedPlanUserDesign: fJ,
    FolderShouldUseConnectedPlanUserDesignWithReasons: f0,
    FolderShouldUseConnectedPlanUserDevMode: f1,
    FolderShouldUseConnectedPlanUserDevModeWithReasons: f2,
    FolderShouldUseConnectedPlanUserFigjam: f5,
    FolderShouldUseConnectedPlanUserFigjamWithReasons: f4,
    FolderShouldUseConnectedPlanUserFigmake: f3,
    FolderShouldUseConnectedPlanUserFigmakeWithReasons: f6,
    FolderShouldUseConnectedPlanUserSites: f7,
    FolderShouldUseConnectedPlanUserSitesWithReasons: f8,
    FolderShouldUseConnectedPlanUserSlides: f9,
    FolderShouldUseConnectedPlanUserSlidesWithReasons: _e,
    FolderShouldUseConnectedPlanUserWithReasons: _t,
    HubFileCanView: _i,
    HubFileCanViewWithReasons: _n,
    LitmusProjectCanView: _r,
    LitmusProjectCanViewWithReasons: _a,
    OrgCanUseFigmaAi: _s,
    OrgCanUseFigmaAiIgnoreAiToggle: _o,
    OrgCanUseFigmaAiIgnoreAiToggleWithReasons: _l,
    OrgCanUseFigmaAiWithReasons: _d,
    OrgCanUseFigmaCollabAi: _c,
    OrgCanUseFigmaCollabAiIgnoreAiToggle: _u,
    OrgCanUseFigmaCollabAiIgnoreAiToggleWithReasons: _p,
    OrgCanUseFigmaCollabAiWithReasons: _m,
    OrgCannotJoinOrgGuestsBanned: _h,
    OrgCannotJoinOrgGuestsBannedWithReasons: _g,
    OrgCannotJoinOrgUserExternalContentRestricted: _f,
    OrgCannotJoinOrgUserExternalContentRestrictedWithReasons: __,
    OrgHostPlanHasFigmaAiEnabled: _A,
    OrgHostPlanHasFigmaAiEnabledWithReasons: _y,
    OrgIsAdmin: _b,
    OrgIsAdminWithReasons: _v,
    OrgIsGuest: _I,
    OrgIsGuestWithReasons: _E,
    OrgIsMember: _x,
    OrgIsMemberWithReasons: _S,
    PlanCanConnect: _w,
    PlanCanConsumeGithubApp: _C,
    PlanCanSetupGithubApp: _T,
    PlanCanUpgradeAutoPathwayCollaborator: _k,
    PlanCanUpgradeAutoPathwayContent: _R,
    PlanCanUpgradeAutoPathwayDeveloper: _N,
    PlanCanUpgradeAutoPathwayExpert: _P,
    PlanCanUpgradeCollaborator: _O,
    PlanCanUpgradeContent: _D,
    PlanCanUpgradeDeveloper: _L,
    PlanCanUpgradeExpert: _F,
    PlanCanUseFileViewHistory: _M,
    PlanCanViewInvoices: _j,
    PlanIsAdmin: _U,
    PlanIsEligibleProvisionalAccessCollaborator: _B,
    PlanIsEligibleProvisionalAccessContent: _V,
    PlanIsEligibleProvisionalAccessDeveloper: _G,
    PlanIsEligibleProvisionalAccessExpert: _z,
    PlanIsGuest: _H,
    PlanIsMember: _W,
    PlanNeedUpgradeCollaborator: _K,
    PlanNeedUpgradeContent: _Y,
    PlanNeedUpgradeDeveloper: _q,
    PlanNeedUpgradeExpert: _$,
    TeamAdminRoleAccess: _Z,
    TeamAdminRoleAccessWithReasons: _X,
    TeamCanAdmin: _Q,
    TeamCanAdminWithReasons: _J,
    TeamCanDelete: _0,
    TeamCanDeleteWithReasons: _1,
    TeamCanDiscover: _2,
    TeamCanDiscoverWithReasons: _5,
    TeamCanEdit: _4,
    TeamCanEditWithReasons: _3,
    TeamCanUseFigmaAi: _6,
    TeamCanUseFigmaAiIgnoreAiToggle: _7,
    TeamCanUseFigmaAiIgnoreAiToggleWithReasons: _8,
    TeamCanUseFigmaAiWithReasons: _9,
    TeamCanUseFigmaCollabAi: Ae,
    TeamCanUseFigmaCollabAiIgnoreAiToggle: At,
    TeamCanUseFigmaCollabAiIgnoreAiToggleWithReasons: Ai,
    TeamCanUseFigmaCollabAiWithReasons: An,
    TeamCanView: Ar,
    TeamCanViewInAdmin: Aa,
    TeamCanViewInAdminWithReasons: As,
    TeamCanViewLimitedInfo: Ao,
    TeamCanViewLimitedInfoWithReasons: Al,
    TeamCanViewWithReasons: Ad,
    TeamEditRoleAccess: Ac,
    TeamEditRoleAccessWithReasons: Au,
    TeamHostPlanHasFigmaAiEnabled: Ap,
    TeamHostPlanHasFigmaAiEnabledWithReasons: Am,
    TeamIsOwner: Ah,
    TeamIsOwnerWithReasons: Ag,
    UserGroupCanView: Af,
    UserGroupCanViewWithReasons: A_,
    WorkspaceCanAdmin: AA,
    WorkspaceCanAdminWithReasons: Ay,
    WorkspaceCanCreateTeam: Ab,
    WorkspaceCanCreateTeamWithReasons: Av,
    WorkspaceCanView: AI,
    WorkspaceCanViewWithReasons: AE,
    ...r
  },
  fragments: n,
  objects: [{
    name: 'root',
    permissionRequired: !1,
    fields: [{
      name: 'currentUser',
      type: {
        kind: 'object',
        name: _$$Y.User
      },
      args: [{
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      filter: ['id', '=', createFieldRef('userId')]
    }, {
      name: 'userPublic',
      type: {
        kind: 'object',
        name: _$$Y.UserPublic
      },
      args: [{
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      filter: ['id', '=', createFieldRef('userId')],
      nullable: !0
    }, {
      name: 'team',
      type: {
        kind: 'object',
        name: _$$Y.Team
      },
      args: [{
        name: 'id',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      filter: ['id', '=', createFieldRef('id')],
      checkCanRead: {
        userId: createFieldRef('userId')
      },
      nullable: !0
    }, {
      name: 'teamInAdmin',
      type: {
        kind: 'object',
        name: _$$Y.TeamInAdmin
      },
      args: [{
        name: 'id',
        type: {
          kind: 'bigint'
        }
      }, {
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      filter: ['id', '=', createFieldRef('id')],
      checkCanRead: {
        userId: createSessionRef('userId')
      },
      nullable: !0
    }, {
      name: 'teamPublicInfo',
      type: {
        kind: 'object',
        name: _$$Y.TeamPublicInfo
      },
      args: [{
        name: 'id',
        type: {
          kind: 'bigint'
        }
      }],
      filter: ['id', '=', createFieldRef('id')],
      nullable: !0
    }, {
      name: 'teamLimitedInfo',
      type: {
        kind: 'object',
        name: _$$Y.TeamLimitedInfo
      },
      args: [{
        name: 'id',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      filter: ['id', '=', createFieldRef('id')],
      checkCanRead: {
        userId: createFieldRef('userId')
      },
      nullable: !0
    }, {
      name: 'project',
      type: {
        kind: 'object',
        name: _$$Y.Project
      },
      args: [{
        name: 'id',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      filter: ['id', '=', createFieldRef('id')],
      checkCanRead: {
        userId: createFieldRef('userId')
      },
      nullable: !0
    }, {
      name: 'recentPrototypes',
      type: {
        kind: 'objects',
        name: _$$Y.RecentPrototype
      },
      args: [{
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      filter: ['userId', '=', createFieldRef('userId')],
      expectedMaxCount: 200
    }, {
      name: 'lastFrameSelection',
      type: {
        kind: 'object',
        name: _$$Y.LastFrameSelection
      },
      args: [{
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      resolver: {
        type: 'Redis',
        keyPrefix: 'persistent-last-frame-selection',
        keyPostfix: [createFieldRef('userId')]
      },
      filter: ['id', '=', createFieldRef('userId')]
    }, {
      name: 'persistentLastFrameSelection',
      type: {
        kind: 'object',
        name: _$$Y.PersistentLastFrameSelection
      },
      args: [{
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      resolver: {
        type: 'Redis',
        keyPrefix: 'persistent-last-frame-selection',
        keyPostfix: [createFieldRef('userId')]
      },
      nullable: !0
    }, {
      name: 'recentIdleTimeoutSettingChange',
      type: {
        kind: 'object',
        name: _$$Y.RecentIdleTimeoutSettingChange
      },
      args: [{
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'cacheNonce',
        type: {
          kind: 'string'
        }
      }],
      resolver: {
        type: 'Redis',
        keyPrefix: 'recent-idle-timeout-setting-change',
        keyPostfix: [createFieldRef('userId')]
      },
      nullable: !0,
      filter: ['id', '=', createFieldRef('cacheNonce')]
    }, {
      name: 'recentNetworkControlRejection',
      type: {
        kind: 'object',
        name: _$$Y.RecentNetworkControlRejection
      },
      args: [{
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'cacheNonce',
        type: {
          kind: 'string'
        }
      }],
      resolver: {
        type: 'Redis',
        keyPrefix: 'recent-network-control-rejection',
        keyPostfix: [createFieldRef('userId')]
      },
      nullable: !0,
      filter: ['id', '=', createFieldRef('cacheNonce')]
    }, {
      name: 'latestClipboardData',
      type: {
        kind: 'object',
        name: _$$Y.LatestClipboardData
      },
      args: [{
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'deviceType',
        type: {
          kind: 'enum',
          name: 'DeviceType'
        }
      }],
      filter: {
        and: [['id', '=', createFieldRef('userId')], ['deviceType', '=', createFieldRef('deviceType')]]
      },
      orderBy: [['timestamp', 'DESC']],
      expectedMaxCount: 1
    }, {
      name: 'file',
      type: {
        kind: 'object',
        name: _$$Y.File
      },
      args: [{
        name: 'key',
        type: {
          kind: 'string'
        },
        nullable: !0
      }, {
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      filter: ['key', '=', createFieldRef('key')],
      checkCanRead: {
        fieldName: 'canReadV3',
        userId: createFieldRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      },
      nullable: !0,
      deprecated: {
        reason: 'Use fileV2 or filePrototypeInfo instead',
        date: '2025-03-28'
      }
    }, {
      name: 'fileV2',
      type: {
        kind: 'object',
        name: _$$Y.File
      },
      args: [{
        name: 'key',
        type: {
          kind: 'string'
        },
        nullable: !0
      }],
      filter: ['key', '=', createFieldRef('key')],
      checkCanRead: {
        fieldName: 'canAccessWithKillSwitch',
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        linkAccessOverrideKey: createFieldRef('key')
      },
      nullable: !0
    }, {
      name: '_fileViewableByPrototypeViewers',
      type: {
        kind: 'object',
        name: _$$Y.File
      },
      args: [{
        name: 'key',
        type: {
          kind: 'string'
        },
        nullable: !0
      }, {
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      filter: ['key', '=', createFieldRef('key')],
      checkCanRead: {
        fieldName: 'canReadV3',
        userId: createFieldRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      },
      shadowCheckCanRead: {
        fieldName: 'canViewV3',
        userId: createFieldRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      },
      nullable: !0,
      deprecated: {
        reason: 'This field is viewable by users who only have access to a file\'s prototype. Use .fileV2 or .filePrototypeInfo instead.',
        date: '2025-04-07'
      }
    }, {
      name: 'filePrototypeInfo',
      type: {
        kind: 'object',
        name: _$$Y.FilePrototypeInfo
      },
      args: [{
        name: 'key',
        type: {
          kind: 'string'
        },
        nullable: !0
      }],
      filter: ['key', '=', createFieldRef('key')],
      checkCanRead: {
        fieldName: 'canViewPrototypeV3',
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      },
      nullable: !0
    }, {
      name: 'libraryKeyToFile',
      type: {
        kind: 'object',
        name: _$$Y.LibraryKeyToFile
      },
      args: [{
        name: 'libraryKey',
        type: {
          kind: 'string'
        }
      }],
      filter: ['libraryKey', '=', createFieldRef('libraryKey')],
      nullable: !0
    }, {
      name: 'hubFile',
      type: {
        kind: 'object',
        name: _$$Y.HubFile
      },
      args: [{
        name: 'id',
        type: {
          kind: 'bigint'
        }
      }, {
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      filter: ['id', '=', createFieldRef('id')],
      checkCanRead: {
        userId: createFieldRef('userId')
      },
      nullable: !0
    }, {
      name: 'figFileWorkshopMode',
      type: {
        kind: 'object',
        name: _$$Y.FigFileWorkshopMode
      },
      args: [{
        name: 'fileKey',
        type: {
          kind: 'string'
        }
      }],
      filter: ['fileKey', '=', createFieldRef('fileKey')],
      nullable: !0
    }, {
      name: 'figFileLinkExpirationConfig',
      type: {
        kind: 'object',
        name: _$$Y.FigFileLinkExpirationConfig
      },
      args: [{
        name: 'figFileKey',
        type: {
          kind: 'string'
        }
      }],
      filter: ['figFileKey', '=', createFieldRef('figFileKey')],
      nullable: !0
    }, {
      name: 'repo',
      type: {
        kind: 'object',
        name: _$$Y.Repo
      },
      args: [{
        name: 'id',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      filter: ['id', '=', createFieldRef('id')],
      checkCanRead: {
        fieldName: 'canReadV3',
        userId: createFieldRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      },
      nullable: !0
    }, {
      name: 'prototype',
      type: {
        kind: 'object',
        name: _$$Y.Prototype
      },
      args: [{
        name: 'id',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      filter: ['id', '=', createFieldRef('id')],
      checkCanRead: {
        userId: createFieldRef('userId')
      },
      nullable: !0
    }, {
      name: 'org',
      type: {
        kind: 'object',
        name: _$$Y.Org
      },
      args: [{
        name: 'id',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      filter: ['id', '=', createFieldRef('id')],
      checkCanRead: {
        userId: createFieldRef('userId')
      },
      nullable: !0
    }, {
      name: 'orgInfo',
      type: {
        kind: 'object',
        name: _$$Y.OrgInfo
      },
      args: [{
        name: 'id',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      filter: ['id', '=', createFieldRef('id')],
      checkCanRead: {
        userId: createFieldRef('userId')
      },
      nullable: !0
    }, {
      name: 'orgPublicInfo',
      type: {
        kind: 'object',
        name: _$$Y.OrgPublicInfo
      },
      args: [{
        name: 'id',
        type: {
          kind: 'bigint'
        }
      }],
      filter: ['id', '=', createFieldRef('id')],
      nullable: !0
    }, {
      name: 'planUserRecords',
      type: {
        kind: 'objects',
        name: _$$Y.PlanUserRecord
      },
      args: [{
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      filter: ['userId', '=', createFieldRef('userId')],
      checkCanRead: {
        userId: createSessionRef('userId')
      },
      expectedMaxCount: 100
    }, {
      name: 'planUserRecord',
      type: {
        kind: 'object',
        name: _$$Y.PlanUserRecord
      },
      args: [{
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'planId',
        type: {
          kind: 'uuid'
        },
        nullable: !0
      }],
      filter: {
        and: [['userId', '=', createFieldRef('userId')], ['planId', '=', createFieldRef('planId')]]
      },
      checkCanRead: {
        userId: createSessionRef('userId')
      },
      nullable: !0
    }, {
      name: 'planRecord',
      type: {
        kind: 'object',
        name: _$$Y.PlanRecord
      },
      args: [{
        name: 'id',
        type: {
          kind: 'uuid'
        }
      }],
      filter: ['id', '=', createFieldRef('id')],
      checkCanRead: {
        userId: createSessionRef('userId')
      },
      nullable: !0
    }, {
      name: 'planRecordPublicInfo',
      type: {
        kind: 'object',
        name: _$$Y.PlanRecordPublicInfo
      },
      args: [{
        name: 'id',
        type: {
          kind: 'uuid'
        }
      }],
      filter: ['id', '=', createFieldRef('id')],
      nullable: !0
    }, {
      name: 'planRecordInfoFromPlanParent',
      type: {
        kind: 'object',
        name: _$$Y.PlanRecord
      },
      args: [{
        name: 'planParentId',
        type: {
          kind: 'bigint'
        }
      }, {
        name: 'planParentType',
        type: {
          kind: 'enum',
          name: 'PlanParentClass'
        }
      }],
      filter: {
        and: [['planParentId', '=', createFieldRef('planParentId')], ['planParentType', '=', createFieldRef('planParentType')]]
      },
      checkCanRead: {
        userId: createSessionRef('userId')
      },
      nullable: !0
    }, {
      name: 'planRecordPublicInfoFromPlanParent',
      type: {
        kind: 'object',
        name: _$$Y.PlanRecordPublicInfo
      },
      args: [{
        name: 'planParentId',
        type: {
          kind: 'bigint'
        }
      }, {
        name: 'planParentType',
        type: {
          kind: 'enum',
          name: 'PlanParentClass'
        }
      }],
      filter: {
        and: [['planParentId', '=', createFieldRef('planParentId')], ['planParentType', '=', createFieldRef('planParentType')]]
      },
      nullable: !0
    }, {
      name: 'orgJoinRequest',
      type: {
        kind: 'object',
        name: _$$Y.OrgJoinRequest
      },
      args: [{
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'orgId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      filter: {
        and: [['requesterUserId', '=', createFieldRef('userId')], ['orgId', '=', createFieldRef('orgId')], ['status', '=', 'pending']]
      },
      nullable: !0
    }, {
      name: 'pendingConfirmedRenewalSeatCounts',
      type: {
        kind: 'objects',
        name: _$$Y.ConfirmedRenewalSeatCount
      },
      args: [{
        name: 'planParentId',
        type: {
          kind: 'bigint'
        }
      }, {
        name: 'planParentType',
        type: {
          kind: 'string'
        }
      }, {
        name: 'billingInterval',
        type: {
          kind: 'enum',
          name: 'BillingInterval'
        }
      }],
      filter: {
        and: [['planParentId', '=', createFieldRef('planParentId')], ['planParentType', '=', createFieldRef('planParentType')], ['billingInterval', '=', createFieldRef('billingInterval')], ['processedAt', '=', null]]
      },
      nullable: !0,
      expectedMaxCount: 1e3
    }, {
      name: 'workspace',
      type: {
        kind: 'object',
        name: _$$Y.Workspace
      },
      args: [{
        name: 'id',
        type: {
          kind: 'bigint'
        }
      }, {
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      filter: ['id', '=', createFieldRef('id')],
      checkCanRead: {
        userId: createFieldRef('userId')
      },
      nullable: !0
    }, {
      name: 'idpGroup',
      type: {
        kind: 'object',
        name: _$$Y.IDPGroup
      },
      args: [{
        name: 'id',
        type: {
          kind: 'uuid'
        }
      }],
      filter: ['id', '=', createFieldRef('id')],
      nullable: !0
    }, {
      name: 'pinnedFile',
      type: {
        kind: 'object',
        name: _$$Y.PinnedFileV2
      },
      args: [{
        name: 'id',
        type: {
          kind: 'string'
        }
      }, {
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      filter: ['id', '=', createFieldRef('id')],
      checkCanRead: {
        userId: createFieldRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      },
      nullable: !0
    }, {
      name: 'licenseGroup',
      type: {
        kind: 'object',
        name: _$$Y.LicenseGroup
      },
      args: [{
        name: 'id',
        type: {
          kind: 'bigint'
        }
      }, {
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      filter: ['id', '=', createFieldRef('id')],
      nullable: !0,
      checkCanRead: {
        userId: createFieldRef('userId')
      }
    }, {
      name: 'health',
      type: {
        kind: 'object',
        name: _$$Y.User
      },
      filter: ['id', '<>', '-1'],
      nullable: !0,
      expectedMaxCount: 1
    }, {
      name: 'style',
      type: {
        kind: 'object',
        name: _$$Y.Style
      },
      args: [{
        name: 'key',
        type: {
          kind: 'string'
        }
      }, {
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      filter: ['key', '=', createFieldRef('key')],
      nullable: !0,
      checkCanRead: {
        userId: createFieldRef('userId')
      }
    }, {
      name: 'styleWithDestinationAsset',
      type: {
        kind: 'object',
        name: _$$Y.StyleWithDestinationAsset
      },
      args: [{
        name: 'key',
        type: {
          kind: 'string'
        }
      }, {
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      filter: ['key', '=', createFieldRef('key')],
      nullable: !0,
      checkCanRead: {
        userId: createFieldRef('userId')
      }
    }, {
      name: 'styleWithDestinationAssetV2',
      type: {
        kind: 'object',
        name: _$$Y.StyleWithDestinationAssetV2
      },
      args: [{
        name: 'key',
        type: {
          kind: 'string'
        }
      }, {
        name: 'openFileKey',
        type: {
          kind: 'string'
        },
        nullable: !0
      }, {
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      filter: ['key', '=', createFieldRef('key')],
      nullable: !0,
      checkCanRead: {
        userId: createFieldRef('userId'),
        openFileKey: createFieldRef('openFileKey')
      }
    }, {
      name: 'viewerRestrictedDraftAccessLog',
      type: {
        kind: 'object',
        name: _$$Y.ViewerRestrictedDraftAccessLog
      },
      args: [{
        name: 'fileKey',
        type: {
          kind: 'string'
        }
      }],
      filter: ['fileKey', '=', createFieldRef('fileKey')],
      nullable: !0
    }, {
      name: 'libraryPublish',
      type: {
        kind: 'object',
        name: _$$Y.LibraryPublish
      },
      args: [{
        name: 'id',
        type: {
          kind: 'uuid'
        }
      }, {
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      filter: ['id', '=', createFieldRef('id')],
      nullable: !0,
      checkCanRead: {
        userId: createFieldRef('userId')
      }
    }, {
      name: 'libraryPublishV2',
      type: {
        kind: 'object',
        name: _$$Y.LibraryPublishV2
      },
      args: [{
        name: 'id',
        type: {
          kind: 'uuid'
        }
      }, {
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      filter: ['id', '=', createFieldRef('id')],
      nullable: !0,
      checkCanRead: {
        userId: createFieldRef('userId')
      }
    }, {
      name: 'component',
      type: {
        kind: 'object',
        name: _$$Y.Component
      },
      args: [{
        name: 'componentKey',
        type: {
          kind: 'string'
        }
      }, {
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      filter: ['componentKey', '=', createFieldRef('componentKey')],
      nullable: !0,
      checkCanRead: {
        userId: createFieldRef('userId')
      }
    }, {
      name: 'stateGroup',
      type: {
        kind: 'object',
        name: _$$Y.StateGroup
      },
      args: [{
        name: 'key',
        type: {
          kind: 'string'
        }
      }, {
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      filter: ['key', '=', createFieldRef('key')],
      nullable: !0,
      checkCanRead: {
        userId: createFieldRef('userId')
      }
    }, {
      deprecated: {
        reason: 'Use variableCollection instead',
        date: '2023-04-27'
      },
      name: 'variableSet',
      type: {
        kind: 'object',
        name: _$$Y.VariableSet
      },
      args: [{
        name: 'key',
        type: {
          kind: 'string'
        }
      }, {
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      filter: ['key', '=', createFieldRef('key')],
      nullable: !0,
      checkCanRead: {
        userId: createFieldRef('userId')
      }
    }, {
      name: 'libraryAsset',
      type: {
        kind: 'object',
        name: _$$Y.LibraryAsset
      },
      args: [{
        name: 'key',
        type: {
          kind: 'string'
        }
      }, {
        name: 'libraryKey',
        type: {
          kind: 'string'
        }
      }],
      filter: {
        and: [['key', '=', createFieldRef('key')], ['libraryKey', '=', createFieldRef('libraryKey')]]
      },
      nullable: !0,
      checkCanRead: {
        fieldName: 'canRead',
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      }
    }, {
      name: 'variableCollection',
      type: {
        kind: 'object',
        name: _$$Y.VariableSet
      },
      args: [{
        name: 'key',
        type: {
          kind: 'string'
        }
      }, {
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      filter: ['key', '=', createFieldRef('key')],
      nullable: !0,
      checkCanRead: {
        userId: createFieldRef('userId')
      }
    }, {
      name: 'variable',
      type: {
        kind: 'object',
        name: _$$Y.Variable
      },
      args: [{
        name: 'key',
        type: {
          kind: 'string'
        }
      }, {
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      filter: ['key', '=', createFieldRef('key')],
      nullable: !0,
      checkCanRead: {
        userId: createFieldRef('userId')
      }
    }, {
      name: 'plugin',
      type: {
        kind: 'object',
        name: _$$Y.Plugin
      },
      args: [{
        name: 'pluginId',
        type: {
          kind: 'string'
        }
      }, {
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'orgId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      filter: ['id', '=', createFieldRef('pluginId')],
      nullable: !0,
      checkCanRead: {
        userId: createFieldRef('userId'),
        orgId: createFieldRef('orgId')
      }
    }, {
      name: 'pluginPreferences',
      type: {
        kind: 'object',
        name: _$$Y.PluginPreferences
      },
      args: [{
        name: 'currentUserId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'targetUserId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'targetOrgId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      nullable: !0,
      checkCanRead: {
        targetUserId: createFieldRef('targetUserId'),
        targetOrgId: createFieldRef('targetOrgId'),
        currentUserId: createFieldRef('currentUserId')
      },
      filter: {
        or: [{
          and: [['userId', '=', createFieldRef('targetUserId')], ['userId', '<>', null]]
        }, {
          and: [['orgId', '=', createFieldRef('targetOrgId')], ['orgId', '<>', null]]
        }]
      }
    }, {
      name: 'actionsHistory',
      args: [{
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      type: {
        kind: 'object',
        name: _$$Y.ActionsHistory
      },
      filter: ['userId', '=', createFieldRef('userId')],
      nullable: !0
    }, {
      name: 'pluginSecurityFormResponse',
      args: [{
        name: 'pluginId',
        type: {
          kind: 'string'
        }
      }],
      type: {
        kind: 'object',
        name: _$$Y.PluginSecurityFormResponses
      },
      nullable: !0,
      filter: ['pluginId', '=', createFieldRef('pluginId')],
      checkCanRead: {
        userId: createSessionRef('userId')
      }
    }, {
      name: 'communityProfile',
      type: {
        kind: 'object',
        name: _$$Y.Profile
      },
      args: [{
        name: 'profileId',
        type: {
          kind: 'bigint'
        }
      }],
      filter: {
        and: [['id', '=', createFieldRef('profileId')], ['publicAt', '<>', null]]
      },
      nullable: !0
    }, {
      name: 'communityHubLike',
      type: {
        kind: 'object',
        name: _$$Y.CommunityHubLike
      },
      args: [{
        name: 'profileId',
        type: {
          kind: 'bigint'
        }
      }, {
        name: 'hubFileId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'pluginId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      filter: {
        and: [['profileId', '=', createFieldRef('profileId')], ['hubFileId', '=', createFieldRef('hubFileId')], ['pluginId', '=', createFieldRef('pluginId')]]
      },
      nullable: !0,
      checkCanRead: {
        userId: createSessionRef('userId'),
        profileId: createFieldRef('profileId')
      }
    }, {
      name: 'communityHubLikeForResource',
      type: {
        kind: 'object',
        name: _$$Y.CommunityHubLike
      },
      args: [{
        name: 'profileId',
        type: {
          kind: 'bigint'
        }
      }, {
        name: 'resourceId',
        type: {
          kind: 'uuid'
        },
        nullable: !0
      }],
      filter: {
        and: [['profileId', '=', createFieldRef('profileId')], ['resourceId', '=', createFieldRef('resourceId')]]
      },
      nullable: !0,
      checkCanRead: {
        userId: createSessionRef('userId'),
        profileId: createFieldRef('profileId')
      }
    }, {
      name: 'communityResourcePayment',
      type: {
        kind: 'object',
        name: _$$Y.CommunityResourcePayment
      },
      args: [{
        name: 'monetizedResourceMetadataId',
        type: {
          kind: 'bigint'
        }
      }, {
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      filter: ['monetizedResourceMetadataId', '=', createFieldRef('monetizedResourceMetadataId')],
      nullable: !0,
      checkCanRead: {
        userId: createFieldRef('userId')
      },
      deprecated: {
        reason: 'Use `communityResourcePaymentV2` instead - see #sev-2-2025-06-18-caring-reflection for context',
        date: '2025-06-18'
      }
    }, {
      name: 'communityResourcePaymentV2',
      type: {
        kind: 'object',
        name: _$$Y.CommunityResourcePayment
      },
      args: [{
        name: 'monetizedResourceMetadataId',
        type: {
          kind: 'bigint'
        }
      }, {
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      filter: {
        and: [['monetizedResourceMetadataId', '=', createFieldRef('monetizedResourceMetadataId')], ['userId', '=', createFieldRef('userId')]]
      },
      nullable: !0,
      checkCanRead: {
        userId: createSessionRef('userId')
      }
    }, {
      name: 'communityResourcePaymentsForUser',
      type: {
        kind: 'objects',
        name: _$$Y.CommunityResourcePayment
      },
      args: [{
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      filter: ['userId', '=', createFieldRef('userId')],
      nullable: !0,
      checkCanRead: {
        userId: createFieldRef('userId')
      },
      expectedMaxCount: 200
    }, {
      name: 'communityRatingStatsForHubFile',
      type: {
        kind: 'object',
        name: _$$Y.CommunityRatingStats
      },
      args: [{
        name: 'hubFileId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      filter: {
        and: [['hubFileId', '=', createFieldRef('hubFileId')], ['hubFileId', '<>', null]]
      },
      nullable: !0
    }, {
      name: 'communityRatingStatsForWidget',
      type: {
        kind: 'object',
        name: _$$Y.CommunityRatingStats
      },
      args: [{
        name: 'widgetId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      filter: {
        and: [['widgetId', '=', createFieldRef('widgetId')], ['widgetId', '<>', null]]
      },
      nullable: !0
    }, {
      name: 'communityRatingStatsForPlugin',
      type: {
        kind: 'object',
        name: _$$Y.CommunityRatingStats
      },
      args: [{
        name: 'pluginId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      filter: {
        and: [['pluginId', '=', createFieldRef('pluginId')], ['pluginId', '<>', null]]
      },
      nullable: !0
    }, {
      name: 'monetizedResourceMetadata',
      type: {
        kind: 'object',
        name: _$$Y.MonetizedResourceMetadata
      },
      args: [{
        name: 'id',
        type: {
          kind: 'bigint'
        }
      }],
      filter: ['id', '=', createFieldRef('id')],
      nullable: !0
    }, {
      name: 'communityM10nResourceStat',
      type: {
        kind: 'object',
        name: _$$Y.CommunityM10nResourceStat
      },
      args: [{
        name: 'sessionUserId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'monetizedResourceMetadataId',
        type: {
          kind: 'bigint'
        }
      }],
      filter: ['monetizedResourceMetadataId', '=', createFieldRef('monetizedResourceMetadataId')],
      nullable: !0,
      checkCanRead: {
        monetizedResourceMetadataId: createFieldRef('monetizedResourceMetadataId'),
        sessionUserId: createFieldRef('sessionUserId')
      }
    }, {
      name: 'userMonetizationMetadata',
      type: {
        kind: 'object',
        name: _$$Y.UserMonetizationMetadata
      },
      args: [{
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'sessionUserId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      filter: ['userId', '=', createFieldRef('userId')],
      nullable: !0,
      checkCanRead: {
        userId: createFieldRef('userId'),
        sessionUserId: createFieldRef('sessionUserId')
      }
    }, {
      name: 'feedPost',
      type: {
        kind: 'object',
        name: _$$Y.FeedPost
      },
      args: [{
        name: 'publicUuid',
        type: {
          kind: 'uuid'
        }
      }],
      filter: ['publicUuid', '=', createFieldRef('publicUuid')],
      nullable: !0
    }, {
      name: 'mobileFeedPost',
      type: {
        kind: 'object',
        name: _$$Y.FeedPost
      },
      args: [{
        name: 'id',
        type: {
          kind: 'bigint'
        }
      }],
      filter: ['id', '=', createFieldRef('id')],
      nullable: !0
    }, {
      name: 'developerLinks',
      type: {
        kind: 'objects',
        name: _$$Y.DeveloperLink
      },
      args: [{
        name: 'key',
        type: {
          kind: 'string'
        }
      }],
      filter: ['key', '=', createFieldRef('key')],
      nullable: !0,
      expectedMaxCount: 10
    }, {
      name: 'developerRelatedLinks',
      type: {
        kind: 'objects',
        name: _$$Y.DeveloperRelatedLink
      },
      args: [{
        name: 'nodeId',
        type: {
          kind: 'string'
        }
      }, {
        name: 'fileKey',
        type: {
          kind: 'string'
        }
      }],
      filter: {
        and: [['nodeId', '=', createFieldRef('nodeId')], ['fileKey', '=', createFieldRef('fileKey')]]
      },
      expectedMaxCount: 200,
      nullable: !0
    }, {
      name: 'accountTypeRequest',
      type: {
        kind: 'object',
        name: _$$Y.AccountTypeRequest
      },
      args: [{
        name: 'id',
        type: {
          kind: 'bigint'
        }
      }],
      filter: ['id', '=', createFieldRef('id')],
      expectedMaxCount: 1,
      nullable: !0
    }, {
      name: 'teamRoleRequest',
      type: {
        kind: 'object',
        name: _$$Y.TeamRoleRequest
      },
      args: [{
        name: 'teamId',
        type: {
          kind: 'bigint'
        }
      }, {
        name: 'requesterUserId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      filter: {
        and: [['teamId', '=', createFieldRef('teamId')], ['requesterUserId', '=', createFieldRef('requesterUserId')]]
      },
      checkCanRead: {
        userId: createSessionRef('userId')
      },
      nullable: !0
    }, {
      name: 'devModeActivity',
      type: {
        kind: 'objects',
        name: _$$Y.DevModeActivity
      },
      args: [{
        name: 'nodeId',
        type: {
          kind: 'string'
        }
      }, {
        name: 'fileKey',
        type: {
          kind: 'string'
        }
      }],
      filter: {
        and: [['nodeId', '=', createFieldRef('nodeId')], ['fileKey', '=', createFieldRef('fileKey')]]
      },
      expectedMaxCount: 100,
      nullable: !0
    }, {
      name: 'communityLibraryByHubFileId',
      type: {
        kind: 'object',
        name: _$$Y.CommunityLibrary
      },
      args: [{
        name: 'hubFileId',
        type: {
          kind: 'bigint'
        }
      }],
      filter: ['hubFileId', '=', createFieldRef('hubFileId')],
      nullable: !0,
      checkCanRead: {
        userId: createSessionRef('userId')
      }
    }, {
      name: 'communityQuickstartLibraries',
      type: {
        kind: 'objects',
        name: _$$Y.CommunityQuickstartLibrary
      },
      args: [{
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      nullable: !0,
      resolver: {
        type: 'HTTP',
        uri: '/api/internal/livegraph/sinatra_resolver/quickstart_community_libraries',
        queryParams: {
          userId: createFieldRef('userId')
        },
        realtimePolicy: {
          type: 'Static'
        }
      }
    }, {
      name: 'orgAdminUsers',
      type: {
        kind: 'objects',
        name: _$$Y.OrgAdminUserSearchResult
      },
      args: [{
        name: 'orgId',
        type: {
          kind: 'bigint'
        }
      }, {
        name: 'queryParams',
        type: {
          kind: 'string'
        },
        nullable: !0
      }, {
        name: 'firstPageSize',
        type: {
          kind: 'int'
        },
        nullable: !0
      }, {
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      nullable: !0,
      resolver: {
        type: 'HTTP',
        uri: '/api/internal/livegraph/pagination_resolver/org_admin',
        queryParams: {
          org_id: createFieldRef('orgId'),
          query_params: createFieldRef('queryParams'),
          userId: createFieldRef('userId')
        },
        realtimePolicy: {
          type: 'Static'
        }
      },
      pagination: {
        firstPageSize: createFieldRef('firstPageSize')
      },
      orderBy: 'Unordered'
    }, {
      name: 'orgAdminUsersMinimalFields',
      type: {
        kind: 'objects',
        name: _$$Y.OrgAdminUserMinimalFieldsSearchResult
      },
      args: [{
        name: 'orgId',
        type: {
          kind: 'bigint'
        }
      }, {
        name: 'queryParams',
        type: {
          kind: 'string'
        },
        nullable: !0
      }, {
        name: 'firstPageSize',
        type: {
          kind: 'int'
        },
        nullable: !0
      }, {
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      nullable: !0,
      resolver: {
        type: 'HTTP',
        uri: '/api/internal/livegraph/pagination_resolver/org_admin_minimal_fields',
        queryParams: {
          org_id: createFieldRef('orgId'),
          query_params: createFieldRef('queryParams'),
          userId: createFieldRef('userId')
        },
        realtimePolicy: {
          type: 'Static'
        }
      },
      pagination: {
        firstPageSize: createFieldRef('firstPageSize')
      },
      orderBy: 'Unordered'
    }, {
      name: 'orgAdminUsersInfo',
      type: {
        kind: 'object',
        name: _$$Y.OrgAdminUsersInfo
      },
      args: [{
        name: 'orgId',
        type: {
          kind: 'bigint'
        }
      }, {
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      resolver: {
        type: 'HTTP',
        uri: '/api/internal/livegraph/sinatra_resolver/org_admin_users_info',
        queryParams: {
          org_id: createFieldRef('orgId'),
          userId: createFieldRef('userId')
        },
        realtimePolicy: {
          type: 'Static'
        }
      }
    }, {
      name: 'unclaimedDomainUsers',
      type: {
        kind: 'objects',
        name: _$$Y.UnclaimedDomainUser
      },
      args: [{
        name: 'orgId',
        type: {
          kind: 'bigint'
        }
      }, {
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'domainId',
        type: {
          kind: 'bigint'
        }
      }, {
        name: 'searchQuery',
        type: {
          kind: 'string'
        },
        nullable: !0
      }, {
        name: 'firstPageSize',
        type: {
          kind: 'int'
        },
        nullable: !0
      }],
      nullable: !0,
      orderBy: 'Unordered',
      pagination: {
        firstPageSize: createFieldRef('firstPageSize')
      },
      resolver: {
        type: 'HTTP',
        uri: '/api/internal/livegraph/pagination_resolver/unclaimed_domain_users',
        queryParams: {
          org_id: createFieldRef('orgId'),
          userId: createFieldRef('userId'),
          search_query: createFieldRef('searchQuery'),
          domain_id: createFieldRef('domainId')
        },
        realtimePolicy: {
          type: 'Static'
        }
      }
    }, {
      name: 'orgMfaGuestInfo',
      type: {
        kind: 'object',
        name: _$$Y.OrgMfaGuestInfo
      },
      args: [{
        name: 'orgId',
        type: {
          kind: 'bigint'
        }
      }, {
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      resolver: {
        type: 'HTTP',
        uri: '/api/internal/livegraph/sinatra_resolver/org_mfa_guest_info',
        queryParams: {
          org_id: createFieldRef('orgId'),
          userId: createFieldRef('userId')
        },
        realtimePolicy: {
          type: 'Static'
        }
      },
      nullable: !0
    }, {
      name: 'orgMfaMemberInfo',
      type: {
        kind: 'object',
        name: _$$Y.OrgMfaMemberInfo
      },
      args: [{
        name: 'orgId',
        type: {
          kind: 'bigint'
        }
      }, {
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      resolver: {
        type: 'HTTP',
        uri: '/api/internal/livegraph/sinatra_resolver/org_mfa_member_info',
        queryParams: {
          org_id: createFieldRef('orgId'),
          userId: createFieldRef('userId')
        },
        realtimePolicy: {
          type: 'Static'
        }
      },
      nullable: !0
    }, {
      name: 'abandonedDraftFiles',
      type: {
        kind: 'objects',
        name: _$$Y.AbandonedDraftFile
      },
      args: [{
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'firstPageSize',
        type: {
          kind: 'int'
        }
      }, {
        name: 'sortOrder',
        type: {
          kind: 'string'
        }
      }, {
        name: 'cursorColumn',
        type: {
          kind: 'string'
        }
      }, {
        name: 'folderId',
        type: {
          kind: 'bigint'
        }
      }, {
        name: 'showTrashed',
        type: {
          kind: 'bool'
        }
      }, {
        name: 'queryString',
        type: {
          kind: 'string'
        },
        nullable: !0
      }],
      pagination: {
        firstPageSize: createFieldRef('firstPageSize')
      },
      resolver: {
        type: 'HTTP',
        uri: '/api/internal/livegraph/pagination_resolver/abandoned_draft_files',
        queryParams: {
          userId: createFieldRef('userId'),
          sort_order: createFieldRef('sortOrder'),
          cursor_column: createFieldRef('cursorColumn'),
          folder_id: createFieldRef('folderId'),
          show_trashed: createFieldRef('showTrashed'),
          query_string: createFieldRef('queryString')
        },
        realtimePolicy: {
          type: 'Static'
        }
      },
      orderBy: 'Unordered'
    }, {
      name: 'abandonedDraftFolders',
      type: {
        kind: 'objects',
        name: _$$Y.AbandonedDraftFolder
      },
      args: [{
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'firstPageSize',
        type: {
          kind: 'int'
        }
      }, {
        name: 'sortOrder',
        type: {
          kind: 'string'
        }
      }, {
        name: 'cursorColumn',
        type: {
          kind: 'string'
        }
      }, {
        name: 'planId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'planType',
        type: {
          kind: 'string'
        },
        nullable: !0
      }, {
        name: 'queryString',
        type: {
          kind: 'string'
        },
        nullable: !0
      }],
      pagination: {
        firstPageSize: createFieldRef('firstPageSize')
      },
      resolver: {
        type: 'HTTP',
        uri: '/api/internal/livegraph/pagination_resolver/abandoned_draft_folders',
        queryParams: {
          userId: createFieldRef('userId'),
          sort_order: createFieldRef('sortOrder'),
          cursor_column: createFieldRef('cursorColumn'),
          plan_id: createFieldRef('planId'),
          plan_type: createFieldRef('planType'),
          query_string: createFieldRef('queryString')
        },
        realtimePolicy: {
          type: 'Static'
        }
      },
      orderBy: 'Unordered'
    }, {
      name: 'orgDiscoverableTeams',
      type: {
        kind: 'objects',
        name: _$$Y.OrgDiscoverableTeamResult
      },
      args: [{
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'orgId',
        type: {
          kind: 'bigint'
        }
      }, {
        name: 'firstPageSize',
        type: {
          kind: 'int'
        },
        nullable: !0
      }],
      nullable: !0,
      orderBy: 'Unordered',
      pagination: {
        firstPageSize: createFieldRef('firstPageSize')
      },
      resolver: {
        type: 'HTTP',
        uri: '/api/internal/livegraph/pagination_resolver/org_discoverable_teams',
        queryParams: {
          org_id: createFieldRef('orgId'),
          userId: createFieldRef('userId')
        },
        realtimePolicy: {
          type: 'Static'
        }
      }
    }, {
      name: 'orgTeams',
      type: {
        kind: 'objects',
        name: _$$Y.OrgTeamResult
      },
      args: [{
        name: 'orgId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'queryParams',
        type: {
          kind: 'string'
        },
        nullable: !0
      }, {
        name: 'firstPageSize',
        type: {
          kind: 'int'
        },
        nullable: !0
      }],
      nullable: !0,
      orderBy: 'Unordered',
      pagination: {
        firstPageSize: createFieldRef('firstPageSize')
      },
      resolver: {
        type: 'HTTP',
        uri: '/api/internal/livegraph/pagination_resolver/org_teams',
        queryParams: {
          userId: createFieldRef('userId'),
          org_id: createFieldRef('orgId'),
          queryParams: createFieldRef('queryParams')
        },
        realtimePolicy: {
          type: 'Static'
        }
      }
    }, {
      name: 'orgJoinedTeams',
      type: {
        kind: 'objects',
        name: _$$Y.OrgJoinedTeamResult
      },
      args: [{
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'orgId',
        type: {
          kind: 'bigint'
        }
      }, {
        name: 'firstPageSize',
        type: {
          kind: 'int'
        },
        nullable: !0
      }],
      nullable: !0,
      orderBy: 'Unordered',
      pagination: {
        firstPageSize: createFieldRef('firstPageSize')
      },
      resolver: {
        type: 'HTTP',
        uri: '/api/internal/livegraph/pagination_resolver/org_joined_teams',
        queryParams: {
          org_id: createFieldRef('orgId'),
          userId: createFieldRef('userId')
        },
        realtimePolicy: {
          type: 'Static'
        }
      }
    }, {
      name: 'orgUnassignedTeams',
      type: {
        kind: 'objects',
        name: _$$Y.OrgUnassignedTeamResult
      },
      args: [{
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'orgId',
        type: {
          kind: 'bigint'
        }
      }, {
        name: 'firstPageSize',
        type: {
          kind: 'int'
        },
        nullable: !0
      }],
      nullable: !0,
      orderBy: 'Unordered',
      pagination: {
        firstPageSize: createFieldRef('firstPageSize')
      },
      resolver: {
        type: 'HTTP',
        uri: '/api/internal/livegraph/pagination_resolver/org_unassigned_teams',
        queryParams: {
          org_id: createFieldRef('orgId'),
          userId: createFieldRef('userId')
        },
        realtimePolicy: {
          type: 'Static'
        }
      }
    }, {
      name: 'orgTeamsInAdmin',
      type: {
        kind: 'objects',
        name: _$$Y.OrgTeamResultInAdmin
      },
      args: [{
        name: 'orgId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'queryParams',
        type: {
          kind: 'string'
        },
        nullable: !0
      }, {
        name: 'firstPageSize',
        type: {
          kind: 'int'
        },
        nullable: !0
      }],
      nullable: !0,
      orderBy: 'Unordered',
      pagination: {
        firstPageSize: createFieldRef('firstPageSize')
      },
      resolver: {
        type: 'HTTP',
        uri: '/api/internal/livegraph/pagination_resolver/org_teams',
        queryParams: {
          userId: createFieldRef('userId'),
          org_id: createFieldRef('orgId'),
          queryParams: createFieldRef('queryParams')
        },
        realtimePolicy: {
          type: 'Static'
        }
      }
    }, {
      name: 'allTeamRoles',
      type: {
        kind: 'objects',
        name: _$$Y.TeamRole
      },
      args: [{
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      filter: {
        and: [['userId', '=', createFieldRef('userId')], ['userId', '<>', null], ['resourceType', '=', 'team']]
      },
      expectedMaxCount: 2e3
    }, {
      name: 'esOrgUsersInfo',
      type: {
        kind: 'objects',
        name: _$$Y.EsOrgUsersInfo
      },
      args: [{
        name: 'orgId',
        type: {
          kind: 'bigint'
        }
      }, {
        name: 'queryParams',
        type: {
          kind: 'string'
        },
        nullable: !0
      }, {
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      nullable: !0,
      resolver: {
        type: 'HTTP',
        uri: '/api/internal/livegraph/sinatra_resolver/es_org_users_info',
        queryParams: {
          org_id: createFieldRef('orgId'),
          query_params: createFieldRef('queryParams'),
          userId: createFieldRef('userId')
        },
        realtimePolicy: {
          type: 'RedisPubsub',
          channelPrefix: 'org-user-membership-assignments-',
          channelPostfix: [createFieldRef('orgId')]
        }
      }
    }, {
      name: 'feedPosts',
      type: {
        kind: 'objects',
        name: _$$Y.FeedPostResult
      },
      args: [{
        name: 'orgId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'feedFilter',
        type: {
          kind: 'string'
        },
        nullable: !0
      }, {
        name: 'firstPageSize',
        type: {
          kind: 'int'
        },
        nullable: !0
      }],
      orderBy: [['createdAt', 'DESC']],
      pagination: {
        firstPageSize: createFieldRef('firstPageSize')
      },
      resolver: {
        type: 'HTTP',
        uri: '/api/internal/livegraph/pagination_resolver/feed_posts',
        queryParams: {
          userId: createFieldRef('userId'),
          org_id: createFieldRef('orgId'),
          feedFilter: createFieldRef('feedFilter')
        },
        realtimePolicy: {
          type: 'Static'
        }
      }
    }, {
      name: 'profile',
      type: {
        kind: 'object',
        name: _$$Y.Profile
      },
      args: [{
        name: 'profileId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      filter: ['id', '=', createFieldRef('profileId')]
    }, {
      name: 'sharedWithYouResources',
      type: {
        kind: 'objects',
        name: _$$Y.SharedWithYouResource
      },
      args: [{
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'resourceTypes',
        type: {
          kind: 'list',
          ofType: {
            kind: 'string'
          }
        }
      }, {
        name: 'firstPageSize',
        type: {
          kind: 'int'
        }
      }, {
        name: 'sortOrder',
        type: {
          kind: 'string'
        }
      }, {
        name: 'cursorColumn',
        type: {
          kind: 'string'
        }
      }, {
        name: 'sharedBy',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'planId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'planType',
        type: {
          kind: 'string'
        },
        nullable: !0
      }, {
        name: 'fileType',
        type: {
          kind: 'string'
        },
        nullable: !0
      }, {
        name: 'orgDeletedDrafts',
        type: {
          kind: 'string'
        },
        nullable: !0
      }],
      pagination: {
        firstPageSize: createFieldRef('firstPageSize')
      },
      resolver: {
        type: 'HTTP',
        uri: '/api/internal/livegraph/pagination_resolver/shared_with_you_resources',
        queryParams: {
          userId: createFieldRef('userId'),
          resource_types: createFieldRef('resourceTypes'),
          sort_order: createFieldRef('sortOrder'),
          cursor_column: createFieldRef('cursorColumn'),
          sharer_id: createFieldRef('sharedBy'),
          plan_id: createFieldRef('planId'),
          plan_type: createFieldRef('planType'),
          file_type: createFieldRef('fileType'),
          org_deleted_drafts: createFieldRef('orgDeletedDrafts')
        },
        realtimePolicy: {
          type: 'Static'
        }
      },
      orderBy: 'Unordered'
    }, {
      name: 'siteBundle',
      type: {
        kind: 'object',
        name: _$$Y.SiteBundle
      },
      args: [{
        name: 'fileKey',
        type: {
          kind: 'string'
        }
      }],
      nullable: !0,
      filter: ['fileKey', '=', createFieldRef('fileKey')],
      orderBy: [['createdAt', 'DESC']],
      expectedMaxCount: 1,
      deprecated: {
        reason: 'Use siteBundles object instead.',
        date: '2024-05-03'
      }
    }, {
      name: 'siteBundles',
      type: {
        kind: 'objects',
        name: _$$Y.SiteBundle
      },
      args: [{
        name: 'fileKey',
        type: {
          kind: 'string'
        }
      }],
      checkCanRead: {
        fieldName: 'canReadV2',
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        fileKey: createFieldRef('fileKey')
      },
      nullable: !0,
      filter: ['fileKey', '=', createFieldRef('fileKey')],
      orderBy: [['createdAt', 'DESC']],
      expectedMaxCount: 2
    }, {
      name: 'siteMount',
      type: {
        kind: 'object',
        name: _$$Y.SiteMount
      },
      args: [{
        name: 'fileKey',
        type: {
          kind: 'string'
        }
      }],
      checkCanRead: {
        fieldName: 'canReadV2',
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        fileKey: createFieldRef('fileKey')
      },
      nullable: !0,
      filter: ['fileKey', '=', createFieldRef('fileKey')],
      orderBy: [['createdAt', 'DESC']],
      expectedMaxCount: 1
    }, {
      name: 'sitePublishEvents',
      type: {
        kind: 'objects',
        name: _$$Y.SitePublishEvent
      },
      args: [{
        name: 'siteMountId',
        type: {
          kind: 'uuid'
        }
      }, {
        name: 'firstPageSize',
        type: {
          kind: 'int'
        },
        nullable: !0
      }],
      nullable: !0,
      filter: ['siteMountId', '=', createFieldRef('siteMountId')],
      orderBy: [['createdAt', 'DESC']],
      pagination: {
        firstPageSize: createFieldRef('firstPageSize')
      },
      expectedMaxCount: 1e3
    }, {
      name: 'webFonts',
      type: {
        kind: 'objects',
        name: _$$Y.FontFile
      },
      args: [{
        name: 'fileKey',
        type: {
          kind: 'string'
        }
      }],
      filter: ['fileKey', '=', createFieldRef('fileKey')],
      nullable: !0,
      checkCanRead: {
        fieldName: 'canRead',
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        fileKey: createFieldRef('fileKey')
      },
      expectedMaxCount: 200
    }, {
      name: 'userNotificationBell',
      type: {
        kind: 'object',
        name: _$$Y.UserNotificationBell
      },
      args: [{
        name: 'userId',
        type: {
          kind: 'string'
        },
        nullable: !0
      }],
      filter: {
        and: [['userId', '=', createFieldRef('userId')]]
      },
      nullable: !0
    }, {
      name: 'persistentUserNotificationBells',
      type: {
        kind: 'objects',
        name: _$$Y.UserNotificationBell2
      },
      args: [{
        name: 'userId',
        type: {
          kind: 'string'
        },
        nullable: !0
      }],
      resolver: {
        type: 'Redis',
        keyPrefix: 'persistent-user-notification-bell',
        keyPostfix: [createFieldRef('userId')]
      },
      nullable: !0
    }, {
      name: 'allPlanNotificationBellState',
      type: {
        kind: 'object',
        name: _$$Y.UserNotificationBell2
      },
      args: [{
        name: 'userId',
        type: {
          kind: 'string'
        },
        nullable: !0
      }],
      resolver: {
        type: 'Redis',
        keyPrefix: 'persistent-user-notification-bell',
        keyPostfix: [createFieldRef('userId')]
      },
      filter: ['notificationSpaceId', '=', '-1'],
      nullable: !0
    }, {
      name: 'userColorProfilePreference',
      type: {
        kind: 'object',
        name: _$$Y.UserColorProfilePreference
      },
      args: [{
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      filter: ['userId', '=', createFieldRef('userId')],
      nullable: !0
    }, {
      name: 'colorPalettesForTeam',
      type: {
        kind: 'objects',
        name: _$$Y.ColorPalette
      },
      args: [{
        name: 'teamId',
        type: {
          kind: 'bigint'
        }
      }],
      filter: ['teamId', '=', createFieldRef('teamId')],
      checkCanRead: {
        userId: createSessionRef('userId')
      },
      nullable: !0,
      expectedMaxCount: 200
    }, {
      name: 'resourceSave',
      type: {
        kind: 'object',
        name: _$$Y.ResourceSave
      },
      args: [{
        name: 'hubFileId',
        type: {
          kind: 'bigint'
        }
      }, {
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      filter: {
        and: [['hubFileId', '=', createFieldRef('hubFileId')], ['userId', '=', createFieldRef('userId')]]
      },
      nullable: !0
    }, {
      name: 'resourceSaves',
      type: {
        kind: 'objects',
        name: _$$Y.ResourceSave
      },
      args: [{
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      filter: ['userId', '=', createFieldRef('userId')],
      nullable: !0,
      expectedMaxCount: 200
    }, {
      name: 'resourceSaveFromResourceId',
      type: {
        kind: 'object',
        name: _$$Y.ResourceSave
      },
      args: [{
        name: 'resourceId',
        type: {
          kind: 'uuid'
        }
      }, {
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      filter: {
        and: [['resourceId', '=', createFieldRef('resourceId')], ['userId', '=', createFieldRef('userId')]]
      },
      nullable: !0
    }, {
      name: 'userResourceSaves',
      type: {
        kind: 'objects',
        name: _$$Y.ResourceSave
      },
      args: [{
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      filter: ['userId', '=', createFieldRef('userId')],
      nullable: !0,
      expectedMaxCount: 200
    }, {
      name: 'orgResourceSaves',
      type: {
        kind: 'objects',
        name: _$$Y.ResourceSave
      },
      args: [{
        name: 'resourceId',
        type: {
          kind: 'uuid'
        }
      }, {
        name: 'orgIds',
        type: {
          kind: 'list',
          ofType: {
            kind: 'bigint'
          }
        }
      }],
      filter: {
        and: [['resourceId', '=', createFieldRef('resourceId')], ['orgId', 'in', createFieldRef('orgIds')]]
      },
      nullable: !0,
      expectedMaxCount: 200
    }, {
      name: 'pluginInstall',
      type: {
        kind: 'object',
        name: _$$Y.PluginInstall
      },
      args: [{
        name: 'pluginId',
        type: {
          kind: 'bigint'
        }
      }, {
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      filter: {
        and: [['pluginId', '=', createFieldRef('pluginId')], ['userId', '=', createFieldRef('userId')]]
      },
      nullable: !0
    }, {
      name: 'orgPluginInstalls',
      type: {
        kind: 'objects',
        name: _$$Y.PluginInstall
      },
      args: [{
        name: 'pluginId',
        type: {
          kind: 'bigint'
        }
      }, {
        name: 'orgIds',
        type: {
          kind: 'list',
          ofType: {
            kind: 'bigint'
          }
        }
      }],
      filter: {
        and: [['pluginId', '=', createFieldRef('pluginId')], ['orgId', 'in', createFieldRef('orgIds')]]
      },
      nullable: !0,
      expectedMaxCount: 200
    }, {
      name: 'orgAllowlistedPlugins',
      type: {
        kind: 'objects',
        name: _$$Y.AllowlistedPlugin
      },
      args: [{
        name: 'pluginId',
        type: {
          kind: 'bigint'
        }
      }, {
        name: 'orgIds',
        type: {
          kind: 'list',
          ofType: {
            kind: 'bigint'
          }
        }
      }],
      filter: {
        and: [['pluginId', '=', createFieldRef('pluginId')], ['orgId', 'in', createFieldRef('orgIds')], ['allowlistGroupType', '=', 'Org']]
      },
      nullable: !0,
      expectedMaxCount: 200
    }, {
      name: 'colorPaletteForUuid',
      type: {
        kind: 'object',
        name: _$$Y.ColorPalette
      },
      args: [{
        name: 'uuid',
        type: {
          kind: 'uuid'
        }
      }],
      filter: ['uuid', '=', createFieldRef('uuid')],
      checkCanRead: {
        userId: createSessionRef('userId')
      },
      nullable: !0
    }, {
      name: 'appliedColorPaletteForFile',
      type: {
        kind: 'object',
        name: _$$Y.FileColorPalette
      },
      args: [{
        name: 'fileKey',
        type: {
          kind: 'string'
        }
      }],
      filter: {
        and: [['fileKey', '=', createFieldRef('fileKey')]]
      },
      deprecated: {
        reason: `The view AppliedColorPaletteForFile now reads the defaultColorPaletteData
              and userColorPaletteOverrideData fields from the file object directly.`,
        date: '2023-06-27'
      },
      nullable: !0
    }, {
      name: 'pendingUserMentions',
      type: {
        kind: 'objects',
        name: _$$Y.PendingUserMentions
      },
      args: [{
        name: 'fileCommentId',
        type: {
          kind: 'bigint'
        }
      }],
      filter: ['fileCommentId', '=', createFieldRef('fileCommentId')],
      nullable: !0,
      expectedMaxCount: 200
    }, {
      name: 'billingTrialForResourceAndPlanType',
      type: {
        kind: 'object',
        name: _$$Y.BillingTrial
      },
      args: [{
        name: 'resourceId',
        type: {
          kind: 'bigint'
        }
      }, {
        name: 'resourceType',
        type: {
          kind: 'enum',
          name: 'BillingTrialResourceType'
        }
      }, {
        name: 'planType',
        type: {
          kind: 'enum',
          name: 'BillingTrialPlanType'
        }
      }],
      filter: {
        and: [['trialType', '=', 'plan'], ['resourceId', '=', createFieldRef('resourceId')], ['resourceType', '=', createFieldRef('resourceType')], ['planType', '=', createFieldRef('planType')]]
      },
      orderBy: [['createdAt', 'DESC']],
      expectedMaxCount: 1,
      nullable: !0
    }, {
      name: 'billingTrialForResource',
      type: {
        kind: 'object',
        name: _$$Y.BillingTrial
      },
      args: [{
        name: 'resourceId',
        type: {
          kind: 'bigint'
        }
      }, {
        name: 'resourceType',
        type: {
          kind: 'enum',
          name: 'BillingTrialResourceType'
        }
      }],
      filter: {
        and: [['trialType', '=', 'plan'], ['resourceId', '=', createFieldRef('resourceId')], ['resourceType', '=', createFieldRef('resourceType')]]
      },
      orderBy: [['createdAt', 'DESC']],
      expectedMaxCount: 1,
      nullable: !0
    }, {
      name: 'jamboardOfferRedeemedAt',
      type: {
        kind: 'object',
        name: _$$Y.JamboardOfferRedeemedAt
      },
      args: [{
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      filter: ['userId', '=', createFieldRef('userId')],
      expectedMaxCount: 1,
      nullable: !0
    }, {
      name: 'subscriptionUpdateSloData',
      type: {
        kind: 'object',
        name: _$$Y.SubscriptionUpdateSloData
      },
      args: [{
        name: 'id',
        type: {
          kind: 'uuid'
        }
      }],
      filter: ['id', '=', createFieldRef('id')],
      nullable: !0
    }, {
      name: 'graftingUpdateSloData',
      type: {
        kind: 'object',
        name: _$$Y.GraftingUpdateSloData
      },
      args: [{
        name: 'id',
        type: {
          kind: 'uuid'
        }
      }],
      filter: ['id', '=', createFieldRef('id')],
      nullable: !0
    }, {
      name: 'slidesTheme',
      type: {
        kind: 'objects',
        name: _$$Y.SlidesTheme
      },
      args: [{
        name: 'themeKey',
        type: {
          kind: 'string'
        },
        nullable: !0
      }],
      filter: ['themeKey', '=', createFieldRef('themeKey')],
      nullable: !0,
      expectedMaxCount: 200
    }, {
      name: 'adminRequestDashboardRows',
      type: {
        kind: 'objects',
        name: _$$Y.AdminRequestDashboardRow
      },
      args: [{
        name: 'planType',
        type: {
          kind: 'string'
        }
      }, {
        name: 'planId',
        type: {
          kind: 'bigint'
        }
      }, {
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'sortOrder',
        type: {
          kind: 'string'
        },
        nullable: !0
      }, {
        name: 'filterParams',
        type: {
          kind: 'string'
        },
        nullable: !0
      }, {
        name: 'firstPageSize',
        type: {
          kind: 'int'
        },
        nullable: !0
      }],
      orderBy: 'Unordered',
      pagination: {
        firstPageSize: createFieldRef('firstPageSize')
      },
      resolver: {
        type: 'HTTP',
        uri: '/api/internal/livegraph/pagination_resolver/admin_request_dashboard',
        queryParams: {
          userId: createFieldRef('userId'),
          plan_type: createFieldRef('planType'),
          plan_id: createFieldRef('planId'),
          sort_order: createFieldRef('sortOrder'),
          filter_params: createFieldRef('filterParams')
        },
        realtimePolicy: {
          type: 'Static'
        }
      },
      nullable: !0
    }, {
      name: 'adminDashboardRequests',
      type: {
        kind: 'objects',
        name: _$$Y.AdminRequestDashboardRow
      },
      args: [{
        name: 'planType',
        type: {
          kind: 'string'
        }
      }, {
        name: 'planId',
        type: {
          kind: 'bigint'
        }
      }, {
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'sortOrder',
        type: {
          kind: 'string'
        },
        nullable: !0
      }, {
        name: 'filterParams',
        type: {
          kind: 'string'
        },
        nullable: !0
      }, {
        name: 'firstPageSize',
        type: {
          kind: 'int'
        },
        nullable: !0
      }],
      orderBy: 'Unordered',
      pagination: {
        firstPageSize: createFieldRef('firstPageSize')
      },
      resolver: {
        type: 'HTTP',
        uri: '/api/internal/livegraph/pagination_resolver/admin_request_dashboard',
        method: 'POST',
        queryParams: {
          userId: createFieldRef('userId'),
          plan_type: createFieldRef('planType'),
          plan_id: createFieldRef('planId'),
          sort_order: createFieldRef('sortOrder'),
          filter_params: createFieldRef('filterParams')
        },
        realtimePolicy: {
          type: 'Static'
        }
      },
      nullable: !0
    }, {
      name: 'accountTypeRequestsFromPlan',
      type: {
        kind: 'objects',
        name: _$$Y.AccountTypeRequestsFromPlan
      },
      args: [{
        name: 'planType',
        type: {
          kind: 'string'
        }
      }, {
        name: 'planId',
        type: {
          kind: 'bigint'
        }
      }, {
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'sortOrder',
        type: {
          kind: 'string'
        },
        nullable: !0
      }, {
        name: 'filterParams',
        type: {
          kind: 'string'
        },
        nullable: !0
      }, {
        name: 'firstPageSize',
        type: {
          kind: 'int'
        },
        nullable: !0
      }],
      orderBy: 'Unordered',
      pagination: {
        firstPageSize: createFieldRef('firstPageSize')
      },
      resolver: {
        type: 'HTTP',
        uri: '/api/internal/livegraph/pagination_resolver/admin_request_dashboard',
        method: 'POST',
        queryParams: {
          userId: createFieldRef('userId'),
          plan_type: createFieldRef('planType'),
          plan_id: createFieldRef('planId'),
          sort_order: createFieldRef('sortOrder'),
          filter_params: createFieldRef('filterParams')
        },
        realtimePolicy: {
          type: 'RedisPubsub',
          channelPrefix: 'account-type-request-created-',
          channelPostfix: [createFieldRef('planType'), createFieldRef('planId')]
        }
      },
      nullable: !0
    }, {
      name: 'adminRequestDashboardRowCount',
      type: {
        kind: 'object',
        name: _$$Y.AdminRequestDashboardRowCount
      },
      args: [{
        name: 'planType',
        type: {
          kind: 'string'
        }
      }, {
        name: 'planId',
        type: {
          kind: 'bigint'
        }
      }, {
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'filterParams',
        type: {
          kind: 'string'
        },
        nullable: !0
      }],
      resolver: {
        type: 'HTTP',
        uri: '/api/internal/livegraph/sinatra_resolver/admin_request_dashboard_row_count',
        queryParams: {
          userId: createFieldRef('userId'),
          plan_type: createFieldRef('planType'),
          plan_id: createFieldRef('planId'),
          filter_params: createFieldRef('filterParams')
        },
        realtimePolicy: {
          type: 'Static'
        }
      },
      nullable: !0
    }, {
      name: 'adminDashboardRequestsCount',
      type: {
        kind: 'object',
        name: _$$Y.AdminRequestDashboardRowCount
      },
      args: [{
        name: 'planType',
        type: {
          kind: 'string'
        }
      }, {
        name: 'planId',
        type: {
          kind: 'bigint'
        }
      }, {
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'filterParams',
        type: {
          kind: 'string'
        },
        nullable: !0
      }],
      resolver: {
        type: 'HTTP',
        uri: '/api/internal/livegraph/sinatra_resolver/admin_request_dashboard_row_count',
        method: 'POST',
        queryParams: {
          userId: createFieldRef('userId'),
          plan_type: createFieldRef('planType'),
          plan_id: createFieldRef('planId'),
          filter_params: createFieldRef('filterParams')
        },
        realtimePolicy: {
          type: 'Static'
        }
      },
      nullable: !0
    }, {
      name: 'adminDashboardRequestIds',
      type: {
        kind: 'objects',
        name: _$$Y.AdminRequestDashboardRowId
      },
      args: [{
        name: 'planType',
        type: {
          kind: 'string'
        }
      }, {
        name: 'planId',
        type: {
          kind: 'bigint'
        }
      }, {
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'filterParams',
        type: {
          kind: 'string'
        },
        nullable: !0
      }],
      resolver: {
        type: 'HTTP',
        uri: '/api/internal/livegraph/sinatra_resolver/admin_request_dashboard_row_ids',
        method: 'POST',
        queryParams: {
          userId: createFieldRef('userId'),
          plan_type: createFieldRef('planType'),
          plan_id: createFieldRef('planId'),
          filter_params: createFieldRef('filterParams')
        },
        realtimePolicy: {
          type: 'Static'
        }
      },
      nullable: !0
    }, {
      name: 'adminRequestDashboardTotalRowCount',
      type: {
        kind: 'object',
        name: _$$Y.AdminRequestDashboardTotalRowCount
      },
      args: [{
        name: 'planType',
        type: {
          kind: 'string'
        }
      }, {
        name: 'planId',
        type: {
          kind: 'bigint'
        }
      }, {
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'filterParams',
        type: {
          kind: 'string'
        },
        nullable: !0
      }],
      resolver: {
        type: 'HTTP',
        uri: '/api/internal/livegraph/sinatra_resolver/admin_request_dashboard_row_count',
        queryParams: {
          userId: createFieldRef('userId'),
          plan_type: createFieldRef('planType'),
          plan_id: createFieldRef('planId'),
          filter_params: createFieldRef('filterParams')
        },
        realtimePolicy: {
          type: 'Static'
        }
      },
      nullable: !0
    }, {
      name: 'adminDashboardRequestsTotalCount',
      type: {
        kind: 'object',
        name: _$$Y.AdminRequestDashboardTotalRowCount
      },
      args: [{
        name: 'planType',
        type: {
          kind: 'string'
        }
      }, {
        name: 'planId',
        type: {
          kind: 'bigint'
        }
      }, {
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'filterParams',
        type: {
          kind: 'string'
        },
        nullable: !0
      }],
      resolver: {
        type: 'HTTP',
        uri: '/api/internal/livegraph/sinatra_resolver/admin_request_dashboard_row_count',
        method: 'POST',
        queryParams: {
          userId: createFieldRef('userId'),
          plan_type: createFieldRef('planType'),
          plan_id: createFieldRef('planId'),
          filter_params: createFieldRef('filterParams')
        },
        realtimePolicy: {
          type: 'Static'
        }
      },
      nullable: !0
    }, {
      name: 'favoritedResource',
      type: {
        kind: 'object',
        name: _$$Y.FavoritedResourceV2
      },
      args: [{
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'resourceId',
        type: {
          kind: 'string'
        }
      }, {
        name: 'resourceType',
        type: {
          kind: 'enum',
          name: 'FavoritedResourceType'
        }
      }],
      filter: {
        and: [['userId', '=', createFieldRef('userId')], ['resourceType', '=', createFieldRef('resourceType')], ['resourceId', '=', createFieldRef('resourceId')]]
      },
      nullable: !0
    }, {
      name: 'favoritedResources',
      type: {
        kind: 'object',
        name: _$$Y.FavoritedResources
      },
      args: [{
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'orgId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'teamId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      filter: {
        and: [['userId', '=', createFieldRef('userId')], ['orgId', '=', createFieldRef('orgId')], ['teamId', '=', createFieldRef('teamId')]]
      },
      nullable: !0
    }, {
      name: 'devModeSuggestedUpgrades',
      type: {
        kind: 'objects',
        name: _$$Y.DevModeSuggestedUpgradableUser
      },
      args: [{
        name: 'planType',
        type: {
          kind: 'string'
        }
      }, {
        name: 'planId',
        type: {
          kind: 'bigint'
        }
      }, {
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'limit',
        type: {
          kind: 'int'
        },
        nullable: !0
      }],
      orderBy: [['lastUsedAt', 'DESC']],
      resolver: {
        type: 'HTTP',
        uri: '/api/internal/livegraph/sinatra_resolver/dev_mode_suggested_upgrades',
        queryParams: {
          userId: createFieldRef('userId'),
          plan_type: createFieldRef('planType'),
          plan_id: createFieldRef('planId'),
          limit: createFieldRef('limit')
        },
        realtimePolicy: {
          type: 'Static'
        }
      },
      nullable: !0
    }, {
      name: 'devModeSuggestedUpgradesFlag',
      type: {
        kind: 'objects',
        name: _$$Y.DevModeSuggestedUpgradableUser
      },
      args: [{
        name: 'planType',
        type: {
          kind: 'string'
        }
      }, {
        name: 'planId',
        type: {
          kind: 'bigint'
        }
      }, {
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'limit',
        type: {
          kind: 'int'
        },
        nullable: !0
      }],
      orderBy: [['lastUsedAt', 'DESC']],
      resolver: {
        type: 'HTTP',
        uri: '/api/internal/livegraph/sinatra_resolver/dev_mode_suggested_upgrades',
        queryParams: {
          userId: createFieldRef('userId'),
          plan_type: createFieldRef('planType'),
          plan_id: createFieldRef('planId'),
          limit: createFieldRef('limit')
        },
        realtimePolicy: {
          type: 'Static'
        }
      },
      nullable: !0
    }, {
      name: 'deviceTryFile',
      type: {
        kind: 'object',
        name: _$$Y.DeviceTryFile
      },
      args: [{
        name: 'fileKey',
        type: {
          kind: 'string'
        }
      }],
      filter: ['fileKey', '=', createFieldRef('fileKey')],
      nullable: !0,
      expectedMaxCount: 1
    }, {
      name: 'orgLibrarySubscriptions',
      type: {
        kind: 'objects',
        name: _$$Y.LibraryOrgSubscription
      },
      args: [{
        name: 'orgId',
        type: {
          kind: 'bigint'
        }
      }],
      filter: ['orgId', '=', createFieldRef('orgId')],
      nullable: !0,
      expectedMaxCount: 200,
      checkCanRead: {
        userId: createSessionRef('userId')
      }
    }, {
      name: 'libraryPresetSubscriptions',
      type: {
        kind: 'objects',
        name: _$$Y.LibraryPresetSubscription
      },
      args: [{
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      nullable: !0,
      deprecated: {
        reason: 'Use libraryPresetSubscriptionsV2 instead.',
        date: '2025-03-29'
      },
      resolver: {
        type: 'HTTP',
        uri: '/api/internal/livegraph/sinatra_resolver/quickstart_community_libraries',
        queryParams: {
          userId: createFieldRef('userId')
        },
        realtimePolicy: {
          type: 'Static'
        }
      }
    }, {
      name: 'aiMeterUsage',
      type: {
        kind: 'objects',
        name: _$$Y.AiMeterUsage
      },
      args: [{
        name: 'fileKey',
        type: {
          kind: 'string'
        }
      }, {
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      nullable: !0,
      resolver: {
        type: 'HTTP',
        uri: '/api/internal/livegraph/sinatra_resolver/ai_meter_usage',
        queryParams: {
          userId: createFieldRef('userId'),
          fileKey: createFieldRef('fileKey')
        },
        realtimePolicy: {
          type: 'RedisPubsub',
          channelPrefix: 'ai-meter-usage-',
          channelPostfix: [createFieldRef('userId')]
        }
      }
    }, {
      name: 'supabaseAuth',
      type: {
        kind: 'object',
        name: _$$Y.SupabaseAuth
      },
      args: [{
        name: 'fileKey',
        type: {
          kind: 'string'
        }
      }, {
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      nullable: !0,
      resolver: {
        type: 'HTTP',
        uri: '/api/internal/livegraph/sinatra_resolver/supabase_auth',
        queryParams: {
          userId: createFieldRef('userId'),
          fileKey: createFieldRef('fileKey')
        },
        realtimePolicy: {
          type: 'RedisPubsub',
          channelPrefix: 'supabase-auth-',
          channelPostfix: [createFieldRef('userId')]
        }
      }
    }, {
      name: 'libraryPresetSubscriptionsV2',
      type: {
        kind: 'objects',
        name: _$$Y.LibraryPresetSubscriptionV2
      },
      args: [{
        name: 'group',
        type: {
          kind: 'enum',
          name: 'PresetLibraryGroup'
        },
        nullable: !0
      }],
      nullable: !0,
      filter: ['group', '=', createFieldRef('group')],
      checkCanRead: {
        userId: createSessionRef('userId')
      },
      expectedMaxCount: 200
    }, {
      name: 'clientReload',
      type: {
        kind: 'object',
        name: _$$Y.ClientReload
      },
      args: [{
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'cacheNonce',
        type: {
          kind: 'string'
        }
      }],
      resolver: {
        type: 'Redis',
        keyPrefix: 'client_reload',
        keyPostfix: [createFieldRef('userId')]
      },
      nullable: !0,
      filter: ['id', '=', createFieldRef('cacheNonce')]
    }, {
      name: 'lockClient',
      type: {
        kind: 'object',
        name: _$$Y.LockClient
      },
      args: [{
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'cacheNonce',
        type: {
          kind: 'string'
        }
      }],
      resolver: {
        type: 'Redis',
        keyPrefix: 'lock_clients',
        keyPostfix: [createFieldRef('userId')]
      },
      nullable: !0,
      filter: ['id', '=', createFieldRef('cacheNonce')]
    }, {
      name: 'searchWorkspaceFiles',
      type: {
        kind: 'objects',
        name: _$$Y.SearchWorkspaceFilesResult
      },
      args: [{
        name: 'query',
        type: {
          kind: 'string'
        }
      }, {
        name: 'workspaceId',
        type: {
          kind: 'bigint'
        }
      }, {
        name: 'orgId',
        type: {
          kind: 'bigint'
        }
      }, {
        name: 'sort',
        type: {
          kind: 'string'
        }
      }, {
        name: 'desc',
        type: {
          kind: 'string'
        }
      }, {
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      orderBy: 'Unordered',
      resolver: {
        type: 'HTTP',
        uri: '/api/internal/livegraph/sinatra_resolver/search_workspace_files',
        queryParams: {
          query: createFieldRef('query'),
          workspace_id: createFieldRef('workspaceId'),
          org_id: createFieldRef('orgId'),
          sort: createFieldRef('sort'),
          desc: createFieldRef('desc'),
          userId: createFieldRef('userId')
        },
        realtimePolicy: {
          type: 'Static'
        }
      }
    }, {
      name: 'domainOrgAdminsToRemove',
      type: {
        kind: 'objects',
        name: _$$Y.DomainOrgAdminToRemove
      },
      args: [{
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'orgId',
        type: {
          kind: 'bigint'
        }
      }, {
        name: 'domainIds',
        type: {
          kind: 'list',
          ofType: {
            kind: 'bigint'
          }
        },
        nullable: !0
      }],
      resolver: {
        type: 'HTTP',
        uri: '/api/internal/livegraph/sinatra_resolver/domain_org_admins_to_remove',
        method: 'POST',
        queryParams: {
          userId: createFieldRef('userId'),
          org_id: createFieldRef('orgId'),
          domain_ids: createFieldRef('domainIds')
        },
        realtimePolicy: {
          type: 'Static'
        }
      },
      nullable: !0
    }, {
      name: 'templatesByTeam',
      type: {
        kind: 'objects',
        name: _$$Y.TeamTemplateResult
      },
      args: [{
        name: 'teamId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'editorType',
        type: {
          kind: 'enum',
          name: 'EditorType'
        }
      }, {
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'firstPageSize',
        type: {
          kind: 'int'
        },
        nullable: !0
      }],
      pagination: {
        firstPageSize: createFieldRef('firstPageSize')
      },
      orderBy: [['sortOrder', 'ASC']],
      resolver: {
        type: 'HTTP',
        uri: '/api/internal/livegraph/pagination_resolver/templates_by_team',
        queryParams: {
          teamId: createFieldRef('teamId'),
          editorType: createFieldRef('editorType'),
          userId: createFieldRef('userId')
        },
        realtimePolicy: {
          type: 'Static'
        }
      },
      nullable: !0
    }, {
      name: 'templatesByOrg',
      type: {
        kind: 'objects',
        name: _$$Y.TeamTemplateResult
      },
      args: [{
        name: 'orgId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'filterByTeamIds',
        type: {
          kind: 'list',
          ofType: {
            kind: 'bigint'
          }
        },
        nullable: !0
      }, {
        name: 'editorType',
        type: {
          kind: 'enum',
          name: 'EditorType'
        }
      }, {
        name: 'numTemplatesPerTeam',
        type: {
          kind: 'int'
        },
        nullable: !0
      }, {
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'firstPageSize',
        type: {
          kind: 'int'
        },
        nullable: !0
      }],
      pagination: {
        firstPageSize: createFieldRef('firstPageSize')
      },
      orderBy: [['sortOrder', 'ASC']],
      resolver: {
        type: 'HTTP',
        uri: '/api/internal/livegraph/pagination_resolver/templates_by_org',
        queryParams: {
          orgId: createFieldRef('orgId'),
          filterByTeamIds: createFieldRef('filterByTeamIds'),
          editorType: createFieldRef('editorType'),
          numTemplatesPerTeam: createFieldRef('numTemplatesPerTeam'),
          userId: createFieldRef('userId')
        },
        realtimePolicy: {
          type: 'Static'
        }
      },
      nullable: !0
    }, {
      name: 'templatesByOrgWorkspaces',
      type: {
        kind: 'objects',
        name: _$$Y.TeamTemplateResult
      },
      args: [{
        name: 'orgId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'filterByWorkspaceIds',
        type: {
          kind: 'list',
          ofType: {
            kind: 'bigint'
          }
        },
        nullable: !0
      }, {
        name: 'includeMyTeamsOnly',
        type: {
          kind: 'bool'
        },
        nullable: !0
      }, {
        name: 'editorType',
        type: {
          kind: 'enum',
          name: 'EditorType'
        }
      }, {
        name: 'numTemplatesPerTeam',
        type: {
          kind: 'int'
        },
        nullable: !0
      }, {
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'firstPageSize',
        type: {
          kind: 'int'
        },
        nullable: !0
      }],
      pagination: {
        firstPageSize: createFieldRef('firstPageSize')
      },
      orderBy: [['sortOrder', 'ASC']],
      resolver: {
        type: 'HTTP',
        uri: '/api/internal/livegraph/pagination_resolver/templates_by_org_workspaces',
        queryParams: {
          orgId: createFieldRef('orgId'),
          filterByWorkspaceIds: createFieldRef('filterByWorkspaceIds'),
          includeMyTeamsOnly: createFieldRef('includeMyTeamsOnly'),
          numTemplatesPerTeam: createFieldRef('numTemplatesPerTeam'),
          editorType: createFieldRef('editorType'),
          userId: createFieldRef('userId')
        },
        realtimePolicy: {
          type: 'Static'
        }
      },
      nullable: !0
    }, {
      name: 'templatesSearch',
      type: {
        kind: 'objects',
        name: _$$Y.TeamTemplateSearchResult
      },
      args: [{
        name: 'orgId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'teamId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'query',
        type: {
          kind: 'string'
        }
      }, {
        name: 'editorType',
        type: {
          kind: 'enum',
          name: 'EditorType'
        }
      }, {
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'firstPageSize',
        type: {
          kind: 'int'
        },
        nullable: !0
      }],
      pagination: {
        firstPageSize: createFieldRef('firstPageSize')
      },
      orderBy: [['sortOrder', 'ASC']],
      resolver: {
        type: 'HTTP',
        uri: '/api/internal/livegraph/pagination_resolver/templates_search',
        queryParams: {
          orgId: createFieldRef('orgId'),
          teamId: createFieldRef('teamId'),
          query: createFieldRef('query'),
          editorType: createFieldRef('editorType'),
          userId: createFieldRef('userId')
        },
        realtimePolicy: {
          type: 'Static'
        }
      },
      nullable: !0
    }, {
      name: 'memberFlyoutInfo',
      type: {
        kind: 'object',
        name: _$$Y.MemberFlyoutInfo
      },
      args: [{
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'planType',
        type: {
          kind: 'enum',
          name: 'PlanType'
        }
      }, {
        name: 'planId',
        type: {
          kind: 'bigint'
        }
      }, {
        name: 'targetUserId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      resolver: {
        type: 'HTTP',
        uri: '/api/internal/livegraph/sinatra_resolver/member_flyout_info',
        queryParams: {
          userId: createFieldRef('userId'),
          plan_type: createFieldRef('planType'),
          plan_id: createFieldRef('planId'),
          target_user_id: createFieldRef('targetUserId')
        },
        realtimePolicy: {
          type: 'Static'
        }
      },
      nullable: !0
    }, {
      name: 'collectionV2',
      type: {
        kind: 'object',
        name: _$$Y.CollectionV2
      },
      args: [{
        name: 'id',
        type: {
          kind: 'uuid'
        }
      }],
      filter: ['id', '=', createFieldRef('id')],
      nullable: !0,
      expectedMaxCount: 1,
      deprecated: {
        date: '2025-07-21',
        reason: 'Use oneFileCmsCollection instead. The collectionV2 root field does not enforce view permissions and should be deleted ASAP.'
      }
    }, {
      name: 'collectionFieldSchema',
      type: {
        kind: 'object',
        name: _$$Y.CollectionFieldSchema
      },
      args: [{
        name: 'id',
        type: {
          kind: 'uuid'
        }
      }],
      filter: ['id', '=', createFieldRef('id')],
      nullable: !0,
      deprecated: {
        date: '2025-07-21',
        reason: 'Use oneFileCmsCollection instead. The collectionFieldSchema root field does not enforce view permissions and should be deleted ASAP.'
      }
    }, {
      name: 'fileCmsCollections',
      type: {
        kind: 'objects',
        name: _$$Y.FileCmsCollection
      },
      args: [{
        name: 'fileKey',
        type: {
          kind: 'string'
        }
      }],
      filter: ['fileKey', '=', createFieldRef('fileKey')],
      orderBy: [['createdAt', 'DESC']],
      nullable: !0,
      expectedMaxCount: 200,
      checkCanRead: {
        fieldName: 'canRead',
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      }
    }, {
      name: 'oneFileCmsCollection',
      type: {
        kind: 'object',
        name: _$$Y.FileCmsCollection
      },
      args: [{
        name: 'fileKey',
        type: {
          kind: 'string'
        }
      }, {
        name: 'collectionId',
        type: {
          kind: 'uuid'
        }
      }],
      filter: {
        and: [['fileKey', '=', createFieldRef('fileKey')], ['collectionId', '=', createFieldRef('collectionId')]]
      },
      nullable: !0,
      checkCanRead: {
        fieldName: 'canRead',
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId')
      }
    }, {
      name: 'collectionItemV2',
      type: {
        kind: 'object',
        name: _$$Y.CollectionItemV2
      },
      args: [{
        name: 'id',
        type: {
          kind: 'uuid'
        }
      }],
      filter: ['id', '=', createFieldRef('id')],
      nullable: !0,
      expectedMaxCount: 1,
      deprecated: {
        date: '2025-07-21',
        reason: 'Use oneFileCmsCollection instead. The collectionItemV2 root field does not enforce view permissions and should be deleted ASAP.'
      }
    }, {
      name: 'collectionItemByStableId',
      type: {
        kind: 'object',
        name: _$$Y.CollectionItemV2
      },
      args: [{
        name: 'stableId',
        type: {
          kind: 'uuid'
        }
      }, {
        name: 'collectionId',
        type: {
          kind: 'uuid'
        }
      }],
      filter: {
        and: [['stableId', '=', createFieldRef('stableId')], ['collectionId', '=', createFieldRef('collectionId')]]
      },
      nullable: !0,
      expectedMaxCount: 1,
      deprecated: {
        date: '2025-07-21',
        reason: 'Use oneFileCmsCollection instead. The collectionItemByStableId root field does not enforce view permissions and should be deleted ASAP.'
      }
    }, {
      name: 'itemsForCollectionV2',
      type: {
        kind: 'objects',
        name: _$$Y.CollectionItemV2
      },
      args: [{
        name: 'collectionId',
        type: {
          kind: 'uuid'
        }
      }],
      filter: ['collectionId', '=', createFieldRef('collectionId')],
      nullable: !0,
      expectedMaxCount: 200,
      deprecated: {
        date: '2025-07-21',
        reason: 'Use oneFileCmsCollection instead. The itemsForCollectionV2 root field does not enforce view permissions and should be deleted ASAP.'
      }
    }, {
      name: 'testFeatureGateFromRoot',
      type: {
        kind: 'object',
        name: _$$Y.StatsigFeatureGate
      },
      nullable: !0,
      resolver: {
        type: 'Statsig',
        statsigUser: {},
        statsigResource: {
          type: 'flag',
          flagName: 'livegraph_test_feature_gate'
        }
      }
    }, {
      name: 'testPeriodicUpdate',
      type: {
        kind: 'object',
        name: _$$Y.PeriodicUpdate
      },
      nullable: !0,
      resolver: {
        type: 'PeriodicUpdate'
      }
    }, {
      name: 'computedFieldTestPeriodicUpdate',
      type: {
        kind: 'string'
      },
      computed: !0,
      nullable: !0,
      dependencies: {
        testPeriodicUpdate: {
          id: NULL_FIELD_REF,
          refreshValue: NULL_FIELD_REF
        }
      }
    }, {
      name: 'testPlanFromRoot',
      type: {
        kind: 'object',
        name: _$$Y.TestPlan
      },
      nullable: !0,
      computed: !0,
      args: [{
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      dependencies: {
        currentUser: [{
          userId: createViewRef('userId')
        }, {
          name: NULL_FIELD_REF,
          testPlan: {
            id: NULL_FIELD_REF,
            name: NULL_FIELD_REF
          }
        }]
      }
    }, {
      name: 'litmusProject',
      type: {
        kind: 'object',
        name: _$$Y.LitmusProject
      },
      args: [{
        name: 'id',
        type: {
          kind: 'uuid'
        }
      }, {
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      filter: ['id', '=', createFieldRef('id')],
      nullable: !0,
      checkCanRead: {
        fieldName: 'canView',
        userId: createSessionRef('userId')
      }
    }, {
      name: 'litmusProjects',
      type: {
        kind: 'objects',
        name: _$$Y.LitmusProject
      },
      checkCanRead: {
        fieldName: 'canView',
        userId: createSessionRef('userId')
      },
      filter: ['id', '<>', null],
      expectedMaxCount: 200
    }, {
      name: 'litmusComparisons',
      type: {
        kind: 'objects',
        name: _$$Y.LitmusComparison
      },
      filter: ['litmusProjectId', '<>', null],
      orderBy: [['createdAt', 'DESC']],
      expectedMaxCount: 200,
      checkCanRead: {
        userId: createSessionRef('userId')
      }
    }, {
      name: 'litmusComparison',
      type: {
        kind: 'object',
        name: _$$Y.LitmusComparison
      },
      args: [{
        name: 'id',
        type: {
          kind: 'uuid'
        }
      }],
      filter: ['id', '=', createFieldRef('id')],
      nullable: !0,
      checkCanRead: {
        userId: createSessionRef('userId')
      }
    }, {
      name: '_teamUser',
      type: {
        kind: 'object',
        name: _$$Y.TeamUser
      },
      nullable: !0,
      args: [{
        name: 'id',
        type: {
          kind: 'bigint'
        }
      }],
      filter: ['id', '=', createFieldRef('id')],
      bannedFromViews: !0
    }, {
      name: '_teamUserByUserIdAndTeamId',
      type: {
        kind: 'object',
        name: _$$Y.TeamUser
      },
      nullable: !0,
      args: [{
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'teamId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      filter: {
        and: [['userId', '=', createFieldRef('userId')], ['teamId', '=', createFieldRef('teamId')]]
      },
      bannedFromViews: !0
    }, {
      name: '_orgUser',
      type: {
        kind: 'object',
        name: _$$Y.OrgUser
      },
      nullable: !0,
      args: [{
        name: 'id',
        type: {
          kind: 'bigint'
        }
      }],
      filter: ['id', '=', createFieldRef('id')],
      bannedFromViews: !0
    }, {
      name: '_orgUserByUserIdAndOrgId',
      type: {
        kind: 'object',
        name: _$$Y.OrgUser
      },
      nullable: !0,
      args: [{
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'orgId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      filter: {
        and: [['userId', '=', createFieldRef('userId')], ['orgId', '=', createFieldRef('orgId')]]
      },
      bannedFromViews: !0
    }, {
      name: 'resourceConnectionInvite',
      type: {
        kind: 'object',
        name: _$$Y.ResourceConnectionInvite
      },
      args: [{
        name: 'id',
        type: {
          kind: 'uuid'
        }
      }],
      filter: ['id', '=', createFieldRef('id')],
      nullable: !0,
      checkCanRead: {
        userId: createSessionRef('userId')
      }
    }, {
      name: 'resourceConnection',
      type: {
        kind: 'object',
        name: _$$Y.ResourceConnection
      },
      args: [{
        name: 'id',
        type: {
          kind: 'uuid'
        }
      }],
      filter: ['id', '=', createFieldRef('id')],
      nullable: !0,
      checkCanRead: {
        userId: createSessionRef('userId')
      }
    }, {
      name: 'resourceConnectionSharingGroups',
      type: {
        kind: 'objects',
        name: _$$Y.SharingGroup
      },
      args: [{
        name: 'resourceConnectionId',
        type: {
          kind: 'uuid'
        }
      }],
      filter: {
        and: [['groupId', '=', createFieldRef('resourceConnectionId')], ['groupType', '=', 'resource_connection']]
      },
      checkCanRead: {
        userId: createSessionRef('userId')
      },
      expectedMaxCount: 50
    }, {
      name: 'personalDraftToPlanDraftLocation',
      type: {
        kind: 'object',
        name: _$$Y.PersonalDraftToPlanDraftLocation
      },
      args: [{
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }],
      filter: ['userId', '=', createFieldRef('userId')],
      nullable: !0
    }, {
      name: 'trashedResources',
      type: {
        kind: 'objects',
        name: _$$Y.TrashedResource
      },
      args: [{
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'planType',
        type: {
          kind: 'string'
        },
        nullable: !0
      }, {
        name: 'planId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'cursor',
        type: {
          kind: 'string'
        },
        nullable: !0
      }, {
        name: 'creatorFilter',
        type: {
          kind: 'string'
        },
        nullable: !0
      }, {
        name: 'fileTypeFilter',
        type: {
          kind: 'string'
        },
        nullable: !0
      }, {
        name: 'firstPageSize',
        type: {
          kind: 'int'
        }
      }, {
        name: 'sortType',
        type: {
          kind: 'string'
        },
        nullable: !0
      }, {
        name: 'sortDirection',
        type: {
          kind: 'string'
        },
        nullable: !0
      }, {
        name: 'queryParams',
        type: {
          kind: 'string'
        },
        nullable: !0
      }],
      pagination: {
        firstPageSize: createFieldRef('firstPageSize')
      },
      resolver: {
        type: 'HTTP',
        uri: '/api/internal/livegraph/pagination_resolver/trashed_resources',
        queryParams: {
          userId: createFieldRef('userId'),
          plan_type: createFieldRef('planType'),
          plan_id: createFieldRef('planId'),
          cursor: createFieldRef('cursor'),
          creator_filter: createFieldRef('creatorFilter'),
          file_type_filter: createFieldRef('fileTypeFilter'),
          first_page_size: createFieldRef('firstPageSize'),
          sort_type: createFieldRef('sortType'),
          sort_direction: createFieldRef('sortDirection'),
          query_params: createFieldRef('queryParams')
        },
        realtimePolicy: {
          type: 'Static'
        }
      },
      orderBy: 'Unordered'
    }, {
      name: 'paginatedFilesByProjectId',
      type: {
        kind: 'objects',
        name: _$$Y.File
      },
      args: [{
        name: 'projectId',
        type: {
          kind: 'bigint'
        }
      }, {
        name: 'firstPageSize',
        type: {
          kind: 'int'
        }
      }, {
        name: 'sortColumn',
        type: {
          kind: 'string'
        }
      }, {
        name: 'sortType',
        type: {
          kind: 'string'
        }
      }],
      filter: {
        and: [['folderId', '=', createFieldRef('projectId')], ['trashedAt', '=', null], ['deletedAt', '=', null]]
      },
      pagination: {
        firstPageSize: createFieldRef('firstPageSize'),
        sortOrder: createFieldRef('sortType'),
        cursorColumnSet: {
          updatedAt: ['updatedAt'],
          createdAt: ['createdAt'],
          name: ['name']
        },
        selectedCursorColumn: createFieldRef('sortColumn'),
        idColumn: 'key'
      },
      checkCanRead: {
        fieldName: 'canAccess',
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        linkAccessOverrideKey: null
      }
    }, {
      name: 'paginatedFilesByProjectIdAndEditorType',
      type: {
        kind: 'objects',
        name: _$$Y.File
      },
      args: [{
        name: 'projectId',
        type: {
          kind: 'bigint'
        }
      }, {
        name: 'editorType',
        type: {
          kind: 'int'
        }
      }, {
        name: 'firstPageSize',
        type: {
          kind: 'int'
        }
      }, {
        name: 'sortColumn',
        type: {
          kind: 'string'
        }
      }, {
        name: 'sortType',
        type: {
          kind: 'string'
        }
      }],
      filter: {
        and: [['folderId', '=', createFieldRef('projectId')], ['_editorTypeRaw', '=', createFieldRef('editorType')], ['trashedAt', '=', null], ['deletedAt', '=', null]]
      },
      pagination: {
        firstPageSize: createFieldRef('firstPageSize'),
        sortOrder: createFieldRef('sortType'),
        cursorColumnSet: {
          updatedAt: ['updatedAt'],
          createdAt: ['createdAt'],
          name: ['name']
        },
        selectedCursorColumn: createFieldRef('sortColumn'),
        idColumn: 'key'
      },
      checkCanRead: {
        fieldName: 'canAccess',
        userId: createSessionRef('userId'),
        sessionId: createSessionRef('sessionId'),
        anonymousUserId: createSessionRef('anonymousUserId'),
        linkAccessOverrideKey: null
      }
    }, {
      name: 'hasConnectedPlanUserInOrgFolder',
      type: {
        kind: 'objects',
        name: 'HasConnectedPlanUserInOrgFolder'
      },
      nullable: !0,
      args: [{
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'org_id',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'license_type',
        type: {
          kind: 'string'
        },
        nullable: !0
      }],
      resolver: {
        type: 'HTTP',
        uri: '/api/internal/livegraph/sinatra_resolver/has_connected_plan_user_in_org',
        queryParams: {
          userId: createFieldRef('userId'),
          org_id: createFieldRef('org_id'),
          license_type: createFieldRef('license_type')
        },
        realtimePolicy: {
          type: 'RedisPubsub',
          channelPrefix: 'has-connected-plan-user-in-org',
          channelPostfix: [createFieldRef('org_id'), createFieldRef('license_type')]
        }
      }
    }, {
      name: 'teamUserDescendedRoles',
      type: {
        kind: 'objects',
        name: _$$Y.DescendedRolesOnTeam
      },
      args: [{
        name: 'userId',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'team_id',
        type: {
          kind: 'bigint'
        },
        nullable: !0
      }, {
        name: 'user_id_in_team',
        type: {
          kind: 'string'
        },
        nullable: !0
      }],
      nullable: !0,
      resolver: {
        type: 'HTTP',
        uri: '/api/internal/livegraph/sinatra_resolver/team_user_descended_roles',
        queryParams: {
          userId: createFieldRef('userId'),
          team_id: createFieldRef('team_id'),
          user_id_in_team: createFieldRef('user_id_in_team')
        },
        realtimePolicy: {
          type: 'Static'
        }
      }
    }, {
      name: 'userGroup',
      type: {
        kind: 'object',
        name: _$$Y.UserGroup
      },
      args: [{
        name: 'id',
        type: {
          kind: 'uuid'
        }
      }],
      filter: ['id', '=', createFieldRef('id')],
      nullable: !0,
      checkCanRead: {
        userId: createSessionRef('userId')
      }
    }, ...ds, ...dr, ...da, ...lu, ...dl, ...lp]
  }, up, uu, uX, uQ, cB, RE, cq, cU, cF, cM, kB, cj, c2, c6, kz, kY, kK, ul, Rk, RT, k$, kZ, pS, pw, kh, dj, m, kF, kM, kj, kU, _, cG, cz, cH, c3, c4, T1, eR, d4, D, uS, uw, dX, cQ, pE, uO, uz, pO, pD, pL, pg, pb, pv, pA, py, cL, pT, pC, kA, kD, uN, uP, dU, dB, uD, ua, dD, dM, uG, dZ, eJ, dz, e1, e2, e5, e4, dq, uL, d0, d6, d7, d8, uT, uj, cr, ca, dW, RC, H, W, G, z, Y, q, V, K, $, ky, Q, J, uH, et, eE, eC, eT, kf, dV, dG, p0, pj, pq, pV, pG, pz, dY, eO, ug, u_, uv, uI, uE, ux, cK, c$, A, y, es, S, cl, ko, Ra, eh, ef, e_, eA, ps, pd, pc, pn, pp, pu, uJ, p$, pX, pJ, cd, cc, F, cR, cE, cx, cS, dK, cs, cu, cp, cm, ch, b, co, er, eo, dT, dR, dw, TZ, T2, cg, ek, ex, ew, TJ, TQ, cY, j, U, B, cJ, dQ, dJ, kb, kv, cI, e0, pK, cX, cV, p1, cv, cA, cf, c_, cb, cy, p3, p5, p7, p4, p6, p8, d1, d2, d5, ej, eU, eB, eL, eM, eF, eV, eG, pY, pI, c, uU, u$, p2, px, uF, RA, u, uC, el, ed, ea, Z, X, eg, cw, pB, ez, eH, eY, eW, eK, eq, e$, eZ, eX, eQ, Rt, pl, pk, uB, ck, cT, cC, uM, TX, uZ, RK, u0, u5, u2, u1, u4, u3, u6, u7, u8, u9, RH, cW, eP, pM, uW, uA, uf, uo, ub, uy, eN, d9, ce, ct, cZ, ur, Rx, dH, uK, uY, uq, p, c7, c8, c9, ue, ut, ui, RU, pF, un, km, L, pr, pU, cn, pR, pi, pt, pe, po, pZ, pQ, RF, h, g, f, TG, ud, uc, uh, T0, c5, Tz, T4, TH, TK, c0, c1, RM, Rj, TY, Tq, ey, eb, ev, eS, us, T5, ks, ci, M, kt, ki, T7, T9, T8, kl, kn, kr, T$, ka, ku, kp, kd, kc, kg, kI, kC, kT, kw, kS, kN, kP, kR, Rd, Rs, Rl, Ro, Rg, kE, kx, kO, kL, pN, kQ, kJ, k0, k1, k2, RI, k5, k4, Rw, k3, k6, k7, R_, k8, k9, Re, pH, pW, Ri, Rn, Rr, v, I, Rc, Ru, Rp, Rm, Rh, Rf, Ry, Rv, Rb, ke, kX, kq, d3, RS, um, eI, RR, RN, RP, RO, RD, RL, Rz, RG, RB, RV, RW],
  enums: l,
  legacyConfigDef: {
    exemptions: {
      viewArg: {
        string: {
          bigint: ['FilePermissions.file.repo.roles.user.teamUser.teamId', 'FilePermissions.file.roles.user.teamUser.teamId', 'FilePermissions.fileV2.repo.roles.user.teamUser.teamId', 'FilePermissions.fileV2.roles.user.teamUser.teamId', 'FilePermissions._fileViewableByPrototypeViewers.repo.roles.user.teamUser.teamId', 'FilePermissions._fileViewableByPrototypeViewers.roles.user.teamUser.teamId', 'FilePermissionsV2.file.readableRoles.user.teamUser.teamId', 'FilePermissionsV2.file.repo.roles.user.teamUser.teamId', 'FilePermissionsV2.fileV2.readableRoles.user.teamUser.teamId', 'FilePermissionsV2.fileV2.repo.roles.user.teamUser.teamId', 'FilePermissionsV2._fileViewableByPrototypeViewers.readableRoles.user.teamUser.teamId', 'FilePermissionsV2._fileViewableByPrototypeViewers.repo.roles.user.teamUser.teamId', 'FileShareModalPermissionsV3.file.readableRoles.user.teamUser.teamId', 'FileShareModalPermissionsV3.file.repo.roles.user.teamUser.teamId', 'FileShareModalPermissionsV3.fileV2.readableRoles.user.teamUser.teamId', 'FileShareModalPermissionsV3.fileV2.repo.roles.user.teamUser.teamId', 'FileShareModalPermissionsV3._fileViewableByPrototypeViewers.readableRoles.user.teamUser.teamId', 'FileShareModalPermissionsV3._fileViewableByPrototypeViewers.repo.roles.user.teamUser.teamId', 'FolderCanEdit.project.id', 'FolderCanView.project.id', 'FolderIsOwner.project.id', 'FolderCanCreateFigJamFile.project.id', 'FolderCanCreateFigjamFile.project.id', 'FolderCanCreateDesignFile.project.id', 'FolderCanCreateSlidesFile.project.id', 'FolderCanMove.project.id', 'FolderPermissions.project.projectId', 'LibraryManagementData.org.orgId', 'LicenseGroupSubscribedLibrariesForTeam.team.teamId', 'OrgCanSelfUpgrade.org.id', 'ProRequestUpgradeModalData.team.teamId', 'ProjectTilePermissions.project.projectId', 'RepoCanEdit.repo.id', 'RepoCanViewPrototype.repo.id', 'TeamCanAdmin.team.id', 'TeamCanEdit.team.id', 'TeamCanView.team.id', 'TeamCanViewInAdmin.team.id', 'TeamIsOwner.team.id', 'TeamPermissions.team.teamId', 'UserMonetizationMetadata.userMonetizationMetadata.userId', 'WorkspaceSubscribedLibrariesForTeam.team.teamId']
        }
      },
      filterArg: {
        string: {
          bigint: [`${_$$Y.DevModeActivity}.user.id`, `${_$$Y.Component}.user.id`, `${_$$Y.FavoritedProject}.readableProject.id`, `${_$$Y.FavoritedPrototype}.prototype.id`, `${_$$Y.FavoritedPrototype}.readablePrototype.id`, `${_$$Y.FavoritedTeam}.team.id`, `${_$$Y.FavoritedWorkspace}.licenseGroup.id`, `${_$$Y.FavoritedWorkspace}.workspace.id`, `${_$$Y.File}.publishedHubFile.figFileId`, `${_$$Y.OrgAwareTeamRole}.team.id`, `${_$$Y.OrgUserUpgradeWithProject}.project.id`, `${_$$Y.OrgUserUpgradeWithRepo}.repo.id`, `${_$$Y.OrgUserUpgradeWithTeam}.team.id`, `${_$$Y.OrgUserUpgradeWithTeam}.teamLimitedInfo.id`, `${_$$Y.ProjectRole}.project.id`, `${_$$Y.RepoRole}.repo.id`, `${_$$Y.SharedWithYouFolder}.folder.id`, `${_$$Y.SharedWithYouRepo}.repo.id`, `${_$$Y.SharedWithYouTeam}.team.id`, `${_$$Y.StateGroup}.user.id`, `${_$$Y.Style}.user.id`, `${_$$Y.StyleWithDestinationAsset}.user.id`, `${_$$Y.StyleWithDestinationAssetV2}.user.id`, `${_$$Y.StyleWithLegacySourceAsset}.user.id`, `${_$$Y.TeamRole}.team.id`, `${_$$Y.Template}.publishedByUser.id`, `${_$$Y.Template}.publishedByUserNullable.id`, `${_$$Y.Variable}.user.id`, `${_$$Y.VariableSet}.user.id`, `${_$$Y.LibraryAsset}.user.id`, 'root.developerLinks.key', 'root.plugin.id', 'root.pluginSecurityFormResponse.pluginId', `${_$$Y.File}.trashedUser.id`, `${_$$Y.FilePrototypeInfo}.trashedUser.id`, `${_$$Y.ResourceConnectionInvite}.projectLimitedInfo.id`, `${_$$Y.ResourceConnection}.projectLimitedInfo.id`, `${_$$Y.ResourceConnection}.project.id`, `${_$$Y.TeamRole}.eduGracePeriod.teamId`],
          uuid: [`${_$$Y.File}.passwordAuthentication.anonymousUserId`, `${_$$Y.File}.sourceFilePasswordAuthentication.anonymousUserId`, `${_$$Y.Repo}.passwordAuthentication.anonymousUserId`]
        }
      },
      computedFieldArg: {
        string: {
          bigint: [`${_$$Y.UserMonetizationMetadata}.canRead.root.user.userId`]
        }
      }
    },
    allowAllExemptions: !1
  }
};
class R5 {
  constructor(e) {
    this.analyticsHandler = e;
  }
  logError(e) {
    this.analyticsHandler.trackDefinedEvent('livegraph.error_log', e);
  }
}
let R6 = () => {
  let e = new Set();
  return (t, i) => {
    if (typeof i == 'object' && i !== null) {
      if (e.has(i)) return;
      e.add(i);
    }
    return i;
  };
};
let Ns = {
  SYNC_BLOCKED_MUTATIONS: 'livegraph.web.sync.blocked_mutations'
};
let No = {
  CONNECTION: 'livegraph.web.connection.latency',
  SUBSCRIPTION_DATA: 'livegraph.web.subscription.server_latency',
  SUBSCRIPTION_DATA_VERSION: 'livegraph.web.subscription.server_latency.by_version',
  SUBSCRIPTION_E2E_DATA: 'livegraph.web.subscription.e2e_latency',
  SUBSCRIPTION_E2E_DATA_VERSION: 'livegraph.web.subscription.e2e_latency.by_version',
  SYNC: 'livegraph.web.sync.latency',
  OPTIMISTIC_MUTATION: 'livegraph.web.optimistic_mutation.latency',
  SUBSCRIPTION_UPDATE_LATENCY: 'livegraph.web.subscription.subscription_update_latency',
  SUBSCRIPTION_UPDATE_LATENCY_V2: 'livegraph.web.subscription.update_latency',
  ERROR_RECOVERY_LATENCY: 'livegraph.web.subscription.error_recovery.latency',
  SUBSCRIPTION_SERVER_LATENCY_V2: 'livegraph.web.subscription.server_latency_v2',
  SUBSCRIPTION_E2E_LATENCY_V2: 'livegraph.web.subscription.e2e_latency_v2',
  SESSION_SUCCESS: 'livegraph.web.session_success_percentage',
  PAGINATION_LATENCY: 'livegraph.web.pagination.latency'
};
let Nl = {
  CONNECTION_STUCK: 'livegraph.web.connection.stuck',
  SUBSCRIPTION_STUCK: 'livegraph.web.subscription.stuck',
  SUBSCRIPTION_STUCK_V2: 'livegraph.web.subscription.stuck_v2',
  SYNC_STUCK: 'livegraph.web.sync.stuck',
  OPTIMISTIC_MUTATION: 'livegraph.web.mutation',
  OPTIMISTIC_MUTATION_FAIL_OBJ_NAME: 'livegraph.web.mutation.failed_optimistic_slo_object_name',
  OPEN_FILE_NULL: 'livegraph.web.open_file_null',
  PENDING_MUTATION_EXISTENCE: 'livegraph.web.pending_mutation_existence',
  EMPTY_SYNC: 'livegraph.web.sync.empty',
  UNEXPECTED_OBJECT_NAME: 'livegraph.web.unexpected_object_name',
  CONNECTION_CLOSE: 'livegraph.web.connection.close',
  CONNECTION_ATTEMPT: 'livegraph.web.connection.attempt',
  INITIAL_VIEW_SUCCESS: 'livegraph.web.subscription.initial_view_success',
  INITIAL_VIEW_SUCCESS_VERSION: 'livegraph.web.subscription.initial_view_success.by_version',
  INITIAL_VIEW_FAILURE: 'livegraph.web.subscription.initial_view_fail',
  INITIAL_VIEW_FAILURE_VERSION: 'livegraph.web.subscription.initial_view_fail.by_version',
  INITIAL_VIEW_STUCK_LOADING: 'livegraph.web.subscription.initial_view_stuck_loading',
  SUBSCRIPTION_UPDATE_SUCCESS: 'livegraph.web.subscription.subscription_update_success',
  SUBSCRIPTION_UPDATE_FAILURE: 'livegraph.web.subscription.subscription_update_fail',
  OPTIMISTIC_MUTATION_SUCCESS: 'livegraph.web.subscription.optimistic_mutation_success',
  OPTIMISTIC_MUTATION_FAIL: 'livegraph.web.subscription.optimistic_mutation_fail',
  SUBSCRIPTION_ERRORS: 'livegraph.web.subscription.errors',
  ERRORED_VIEW: 'livegraph.web.subscription.view_errors',
  HARD_REFRESH: 'livegraph.web.subscription.hard_refresh',
  SERVER_CLIENT_DISCREPANCY: 'livegraph.web.subscription.server_client_discrepancy',
  SYNC_TIMEOUT: 'livegraph.web.sync.timeout'
};
var Nd = (e => (e[e.fail = 0] = 'fail', e[e.success = 1] = 'success', e))(Nd || {});
let Nc = getFeatureFlags().datadog_rum_livegraph_events ? datadogRum : void 0;
function Nu(e, t, i, n, r) {
  Nc?.addDurationVital(e, {
    description: t.view._name,
    startTime: i,
    duration: n,
    context: r
  });
}
class Np {
  constructor(e, t = {}) {
    this.reportStuck = e;
    this.tags = t;
    this.stuckBucketTimers = [];
    this.timer = new _$$M({});
    this.stuckBucketTimers = [{
      duration: 15e3,
      label: '15sec'
    }, {
      duration: 3e4,
      label: '30sec'
    }, {
      duration: 6e4,
      label: '1min'
    }, {
      duration: 3e5,
      label: '5min'
    }, {
      duration: 6e5,
      label: '10min'
    }].map(({
      duration: e,
      label: t
    }) => {
      let i = new _$$M({
        onTimeout: (e, n) => {
          i.finish();
          navigator.onLine && this.reportStuck(t, e, n);
        },
        timeoutMs: e
      });
      return i;
    });
  }
  timerFinished() {
    return this.timer.finished;
  }
  getStartTime() {
    return this.timer.startTime;
  }
  finishTimers(e) {
    let t = !this.timer.finished;
    let i = t ? this.timer.finish() : 0;
    for (let e of this.stuckBucketTimers) e.finished || e.finish();
    t && e && e(i, this.timer.backgrounded, this.timer.wasOffline, this.tags);
  }
}
class Nm {
  constructor(e, t = {}) {
    this.client = e;
    this.defaultTags = t;
    this.batchedCustomEvents = [];
    this.batchedNumericEvents = [];
    this.subscriptionTimings = new Map();
    this.pendingFileMutations = [];
    this.podName = 'unknown';
    this.containerName = 'unknown';
    this.serverVersion = 'unknown';
    this.authFailed = !1;
    this.connectionCount = 0;
    this.erroredViewsCount = 0;
    this.successfulLoadedViewsCount = 0;
    this.sessionReportingIntervalMs = 3e4;
    this.sessionReportingThreshold = 20;
    this.stuckLoadingThresholdMs = 15e3;
    this.figmentDebuggingSamplingRate = 0;
    this.slowUpdateLatencyThreshold = 1e6;
    this.updatePendingMutationVerboseLogging = e => {
      'File' in e && (this.pendingFileMutations.push({
        mutation: e.File,
        timestamp: performance.now()
      }), this.pendingFileMutations.length > 20 && this.pendingFileMutations.shift());
    };
    this.onVisibilityChange = async () => {
      document.visibilityState === 'hidden' && (await this.sendBatchedEvents());
    };
    this._currentlySendingBatchedEvents = !1;
    this.sendBatchedEvents = async () => {
      if (this._currentlySendingBatchedEvents) return;
      this._currentlySendingBatchedEvents = !0;
      let e = this.batchedCustomEvents;
      let t = this.batchedNumericEvents;
      this.batchedCustomEvents = [];
      this.batchedNumericEvents = [];
      try {
        await Promise.all([BO(e), _$$rI(t)]);
      } catch (e) {}
      this._currentlySendingBatchedEvents = !1;
    };
    this.reportCustomEvent = (e, t = {}) => {
      this.batchedCustomEvents.push({
        metric: e,
        tags: {
          ...this.defaultTags,
          ...t
        }
      });
    };
    this.reportNumericEvent = (e, t, i = {}) => {
      this.batchedNumericEvents.push({
        metric: e,
        value: t,
        tags: {
          ...this.defaultTags,
          ...i
        }
      });
    };
    this.authTimer = null;
    this.nextConnectionType = 'initial_connection';
    this.refreshHandler = e => {
      e.type === 'HARD_REFRESH' && this.reportCustomEvent(Nl.HARD_REFRESH);
    };
    this.initialConnectionHandler = e => {
      if (e.type === 'CONNECTION_STATE') {
        let t = Nc?.startDurationVital('livegraph.web.connection');
        if (e.state.type !== 'connecting' || this.authTimer) {
          if (e.state.type === 'connected' && e.state.authenticated && this.authTimer && !this.authTimer.timerFinished()) {
            this.authFailed = !1;
            let i = this.lastConnectTime ? this.getLastConnectBucket(performance.now() - this.lastConnectTime) : 'none';
            this.lastConnectTime = performance.now();
            this.connectionCount++;
            let n = 'initial';
            this.podName !== 'unknown' && (n = this.podName === e.state.podName ? 'same' : 'different');
            e.state.podName || (n = 'missing');
            this.podName = e.state.podName ?? 'unknown';
            this.containerName = e.state.containerName ?? 'unknown';
            this.serverVersion = e.state.serverVersion ?? 'unknown';
            this.authTimer.finishTimers((r, a, s) => {
              let o = {
                connection_type: this.nextConnectionType,
                was_backgrounded: String(a),
                was_offline: String(s),
                slow_connect: String(r >= 3e4),
                server_version: this.serverVersion
              };
              this.nextConnectionType === 'reconnect' && (o.last_connect = i);
              this.reportNumericEvent(No.CONNECTION, r, o);
              Nc && Nc.stopDurationVital(t, {
                context: {
                  status: 'success',
                  ...o
                }
              });
              this.reportCustomEvent(Nl.CONNECTION_ATTEMPT, {
                count: this.getBucket(e.state.count),
                backgrounded: String(a),
                last_server: n,
                server_version: this.serverVersion
              });
            });
            this.nextConnectionType = 'reconnect';
            this.sessionSuccessTimer || (this.sessionSuccessTimer = setTimeout(() => {
              this.reportViewLoadSuccessPercentage();
            }, this.sessionReportingIntervalMs));
          } else {
            e.state.type === 'disconnected' && (this.authTimer && this.authTimer.finishTimers(), this.authTimer = null);
          }
        } else {
          let e = document.visibilityState;
          this.authTimer = new Np((i, n, r) => {
            if (navigator.onLine) {
              let a = {
                connection_type: this.nextConnectionType,
                client_visibility: document.visibilityState,
                client_visibility_on_initiate: e,
                backgrounded: String(n),
                wasOffline: String(r),
                server_version: this.serverVersion,
                duration: i
              };
              this.reportCustomEvent(Nl.CONNECTION_STUCK, a);
              Nc && Nc.stopDurationVital(t, {
                context: a
              });
            }
          }, {
            client_visibility_on_initiate: e
          });
        }
      }
    };
    this.connectionClosedHandler = e => {
      if (e.type === 'CONNECTION_CLOSED') {
        let t = {
          code: e.closeEvent.code.toString(),
          reason: e.closeEvent.reason,
          server_version: this.serverVersion
        };
        this.reportCustomEvent(Nl.CONNECTION_CLOSE, t);
        Nc?.addDurationVital('livegraph.web.connection.close', {
          startTime: Date.now(),
          duration: 0,
          context: t
        });
        e.closeEvent.code === 4011 && (this.authFailed = !0);
      }
    };
    this.serverSubscriptionTimers = new Map();
    this.clientE2ESubscriptionTimers = new Map();
    this.serverSubscriptionTimersV2 = new Map();
    this.clientE2ESubscriptionTimersV2 = new Map();
    this.initialSubscriptionTimers = new Map();
    this.erroredViews = new Map();
    this.subscriptionsHandler = e => {
      switch (e.type) {
        case 'SUBSCRIBE_VIEW_CLIENT':
          {
            let t = _$$J(e.view._name, e.args);
            if (!this.clientE2ESubscriptionTimers.has(t)) {
              let i = new _$$M({}, {
                load_type: e.loadType,
                priority: e.priority
              });
              this.clientE2ESubscriptionTimers.set(t, {
                viewName: e.view._name,
                priority: e.priority,
                loadType: e.loadType,
                timer: i
              });
            }
            if (!this.initialSubscriptionTimers.has(t)) {
              let i = new _$$M({
                onTimeout: (n, r) => {
                  let a = i.finish();
                  if (navigator.onLine) {
                    let t = {
                      currently_backgrounded: String(document.visibilityState === 'hidden'),
                      connected_to_livegraph: String(this.client.connection.isConnected()),
                      priority: e.priority,
                      backgrounded: String(n),
                      was_offline: String(r),
                      reason: this.authFailed ? 'auth_fail2' : 'timeout',
                      load_type: e.loadType
                    };
                    this.reportInitialViewMetric(e.view._name, t, 0);
                    Nu('livegraph.web.subscription.initial_view', e, i.startEpochTime, a, {
                      ...t,
                      status: 'failure',
                      view_name: e.view._name
                    });
                  }
                  this.initialSubscriptionTimers.$$delete(t);
                },
                timeoutMs: 1e4
              });
              this.initialSubscriptionTimers.set(t, {
                viewName: e.view._name,
                priority: e.priority,
                loadType: e.loadType,
                timer: i
              });
            }
            break;
          }
        case 'SUBSCRIBE_VIEW_SERVER':
          {
            let t = _$$J(e.view._name, e.args);
            if (!this.serverSubscriptionTimers.has(t)) {
              let i = document.visibilityState;
              let n = new _$$M({
                onTimeout: (t, n) => {
                  navigator.onLine && this.reportCustomEvent(Nl.SUBSCRIPTION_STUCK, {
                    view_name: e.view._name,
                    client_visibility: document.visibilityState,
                    client_visibility_on_initiate: i,
                    priority: e.priority,
                    backgrounded: String(t),
                    wasOffline: String(n),
                    has_pending_optimistic_mutations: String(this.client.hasUnresolvedGlobalOptimisticUpdates())
                  });
                },
                timeoutMs: 1e4
              }, {
                client_visibility_on_initiate: i
              });
              this.serverSubscriptionTimers.set(t, {
                viewName: e.view._name,
                priority: e.priority,
                loadType: e.loadType,
                timer: n
              });
            }
            break;
          }
        case 'UNSUBSCRIBE_VIEW_SERVER':
          {
            let t = _$$J(e.view._name, e.args);
            this.clearTimers(t);
            break;
          }
        case 'SESSION.NOTIFY_OBSERVERS':
          {
            if (e.result.status === 'loading') break;
            let t = _$$J(e.view._name, e.args);
            let i = this.serverSubscriptionTimers.get(t);
            let n = this.clientE2ESubscriptionTimers.get(t);
            let r = this.initialSubscriptionTimers.get(t);
            if (r && !r.timer.finished && e.result.status !== 'disabled') {
              let i = {
                currently_backgrounded: String(document.visibilityState === 'hidden'),
                connected_to_livegraph: String(this.client.connection.isConnected()),
                backgrounded: String(r.timer.backgrounded),
                was_offline: String(r.timer.wasOffline),
                priority: r.priority,
                load_type: r.loadType
              };
              e.result.status === 'loaded' ? this.reportInitialViewMetric(e.view._name, i, 1) : (i.reason = e.result.status, this.reportInitialViewMetric(e.view._name, i, 0));
              let n = r.timer.finish();
              this.initialSubscriptionTimers.$$delete(t);
              !isInteractionOrEvalMode() && getFeatureFlags().instrument_lg_view_loadspans && window.performance?.measure && window.performance.measure(`LG: ${e.view._name}`, {
                detail: {
                  args: e.args,
                  backgrounded: String(r.timer.backgrounded),
                  loadType: r.loadType,
                  priority: r.priority,
                  status: e.result.status,
                  wasOffline: r.timer.wasOffline
                },
                duration: n,
                start: r.timer.startTime
              });
              Nu('livegraph.web.subscription.initial_view', e, r.timer.startEpochTime, n, {
                status: e.result.status,
                ...i
              });
            }
            if (e.result.status === 'loaded') {
              if (i && !i.timer.finished) {
                let t = i.timer.finish();
                this.reportServerLatency(e.view._name, t, i.priority, i.timer.backgrounded, i.timer.wasOffline, i.loadType);
              }
              if (n && !n.timer.finished) {
                let t = n.timer.finish();
                this.reportE2ELatency(e.view._name, t, n.priority, n.timer.backgrounded, n.timer.wasOffline, n.loadType);
              }
            } else {
              e.result.status === 'errors' && (n?.timer.finish(), i?.timer.finish());
            }
            break;
          }
        case 'SESSION.APPLY_MUTATIONS':
          this.updatePendingMutationVerboseLogging(e.mutations);
          break;
        case 'CONNECTION_STATE':
          if (e.state.type === 'disconnected') {
            for (let e of this.serverSubscriptionTimers.values()) e.timer.finished || e.timer.finish();
            for (let e of this.clientE2ESubscriptionTimers.values()) e.timer.finished || e.timer.finish();
          }
          break;
        case 'SUBSCRIPTION_ERROR':
          this.reportCustomEvent(Nl.SUBSCRIPTION_ERRORS, {
            code: e.errorCode,
            server_version: this.serverVersion
          });
          this.clearTimers(e.liveViewKey);
      }
    };
    this.subscriptionsHandlerV2 = e => {
      switch (e.type) {
        case 'SUBSCRIBE_VIEW_CLIENT':
          {
            let t = _$$J(e.view._name, e.args);
            if (!this.clientE2ESubscriptionTimersV2.has(t)) {
              let i = new Np((t, i, n) => {
                this.reportCustomEvent(Nl.INITIAL_VIEW_STUCK_LOADING, {
                  view_name: e.view._name,
                  priority: e.priority,
                  duration: t,
                  was_backgrounded: String(i),
                  was_offline: String(n),
                  server_version: this.serverVersion
                });
                t === '5min' && analyticsEventManager.trackDefinedEvent('livegraph.gigastuck_view_client', {
                  view_name: e.view._name,
                  user_id: this.client.userId ?? 'unknown',
                  was_backgrounded: i,
                  was_offline: n,
                  browser_name: getEnvironmentInfo().browser_name?.toString(),
                  os_name: getEnvironmentInfo().os_name?.toString(),
                  server_version: this.serverVersion,
                  outstanding_syncs: this.syncTimers.values.length > 0
                });
              }, {
                client_visibility_on_initiate: document.visibilityState,
                load_type: e.loadType,
                priority: e.priority
              });
              this.clientE2ESubscriptionTimersV2.set(t, i);
            }
            break;
          }
        case 'SUBSCRIBE_VIEW_SERVER':
          {
            let t = _$$J(e.view._name, e.args);
            if (!this.serverSubscriptionTimersV2.has(t)) {
              let i = document.visibilityState;
              let n = new _$$M({
                onTimeout: (t, n) => {
                  navigator.onLine && this.reportCustomEvent(Nl.SUBSCRIPTION_STUCK_V2, {
                    view_name: e.view._name,
                    client_visibility: document.visibilityState,
                    client_visibility_on_initiate: i,
                    priority: e.priority,
                    backgrounded: String(t),
                    wasOffline: String(n),
                    has_pending_optimistic_mutations: String(this.client.hasUnresolvedGlobalOptimisticUpdates())
                  });
                },
                timeoutMs: 1e4
              }, {
                client_visibility_on_initiate: i
              });
              this.serverSubscriptionTimersV2.set(t, {
                viewName: e.view._name,
                priority: e.priority,
                loadType: e.loadType,
                timer: n
              });
            }
            break;
          }
        case 'UNSUBSCRIBE_VIEW_SERVER':
          {
            let t = _$$J(e.view._name, e.args);
            this.clearTimersV2(t);
            break;
          }
        case 'DONE':
          {
            let t = _$$J(e.viewName, e.args);
            let i = this.serverSubscriptionTimersV2.get(t);
            let n = this.clientE2ESubscriptionTimersV2.get(t);
            let r = e.clientStatus === 'loaded' ? 'ok' : e.clientStatus === 'errors' ? 'error' : 'loading';
            if (i && !i.timer.finished) {
              let n = i.timer.finish();
              this.reportServerLatencyV2(e.viewName, n, i.priority, i.timer.backgrounded, i.timer.wasOffline, i.loadType, r);
              this.serverSubscriptionTimersV2.$$delete(t);
            }
            n && !n.timerFinished() && (n.finishTimers((t, i, n, a) => {
              this.reportE2ELatencyV2(e.viewName, t, a.priority ?? 'unknown', i, n, a.load_type ?? ConnectionAttemptTypes.Initial, r);
            }), this.clientE2ESubscriptionTimersV2.$$delete(t), e.clientStatus === 'loaded' ? this.successfulLoadedViewsCount++ : e.clientStatus === 'errors' ? this.erroredViewsCount++ : e.clientStatus === 'loading' && this.reportCustomEvent(Nl.SERVER_CLIENT_DISCREPANCY, {
              view_name: e.viewName
            }));
            break;
          }
        case 'CONNECTION_CLOSED':
          for (let e of this.serverSubscriptionTimersV2.values()) e.timer.finished || e.timer.finish();
          this.serverSubscriptionTimersV2.clear();
          break;
        case 'SUBSCRIPTION_ERROR':
          this.clearTimersV2(e.liveViewKey);
      }
    };
    this.errorHandler = e => {
      if (e.type === 'SESSION.NOTIFY_OBSERVERS') {
        let t = _$$J(e.view._name, e.args);
        if (e.result.errors && e.result.errors.length > 0 && !this.erroredViews.has(t)) {
          let i = e.result.errors.every(e => e.retriable);
          this.reportCustomEvent(Nl.ERRORED_VIEW, {
            view_name: e.view._name,
            status: e.result.status,
            retriable: i.toString()
          });
          i && this.erroredViews.set(t, new _$$M());
        } else if (e.result.status === 'loaded' && e.result.errors && e.result.errors.length === 0) {
          let i = this.erroredViews.get(t);
          i && (this.erroredViews.$$delete(t), this.reportNumericEvent(No.ERROR_RECOVERY_LATENCY, i.getTime(), {
            view_name: e.view._name,
            was_backgrounded: String(i.backgrounded),
            was_offline: String(i.wasOffline),
            ...(e.retryCount ? {
              count: this.getBucket(e.retryCount)
            } : {})
          }));
        }
      }
    };
    this.openedFileKeys = new Set();
    this.checkNullOpenFileHandler = e => {
      if (e.type === 'SESSION.NOTIFY_OBSERVERS' && e.view._name === 'OpenEditorFileData' && e.result.status === 'loaded') {
        let t = e.args.fileKey;
        this.openedFileKeys.has(t) || (this.openedFileKeys.add(t), e.result.data.file === null && this.reportCustomEvent(Nl.OPEN_FILE_NULL));
      }
    };
    this.syncTimers = new Map();
    this.syncHandler = e => {
      switch (e.type) {
        case 'SYNC_STARTED':
          {
            if (this.logSyncEvent(e.transactionId, 'SYNC_STARTED', {
              mutatedObjects: e.mutatedObjects,
              alreadyExists: this.syncTimers.has(e.transactionId)
            }), this.syncTimers.has(e.transactionId)) {
              break;
            }
            let t = new _$$M({
              onTimeout: (e, t) => {
                this.reportCustomEvent(Nl.SYNC_STUCK, {
                  backgrounded: String(e),
                  wasOffline: String(t),
                  server_version: this.serverVersion
                });
              },
              timeoutMs: 1e4
            });
            if (this.syncTimers.set(e.transactionId, t), this.optimisticMutationSloTimer.has(e.transactionId.toString())) break;
            let i = new _$$M({
              onTimeout: (t, n, r) => {
                if (i.finish(), this.reportCustomEvent(Nl.OPTIMISTIC_MUTATION_FAIL, {
                  currently_backgrounded: String(document.visibilityState === 'hidden'),
                  connected_to_livegraph: String(this.client.connection.isConnected()),
                  backgrounded: String(t),
                  was_offline: String(n),
                  was_disconnected: String(r),
                  server_version: this.serverVersion,
                  type: 'sync'
                }), !0 === getLaunchDarklyFlagsExport().livegraph_web_report_mutation_fail_objs) {
                  for (let i of e.mutatedObjects.length === 0 ? ['none'] : e.mutatedObjects) {
                    this.reportCustomEvent(Nl.OPTIMISTIC_MUTATION_FAIL_OBJ_NAME, {
                      currently_backgrounded: String(document.visibilityState === 'hidden'),
                      connected_to_livegraph: String(this.client.connection.isConnected()),
                      backgrounded: String(t),
                      was_offline: String(n),
                      was_disconnected: String(r),
                      object_name: i
                    });
                  }
                }
                this.logSyncEvent(e.transactionId, 'SYNC_FAILURE_REPORTED', {
                  wasOffline: String(n),
                  wasBackgrounded: String(t),
                  wasDisconnected: String(r)
                });
                this.optimisticMutationSloTimer.$$delete(e.transactionId.toString());
              },
              timeoutMs: 1e4,
              isConnectedToLG: this.client.connection.isConnected()
            });
            this.optimisticMutationSloTimer.set(e.transactionId.toString(), i);
            break;
          }
        case 'SYNC_COMPLETED':
          {
            let t = this.syncTimers.get(e.transactionId);
            let i = this.optimisticMutationSloTimer.get(e.transactionId.toString());
            if (this.logSyncEvent(e.transactionId, 'SYNC_COMPLETED', {
              hasSyncTimer: this.syncTimers.has(e.transactionId),
              duration: this.syncTimers.get(e.transactionId)?.getTime(),
              wasOffline: String(t?.wasOffline),
              wasBackgrounded: String(t?.backgrounded),
              wasDisconnected: String(t?.wasDisconnected),
              hasSloTimer: !!i,
              sloTimerAlreadyFinished: String(i?.finished),
              sloTimerDuration: i?.getTime()
            }), !t) {
              break;
            }
            let n = t.finish();
            this.reportNumericEvent(No.SYNC, n, {
              was_backgrounded: String(t.backgrounded),
              was_offline: String(t.wasOffline),
              server_version: this.serverVersion
            });
            this.syncTimers.$$delete(e.transactionId);
            i && !i.finished && (i.finish(), this.reportCustomEvent(Nl.OPTIMISTIC_MUTATION_SUCCESS, {
              currently_backgrounded: String(document.visibilityState === 'hidden'),
              connected_to_livegraph: String(this.client.connection.isConnected()),
              backgrounded: String(i.backgrounded),
              was_offline: String(i.wasOffline),
              server_version: this.serverVersion
            }), this.logSyncEvent(e.transactionId, 'SYNC_SUCCESS_REPORTED', {}), this.optimisticMutationSloTimer.$$delete(e.transactionId.toString()));
            break;
          }
        case 'CONNECTION_STATE':
          if (e.state.type === 'disconnected') {
            for (let [e, t] of this.syncTimers.entries()) {
              this.logSyncEvent(e, 'SYNC_TIMER_DISCONNECTED', {
                wasFinished: String(t.finished)
              });
              t.finished || t.finish();
            }
            for (let [e, t] of (this.syncTimers.clear(), this.optimisticMutationSloTimer.entries())) {
              this.logSyncEvent(e, 'SLO_TIMER_DISCONNECTED', {
                wasFinished: String(t.finished)
              });
              t.finished || t.markDisconnected();
            }
            for (let e of this.optimisticMutationTimers.values()) e.finished || e.markDisconnected();
            for (let e of this.realtimeUpdateTimers.values()) e.finished || e.markDisconnected();
          }
      }
    };
    this.optimisticMutationTimers = new Map();
    this.mutationHandler = e => {
      switch (e.type) {
        case 'SESSION.APPLY_SHADOW_MUTATIONS':
          for (let t in e.mutations) {
            for (let i in e.mutations[t]) {
              this.reportCustomEvent(Nl.OPTIMISTIC_MUTATION, {
                operation: e.operationType,
                object_name: t
              });
            }
          }
          break;
        case 'OPTIMISTIC_MUTATION_CREATED':
          {
            if (this.optimisticMutationTimers.has(e.transactionId)) break;
            let t = new _$$M({
              isConnectedToLG: this.client.connection.isConnected()
            });
            this.optimisticMutationTimers.set(e.transactionId, t);
            break;
          }
        case 'OPTIMISTIC_MUTATION_COMPLETED':
          {
            let t = this.optimisticMutationTimers.get(e.transactionId);
            if (t) {
              let i = t.finish();
              this.reportNumericEvent(No.OPTIMISTIC_MUTATION, i, {
                mutation_type: e.mutationType,
                was_backgrounded: String(t.backgrounded),
                was_offline: String(t.wasOffline),
                was_disconnected: String(t.wasDisconnected),
                server_version: this.serverVersion
              });
              this.optimisticMutationTimers.$$delete(e.transactionId);
            }
          }
      }
    };
    this.pendingMutationExistenceHandler = e => {
      e.type === 'PENDING_MUTATION_EXISTENCE' && (this.reportCustomEvent(Nl.PENDING_MUTATION_EXISTENCE, {
        exist: `${e.exist}`,
        object_name: e.objectName,
        operation: e.operationType
      }), e.exist || analyticsEventManager.trackDefinedEvent('livegraph.optimistic_mutation_resolution_failure', {
        objectName: e.objectName,
        operation: e.operationType,
        optimisticMutations: JSON.stringify(e.optimisticMutations),
        pendingServerMutations: JSON.stringify(e.pendingServerMutations)
      }));
    };
    this.unexpectedObjectNameHandler = e => {
      e.type === 'SESSION.UNEXPECTED_OBJECT_NAME' && this.reportCustomEvent(Nl.UNEXPECTED_OBJECT_NAME, {
        object_name: e.objectName
      });
    };
    this.realtimeUpdateTimers = new Map();
    this.optimisticMutationSloTimer = new Map();
    this.realtimeUpdateHandler = e => {
      if (e.type === 'WAIT_SERVER_OBJECTS_STARTED') {
        for (let t in e.mutations) {
          for (let i in e.mutations[t]) {
            let e = `${t}+${i}`;
            this.realtimeUpdateTimers.set(e, new _$$M({
              isConnectedToLG: this.client.connection.isConnected()
            }));
            let n = new _$$M({
              onTimeout: (t, i, r) => {
                n.finish();
                this.reportCustomEvent(Nl.OPTIMISTIC_MUTATION_FAIL, {
                  currently_backgrounded: String(document.visibilityState === 'hidden'),
                  connected_to_livegraph: String(this.client.connection.isConnected()),
                  backgrounded: String(t),
                  was_offline: String(i),
                  was_disconnected: String(r),
                  server_version: this.serverVersion,
                  type: 'uuid'
                });
                this.optimisticMutationSloTimer.$$delete(e);
              },
              timeoutMs: 1e4,
              isConnectedToLG: this.client.connection.isConnected()
            });
            this.optimisticMutationSloTimer.set(e, n);
          }
        }
      }
      if (e.type === 'WAIT_SERVER_OBJECTS_ENDED') {
        for (let t in e.mutations) {
          for (let i in e.mutations[t]) {
            let e = `${t}+${i}`;
            let n = this.realtimeUpdateTimers.get(e);
            if (this.realtimeUpdateTimers.$$delete(e), n) {
              let e = n.finish();
              this.reportNumericEvent(No.OPTIMISTIC_MUTATION, e, {
                mutation_type: 'uuid_create',
                was_backgrounded: String(n.backgrounded),
                was_offline: String(n.wasOffline),
                was_disconnected: String(n.wasDisconnected),
                server_version: this.serverVersion
              });
            }
            let r = this.optimisticMutationSloTimer.get(e);
            r && !r.finished && (r.finish(), this.reportCustomEvent(Nl.OPTIMISTIC_MUTATION_SUCCESS, {
              currently_backgrounded: String(document.visibilityState === 'hidden'),
              connected_to_livegraph: String(this.client.connection.isConnected()),
              backgrounded: String(r.backgrounded),
              was_offline: String(r.wasOffline),
              server_version: this.serverVersion
            }), this.optimisticMutationSloTimer.$$delete(e));
          }
        }
      }
    };
    this.blockedMutationHandler = e => {
      e.type === 'MUTATIONS_BLOCKED_ON_OPTIMISTIC_UPDATE' && this.reportNumericEvent(Ns.SYNC_BLOCKED_MUTATIONS, e.count);
    };
    this.optimisticUpdateInsufficientDataHandler = e => {
      if (e.type === 'SESSION.OPTIMISTIC_UPDATE_INSUFFICIENT_DATA') {
        let t = new Set();
        for (let i of e.loadingPaths) {
          for (let e of i) t.add(e);
        }
        logError('livegraph', `An optimistic mutation did not provide sufficient data to generate a complete view result. These views will appear to be dropped: ${e.loadedToLoadingViews.join(', ')}`, {
          loadedToLoadingViews: e.loadedToLoadingViews,
          loadingPaths: [...t]
        }, {
          reportAsSentryError: !0,
          logToConsole: NU.ALWAYS
        });
      }
    };
    this.emptySyncHandler = e => {
      e.type === 'EMPTY_SYNC' && !0 === getLaunchDarklyFlagsExport().livegraph_web_report_empty_sync && this.reportCustomEvent(Nl.EMPTY_SYNC, {
        source: e.source
      });
    };
    this.viewStatsHandler = e => {
      e.type === 'VIEW.QUERY_STATS' && getFeatureFlags().livegraph_log_view_stats && trackEventAnalytics('Livegraph Client View Stats', {
        type: e.type,
        nodeType: e.nodeType,
        viewName: e.viewName,
        objectName: e.objectName,
        parentName: e.parentName,
        fieldName: e.fieldName,
        instanceLength: e.instanceLength,
        hasCanReadPermissionCheck: e.hasCanReadPermissionCheck
      }, {
        forwardToDatadog: !1
      });
    };
    this.viewTransitionHandler = e => {
      e.type === 'VIEW.STATE_TRANSITION' && getFeatureFlags().livegraph_log_view_transition && trackEventAnalytics('Livegraph Client View Transition', {
        type: e.type,
        viewName: e.viewName,
        userId: e.userId,
        transitionType: e.transitionType,
        isInitialConnection: e.isInitialConnection
      }, {
        forwardToDatadog: !1
      });
    };
    this.syncTimeoutHandler = e => {
      e.type === 'SYNC_TIMEOUT' && this.reportCustomEvent(Nl.SYNC_TIMEOUT, {
        backgrounded: String(e.backgrounded),
        was_offline: String(e.wasOffline)
      });
    };
    this.subscriptionUpdateLatencyHandler = e => {
      if (e.type === 'SUBSCRIPTION_UPDATE_LATENCY') {
        let t = performance.now();
        let i = this.lastConnectTime ? t - this.lastConnectTime : 0;
        (this.connectionCount === 1 || i >= 65e3) && (this.reportNumericEvent(No.SUBSCRIPTION_UPDATE_LATENCY_V2, e.latencyMs, {
          object_name: e.objectName,
          server_version: this.serverVersion
        }), (e.latencyMs > this.slowUpdateLatencyThreshold || e.latencyMs < 0) && Math.random() < this.figmentDebuggingSamplingRate && analyticsEventManager.trackDefinedEvent('livegraph.slow_update_latency', {
          objectName: e.objectName,
          latency: e.latencyMs,
          updateAt: e.updatedAt.toISOString(),
          currentTime: e.currentTime.toISOString(),
          isInitialConnection: String(e.isInitialConnection)
        }));
      }
    };
    this.reportMetric = (e, t = {}) => {
      this.reportCustomEvent(e, t);
    };
    this.paginationHandler = e => {
      e.type === 'PAGINATION_LATENCY' && this.reportNumericEvent(No.PAGINATION_LATENCY, e.latency, {
        view_name: e.viewName,
        resolver: e.resolver,
        page_number: this.pageNumberToRange(e.pageNumber),
        status: e.status
      });
    };
    this.onEvent = e => {
      this.initialConnectionHandler(e);
      this.subscriptionsHandler(e);
      this.subscriptionsHandlerV2(e);
      this.checkNullOpenFileHandler(e);
      this.syncHandler(e);
      this.mutationHandler(e);
      this.pendingMutationExistenceHandler(e);
      this.unexpectedObjectNameHandler(e);
      this.realtimeUpdateHandler(e);
      this.connectionClosedHandler(e);
      this.blockedMutationHandler(e);
      this.optimisticUpdateInsufficientDataHandler(e);
      this.emptySyncHandler(e);
      this.errorHandler(e);
      this.viewStatsHandler(e);
      this.viewTransitionHandler(e);
      this.refreshHandler(e);
      this.subscriptionUpdateLatencyHandler(e);
      this.paginationHandler(e);
      this.syncTimeoutHandler(e);
    };
    document.addEventListener('visibilitychange', this.onVisibilityChange);
    window.addEventListener('pagehide', this.sendBatchedEvents);
    this.sendBatchedEventsInterval = setInterval(this.sendBatchedEvents, 5e3);
    let i = _$$gP('livegraph_client_config').get('session_reporting_config', {
      reporting_interval_ms: 3e4,
      reporting_threshold: 20,
      stuck_loading_threshold_ms: 15e3
    });
    this.sessionReportingIntervalMs = i.reporting_interval_ms;
    this.sessionReportingThreshold = i.reporting_threshold;
    this.stuckLoadingThresholdMs = i.stuck_loading_threshold_ms;
    this.figmentDebuggingSamplingRate = _$$gP('livegraph_client_config').get('figment_debugging_sampling_rate', 0);
    this.slowUpdateLatencyThreshold = _$$gP('livegraph_client_config').get('slow_update_latency_threshold', 1e6);
  }
  async cleanup() {
    document.removeEventListener('visibilitychange', this.onVisibilityChange);
    window.removeEventListener('pagehide', this.sendBatchedEvents);
    clearInterval(this.sendBatchedEventsInterval);
    this.sessionSuccessTimer && (clearTimeout(this.sessionSuccessTimer), this.sessionSuccessTimer = void 0);
    await _$$g2();
  }
  clearTimers(e) {
    let t = this.clientE2ESubscriptionTimers.get(e);
    for (let i of (t && !t.timer.finished && t.timer.finish(), this.clientE2ESubscriptionTimers.$$delete(e), [this.serverSubscriptionTimers, this.initialSubscriptionTimers])) {
      let t = i.get(e);
      t?.timer && !t.timer.finished && t.timer.finish();
      i.$$delete(e);
    }
    this.initialSubscriptionTimers.$$delete(e);
    this.erroredViews.$$delete(e);
  }
  clearTimersV2(e) {
    let t = this.serverSubscriptionTimersV2.get(e);
    t?.timer && !t.timer.finished && t.timer.finish();
    this.serverSubscriptionTimersV2.$$delete(e);
    let i = this.clientE2ESubscriptionTimersV2.get(e);
    i && !i.timerFinished() && i.finishTimers();
    this.clientE2ESubscriptionTimersV2.$$delete(e);
  }
  getBucket(e) {
    return e <= 1 ? e.toString() : e <= 5 ? '2-5' : e <= 10 ? '6-10' : e <= 20 ? '11-20' : '21+';
  }
  getLastConnectBucket(e) {
    return e < 1e3 ? '1s' : e < 1e4 ? '10s' : e < 6e4 ? '1m' : e < 36e5 ? '1h' : e < 864e5 ? '1d' : 'over_a_day';
  }
  reportViewLoadSuccessPercentage() {
    let e = performance.now();
    let t = 0;
    for (let i of this.clientE2ESubscriptionTimersV2.values()) !i.timerFinished() && e - i.getStartTime() > this.stuckLoadingThresholdMs && t++;
    let i = this.erroredViewsCount + this.successfulLoadedViewsCount + t;
    if (i >= this.sessionReportingThreshold) {
      let e = this.successfulLoadedViewsCount / i * 100;
      this.reportNumericEvent(No.SESSION_SUCCESS, e, {
        server_version: this.serverVersion
      });
      e <= 0 && Math.random() < this.figmentDebuggingSamplingRate && analyticsEventManager.trackDefinedEvent('livegraph.session_success_report', {
        successPercentage: e,
        totalViews: i,
        successfulLoadedViewsCount: this.successfulLoadedViewsCount,
        erroredViewsCount: this.erroredViewsCount,
        stuckLoadingViewsCount: t
      });
    }
    this.erroredViewsCount = 0;
    this.successfulLoadedViewsCount = 0;
    this.sessionSuccessTimer = setTimeout(() => {
      this.reportViewLoadSuccessPercentage();
    }, this.sessionReportingIntervalMs);
  }
  reportInitialViewMetric(e, t, i) {
    let n = i === 0 ? Nl.INITIAL_VIEW_FAILURE : Nl.INITIAL_VIEW_SUCCESS;
    let r = i === 0 ? Nl.INITIAL_VIEW_FAILURE_VERSION : Nl.INITIAL_VIEW_SUCCESS_VERSION;
    this.reportCustomEvent(n, {
      ...t,
      view_name: e
    });
    this.reportCustomEvent(r, {
      ...t,
      server_version: this.serverVersion
    });
  }
  reportServerLatency(e, t, i, n, r, a = 'initial') {
    this.reportNumericEvent(No.SUBSCRIPTION_DATA, t, {
      view_name: e,
      priority: i,
      was_backgrounded: String(n),
      was_offline: String(r),
      load_type: a
    });
    this.reportNumericEvent(No.SUBSCRIPTION_DATA_VERSION, t, {
      server_version: this.serverVersion,
      priority: i,
      was_backgrounded: String(n),
      was_offline: String(r),
      load_type: a
    });
    getFeatureFlags().livegraph_figment_metrics && trackEventAnalytics('Livegraph Client Metrics Server Latency', {
      view_name: e,
      was_backgrounded: n,
      was_offline: r,
      server_latency_ms: t,
      load_type: a
    }, {
      forwardToDatadog: !0
    });
  }
  reportServerLatencyV2(e, t, i, n, r, a, s) {
    this.reportNumericEvent(No.SUBSCRIPTION_SERVER_LATENCY_V2, t, {
      view_name: e,
      priority: i,
      was_backgrounded: String(n),
      was_offline: String(r),
      load_type: a,
      status: s
    });
  }
  reportE2ELatency(e, t, i, n, r, a = 'initial') {
    this.reportNumericEvent(No.SUBSCRIPTION_E2E_DATA, t, {
      view_name: e,
      priority: i,
      was_backgrounded: String(n),
      was_offline: String(r),
      load_type: a
    });
    this.reportNumericEvent(No.SUBSCRIPTION_E2E_DATA_VERSION, t, {
      server_version: this.serverVersion,
      priority: i,
      was_backgrounded: String(n),
      was_offline: String(r),
      load_type: a
    });
    getFeatureFlags().livegraph_figment_metrics && trackEventAnalytics('Livegraph Client Metrics E2E Latency', {
      view_name: e,
      server_version: this.serverVersion,
      was_backgrounded: n,
      was_offline: r,
      e2e_latency_ms: t,
      load_type: a
    }, {
      forwardToDatadog: !0
    });
  }
  reportE2ELatencyV2(e, t, i, n, r, a, s) {
    this.reportNumericEvent(No.SUBSCRIPTION_E2E_LATENCY_V2, t, {
      view_name: e,
      priority: i,
      was_backgrounded: String(n),
      was_offline: String(r),
      load_type: a,
      status: s
    });
  }
  logSyncEvent(e, t, i) {
    getFeatureFlags().livegraph_verbose_sync_logging && analyticsEventManager.trackDefinedEvent('livegraph.sync_verbose_events', {
      transactionId: e.toString(),
      name: t,
      data: JSON.stringify(i)
    });
  }
  setSessionSuccessReportingThreshold(e) {
    this.sessionReportingThreshold = e;
  }
  pageNumberToRange(e) {
    return e > 5 ? '>5' : String(e);
  }
}
let Ng = ['repoId', 'userId', 'targetUserId', 'currentOrgId', 'teamId', 'orgId', 'targetOrgId', 'orgIds', 'workspaceId', 'planType', 'hubFileId', 'projectId', 'planId', 'libraryKey', 'editorType', 'planParentId', 'planParentType'];
let Nf = new class {
  submitResponseSample(e, t, i, n, r) {
    return XHR.post('/api/response_sampler', {
      service_name: 'livegraph',
      user_id: e,
      source_context: {
        view: t,
        ...Object.fromEntries(Object.entries(i).filter(([e]) => Ng.includes(e)).map(([e, t]) => [e, String(t)]))
      },
      provided_file_key_metadata: n,
      received_file_key_metadata: r
    });
  }
}();
let N_ = class e {
  constructor(e, t) {
    this.userId = e;
    this.sampling_rate = t;
    this.onEvent = e => {
      if (e.type === 'SESSION.NOTIFY_OBSERVERS') {
        let {
          view,
          args,
          result
        } = e;
        if (result.status === 'loaded' && Math.random() < this.sampling_rate) {
          let e = this.extractFileKeys(result, ['result']);
          if (Object.keys(e).length === 0) return;
          let r = this.extractFileKeys(args, ['args']);
          for (let t in r) delete e[t];
          if (Object.keys(e).length === 0) return;
          Nf.submitResponseSample(this.userId, view._name, args, r, e);
        }
      }
    };
  }
  static isFileKey(e) {
    return this.FILE_KEY_ONLY_REGEX.test(e);
  }
  static isKeyToInspect(t) {
    return t.toLowerCase().includes('key') && !e.EXCLUDE_KEYS.includes(t);
  }
  extractFileKeys(t, i = [], n = {}) {
    for (let r in t) {
      let a = [...i, r];
      typeof t[r] == 'object' && t[r] !== null ? Array.isArray(t[r]) ? t[r].forEach(t => {
        typeof t == 'object' && t !== null ? this.extractFileKeys(t, [...a, '*'], n) : e.isKeyToInspect(r) && e.isFileKey(t) && (n[t] || (n[t] = []), n[t].push(`${a.join('.')}.*`));
      }) : this.extractFileKeys(t[r], a, n) : e.isKeyToInspect(r) && e.isFileKey(t[r]) && (n[t[r]] || (n[t[r]] = []), n[t[r]].push(a.join('.')));
    }
    return n;
  }
};
N_.FILE_KEY_ONLY_REGEX = /^[0-9a-z]{22}$|^[0-9a-z]{24}$/i;
N_.EXCLUDE_KEYS = ['playground_fig_file_key'];
let Nv = _$$z.object({
  id: _$$z.string().uuid(),
  key: _$$z.string().uuid(),
  createdAt: _$$z.coerce.date(),
  updatedAt: _$$z.coerce.date()
});
let NI = new class {
  constructor() {
    this.UpdateSloSchemaValidator = YV('LGUpdateSloSchemaValidator', _$$D(Nv), null);
  }
  createLGUpdateSloData(e) {
    return this.UpdateSloSchemaValidator.validate(async ({
      xr: t
    }) => await t.post('/api/lg_update_slo_data', _$$td.toAPIParameters({
      key: e
    })));
  }
  updateLGUpdateSloData(e, t) {
    return this.UpdateSloSchemaValidator.validate(async ({
      xr: i
    }) => await i.put(`/api/lg_update_slo_data/${e}`, _$$td.toAPIParameters({
      key: t
    })));
  }
  deleteLGUpdateSloData(e) {
    return this.UpdateSloSchemaValidator.validate(async ({
      xr: t
    }) => await t.del(`/api/lg_update_slo_data/${e}`));
  }
}();
class NE {
  constructor(e, t, i, n) {
    this.client = e;
    this.loopInterval = t;
    this.failureThresholdMs = i;
    this.use100x = n;
    this.isSloLoopEnabled = !1;
    this.measurementInProgress = null;
    this.nextMeasurementTimeoutId = null;
    this.sloEntryId = null;
    this.unsubscribeCallback = null;
    this.subscriptionObserver = () => {};
    this.serverVersion = 'unknown';
    this.onEvent = e => {
      e.type === 'CONNECTION_STATE' && e.state.type === 'connected' && e.state.authenticated && (this.serverVersion = e.state.serverVersion ?? 'unknown');
    };
  }
  startMeasureLoop() {
    this.isSloLoopEnabled || (this.isSloLoopEnabled = !0, this.measureLoop());
  }
  async stopMeasureLoop() {
    this.measurementInProgress && (await this.measurementInProgress);
    this.measurementInProgress = null;
    this.nextMeasurementTimeoutId && clearTimeout(this.nextMeasurementTimeoutId);
    this.nextMeasurementTimeoutId = null;
    this.unsubscribeCallback && this.unsubscribeCallback();
    this.unsubscribeCallback = null;
    this.isSloLoopEnabled = !1;
    try {
      this.sloEntryId && (await NI.deleteLGUpdateSloData(this.sloEntryId));
    } catch (e) {}
    this.sloEntryId = null;
  }
  async measureLoop() {
    this.measurementInProgress = this.measure();
    await this.measurementInProgress;
    this.measurementInProgress = null;
    this.nextMeasurementTimeoutId = setTimeout(() => this.measureLoop(), this.getTimeoutWithJitter());
  }
  getTimeoutWithJitter() {
    return this.loopInterval + (Math.random() - 0.5) * this.loopInterval;
  }
  reportSuccessOrFail(e, t, i, n) {
    let r = t - e <= this.failureThresholdMs ? Nl.SUBSCRIPTION_UPDATE_SUCCESS : Nl.SUBSCRIPTION_UPDATE_FAILURE;
    _$$Rh(r, {
      currently_backgrounded: String(document.visibilityState === 'hidden'),
      connected_to_livegraph: String(this.client.connection.isConnected()),
      backgrounded: String(i),
      was_offline: String(n),
      used_100x: String(this.use100x),
      server_version: this.serverVersion
    });
  }
  async measure() {
    if (!this.unsubscribeCallback) {
      try {
        let e = await NI.createLGUpdateSloData(_$$g());
        this.sloEntryId = e.data.meta.id;
        await new Promise(e => {
          this.subscriptionObserver = t => {
            (t.status === 'loaded' || t.status === 'errors') && e();
          };
          this.unsubscribeCallback = this.client.subscribe(this.use100x ? apG : DSh, {
            id: this.sloEntryId
          }, e => this.subscriptionObserver(e));
        });
      } catch (e) {
        return;
      }
    }
    let e = _$$g();
    let t = new Promise(t => {
      this.subscriptionObserver = i => {
        i.status === 'loaded' && ('subscriptionUpdateSloData' in i.data ? i.data.subscriptionUpdateSloData?.key : i.data.graftingUpdateSloData.status === 'loaded' ? i.data.graftingUpdateSloData.data?.key : void 0) === e && t();
      };
    });
    try {
      let i = Date.now();
      await NI.updateLGUpdateSloData(this.sloEntryId, e);
      let n = !1;
      let r = new _$$M({
        onTimeout: (e, t) => {
          n = !0;
          _$$Rh(Nl.SUBSCRIPTION_UPDATE_FAILURE, {
            currently_backgrounded: String(document.visibilityState === 'hidden'),
            connected_to_livegraph: String(this.client.connection.isConnected()),
            backgrounded: String(e),
            was_offline: String(t),
            used_100x: String(this.use100x),
            server_version: this.serverVersion
          });
        },
        timeoutMs: this.failureThresholdMs
      });
      await t;
      let a = Date.now();
      r.finish();
      n || this.reportSuccessOrFail(i, a, r.backgrounded, r.wasOffline);
      _$$S2(No.SUBSCRIPTION_UPDATE_LATENCY, a - i, {
        currently_backgrounded: String(document.visibilityState === 'hidden'),
        connected_to_livegraph: String(this.client.connection.isConnected()),
        backgrounded: String(r.backgrounded),
        was_offline: String(r.wasOffline),
        used_100x: String(this.use100x),
        server_version: this.serverVersion
      });
    } catch (e) {}
  }
}
let Nx = new class {
  constructor() {
    this.recordings = new Map();
    this.debugLogs = new _$$C(5120);
  }
  logEvent(e) {
    let t = new Date();
    let i = {
      ...e,
      ts: t
    };
    this.recordings.forEach((e, t) => {
      e.push(i);
    });
    this.debugLogs.push(i);
  }
  startRecording() {
    let e = _$$g();
    this.recordings.set(e, new _$$C(5120));
    return e;
  }
  stopRecording(e) {
    let t = this.recordings.get(e);
    return t ? (this.recordings.$$delete(e), t.toArray()) : [];
  }
  getDebugLogs() {
    return this.debugLogs.toArray();
  }
  getDebugLogsAsStr() {
    return JSON.stringify(this.debugLogs.toArray(), R6());
  }
  resetDebugLogs() {
    this.debugLogs.clear();
  }
}();
let NS = new class {
  logEvent(e) {
    switch (e.type) {
      case 'RESPONSE_MESSAGE':
        switch (e.message.messageType) {
          case 'requestError':
          case 'serverError':
            console.log('[Livegraph] Request ran into error:', e.message.error);
            break;
          case 'authFail':
            console.log('[Livegraph] Authentication failed');
            break;
          case 'viewSubscriptionFailed':
            console.log('[Livegraph] Subscribe to view failed due to error:', e.message.error);
        }
        break;
      case 'CONNECTION_STATE':
        e.state.type === 'connected' && e.state.authenticated ? console.debug(`[Livegraph] Connected ${new Date().toISOString()}.`) : e.state.type === 'disconnected' && console.debug(`[Livegraph] Disconnected ${new Date().toISOString()}.`);
        break;
      case 'CONNECTION_CLOSED':
        console.log('[Livegraph] Connection closed:', e.closeEvent);
        break;
      case 'PENDING_MUTATION_EXISTENCE':
        e.exist || console.log('[Livegraph] Pending mutations does not contain the optimistic object: ', e.optimisticInstance);
        break;
      case 'SESSION.NOTIFY_OBSERVERS':
        (e.result.status === 'errors' || e.result.errors && e.result.errors.length > 0) && console.error('[Livegraph] Error(s) in view:', `status: ${e.result.status}`, e.view._name, e.args, JSON.stringify(e.result.errors.map(e => `Err: ${e.path.join('.')}, code ${e.code}: ${e.error}`)));
    }
  }
}();
let Nw = ['AWSALBTG', 'AWSALBTGCORS', 'AWSALB', 'AWSALBCORS'];
let NC = [wZi, ib2, $kt, w2r, ehp];
export function $$NT0(e) {
  let t = observableState.get();
  if (t) {
    if (e === t.userId || isInteractionPathCheck() || getFalseValue()) return t;
    console.warn(`[livegraph] userId changed after livegraph client creation. userId == null, before: ${t.userId == null}, after: ${e == null}`);
    t.close();
  }
  let i = window.LGEarlyWS;
  delete window.LGEarlyWS;
  observableState.set(function (e, t) {
    let i = function () {
      let e = window.INITIAL_OPTIONS?.figma_url;
      let t = !!window.INITIAL_OPTIONS?.feature_flags?.livegraph_connect_next;
      let i = {
        clientUrl: window.document.URL
      };
      let n = window.__figmaDesktop || window.__figmaDesktopGetPopoutAPI?.();
      let r = window.bellFeedAPI;
      n ? (i.desktop = JSON.stringify(n.appVersion), n.version >= 126 && (i.desktopOS = JSON.stringify(n.osVersion))) : r && (i.bell = '1', r.version >= 8 && (i.desktop = JSON.stringify(r.desktopAppVersion), i.desktopOS = JSON.stringify(r.osVersion)));
      return {
        url: function (e) {
          let t;
          let i;
          if (e) {
            try {
              let n = new URL(e);
              i = n.protocol;
              t = n.host;
            } catch (e) {}
          }
          (void 0 === t || void 0 === i) && ((t = window.location.host) === 'admin.staging.figma.com' || t === 'embed.staging.figma.com' ? t = 'staging.figma.com' : (t === 'admin.figma.com' || t === 'embed.figma.com') && (t = 'www.figma.com'), i = window.location.protocol);
          return `${i === 'https:' ? 'wss' : 'ws'}://${t}`;
        }(e),
        userId: window.INITIAL_OPTIONS?.user_data?.id || null,
        anonUserId: window.INITIAL_OPTIONS?.anonymous_user_id || null,
        pageLoadToken: window.INITIAL_OPTIONS?.page_load_token || '',
        preloadedViews: window.INITIAL_OPTIONS?.livegraph_preload_views || {},
        commitHash: window.INITIAL_OPTIONS?.release_manifest_git_commit || 'missing',
        clientType: n || r ? 'desktop' : 'web',
        useNext: t,
        extras: i
      };
    }();
    i.userId !== e && (i.userId = e, i.anonUserId = null, t && (console.warn(`[livegraph] userId changed after early websocket creation. userId == null, before: ${i.userId == null}, after: ${e == null}`), t.close(), t = void 0));
    let n = getBellFeedAPI(8);
    (desktopAPIInstance || bellFeedAPIInstance) && (i.clientType = 'desktop', desktopAPIInstance ? (i.extras.desktop = JSON.stringify(desktopAPIInstance.getInformationalVersion()), desktopAPIInstance.hasFeature('addOsVersion') && (i.extras.desktopOS = JSON.stringify(desktopAPIInstance.getOSVersion()))) : bellFeedAPIInstance && (i.extras.bell = '1', n && (i.extras.desktop = JSON.stringify(n.desktopAppVersion), i.extras.desktopOS = JSON.stringify(n.osVersion))));
    getFeatureFlags().livegraph_skip_early_conn_preload && (i.preloadedViews = {});
    let r = {
      shouldBubbleUpNonNullableResultErrors: getLaunchDarklyFlagsExport().livegraph_nonNullableResult_errors_bubble_up,
      errorsLoggedForAnalyticsFraction: getLaunchDarklyFlagsExport().livegraph_errors_logged_for_analytics_fraction,
      checkPotentiallyMissingOptimisticMutations: getFeatureFlags().livegraph_check_missing_optimistic_mutations,
      backoffConfig: getLaunchDarklyFlagsExport().livegraph_client_backoff_config,
      shouldSplayLoadedViews: !!getFeatureFlags().livegraph_splay_loaded_views,
      splayDesktopBellConnConfig: bellFeedAPIInstance ? getLaunchDarklyFlagsExport().livegraph_splay_desktop_bell_conn : void 0,
      shouldChangeOptimisticMutationRevertOrder: getFeatureFlags().livegraph_change_optimistic_update_order,
      retryErroredViewSubscriptions: _$$gP('livegraph_client_config').get('retry_errored_view_subscriptions', !1),
      subscriptionRetryBackoffConfig: _$$gP('livegraph_client_config').get('subscription_retry_backoff_config', {
        maxAttempt: 5,
        backoffInitialMs: 5e3,
        backoffMaxMs: 3e5,
        backoffMultiplier: 2
      }),
      subscriptionRetryBackoffConfigByPriority: _$$gP('livegraph_client_config').get('subscription_retry_backoff_config_by_priority', {
        p0: {
          maxAttempt: 10,
          backoffInitialMs: 1e3,
          backoffMaxMs: 3e5,
          backoffMultiplier: 2
        },
        p1: {
          maxAttempt: 10,
          backoffInitialMs: 5e3,
          backoffMaxMs: 3e5,
          backoffMultiplier: 2
        },
        p2: {
          maxAttempt: 10,
          backoffInitialMs: 5e3,
          backoffMaxMs: 3e5,
          backoffMultiplier: 2
        },
        p3: {
          maxAttempt: 10,
          backoffInitialMs: 5e3,
          backoffMaxMs: 3e5,
          backoffMultiplier: 2
        },
        default: {
          maxAttempt: 10,
          backoffInitialMs: 5e3,
          backoffMaxMs: 3e5,
          backoffMultiplier: 2
        }
      }),
      livegraphUnstickOnRefresh: getFeatureFlags().livegraph_unstick_on_refresh,
      syncTimeoutMs: getLaunchDarklyFlagsExport().livegraph_sync_timeout_ms
    };
    let a = new _$$Sj(RY);
    let s = new _$$iO(RY.views, a);
    let o = t || null;
    let l = new R5(analyticsEventManager);
    let d = new Oh(a, s, i, e => {
      if (!o || o.readyState === WebSocket.CLOSED || o.readyState === WebSocket.CLOSING) return new WebSocket(e);
      let t = o;
      o = null;
      return t;
    }, r, {
      isHidden: () => document.visibilityState === 'hidden',
      addChangeHandler: e => {
        document.addEventListener('visibilitychange', e);
      },
      removeChangeHandler: e => {
        document.removeEventListener('visibilitychange', e);
      }
    }, () => {
      for (let e of Nw) document.cookie = `${e}=; max-age=-1; path=/;`;
    }, NC, l);
    let c = new Nm(d, {
      connect_next: i.useNext ? 'true' : 'false'
    });
    let {
      livegraph_update_slo_client_frequency,
      livegraph_sessions_capturing_update_slo_percent,
      livegraph_update_slo_failure_threshold,
      livegraph_response_sampling_rate,
      errors_logged_for_analytics_fraction
    } = getLaunchDarklyFlagsExport();
    let f = function (e, t, i, n, r) {
      let a = new NE(e, t, i, n);
      Math.random() < r && setTimeout(() => a.startMeasureLoop(), 6e4 * Math.random() + 5e3);
      return a;
    }(d, livegraph_update_slo_client_frequency, livegraph_update_slo_failure_threshold, !1, livegraph_sessions_capturing_update_slo_percent);
    let _ = e => {
      e.type === 'ERROR' && Math.random() < errors_logged_for_analytics_fraction && l.logError({
        sessionId: d.session.args.sessionId || '',
        err: e.error.message,
        layer: 'client',
        note: 'LivegraphEvent ERROR'
      });
    };
    let A = new N_(e, livegraph_response_sampling_rate);
    d.addEventListener(e => {
      _(e);
      Nx.logEvent(e);
      NS.logEvent(e);
      c.onEvent(e);
      A.onEvent(e);
      f.onEvent(e);
    });
    d.emitInitialEvents();
    return d;
  }(e, i));
  let n = XRH();
  let r = observableState.get();
  window.LIVEGRAPH = {
    client: r,
    logger: Nx,
    viewBindings: n,
    subscribeForDebugging: (e, t, i) => {
      i = i || console.log;
      let a = n.find(t => t._name === e);
      if (!a) {
        console.warn(`View ${e} not found`);
        return;
      }
      r.subscribe(a, t, e => {
        i(e);
      });
    }
  };
  measureAsyncDuration('LiveGraph connection', _$$e.WEB_PLATFORM, async () => {
    await observableState.get().connect();
  });
  return observableState.get();
}
export function $$Nk1() {
  return observableState.get();
}
export function $$NR2() {
  let e = Nx.startRecording();
  return () => e ? Nx.stopRecording(e) : [];
}
export const MV = $$NT0;
export const WB = $$Nk1;
export const S6 = $$NR2;